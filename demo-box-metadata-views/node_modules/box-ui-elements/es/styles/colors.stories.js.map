{"version":3,"sources":["../../src/styles/colors.stories.tsx"],"names":["React","variables","mdNotes","bdlColors","Object","keys","forEach","colorKey","color","startsWith","includes","Array","isArray","colorNameBreakDown","match","join","allowColorKey","push","wrapper","margin","palette","display","flexDirection","flexWrap","swatch","borderRadius","height","marginBottom","width","swatchContainer","label","Swatch","backgroundColor","toLowerCase","SwatchSection","swatchColor","map","allColors","key","boxBlue","gray","darkBlue","lightBlue","yellorange","yellow","grimace","greenLight","purpleRain","watermelonRed","title","parameters","notes"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as variables from './variables';\nimport mdNotes from './colors.md';\n\nconst bdlColors: { [k: string]: Array<Array<string>> } = {};\n\nObject.keys(variables).forEach(colorKey => {\n    const color = (variables as { [k: string]: string | Array<string> })[colorKey];\n    if (\n        colorKey.startsWith('bdl') &&\n        !colorKey.includes('Neutral') &&\n        colorKey !== 'bdlSecondaryBlue' &&\n        !Array.isArray(color) &&\n        color.startsWith('#')\n    ) {\n        const colorNameBreakDown = (colorKey.match(/(bdl)|([A-Z][a-z]+)|(\\d+)/g) as Array<string>).join('-');\n        const allowColorKey = (colorKey.match(/[A-Z][a-z]+/g) as Array<string>).join(' ');\n\n        if (!bdlColors[allowColorKey]) {\n            bdlColors[allowColorKey] = [];\n        }\n\n        bdlColors[allowColorKey].push([colorNameBreakDown, color, colorKey]);\n    }\n});\n\nconst wrapper = {\n    margin: '20px',\n};\n\nconst palette: React.CSSProperties = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    margin: '20px 10px',\n};\n\nconst swatch = {\n    borderRadius: '3px',\n    height: '40px',\n    marginBottom: '4px',\n    width: '200px',\n};\n\nconst swatchContainer = {\n    margin: '10px',\n};\n\nconst label = {\n    margin: '3px 0 5px',\n};\n\nconst Swatch = ({ color }: { color: Array<string> }) => (\n    <div style={swatchContainer}>\n        <div style={{ ...swatch, backgroundColor: color[1] }} />\n        <label style={label}>\n            <strong>CSS:</strong> {color[1]}\n            <br />\n            <strong>SCSS:</strong> ${color[0].toLowerCase()}\n            <br />\n            <strong>JS:</strong> {color[2]}\n        </label>\n    </div>\n);\n\nconst SwatchSection = ({ swatchColor }: { swatchColor: string }) => (\n    <div style={wrapper}>\n        <div style={palette}>\n            {bdlColors[swatchColor].map(color => (\n                <Swatch key={color[1]} color={color} />\n            ))}\n        </div>\n    </div>\n);\n\nconst allColors = () => (\n    <div style={wrapper}>\n        <div>\n            <h4>White</h4>\n            <div style={palette}>\n                <div style={swatchContainer}>\n                    <div style={{ ...swatch, backgroundColor: '#fff' }} />\n                    <label style={label}>\n                        <strong>CSS:</strong> #fff\n                        <br />\n                        <strong>SCSS:</strong> $white\n                        <br />\n                        <strong>JS:</strong> white\n                    </label>\n                </div>\n            </div>\n        </div>\n        <div>\n            <h4>Black</h4>\n            <div style={palette}>\n                <div style={swatchContainer}>\n                    <div style={{ ...swatch, backgroundColor: '#000' }} />\n                    <label style={label}>\n                        <strong>CSS:</strong> #000\n                        <br />\n                        <strong>SCSS:</strong> $black\n                        <br />\n                        <strong>JS:</strong> black\n                    </label>\n                </div>\n            </div>\n        </div>\n        {Object.keys(bdlColors).map(key => (\n            <div key={key}>\n                <h4>{key}</h4>\n                <div style={palette}>\n                    {bdlColors[key].map(color => (\n                        <Swatch key={color[1]} color={color} />\n                    ))}\n                </div>\n            </div>\n        ))}\n    </div>\n);\n\nconst boxBlue = () => <SwatchSection swatchColor=\"Box Blue\" />;\n\nconst gray = () => <SwatchSection swatchColor=\"Gray\" />;\n\nconst darkBlue = () => <SwatchSection swatchColor=\"Dark Blue\" />;\n\nconst lightBlue = () => <SwatchSection swatchColor=\"Light Blue\" />;\n\nconst yellorange = () => <SwatchSection swatchColor=\"Yellorange\" />;\n\nconst yellow = () => <SwatchSection swatchColor=\"Yellow\" />;\n\nconst grimace = () => <SwatchSection swatchColor=\"Grimace\" />;\n\nconst greenLight = () => <SwatchSection swatchColor=\"Green Light\" />;\n\nconst purpleRain = () => <SwatchSection swatchColor=\"Purple Rain\" />;\n\nconst watermelonRed = () => <SwatchSection swatchColor=\"Watermelon Red\" />;\n\nexport {\n    allColors,\n    boxBlue,\n    gray,\n    darkBlue,\n    lightBlue,\n    yellorange,\n    yellow,\n    greenLight,\n    grimace,\n    purpleRain,\n    watermelonRed,\n};\n\nexport default {\n    title: 'Theming|Colors',\n    parameters: {\n        notes: mdNotes,\n    },\n};\n"],"file":"colors.stories.js"}