{"version":3,"sources":["../../src/api/Feed.js"],"names":["uniqueId","noop","getBadItemError","getBadUserError","isUserCorrectableError","commonMessages","messages","sortFeedItems","Base","AnnotationsAPI","CommentsAPI","VersionsAPI","TasksNewAPI","GroupsAPI","TaskCollaboratorsAPI","TaskLinksAPI","AppActivityAPI","ERROR_CODE_CREATE_TASK","ERROR_CODE_UPDATE_TASK","ERROR_CODE_GROUP_EXCEEDS_LIMIT","HTTP_STATUS_CODE_CONFLICT","IS_ERROR_DISPLAYED","TASK_NEW_APPROVED","TASK_NEW_COMPLETED","TASK_NEW_REJECTED","TASK_NEW_NOT_STARTED","TYPED_ID_FEED_PREFIX","TASK_MAX_GROUP_ASSIGNEES","TASK_NEW_INITIAL_STATUS","TASK","Feed","options","file","annotationId","permissions","successCallBack","errorCallback","annotationsAPI","id","updateFeedItem","isPending","deleteAnnotation","deleteFeedItem","bind","error","code","deleteCommentErrorCallback","taskId","taskCollaboratorId","taskCollaboratorStatus","successCallback","collaboratorsApi","taskCollaboratorsAPI","push","taskCollaboratorPayload","status","handleError","e","errorMessage","taskApproveErrorMessage","taskCompleteErrorMessage","taskRejectErrorMessage","createFeedError","taskActionErrorTitle","feedErrorCallback","updateTaskCollaborator","taskCollaborator","taskCollab","updateTaskCollaboratorSuccessCallback","updatedCollaborator","tasksNewAPI","getTask","task","groupInfoPromises","addedAssignees","filter","assignee","item","type","map","groupId","getGroupCount","group","Promise","all","groupCounts","hasAnyGroupCountExceeded","some","groupInfo","total_count","warning","resolve","reject","updateTaskWithDeps","taskData","isDestroyed","commentId","commentsAPI","deleteComment","commentDeleteErrorMessage","currentUser","message","assignees","taskType","dueAt","completionRule","uuid","dueAtString","dueAtDate","Date","toISOString","pendingTask","created_by","target","role","completion_rule","created_at","due_at","description","assigned_to","entries","avatar_url","can_delete","can_update","limit","next_marker","can_create_task_collaborator","can_create_task_link","task_links","task_type","taskPayload","then","createTaskWithDeps","taskWithDepsData","addPendingItem","length","catch","deleteTask","taskDeleteErrorMessage","cachedItems","getCachedItems","feedItems","items","feedItem","setCachedItems","hasError","errors","console","itemBase","date","pendingFeedItem","modified_at","feedItemsWithPendingItem","commentData","tagged_message","commentCreateConflictMessage","commentCreateErrorMessage","updates","updatedFeedItems","text","hasMention","taggedMessage","createComment","comment","createCommentSuccessCallback","createCommentErrorCallback","updateComment","appActivityId","appActivityAPI","deleteAppActivity","deleteAppActivityErrorCallback","appActivityDeleteErrorMessage","taskLinksAPI","annotation","newAnnotation","cache","getCache","cacheKey","getCacheKey","get","set","shouldRefreshCache","onError","shouldShowAnnotations","shouldShowAppActivity","annotationsPromise","fetchAnnotations","versionsPromise","fetchVersions","currentVersionPromise","fetchCurrentVersion","commentsPromise","fetchComments","tasksPromise","fetchTasksNew","appActivityPromise","fetchAppActivity","versions","currentVersion","versionsWithCurrent","versionsAPI","addCurrentVersion","sortedFeedItems","getAnnotations","undefined","fetchFeedItemErrorCallback","getComments","getVersions","file_version","getVersion","getTasksForFile","err","shouldDisplayError","createTaskCollaboratorsforGroup","createTaskCollaborator","user","deleteTaskCollaborator","createTaskLink","title","errorOccured","Array","isArray","forEach","api","destroy","getAppActivity","destroyTaskCollaborators","destroyTaskLinks"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for activity feed API's\n * @author Box\n */\nimport uniqueId from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport type { MessageDescriptor } from 'react-intl';\nimport { getBadItemError, getBadUserError, isUserCorrectableError } from '../utils/error';\nimport commonMessages from '../elements/common/messages';\nimport messages from './messages';\nimport { sortFeedItems } from '../utils/sorter';\nimport Base from './Base';\nimport AnnotationsAPI from './Annotations';\nimport CommentsAPI from './Comments';\nimport VersionsAPI from './Versions';\nimport TasksNewAPI from './tasks/TasksNew';\nimport GroupsAPI from './Groups';\nimport TaskCollaboratorsAPI from './tasks/TaskCollaborators';\nimport TaskLinksAPI from './tasks/TaskLinks';\nimport AppActivityAPI from './AppActivity';\nimport {\n    ERROR_CODE_CREATE_TASK,\n    ERROR_CODE_UPDATE_TASK,\n    ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n    HTTP_STATUS_CODE_CONFLICT,\n    IS_ERROR_DISPLAYED,\n    TASK_NEW_APPROVED,\n    TASK_NEW_COMPLETED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_NOT_STARTED,\n    TYPED_ID_FEED_PREFIX,\n    TASK_MAX_GROUP_ASSIGNEES,\n} from '../constants';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskCollabStatus,\n    TaskLink,\n    TaskNew,\n    TaskType,\n    TaskPayload,\n    TaskUpdatePayload,\n} from '../common/types/tasks';\nimport type { ElementsXhrError, ErrorResponseData, APIOptions } from '../common/types/api';\nimport type {\n    SelectorItems,\n    SelectorItem,\n    UserMini,\n    GroupMini,\n    BoxItem,\n    BoxItemPermission,\n    BoxItemVersion,\n    FileVersions,\n    User,\n} from '../common/types/core';\nimport type {\n    Annotation,\n    AnnotationPermission,\n    Annotations,\n    AppActivityItems,\n    Comment,\n    Comments,\n    FeedItem,\n    FeedItems,\n    Task,\n    Tasks,\n} from '../common/types/feed';\n\nconst TASK_NEW_INITIAL_STATUS = TASK_NEW_NOT_STARTED;\nconst TASK = 'task';\n\ntype FeedItemsCache = {\n    errors: ErrorResponseData[],\n    items: FeedItems,\n};\n\ntype ErrorCallback = (e: ElementsXhrError, code: string, contextInfo?: Object) => void;\n\nclass Feed extends Base {\n    /**\n     * @property {AnnotationsAPI}\n     */\n    annotationsAPI: AnnotationsAPI;\n\n    /**\n     * @property {VersionsAPI}\n     */\n    versionsAPI: VersionsAPI;\n\n    /**\n     * @property {CommentsAPI}\n     */\n    commentsAPI: CommentsAPI;\n\n    /**\n     * @property {AppActivityAPI}\n     */\n    appActivityAPI: AppActivityAPI;\n\n    /**\n     * @property {TasksNewAPI}\n     */\n    tasksNewAPI: TasksNewAPI;\n\n    /**\n     * @property {TaskCollaboratorsAPI}\n     */\n    taskCollaboratorsAPI: TaskCollaboratorsAPI[];\n\n    /**\n     * @property {TaskLinksAPI}\n     */\n    taskLinksAPI: TaskLinksAPI[];\n\n    /**\n     * @property {BoxItem}\n     */\n    file: BoxItem;\n\n    /**\n     * @property {ElementsXhrError}\n     */\n    errors: ElementsXhrError[];\n\n    constructor(options: APIOptions) {\n        super(options);\n        this.taskCollaboratorsAPI = [];\n        this.taskLinksAPI = [];\n        this.errors = [];\n    }\n\n    /**\n     * Creates pending card on create_start action, then updates card on next call\n     * @param {BoxItem} file - The file to which the annotation is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Annotation} annotation - the current annotation to be created\n     * @param {string} id - unique id for the incoming annotation\n     * @param {boolean} isPending - indicates the current creation process of the annotation\n     */\n    addAnnotation(file: BoxItem, currentUser: User, annotation: Annotation, id: string, isPending: boolean): void {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n\n        // Add the pending interstitial card\n        if (isPending) {\n            const newAnnotation = {\n                ...annotation,\n                created_by: currentUser,\n                id,\n                type: 'annotation',\n            };\n\n            this.addPendingItem(this.file.id, currentUser, newAnnotation);\n\n            return;\n        }\n        // Create action has completed, so update the existing pending item\n        this.updateFeedItem({ ...annotation, isPending: false }, id);\n    }\n\n    deleteAnnotation = (\n        file: BoxItem,\n        annotationId: string,\n        permissions: AnnotationPermission,\n        successCallBack: Function,\n        errorCallback: Function,\n    ): void => {\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        this.updateFeedItem({ isPending: true }, annotationId);\n        this.annotationsAPI.deleteAnnotation(\n            this.file.id,\n            annotationId,\n            permissions,\n            this.deleteFeedItem.bind(this, annotationId, successCallBack),\n            (error: ElementsXhrError, code: string) => {\n                // Reusing comment error handler since annotations are treated as comments to user\n                this.deleteCommentErrorCallback(error, code, annotationId);\n            },\n        );\n    };\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${TYPED_ID_FEED_PREFIX}${id}`;\n    }\n\n    /**\n     * Gets the items from the cache\n     *\n     * @param {string} id the cache id\n     */\n    getCachedItems(id: string): ?FeedItemsCache {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        return cache.get(cacheKey);\n    }\n\n    /**\n     * Sets the items in the cache\n     *\n     * @param {string} id - the cache id\n     * @param {Array} items - the feed items to cache\n     */\n    setCachedItems(id: string, items: FeedItems) {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        cache.set(cacheKey, {\n            errors: this.errors,\n            items,\n        });\n    }\n\n    /**\n     * Gets the feed items\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {boolean} shouldRefreshCache - Optionally updates the cache\n     * @param {Function} successCallback - the success callback  which is called after data fetching is complete\n     * @param {Function} errorCallback - the error callback which is called after data fetching is complete if there was an error\n     * @param {Function} onError - the function to be called immediately after an error occurs\n     * @param {Object} [options]- feature flips, etc\n     * @param {Object} [options.shouldShowAppActivity] - feature flip the new app activity api\n     */\n    feedItems(\n        file: BoxItem,\n        shouldRefreshCache: boolean,\n        successCallback: Function,\n        errorCallback: (feedItems: FeedItems, errors: ElementsXhrError[]) => void,\n        onError: ErrorCallback,\n        {\n            shouldShowAnnotations = false,\n            shouldShowAppActivity = false,\n        }: { shouldShowAnnotations?: boolean, shouldShowAppActivity?: boolean } = {},\n    ): void {\n        const { id, permissions = {} } = file;\n        const cachedItems = this.getCachedItems(id);\n        if (cachedItems) {\n            const { errors, items } = cachedItems;\n            if (errors.length) {\n                errorCallback(items, errors);\n            } else {\n                successCallback(items);\n            }\n\n            if (!shouldRefreshCache) {\n                return;\n            }\n        }\n\n        this.file = file;\n        this.errors = [];\n        this.errorCallback = onError;\n        const annotationsPromise = shouldShowAnnotations ? this.fetchAnnotations(permissions) : Promise.resolve();\n        const versionsPromise = this.fetchVersions();\n        const currentVersionPromise = this.fetchCurrentVersion();\n        const commentsPromise = this.fetchComments(permissions);\n        const tasksPromise = this.fetchTasksNew();\n        const appActivityPromise = shouldShowAppActivity ? this.fetchAppActivity(permissions) : Promise.resolve();\n\n        Promise.all([\n            versionsPromise,\n            currentVersionPromise,\n            commentsPromise,\n            tasksPromise,\n            appActivityPromise,\n            annotationsPromise,\n        ]).then(([versions: ?FileVersions, currentVersion: ?BoxItemVersion, ...feedItems]) => {\n            const versionsWithCurrent = this.versionsAPI.addCurrentVersion(currentVersion, versions, this.file);\n            const sortedFeedItems = sortFeedItems(versionsWithCurrent, ...feedItems);\n            if (!this.isDestroyed()) {\n                this.setCachedItems(id, sortedFeedItems);\n                if (this.errors.length) {\n                    errorCallback(sortedFeedItems, this.errors);\n                } else {\n                    successCallback(sortedFeedItems);\n                }\n            }\n        });\n    }\n\n    fetchAnnotations(permissions: BoxItemPermission): Promise<?Annotations> {\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n        return new Promise(resolve => {\n            this.annotationsAPI.getAnnotations(\n                this.file.id,\n                undefined,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the comments for a file\n     *\n     * @param {Object} permissions - the file permissions\n     * @return {Promise} - the file comments\n     */\n    fetchComments(permissions: BoxItemPermission): Promise<?Comments> {\n        this.commentsAPI = new CommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.commentsAPI.getComments(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the versions for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchVersions(): Promise<?FileVersions> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            this.versionsAPI.getVersions(this.file.id, resolve, this.fetchFeedItemErrorCallback.bind(this, resolve));\n        });\n    }\n\n    /**\n     * Fetches the current version for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchCurrentVersion(): Promise<?BoxItemVersion> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            const { file_version = {} } = this.file;\n            this.versionsAPI.getVersion(\n                this.file.id,\n                file_version.id,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the tasks for a file\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchTasksNew(): Promise<?Tasks> {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n\n        return new Promise(resolve => {\n            this.tasksNewAPI.getTasksForFile({\n                file: { id: this.file.id },\n                successCallback: resolve,\n                errorCallback: (err, code) => this.fetchFeedItemErrorCallback(resolve, err, code),\n            });\n        });\n    }\n\n    /**\n     * Error callback for fetching feed items.\n     * Should only call the error callback if the response is a 401, 429 or >= 500\n     *\n     * @param {Function} resolve - the function which will be called on error\n     * @param {Object} e - the axios error\n     * @param {string} code - the error code\n     * @return {void}\n     */\n    fetchFeedItemErrorCallback(resolve: Function, e: ElementsXhrError, code: string) {\n        const { status } = e;\n        const shouldDisplayError = isUserCorrectableError(status);\n        this.feedErrorCallback(shouldDisplayError, e, code);\n        resolve();\n    }\n\n    /**\n     * Updates a task assignment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - ID of task to be updated\n     * @param {string} taskCollaboratorId - Task assignment ID\n     * @param {TaskCollabStatus} taskCollaboratorStatus - New task assignment status\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskCollaborator = (\n        file: BoxItem,\n        taskId: string,\n        taskCollaboratorId: string,\n        taskCollaboratorStatus: TaskCollabStatus,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, taskId);\n        const collaboratorsApi = new TaskCollaboratorsAPI(this.options);\n        this.taskCollaboratorsAPI.push(collaboratorsApi);\n        const taskCollaboratorPayload = {\n            id: taskCollaboratorId,\n            status: taskCollaboratorStatus,\n        };\n        const handleError = (e: ElementsXhrError, code: string) => {\n            let errorMessage;\n            switch (taskCollaboratorStatus) {\n                case TASK_NEW_APPROVED:\n                    errorMessage = messages.taskApproveErrorMessage;\n                    break;\n                case TASK_NEW_COMPLETED:\n                    errorMessage = messages.taskCompleteErrorMessage;\n                    break;\n                case TASK_NEW_REJECTED:\n                    errorMessage = messages.taskRejectErrorMessage;\n                    break;\n                default:\n                    errorMessage = messages.taskCompleteErrorMessage;\n            }\n            this.updateFeedItem(this.createFeedError(errorMessage, messages.taskActionErrorTitle), taskId);\n            this.feedErrorCallback(true, e, code);\n        };\n        collaboratorsApi.updateTaskCollaborator({\n            file,\n            taskCollaborator: taskCollaboratorPayload,\n            successCallback: (taskCollab: TaskCollabAssignee) => {\n                this.updateTaskCollaboratorSuccessCallback(taskId, file, taskCollab, successCallback, handleError);\n            },\n            errorCallback: handleError,\n        });\n    };\n\n    /**\n     * Updates the task assignment state of the updated task\n     *\n     * @param {string} taskId - Box task id\n     * @param {TaskAssignment} updatedCollaborator - New task assignment from API\n     * @param {Function} successCallback - the function which will be called on success\n     * @return {void}\n     */\n    updateTaskCollaboratorSuccessCallback = (\n        taskId: string,\n        file: { id: string },\n        updatedCollaborator: TaskCollabAssignee,\n        successCallback: Function,\n        errorCallback: Function,\n    ): void => {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.tasksNewAPI.getTask({\n            id: taskId,\n            file,\n            successCallback: task => {\n                this.updateFeedItem({ ...task, isPending: false }, taskId);\n                successCallback(updatedCollaborator);\n            },\n            errorCallback,\n        });\n    };\n\n    /**\n     * Updates a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} task - The update task payload object\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskNew = async (\n        file: BoxItem,\n        task: TaskUpdatePayload,\n        successCallback: () => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        try {\n            // create request for the size of each group by ID\n            // TODO: use async/await for both creating and editing tasks\n            const groupInfoPromises: Array<Promise<any>> = task.addedAssignees\n                .filter(\n                    (assignee: SelectorItem<UserMini | GroupMini>) => assignee.item && assignee.item.type === 'group',\n                )\n                .map(assignee => assignee.id)\n                .map(groupId => {\n                    return new GroupsAPI(this.options).getGroupCount({\n                        file,\n                        group: { id: groupId },\n                    });\n                });\n\n            const groupCounts: Array<{ total_count: number }> = await Promise.all(groupInfoPromises);\n            const hasAnyGroupCountExceeded: boolean = groupCounts.some(\n                groupInfo => groupInfo.total_count > TASK_MAX_GROUP_ASSIGNEES,\n            );\n            const warning = {\n                code: ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n                type: 'warning',\n            };\n\n            if (hasAnyGroupCountExceeded) {\n                this.feedErrorCallback(false, warning, ERROR_CODE_GROUP_EXCEEDS_LIMIT);\n                return;\n            }\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.updateTaskWithDeps({\n                    file,\n                    task,\n                    successCallback: resolve,\n                    errorCallback: reject,\n                });\n            });\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.getTask({\n                    file,\n                    id: task.id,\n                    successCallback: (taskData: Task) => {\n                        this.updateFeedItem(\n                            {\n                                ...taskData,\n                                isPending: false,\n                            },\n                            task.id,\n                        );\n\n                        resolve();\n                    },\n                    errorCallback: (e: ElementsXhrError) => {\n                        this.updateFeedItem({ isPending: false }, task.id);\n                        this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n                        reject();\n                    },\n                });\n            });\n\n            // everything succeeded, so call the passed in success callback\n            if (!this.isDestroyed()) {\n                successCallback();\n            }\n        } catch (e) {\n            this.updateFeedItem({ isPending: false }, task.id);\n            this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n        }\n    };\n\n    /**\n     * Deletes a comment.\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - Comment ID\n     * @param {BoxItemPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error     *\n     * @return {void}\n     */\n    deleteComment = (\n        file: BoxItem,\n        commentId: string,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        this.commentsAPI = new CommentsAPI(this.options);\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, commentId);\n\n        this.commentsAPI.deleteComment({\n            file,\n            commentId,\n            permissions,\n            successCallback: this.deleteFeedItem.bind(this, commentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Error callback for deleting a comment\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} commentId - the comment id\n     * @return {void}\n     */\n    deleteCommentErrorCallback = (e: ElementsXhrError, code: string, commentId: string) => {\n        this.updateFeedItem(this.createFeedError(messages.commentDeleteErrorMessage), commentId);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Creates a task.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} message - Task text\n     * @param {Array} assignees - List of assignees\n     * @param {number} dueAt - Task's due date\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    createTaskNew = (\n        file: BoxItem,\n        currentUser: User,\n        message: string,\n        assignees: SelectorItems<>,\n        taskType: TaskType,\n        dueAt: ?string,\n        completionRule: TaskCompletionRule,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        const uuid = uniqueId('task_');\n        let dueAtString;\n        if (dueAt) {\n            const dueAtDate: Date = new Date(dueAt);\n            dueAtString = dueAtDate.toISOString();\n        }\n\n        // TODO: make pending task generator a function\n        const pendingTask: TaskNew = {\n            created_by: {\n                type: 'task_collaborator',\n                target: currentUser,\n                id: uniqueId(),\n                role: 'CREATOR',\n                status: TASK_NEW_INITIAL_STATUS,\n            },\n            completion_rule: completionRule,\n            created_at: new Date().toISOString(),\n            due_at: dueAtString,\n            id: uuid,\n            description: message,\n            type: TASK,\n            assigned_to: {\n                entries: assignees.map((assignee: SelectorItem<UserMini | GroupMini>) => ({\n                    id: uniqueId(),\n                    target: { ...assignee, avatar_url: '', type: 'user' },\n                    status: TASK_NEW_INITIAL_STATUS,\n                    permissions: {\n                        can_delete: false,\n                        can_update: false,\n                    },\n                    role: 'ASSIGNEE',\n                    type: 'task_collaborator',\n                })),\n                limit: 10,\n                next_marker: null,\n            },\n            permissions: {\n                can_update: false,\n                can_delete: false,\n                can_create_task_collaborator: false,\n                can_create_task_link: false,\n            },\n            task_links: {\n                entries: [\n                    {\n                        id: uniqueId(),\n                        type: 'task_link',\n                        target: {\n                            type: 'file',\n                            ...file,\n                        },\n                        permissions: {\n                            can_delete: false,\n                            can_update: false,\n                        },\n                    },\n                ],\n                limit: 1,\n                next_marker: null,\n            },\n            task_type: taskType,\n            status: TASK_NEW_NOT_STARTED,\n        };\n\n        const taskPayload: TaskPayload = {\n            description: message,\n            due_at: dueAtString,\n            task_type: taskType,\n            completion_rule: completionRule,\n        };\n\n        // create request for the size of each group by ID\n        const groupInfoPromises: Array<Promise<any>> = assignees\n            .filter((assignee: SelectorItem<UserMini | GroupMini>) => (assignee.item && assignee.item.type) === 'group')\n            .map(assignee => assignee.id)\n            .map(groupId => {\n                return new GroupsAPI(this.options).getGroupCount({\n                    file,\n                    group: { id: groupId },\n                });\n            });\n\n        // Fetch each group size in parallel --> return an array of group sizes\n        Promise.all(groupInfoPromises)\n            .then((groupCounts: Array<{ total_count: number }>) => {\n                const hasAnyGroupCountExceeded: boolean = groupCounts.some(\n                    groupInfo => groupInfo.total_count > TASK_MAX_GROUP_ASSIGNEES,\n                );\n                const warning = {\n                    code: ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n                    type: 'warning',\n                };\n                if (hasAnyGroupCountExceeded) {\n                    this.feedErrorCallback(false, warning, ERROR_CODE_GROUP_EXCEEDS_LIMIT);\n                    return;\n                }\n\n                this.tasksNewAPI = new TasksNewAPI(this.options);\n                this.tasksNewAPI.createTaskWithDeps({\n                    file,\n                    task: taskPayload,\n                    assignees,\n                    successCallback: (taskWithDepsData: any) => {\n                        this.addPendingItem(this.file.id, currentUser, pendingTask);\n                        this.updateFeedItem(\n                            {\n                                ...taskWithDepsData,\n                                task_links: {\n                                    entries: taskWithDepsData.task_links,\n                                    next_marker: null,\n                                    limit: 1,\n                                },\n                                assigned_to: {\n                                    entries: taskWithDepsData.assigned_to,\n                                    next_marker: null,\n                                    limit: taskWithDepsData.assigned_to.length,\n                                },\n                                isPending: false,\n                            },\n                            uuid,\n                        );\n                        successCallback(taskWithDepsData);\n                    },\n                    errorCallback: (e: ElementsXhrError, code: string) => {\n                        this.feedErrorCallback(false, e, code);\n                    },\n                });\n            })\n            .catch(error => {\n                this.feedErrorCallback(false, error, ERROR_CODE_CREATE_TASK);\n            });\n    };\n\n    /**\n     * Creates a task group via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaboratorsforGroup(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem<UserMini | GroupMini>,\n    ): Promise<Array<TaskCollabAssignee>> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n            taskCollaboratorsAPI.createTaskCollaboratorsforGroup({\n                file,\n                task,\n                group: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem<UserMini | GroupMini>,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.createTaskCollaborator({\n                file,\n                task,\n                user: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Deletes a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly deleted or existing task from the API\n     * @param {TaskCollabAssignee} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task delete error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    deleteTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: TaskCollabAssignee,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file.id = file.id;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.deleteTaskCollaborator({\n                file,\n                task,\n                taskCollaborator: { id: assignee.id },\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task link via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task} task - The newly created task from the API\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment}\n     */\n    createTaskLink(file: BoxItem, task: Task): Promise<TaskLink> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskLinksAPI = new TaskLinksAPI(this.options);\n            this.taskLinksAPI.push(taskLinksAPI);\n\n            taskLinksAPI.createTaskLink({\n                file,\n                task,\n                successCallback: resolve,\n                errorCallback: reject,\n            });\n        });\n    }\n\n    /**\n     * Deletes a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - The task's id\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteTaskNew = (\n        file: BoxItem,\n        task: TaskNew,\n        successCallback: (taskId: string) => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        this.tasksNewAPI.deleteTask({\n            file,\n            task,\n            successCallback: this.deleteFeedItem.bind(this, task.id, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.updateFeedItem(this.createFeedError(messages.taskDeleteErrorMessage), task.id);\n                this.feedErrorCallback(true, e, code);\n            },\n        });\n    };\n\n    /**\n     * Deletes a feed item from the cache\n     *\n     * @param {string} id - The id of the feed item to be deleted\n     * @param {Function} successCallback - function to be called after the delete\n     */\n    deleteFeedItem = (id: string, successCallback: Function = noop) => {\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const feedItems = cachedItems.items.filter(feedItem => feedItem.id !== id);\n            this.setCachedItems(this.file.id, feedItems);\n\n            if (!this.isDestroyed()) {\n                successCallback(id);\n            }\n        }\n    };\n\n    /**\n     * Network error callback\n     *\n     * @param {boolean} hasError - true if the UI should display an error\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code for the error which occured\n     * @return {void}\n     */\n    feedErrorCallback = (hasError: boolean = false, e: ElementsXhrError, code: string): void => {\n        if (hasError) {\n            this.errors.push({ ...e, code });\n        }\n\n        if (!this.isDestroyed() && this.errorCallback) {\n            this.errorCallback(e, code, {\n                error: e,\n                [IS_ERROR_DISPLAYED]: hasError,\n            });\n        }\n\n        console.error(e); // eslint-disable-line no-console\n    };\n\n    /**\n     * Add a placeholder pending feed item.\n     *\n     * @param {string} id - the file id\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Object} itemBase - Base properties for item to be added to the feed as pending.\n     * @return {void}\n     */\n    addPendingItem = (id: string, currentUser: User, itemBase: Object): Comment | Task | TaskNew | BoxItemVersion => {\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const date = new Date().toISOString();\n        const pendingFeedItem = {\n            created_at: date,\n            created_by: currentUser,\n            modified_at: date,\n            isPending: true,\n            ...itemBase,\n        };\n        const cachedItems = this.getCachedItems(this.file.id);\n        const feedItems = cachedItems ? cachedItems.items : [];\n        const feedItemsWithPendingItem = [...feedItems, pendingFeedItem];\n        this.setCachedItems(id, feedItemsWithPendingItem);\n\n        return pendingFeedItem;\n    };\n\n    /**\n     * Callback for successful creation of a Comment.\n     *\n     * @param {Comment} commentData - API returned Comment\n     * @param {string} id - ID of the feed item to update with the new comment data\n     * @return {void}\n     */\n    createCommentSuccessCallback = (commentData: Comment, id: string, successCallback: Function): void => {\n        const { message = '', tagged_message = '' } = commentData;\n        // Comment component uses tagged_message only\n        commentData.tagged_message = tagged_message || message;\n\n        this.updateFeedItem(\n            {\n                ...commentData,\n                isPending: false,\n            },\n            id,\n        );\n\n        if (!this.isDestroyed()) {\n            successCallback(commentData);\n        }\n    };\n\n    /**\n     * Callback for failed creation of a Comment.\n     *\n     * @param {Object} e - The axios error\n     * @param {string} code - the error code\n     * @param {string} id - ID of the feed item to update\n     * @return {void}\n     */\n    createCommentErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        const errorMessage =\n            e.status === HTTP_STATUS_CODE_CONFLICT\n                ? messages.commentCreateConflictMessage\n                : messages.commentCreateErrorMessage;\n        this.updateFeedItem(this.createFeedError(errorMessage), id);\n        this.feedErrorCallback(false, e, code);\n    };\n\n    /**\n     * Constructs an error object that renders to an inline feed error\n     *\n     * @param {string} message - The error message body.\n     * @param {string} title - The error message title.\n     * @return {Object} An error message object\n     */\n    createFeedError(message: MessageDescriptor, title: MessageDescriptor = commonMessages.errorOccured) {\n        return {\n            error: { message, title },\n        };\n    }\n\n    /**\n     * Replace a feed item with new feed item data.\n     *\n     * @param {Object} updates - The new data to be applied to the feed item.\n     * @param {string} id - ID of the feed item to replace.\n     * @return {void}\n     */\n    updateFeedItem = (updates: Object, id: string): ?FeedItems => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map((item: FeedItem) => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        ...updates,\n                    };\n                }\n\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n            return updatedFeedItems;\n        }\n\n        return null;\n    };\n\n    /**\n     * Create a comment, and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createComment = (\n        file: BoxItem,\n        currentUser: User,\n        text: string,\n        hasMention: boolean,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: 'comment',\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingItem(this.file.id, currentUser, commentData);\n\n        const message = {};\n        if (hasMention) {\n            message.taggedMessage = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.createComment({\n            file,\n            ...message,\n            successCallback: (comment: Comment) => {\n                this.createCommentSuccessCallback(comment, uuid, successCallback);\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.createCommentErrorCallback(e, code, uuid);\n            },\n        });\n    };\n\n    /**\n     * Update a comment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateComment = (\n        file: BoxItem,\n        commentId: string,\n        text: string,\n        hasMention: boolean,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const commentData = {\n            tagged_message: text,\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ ...commentData, isPending: true }, commentId);\n\n        const message = {};\n        if (hasMention) {\n            message.tagged_message = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.updateComment({\n            file,\n            commentId,\n            permissions,\n            ...message,\n            successCallback: (comment: Comment) => {\n                // use the request payload instead of response in the\n                // feed item update because response may not contain\n                // the tagged version of the message\n                this.updateFeedItem(\n                    {\n                        ...message,\n                        isPending: false,\n                    },\n                    commentId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.feedErrorCallback(true, e, code);\n            },\n        });\n    };\n\n    destroyTaskCollaborators() {\n        if (Array.isArray(this.taskCollaboratorsAPI)) {\n            this.taskCollaboratorsAPI.forEach(api => api.destroy());\n            this.taskCollaboratorsAPI = [];\n        }\n    }\n\n    destroyTaskLinks() {\n        if (Array.isArray(this.taskLinksAPI)) {\n            this.taskLinksAPI.forEach(api => api.destroy());\n            this.taskLinksAPI = [];\n        }\n    }\n\n    /**\n     * Fetches app activities for a file\n     * @param {BoxItemPermission} permissions - Permissions to attach to the app activity items\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchAppActivity(permissions: BoxItemPermission): Promise<?AppActivityItems> {\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        return new Promise(resolve => {\n            this.appActivityAPI.getAppActivity(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Deletes an app activity item.\n     *\n     * @param {BoxItem} file - The file to which the app activity belongs to\n     * @param {string} appActivityId - The app activity item id to delete\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteAppActivity = (\n        file: BoxItem,\n        appActivityId: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const { id } = file;\n        if (!id) {\n            throw getBadItemError();\n        }\n\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, appActivityId);\n\n        this.appActivityAPI.deleteAppActivity({\n            id,\n            appActivityId,\n            successCallback: this.deleteFeedItem.bind(this, appActivityId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteAppActivityErrorCallback(e, code, appActivityId);\n            },\n        });\n    };\n\n    /**\n     * Error callback for deleting an app activity item\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the app activity id\n     * @return {void}\n     */\n    deleteAppActivityErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.appActivityDeleteErrorMessage), id);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Destroys all the task feed API's\n     *\n     * @return {void}\n     */\n    destroy() {\n        super.destroy();\n\n        if (this.annotationsAPI) {\n            this.annotationsAPI.destroy();\n            delete this.annotationsAPI;\n        }\n\n        if (this.commentsAPI) {\n            this.commentsAPI.destroy();\n            delete this.commentsAPI;\n        }\n\n        if (this.versionsAPI) {\n            this.versionsAPI.destroy();\n            delete this.versionsAPI;\n        }\n\n        if (this.appActivityAPI) {\n            this.appActivityAPI.destroy();\n            delete this.appActivityAPI;\n        }\n\n        if (this.tasksNewAPI) {\n            this.tasksNewAPI.destroy();\n            delete this.tasksNewAPI;\n        }\n\n        this.destroyTaskCollaborators();\n        this.destroyTaskLinks();\n    }\n}\n\nexport default Feed;\n"],"file":"Feed.js"}