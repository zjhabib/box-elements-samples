{"version":3,"sources":["../../../src/components/draft-js-editor/DraftJSEditor.js"],"names":["React","FormattedMessage","classNames","uniqueId","Editor","Tooltip","commonMessages","OptionalFormattedMessage","optional","DraftJSEditor","editorState","onChange","props","onBlur","event","onReturn","inputProps","error","hideLabel","isDisabled","isRequired","label","onFocus","placeholder","handleBlur","handleChange","classes","a11yProps","role","ariaActiveDescendantID","ariaAutoComplete","ariaExpanded","ariaOwneeID","labelID","message","handleReturn","Component","isFocused"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport { Editor } from 'draft-js';\nimport type { EditorState } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nimport Tooltip from '../tooltip';\n\nimport commonMessages from '../../common/messages';\nimport './DraftJSEditor.scss';\n\nconst OptionalFormattedMessage = () => (\n    <span className=\"bdl-Label-optional\">\n        (<FormattedMessage {...commonMessages.optional} />)\n    </span>\n);\ntype Props = {\n    editorState: EditorState,\n    error?: ?Object,\n    hideLabel?: boolean,\n    inputProps: Object,\n    isDisabled?: boolean,\n    isRequired?: boolean,\n    label: React.Node,\n    onBlur: Function,\n    onChange: Function,\n    onFocus: Function,\n    onReturn?: Function,\n    placeholder?: string,\n};\n\nclass DraftJSEditor extends React.Component<Props> {\n    static defaultProps = {\n        inputProps: {},\n        isRequired: false,\n        isFocused: false,\n    };\n\n    /**\n     * Calls onChange handler passed in\n     * @param {EditorState} editorState The new/updated editor state\n     * @returns {void}\n     */\n    handleChange = (editorState: EditorState) => {\n        const { onChange } = this.props;\n\n        onChange(editorState);\n    };\n\n    handleBlur = (editorState: EditorState) => {\n        const { onBlur } = this.props;\n\n        onBlur(editorState);\n    };\n\n    /**\n     * Event handler which being passed to 'handleReturn' prop of DraftJSEditor\n     * This gives consumer the ability to handle return key event before DraftJSEditor handles it.\n     * @param {SyntheticKeyboardEvent} event\n     * @returns {string}\n     */\n    handleReturn = (event: SyntheticKeyboardEvent<>) => {\n        const { onReturn, inputProps } = this.props;\n\n        if (onReturn && !inputProps['aria-activedescendant']) {\n            // Return 'handled' tells DraftJS Editor to not handle return key event,\n            // return 'not-handled' tells DraftJS Editor to continue handle the return key event.\n            // We encapsulate this DraftJS Editor specific contract here, and use true/fase\n            // to indicate whether to let DraftJS Editor handle return event or not in the upper level.\n            return onReturn(event) ? 'handled' : 'not-handled';\n        }\n\n        return 'not-handled';\n    };\n\n    labelID = uniqueId('label');\n\n    render() {\n        const {\n            editorState,\n            error,\n            hideLabel,\n            inputProps,\n            isDisabled,\n            isRequired,\n            label,\n            onFocus,\n            placeholder,\n        } = this.props;\n\n        const { handleBlur, handleChange } = this;\n\n        const classes = classNames({\n            'draft-js-editor': true,\n            'is-disabled bdl-is-disabled': isDisabled,\n            'show-error': !!error,\n        });\n\n        let a11yProps = {};\n        if (inputProps.role) {\n            a11yProps = {\n                ariaActiveDescendantID: inputProps['aria-activedescendant'],\n                ariaAutoComplete: inputProps['aria-autocomplete'],\n                ariaExpanded: inputProps['aria-expanded'],\n                ariaOwneeID: inputProps['aria-owns'],\n                role: inputProps.role,\n            };\n        }\n\n        return (\n            <div className={classes}>\n                <span className={classNames('bdl-Label', { 'accessibility-hidden': hideLabel })} id={this.labelID}>\n                    {label}\n                    {!isRequired && <OptionalFormattedMessage />}\n                </span>\n\n                <Tooltip isShown={!!error} position=\"bottom-left\" text={error ? error.message : ''} theme=\"error\">\n                    {/* need div so tooltip can set aria-describedby */}\n                    <div>\n                        <Editor\n                            {...a11yProps}\n                            ariaLabelledBy={this.labelID}\n                            editorState={editorState}\n                            handleReturn={this.handleReturn}\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                            onFocus={onFocus}\n                            placeholder={placeholder}\n                            readOnly={isDisabled}\n                            stripPastedStyles\n                        />\n                    </div>\n                </Tooltip>\n            </div>\n        );\n    }\n}\n\nexport default DraftJSEditor;\n"],"file":"DraftJSEditor.js"}