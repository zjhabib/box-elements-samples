function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import Avatar from '../avatar';
import DatalistItem from '../datalist-item';
import './ContactDatalistItem.scss';

var ContactDatalistItem = function ContactDatalistItem(_ref) {
  var getContactAvatarUrl = _ref.getContactAvatarUrl,
      id = _ref.id,
      isExternal = _ref.isExternal,
      name = _ref.name,
      showAvatar = _ref.showAvatar,
      subtitle = _ref.subtitle,
      rest = _objectWithoutProperties(_ref, ["getContactAvatarUrl", "id", "isExternal", "name", "showAvatar", "subtitle"]);

  return React.createElement(DatalistItem, _extends({
    className: "contact-data-list-item"
  }, rest), showAvatar && React.createElement(Avatar, {
    className: "contact-avatar",
    id: id,
    name: name,
    isExternal: isExternal,
    shouldShowExternal: true,
    avatarUrl: getContactAvatarUrl && id ? getContactAvatarUrl({
      id: id
    }) : undefined
  }), React.createElement("div", {
    className: "contact-name-container"
  }, React.createElement("div", {
    className: "contact-text contact-name"
  }, name), subtitle && React.createElement("div", {
    className: "contact-text contact-sub-name"
  }, subtitle)));
};

export default ContactDatalistItem;
//# sourceMappingURL=ContactDatalistItem.js.map