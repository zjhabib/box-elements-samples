{"version":3,"sources":["../../../src/elements/content-sharing/ContentSharing.js"],"names":["React","API","SharingModal","CLIENT_NAME_CONTENT_SHARING","createAPI","apiHost","itemID","itemType","token","clientName","id","ContentSharing","config","customButton","displayInModal","language","messages","useState","api","setAPI","launchButton","setLaunchButton","sharingModalInstance","setSharingModalInstance","useEffect","createSharingModalInstance","cloneElement","onClick"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file ContentSharing Element\n * @description This is the top-level component for ContentSharing. It instantiates the API, which it then\n * passes to the SharingModal component either immediately (when no custom button is provided) or on\n * button click (when a custom button is provided).\n * @author Box\n */\nimport 'regenerator-runtime/runtime';\nimport * as React from 'react';\nimport API from '../../api';\nimport SharingModal from './SharingModal';\nimport { CLIENT_NAME_CONTENT_SHARING } from '../../constants';\nimport type { ItemType, StringMap } from '../../common/types/core';\nimport type { USMConfig } from '../../features/unified-share-modal/flowTypes';\n\nimport '../common/base.scss';\nimport '../common/fonts.scss';\nimport '../common/modal.scss';\n\ntype ContentSharingProps = {\n    /** apiHost - API hostname. Defaults to https://api.box.com */\n    apiHost: string,\n    config?: USMConfig,\n    /**\n     * customButton - Clickable element for opening the SharingModal component.\n     * This property should always be used in conjunction with displayInModal.\n     */\n    customButton?: React.Element<any>,\n    /**\n     * displayInModal - Whether the SharingModal component should be displayed in a modal.\n     * If false, the SharingModal component will appear as a form within the surrounding page.\n     * This property can be used with or without a customButton. If used without a customButton,\n     * the modal will appear on page load. See ContentSharing.stories.js for examples.\n     */\n    displayInModal: boolean,\n    /** itemID - Box file or folder ID */\n    itemID: string,\n    /** itemType - \"file\" or \"folder\" */\n    itemType: ItemType,\n    /** language - Language used for the element */\n    language: string,\n    /** messages - Localized strings used by the element */\n    messages?: StringMap,\n    /** token - Valid access token */\n    token: string,\n};\n\nconst createAPI = (apiHost, itemID, itemType, token) =>\n    new API({\n        apiHost,\n        clientName: CLIENT_NAME_CONTENT_SHARING,\n        id: `${itemType}_${itemID}`,\n        token,\n    });\n\nfunction ContentSharing({\n    apiHost,\n    config,\n    customButton,\n    displayInModal,\n    itemID,\n    itemType,\n    language,\n    messages,\n    token,\n}: ContentSharingProps) {\n    const [api, setAPI] = React.useState<API>(createAPI(apiHost, itemID, itemType, token));\n    const [launchButton, setLaunchButton] = React.useState<React.Element<any> | null>(null);\n    const [sharingModalInstance, setSharingModalInstance] = React.useState<React.Element<typeof SharingModal> | null>(\n        customButton ? null : (\n            <SharingModal\n                api={api}\n                config={config}\n                displayInModal={false}\n                itemID={itemID}\n                itemType={itemType}\n                language={language}\n                messages={messages}\n            />\n        ),\n    );\n\n    // Reset the API if necessary\n    React.useEffect(() => {\n        setAPI(createAPI(apiHost, itemID, itemType, token));\n    }, [apiHost, itemID, itemType, token]);\n\n    // Reset state if the API has changed\n    React.useEffect(() => {\n        setSharingModalInstance(null);\n        setLaunchButton(null);\n    }, [api]);\n\n    React.useEffect(() => {\n        const createSharingModalInstance = () => {\n            return (\n                <SharingModal\n                    api={api}\n                    config={config}\n                    displayInModal={displayInModal}\n                    itemID={itemID}\n                    itemType={itemType}\n                    language={language}\n                    messages={messages}\n                />\n            );\n        };\n\n        // Add an onClick function that instantiates SharingModal to the custom button\n        if (customButton && !launchButton) {\n            setLaunchButton(\n                React.cloneElement(customButton, {\n                    onClick: () => {\n                        return setSharingModalInstance(createSharingModalInstance());\n                    },\n                }),\n            );\n        }\n\n        // If there is no custom button, instantiate SharingModal\n        if (!customButton && !sharingModalInstance) {\n            setSharingModalInstance(createSharingModalInstance());\n        }\n    }, [\n        api,\n        config,\n        sharingModalInstance,\n        customButton,\n        displayInModal,\n        itemID,\n        itemType,\n        language,\n        launchButton,\n        messages,\n    ]);\n\n    return (\n        <>\n            {launchButton}\n            {sharingModalInstance}\n        </>\n    );\n}\n\nexport default ContentSharing;\n"],"file":"ContentSharing.js"}