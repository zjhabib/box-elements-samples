{"version":3,"sources":["../../../src/features/presence/PresenceDropdown.js"],"names":["React","PropTypes","FormattedMessage","injectIntl","throttle","isEmpty","classnames","Button","Link","PresenceAvatar","determineInteractionMessage","messages","PresenceDropdown","isScrollableAbove","isScrollableBelow","elem","scrollTop","scrollHeight","clientHeight","event","onScroll","props","elDropdownList","setState","calculateOverflow","handleScroll","leading","trailing","recentActivity","interactedAt","interactionType","lastActionMessage","intl","timeAgo","formatRelativeTime","Date","now","formatRelative","collaborators","map","collaborator","avatarUrl","id","isActive","name","profileUrl","activeNowText","renderTimestampMessage","getLinkCallback","inviteCallback","getLinkButtonText","inviteButtonText","overflow","state","buttonsPresent","dropdownListClasses","title","renderTitle","collabList","renderCollabList","actions","renderActions","list","throttledHandleScroll","Component","arrayOf","shape","string","oneOfType","number","bool","isRequired","func","any","PresenceDropdownComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,gCAAjB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,2BAAT,QAA4C,uBAA5C;AACA,OAAOC,QAAP,MAAqB,YAArB;;IAEMC,gB;;;;;;;;;;;;;;;;;;4DA6BM;AACJC,MAAAA,iBAAiB,EAAE,KADf;AAEJC,MAAAA,iBAAiB,EAAE;AAFf,K;;wEA0BY,UAAAC,IAAI,EAAI;AACxB,UAAMF,iBAAiB,GAAGE,IAAI,CAACC,SAAL,GAAiB,CAA3C;AACA,UAAMF,iBAAiB,GAAGC,IAAI,CAACC,SAAL,GAAiBD,IAAI,CAACE,YAAL,GAAoBF,IAAI,CAACG,YAApE;AACA,aAAO;AACHL,QAAAA,iBAAiB,EAAjBA,iBADG;AAEHC,QAAAA,iBAAiB,EAAjBA;AAFG,OAAP;AAIH,K;;mEAEc,UAAAK,KAAK,EAAI;AAAA,UACZC,QADY,GACC,MAAKC,KADN,CACZD,QADY;;AAEpB,UAAI,MAAKE,cAAT,EAAyB;AACrB,cAAKC,QAAL,CAAc,MAAKC,iBAAL,CAAuB,MAAKF,cAA5B,CAAd;;AACA,YAAIF,QAAJ,EAAc;AACVA,UAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACJ;AACJ,K;;4EAEuBf,QAAQ,CAAC,MAAKqB,YAAN,EAAoB,EAApB,EAAwB;AACpDC,MAAAA,OAAO,EAAE,IAD2C;AAEpDC,MAAAA,QAAQ,EAAE;AAF0C,KAAxB,C;;kEAKlB;AAAA,aACV;AAAK,QAAA,SAAS,EAAC;AAAf,SACI,oBAAC,gBAAD,EAAsBhB,QAAQ,CAACiB,cAA/B,CADJ,CADU;AAAA,K;;6EAMW,UAACC,YAAD,EAAeC,eAAf,EAAmC;AACxD,UAAMC,iBAAiB,GAAGrB,2BAA2B,CAACoB,eAAD,EAAkBD,YAAlB,CAArD;AADwD,UAEhDG,IAFgD,GAEvC,MAAKX,KAFkC,CAEhDW,IAFgD;AAGxD,UAAMC,OAAO,GAAGD,IAAI,CAACE,kBAAL,GACVF,IAAI,CAACE,kBAAL,CAAwBL,YAAY,GAAGM,IAAI,CAACC,GAAL,EAAvC,CADU,GAEVJ,IAAI,CAACK,cAAL,CAAoBR,YAApB,CAFN;;AAIA,UAAIE,iBAAJ,EAAuB;AACnB,eACI,oBAAC,gBAAD,eACQA,iBADR;AAEI,UAAA,MAAM,EAAE;AACJE,YAAAA,OAAO,EAAPA;AADI;AAFZ,WADJ;AAQH;;AACD,aAAO,IAAP;AACH,K;;uEAEkB,YAAM;AAAA,UACbK,aADa,GACK,MAAKjB,KADV,CACbiB,aADa;AAErB,aAAOA,aAAa,CAACC,GAAd,CAAkB,UAAAC,YAAY,EAAI;AAAA,YAC7BC,SAD6B,GACgDD,YADhD,CAC7BC,SAD6B;AAAA,YAClBC,EADkB,GACgDF,YADhD,CAClBE,EADkB;AAAA,YACdC,QADc,GACgDH,YADhD,CACdG,QADc;AAAA,YACJd,YADI,GACgDW,YADhD,CACJX,YADI;AAAA,YACUC,eADV,GACgDU,YADhD,CACUV,eADV;AAAA,YAC2Bc,IAD3B,GACgDJ,YADhD,CAC2BI,IAD3B;AAAA,YACiCC,UADjC,GACgDL,YADhD,CACiCK,UADjC;AAGrC,eACI;AAAK,UAAA,GAAG,EAAEH,EAAV;AAAc,UAAA,SAAS,EAAC;AAAxB,WACI,oBAAC,cAAD;AAAgB,UAAA,SAAS,EAAED,SAA3B;AAAsC,UAAA,EAAE,EAAEC,EAA1C;AAA8C,UAAA,QAAQ,EAAEC,QAAxD;AAAkE,UAAA,gBAAgB,MAAlF;AAAmF,UAAA,IAAI,EAAEC;AAAzF,UADJ,EAEI;AAAK,UAAA,SAAS,EAAC;AAAf,WACI;AAAK,UAAA,SAAS,EAAC;AAAf,WACKvC,OAAO,CAACwC,UAAD,CAAP,GACG,kCAAOD,IAAP,CADH,GAGG,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAEC,UAAZ;AAAwB,UAAA,MAAM,EAAC;AAA/B,WACKD,IADL,CAJR,CADJ,EAUI;AAAK,UAAA,SAAS,EAAC;AAAf,WACKD,QAAQ,GACL,oBAAC,gBAAD,EAAsBhC,QAAQ,CAACmC,aAA/B,CADK,GAGL,MAAKC,sBAAL,CAA4BlB,YAA5B,EAA0CC,eAA1C,CAJR,CAVJ,CAFJ,CADJ;AAuBH,OA1BM,CAAP;AA2BH,K;;oEAEe,YAAM;AAAA,wBAC0B,MAAKT,KAD/B;AAAA,UACV2B,eADU,eACVA,eADU;AAAA,UACOC,cADP,eACOA,cADP;AAGlB,aACI,CAACD,eAAe,IAAIC,cAApB,KACI;AAAK,QAAA,SAAS,EAAC;AAAf,SACI,iCACKD,eAAe,IACZ,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA;AAAjB,SACI,oBAAC,gBAAD,EAAsBrC,QAAQ,CAACuC,iBAA/B,CADJ,CAFR,EAMKD,cAAc,IACX,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA;AAAjB,SACI,oBAAC,gBAAD,EAAsBtC,QAAQ,CAACwC,gBAA/B,CADJ,CAPR,CADJ,CAFR;AAkBH,K;;;;;;;wCA3HmB;AAChB,UAAMC,QAAQ,GAAG,KAAK5B,iBAAL,CAAuB,KAAKF,cAA5B,CAAjB,CADgB,CAEhB;;AACA,WAAKC,QAAL,CAAc6B,QAAd;AACH;;;yCAEoB;AACjB,UAAMA,QAAQ,GAAG,KAAK5B,iBAAL,CAAuB,KAAKF,cAA5B,CAAjB;AACA;;;;;AAIA,UACI8B,QAAQ,CAACvC,iBAAT,KAA+B,KAAKwC,KAAL,CAAWxC,iBAA1C,IACAuC,QAAQ,CAACtC,iBAAT,KAA+B,KAAKuC,KAAL,CAAWvC,iBAF9C,EAGE;AACE;AACA,aAAKS,QAAL,CAAc6B,QAAd;AACH;AACJ;;;6BA0GQ;AAAA;;AAAA,wBAC4C,KAAKC,KADjD;AAAA,UACGxC,iBADH,eACGA,iBADH;AAAA,UACsBC,iBADtB,eACsBA,iBADtB;AAAA,yBAEuC,KAAKO,KAF5C;AAAA,UAEG2B,eAFH,gBAEGA,eAFH;AAAA,UAEoBC,cAFpB,gBAEoBA,cAFpB;AAGL,UAAMK,cAAc,GAAGN,eAAe,IAAIC,cAA1C;AAEA,UAAMM,mBAAmB,GAAGjD,UAAU,CAAC,wBAAD,EAA2B;AAC7D,2BAAmB,CAACgD,cADyC;AAE7D,wCAAgCA,cAF6B;AAG7D,+BAAuBzC,iBAHsC;AAI7D,+BAAuBC;AAJsC,OAA3B,CAAtC;AAOA,UAAM0C,KAAK,GAAG,KAAKC,WAAL,EAAd;AACA,UAAMC,UAAU,GAAG,KAAKC,gBAAL,EAAnB;AACA,UAAMC,OAAO,GAAG,KAAKC,aAAL,EAAhB;AAEA,aACI;AAAK,QAAA,SAAS,EAAC;AAAf,SACKL,KADL,EAEI;AACI,QAAA,GAAG,EAAE,aAAAM,IAAI,EAAI;AACT,UAAA,MAAI,CAACxC,cAAL,GAAsBwC,IAAtB;AACH,SAHL;AAII,QAAA,SAAS,EAAEP,mBAJf;AAKI,QAAA,QAAQ,EAAE,KAAKQ;AALnB,SAOKL,UAPL,CAFJ,EAWKE,OAXL,CADJ;AAeH;;;;EA9L0B5D,KAAK,CAACgE,S;;gBAA/BpD,gB,eACiB;AACf0B,EAAAA,aAAa,EAAErC,SAAS,CAACgE,OAAV,CACXhE,SAAS,CAACiE,KAAV,CAAgB;AACZ;AACAzB,IAAAA,SAAS,EAAExC,SAAS,CAACkE,MAFT;;AAGZ;AACAzB,IAAAA,EAAE,EAAEzC,SAAS,CAACmE,SAAV,CAAoB,CAACnE,SAAS,CAACkE,MAAX,EAAmBlE,SAAS,CAACoE,MAA7B,CAApB,CAJQ;AAKZ1B,IAAAA,QAAQ,EAAE1C,SAAS,CAACqE,IALR;;AAMZ;AACAzC,IAAAA,YAAY,EAAE5B,SAAS,CAACoE,MAPZ;;AAQZ;AACAvC,IAAAA,eAAe,EAAE7B,SAAS,CAACkE,MATf;;AAUZ;AACAvB,IAAAA,IAAI,EAAE3C,SAAS,CAACkE,MAAV,CAAiBI,UAXX;;AAYZ;AACA1B,IAAAA,UAAU,EAAE5C,SAAS,CAACkE;AAbV,GAAhB,CADW,EAgBbI,UAjBa;;AAkBf;AACAvB,EAAAA,eAAe,EAAE/C,SAAS,CAACuE,IAnBZ;;AAoBf;AACAvB,EAAAA,cAAc,EAAEhD,SAAS,CAACuE,IArBX;;AAsBf;AACApD,EAAAA,QAAQ,EAAEnB,SAAS,CAACuE,IAvBL;;AAwBf;AACAxC,EAAAA,IAAI,EAAE/B,SAAS,CAACwE;AAzBD,C;;AAgMvB,SAAS7D,gBAAgB,IAAI8D,yBAA7B;AACA,eAAevE,UAAU,CAACS,gBAAD,CAAzB","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport throttle from 'lodash/throttle';\nimport isEmpty from 'lodash/isEmpty';\nimport classnames from 'classnames';\n\nimport Button from '../../components/button';\nimport Link from '../../components/link/LinkBase';\n\nimport PresenceAvatar from './PresenceAvatar';\nimport { determineInteractionMessage } from './utils/presenceUtils';\nimport messages from './messages';\n\nclass PresenceDropdown extends React.Component<Props> {\n    static propTypes = {\n        collaborators: PropTypes.arrayOf(\n            PropTypes.shape({\n                /** Url to avatar image. If passed in, component will render the avatar image instead of the initials */\n                avatarUrl: PropTypes.string,\n                /** Users id */\n                id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n                isActive: PropTypes.bool,\n                /** Unix timestamp of when the user last interacted with the document */\n                interactedAt: PropTypes.number,\n                /** The type of interaction by the user */\n                interactionType: PropTypes.string,\n                /** User's full name */\n                name: PropTypes.string.isRequired,\n                /** Custom Profile URL */\n                profileUrl: PropTypes.string,\n            }),\n        ).isRequired,\n        /* Get Link button callback. also controls visibility of button */\n        getLinkCallback: PropTypes.func,\n        /* Show Invite button callback. also controls visibility of button */\n        inviteCallback: PropTypes.func,\n        /* Callback for Dropdown onScroll event */\n        onScroll: PropTypes.func,\n        /* Intl object */\n        intl: PropTypes.any,\n    };\n\n    state = {\n        isScrollableAbove: false,\n        isScrollableBelow: false,\n    };\n\n    componentDidMount() {\n        const overflow = this.calculateOverflow(this.elDropdownList);\n        // eslint-disable-next-line react/no-did-mount-set-state\n        this.setState(overflow);\n    }\n\n    componentDidUpdate() {\n        const overflow = this.calculateOverflow(this.elDropdownList);\n        /**\n         * recalculate overflow when dropdown is visible and new collabs are added\n         * This will not go into an infinite loop because we check for changes in local component state\n         */\n        if (\n            overflow.isScrollableAbove !== this.state.isScrollableAbove ||\n            overflow.isScrollableBelow !== this.state.isScrollableBelow\n        ) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState(overflow);\n        }\n    }\n\n    calculateOverflow = elem => {\n        const isScrollableAbove = elem.scrollTop > 0;\n        const isScrollableBelow = elem.scrollTop < elem.scrollHeight - elem.clientHeight;\n        return {\n            isScrollableAbove,\n            isScrollableBelow,\n        };\n    };\n\n    handleScroll = event => {\n        const { onScroll } = this.props;\n        if (this.elDropdownList) {\n            this.setState(this.calculateOverflow(this.elDropdownList));\n            if (onScroll) {\n                onScroll(event);\n            }\n        }\n    };\n\n    throttledHandleScroll = throttle(this.handleScroll, 50, {\n        leading: true,\n        trailing: true,\n    });\n\n    renderTitle = () => (\n        <div className=\"presence-dropdown-title\">\n            <FormattedMessage {...messages.recentActivity} />\n        </div>\n    );\n\n    renderTimestampMessage = (interactedAt, interactionType) => {\n        const lastActionMessage = determineInteractionMessage(interactionType, interactedAt);\n        const { intl } = this.props;\n        const timeAgo = intl.formatRelativeTime\n            ? intl.formatRelativeTime(interactedAt - Date.now())\n            : intl.formatRelative(interactedAt);\n\n        if (lastActionMessage) {\n            return (\n                <FormattedMessage\n                    {...lastActionMessage}\n                    values={{\n                        timeAgo,\n                    }}\n                />\n            );\n        }\n        return null;\n    };\n\n    renderCollabList = () => {\n        const { collaborators } = this.props;\n        return collaborators.map(collaborator => {\n            const { avatarUrl, id, isActive, interactedAt, interactionType, name, profileUrl } = collaborator;\n\n            return (\n                <div key={id} className=\"presence-dropdown-item\">\n                    <PresenceAvatar avatarUrl={avatarUrl} id={id} isActive={isActive} isDropDownAvatar name={name} />\n                    <div className=\"presence-dropdown-item-info-container\">\n                        <div className=\"presence-dropdown-item-info-name\">\n                            {isEmpty(profileUrl) ? (\n                                <span>{name}</span>\n                            ) : (\n                                <Link href={profileUrl} target=\"_blank\">\n                                    {name}\n                                </Link>\n                            )}\n                        </div>\n                        <div className=\"presence-dropdown-item-info-time\">\n                            {isActive ? (\n                                <FormattedMessage {...messages.activeNowText} />\n                            ) : (\n                                this.renderTimestampMessage(interactedAt, interactionType)\n                            )}\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n    };\n\n    renderActions = () => {\n        const { getLinkCallback, inviteCallback } = this.props;\n\n        return (\n            (getLinkCallback || inviteCallback) && (\n                <div className=\"presence-dropdown-actions\">\n                    <div>\n                        {getLinkCallback && (\n                            <Button onClick={getLinkCallback}>\n                                <FormattedMessage {...messages.getLinkButtonText} />\n                            </Button>\n                        )}\n                        {inviteCallback && (\n                            <Button onClick={inviteCallback}>\n                                <FormattedMessage {...messages.inviteButtonText} />\n                            </Button>\n                        )}\n                    </div>\n                </div>\n            )\n        );\n    };\n\n    render() {\n        const { isScrollableAbove, isScrollableBelow } = this.state;\n        const { getLinkCallback, inviteCallback } = this.props;\n        const buttonsPresent = getLinkCallback || inviteCallback;\n\n        const dropdownListClasses = classnames('presence-dropdown-list', {\n            'dropshadow-list': !buttonsPresent,\n            'dropshadow-list-with-buttons': buttonsPresent,\n            'is-scrollable-above': isScrollableAbove,\n            'is-scrollable-below': isScrollableBelow,\n        });\n\n        const title = this.renderTitle();\n        const collabList = this.renderCollabList();\n        const actions = this.renderActions();\n\n        return (\n            <div className=\"presence-dropdown\">\n                {title}\n                <div\n                    ref={list => {\n                        this.elDropdownList = list;\n                    }}\n                    className={dropdownListClasses}\n                    onScroll={this.throttledHandleScroll}\n                >\n                    {collabList}\n                </div>\n                {actions}\n            </div>\n        );\n    }\n}\n\nexport { PresenceDropdown as PresenceDropdownComponent };\nexport default injectIntl(PresenceDropdown);\n"],"file":"PresenceDropdown.js"}