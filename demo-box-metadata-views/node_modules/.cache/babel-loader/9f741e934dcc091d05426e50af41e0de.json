{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport './RadioButton.scss'; // @NOTE: readonly is not a valid attribute for input type radio so\n// this avoids the propType error that \"checked\" is set without \"onChange\"\n// eslint-disable-next-line @typescript-eslint/no-empty-function\n\nvar onChangeStub = function onChangeStub() {};\nvar RadioButton = function RadioButton(_ref) {\n  var isDisabled = _ref.isDisabled,\n    _ref$isSelected = _ref.isSelected,\n    isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,\n    description = _ref.description,\n    _ref$hideLabel = _ref.hideLabel,\n    hideLabel = _ref$hideLabel === void 0 ? false : _ref$hideLabel,\n    label = _ref.label,\n    name = _ref.name,\n    value = _ref.value,\n    rest = _objectWithoutProperties(_ref, [\"isDisabled\", \"isSelected\", \"description\", \"hideLabel\", \"label\", \"name\", \"value\"]);\n  return React.createElement(\"div\", {\n    className: \"radio-container\"\n  }, React.createElement(\"label\", {\n    className: \"radio-label\"\n  }, React.createElement(\"input\", _extends({\n    checked: isSelected,\n    disabled: isDisabled,\n    name: name,\n    onChange: onChangeStub,\n    type: \"radio\",\n    value: value\n  }, rest)), React.createElement(\"span\", null), React.createElement(\"span\", {\n    className: hideLabel ? 'accessibility-hidden' : ''\n  }, label)), description ? React.createElement(\"div\", {\n    className: \"radio-description\"\n  }, description) : null);\n};\nexport default RadioButton;","map":{"version":3,"sources":["../../../src/components/radio/RadioButton.tsx"],"names":["React","onChangeStub","RadioButton","isDisabled","isSelected","description","hideLabel","label","name","value","rest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAO,oBAAP,C,CAEA;AACA;AACA;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,EAAM,CAAE,CAA7B;AAYA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAAA;EAAA,IAChBC,UADgB,GAAA,IAAA,CAChBA,UADgB;IAAA,eAAA,GAAA,IAAA,CAEhBC,UAFgB;IAEhBA,UAFgB,GAAA,eAAA,KAAA,KAAA,CAAA,GAEH,KAFG,GAAA,eAAA;IAGhBC,WAHgB,GAAA,IAAA,CAGhBA,WAHgB;IAAA,cAAA,GAAA,IAAA,CAIhBC,SAJgB;IAIhBA,SAJgB,GAAA,cAAA,KAAA,KAAA,CAAA,GAIJ,KAJI,GAAA,cAAA;IAKhBC,KALgB,GAAA,IAAA,CAKhBA,KALgB;IAMhBC,IANgB,GAAA,IAAA,CAMhBA,IANgB;IAOhBC,KAPgB,GAAA,IAAA,CAOhBA,KAPgB;IAQbC,IARa,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,YAAA,EAAA,YAAA,EAAA,aAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,CAAA,CAAA;EAAA,OAUhB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EAEI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;IAAO,SAAS,EAAC;EAAjB,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;IACI,OAAO,EAAEN,UADb;IAEI,QAAQ,EAAED,UAFd;IAGI,IAAI,EAAEK,IAHV;IAII,QAAQ,EAAEP,YAJd;IAKI,IAAI,EAAC,OALT;IAMI,KAAK,EAAEQ;EANX,CAAA,EAOQC,IAPR,CAAA,CADJ,EAUI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,CAVJ,EAWI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAEJ,SAAS,GAAG,sBAAH,GAA4B;EAAtD,CAAA,EAA2DC,KAA3D,CAXJ,CAFJ,EAeKF,WAAW,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EAAoCA,WAApC,CAAH,GAA4D,IAf5E,CAVgB;AAAA,CAApB;AA6BA,eAAeH,WAAf","sourcesContent":["import * as React from 'react';\n\nimport './RadioButton.scss';\n\n// @NOTE: readonly is not a valid attribute for input type radio so\n// this avoids the propType error that \"checked\" is set without \"onChange\"\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst onChangeStub = () => {};\n\nexport interface RadioButtonProps {\n    description?: React.ReactNode;\n    hideLabel?: boolean;\n    isDisabled?: boolean;\n    isSelected?: boolean;\n    label: React.ReactNode;\n    name?: string;\n    value: string;\n}\n\nconst RadioButton = ({\n    isDisabled,\n    isSelected = false,\n    description,\n    hideLabel = false,\n    label,\n    name,\n    value,\n    ...rest\n}: RadioButtonProps) => (\n    <div className=\"radio-container\">\n        {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n        <label className=\"radio-label\">\n            <input\n                checked={isSelected}\n                disabled={isDisabled}\n                name={name}\n                onChange={onChangeStub}\n                type=\"radio\"\n                value={value}\n                {...rest}\n            />\n            <span />\n            <span className={hideLabel ? 'accessibility-hidden' : ''}>{label}</span>\n        </label>\n        {description ? <div className=\"radio-description\">{description}</div> : null}\n    </div>\n);\n\nexport default RadioButton;\n"]},"metadata":{},"sourceType":"module"}