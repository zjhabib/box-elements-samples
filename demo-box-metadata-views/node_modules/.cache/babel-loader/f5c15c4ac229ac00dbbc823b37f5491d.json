{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport { ButtonType } from '../button';\nvar PlainButton = function PlainButton(_ref) {\n  var children = _ref.children,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    _ref$getDOMRef = _ref.getDOMRef,\n    getDOMRef = _ref$getDOMRef === void 0 ? noop : _ref$getDOMRef,\n    _ref$isDisabled = _ref.isDisabled,\n    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? ButtonType.SUBMIT : _ref$type,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"getDOMRef\", \"isDisabled\", \"type\"]);\n  var buttonProps = {};\n  if (isDisabled) {\n    buttonProps['aria-disabled'] = true;\n    buttonProps.onClick = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n  }\n  return (\n    // eslint-disable-next-line react/button-has-type\n    React.createElement(\"button\", _extends({\n      className: \"btn-plain \".concat(className),\n      ref: getDOMRef,\n      type: type\n    }, rest, buttonProps), children)\n  );\n};\nexport default PlainButton;","map":{"version":3,"sources":["../../../src/components/plain-button/PlainButton.tsx"],"names":["React","noop","ButtonType","PlainButton","children","className","getDOMRef","isDisabled","type","SUBMIT","rest","buttonProps","onClick","event","preventDefault","stopPropagation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,UAAT,QAA2B,WAA3B;AAiBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAOI;EAAA,IANpBC,QAMoB,GAAA,IAAA,CANpBA,QAMoB;IAAA,cAAA,GAAA,IAAA,CALpBC,SAKoB;IALpBA,SAKoB,GAAA,cAAA,KAAA,KAAA,CAAA,GALR,EAKQ,GAAA,cAAA;IAAA,cAAA,GAAA,IAAA,CAJpBC,SAIoB;IAJpBA,SAIoB,GAAA,cAAA,KAAA,KAAA,CAAA,GAJRL,IAIQ,GAAA,cAAA;IAAA,eAAA,GAAA,IAAA,CAHpBM,UAGoB;IAHpBA,UAGoB,GAAA,eAAA,KAAA,KAAA,CAAA,GAHP,KAGO,GAAA,eAAA;IAAA,SAAA,GAAA,IAAA,CAFpBC,IAEoB;IAFpBA,IAEoB,GAAA,SAAA,KAAA,KAAA,CAAA,GAFbN,UAAU,CAACO,MAEE,GAAA,SAAA;IADjBC,IACiB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,WAAA,EAAA,YAAA,EAAA,MAAA,CAAA,CAAA;EACpB,IAAMC,WAAoG,GAAG,CAAA,CAA7G;EACA,IAAIJ,UAAJ,EAAgB;IACZI,WAAW,CAAC,eAAD,CAAXA,GAA+B,IAA/BA;IACAA,WAAW,CAACC,OAAZD,GAAsB,UAACE,KAAD,EAAoD;MACtEA,KAAK,CAACC,cAAND,CAAAA,CAAAA;MACAA,KAAK,CAACE,eAANF,CAAAA,CAAAA;IACH,CAHDF;EAIH;EAED;IACI;IACA,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;MAAQ,SAAS,EAAA,YAAA,CAAA,MAAA,CAAeN,SAAf,CAAjB;MAA6C,GAAG,EAAEC,SAAlD;MAA6D,IAAI,EAAEE;IAAnE,CAAA,EAA6EE,IAA7E,EAAuFC,WAAvF,CAAA,EACKP,QADL;EAAA;AAIP,CAvBD;AAyBA,eAAeD,WAAf","sourcesContent":["import * as React from 'react';\nimport noop from 'lodash/noop';\n\nimport { ButtonType } from '../button';\n\nexport interface PlainButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n    /** Contents of the plain button */\n    children?: React.ReactNode;\n    /** Custom class name for the plain button */\n    className?: string;\n    /** Function to get the DOM reference to the html button */\n    getDOMRef?: React.LegacyRef<HTMLButtonElement>;\n    /** Whether this button should be functionally disabled but still react on hover/focus for tooltips */\n    isDisabled?: boolean;\n    /** onClick handler for the button */\n    onClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n    /** Type of the button - submit, button, reset */\n    type?: ButtonType;\n}\n\nconst PlainButton = ({\n    children,\n    className = '',\n    getDOMRef = noop,\n    isDisabled = false,\n    type = ButtonType.SUBMIT,\n    ...rest\n}: PlainButtonProps) => {\n    const buttonProps: { [key: string]: boolean | ((event: React.SyntheticEvent<HTMLButtonElement>) => void) } = {};\n    if (isDisabled) {\n        buttonProps['aria-disabled'] = true;\n        buttonProps.onClick = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n    }\n\n    return (\n        // eslint-disable-next-line react/button-has-type\n        <button className={`btn-plain ${className}`} ref={getDOMRef} type={type} {...rest} {...buttonProps}>\n            {children}\n        </button>\n    );\n};\n\nexport default PlainButton;\n"]},"metadata":{},"sourceType":"module"}