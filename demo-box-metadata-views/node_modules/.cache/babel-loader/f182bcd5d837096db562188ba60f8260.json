{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file avatar component\n * @author Box\n */\nimport * as React from 'react';\nimport AvatarComponent from '../../../components/avatar';\nvar Avatar = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Avatar, _React$PureComponent);\n  function Avatar() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Avatar);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Avatar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      avatarUrl: null\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isMounted\", false);\n    _defineProperty(_assertThisInitialized(_this), \"getAvatarUrlHandler\", function (avatarUrl) {\n      if (_this.isMounted) {\n        _this.setState({\n          avatarUrl: avatarUrl\n        });\n      }\n    });\n    return _this;\n  }\n  _createClass(Avatar, [{\n    key: \"getAvatarUrl\",\n    /**\n     * Gets the avatar URL for the user from the getAvatarUrl prop\n     *\n     * @return {Promise<?string>} Promise which resolve with the avatar url string\n     */\n    value: function getAvatarUrl() {\n      var _this$props = this.props,\n        _this$props$user = _this$props.user,\n        user = _this$props$user === void 0 ? {} : _this$props$user,\n        getAvatarUrl = _this$props.getAvatarUrl;\n      var _user$avatar_url = user.avatar_url,\n        avatar_url = _user$avatar_url === void 0 ? null : _user$avatar_url,\n        id = user.id;\n      var avatarPromise = id && getAvatarUrl ? getAvatarUrl(\"\".concat(id)) : Promise.resolve(avatar_url);\n      return avatarPromise.then(this.getAvatarUrlHandler);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isMounted = true;\n      this.getAvatarUrl();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        user = _this$props2.user,\n        className = _this$props2.className;\n      var avatarUrl = this.state.avatarUrl;\n      var id = user.id,\n        name = user.name;\n      return React.createElement(AvatarComponent, {\n        avatarUrl: avatarUrl,\n        className: className,\n        id: id,\n        name: name\n      });\n    }\n  }]);\n  return Avatar;\n}(React.PureComponent);\nexport default Avatar;","map":{"version":3,"sources":["../../../../src/elements/content-sidebar/activity-feed/Avatar.js"],"names":["React","AvatarComponent","Avatar","PureComponent","avatarUrl","isMounted","setState","user","getAvatarUrl","props","avatar_url","id","avatarPromise","Promise","resolve","then","getAvatarUrlHandler","className","state","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;IAcMC,M;;;;;;;;;;;4DACM;MACJE,SAAS,EAAE;IADP,C;gEAIa,K;0EAOC,UAACA,SAAD,EAAwB;MAC1C,IAAI,KAAA,CAAKC,SAAT,EAAoB;QAChB,KAAA,CAAKC,QAAL,CAAc;UACVF,SAAS,EAATA;QADU,CAAd,CAAA;MAGH;IACJ,C;;;;;IAED;;;;;mCAKiC;MAAA,IAAA,WAAA,GACc,IAAA,CAAKK,KADnB;QAAA,gBAAA,GAAA,WAAA,CACrBF,IADqB;QACrBA,IADqB,GAAA,gBAAA,KAAA,KAAA,CAAA,GACd,CAAA,CADc,GAAA,gBAAA;QACVC,YADU,GAAA,WAAA,CACVA,YADU;MAAA,IAAA,gBAAA,GAEKD,IAFL,CAErBG,UAFqB;QAErBA,UAFqB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAER,IAFQ,GAAA,gBAAA;QAEFC,EAFE,GAEKJ,IAFL,CAEFI,EAFE;MAI7B,IAAMC,aAAa,GAAGD,EAAE,IAAIH,YAANG,GAAqBH,YAAY,CAAA,EAAA,CAAA,MAAA,CAAIG,EAAJ,CAAA,CAAjCA,GAA6CE,OAAO,CAACC,OAARD,CAAgBH,UAAhBG,CAAnE;MACA,OAAOD,aAAa,CAACG,IAAdH,CAAmB,IAAA,CAAKI,mBAAxBJ,CAAP;IACH;;;wCAEmB;MAChB,IAAA,CAAKP,SAAL,GAAiB,IAAjB;MACA,IAAA,CAAKG,YAAL,CAAA,CAAA;IACH;;;2CAEsB;MACnB,IAAA,CAAKH,SAAL,GAAiB,KAAjB;IACH;;;6BAEQ;MAAA,IAAA,YAAA,GAC8B,IAAA,CAAKI,KADnC;QACGF,IADH,GAAA,YAAA,CACGA,IADH;QACSU,SADT,GAAA,YAAA,CACSA,SADT;MAAA,IAEGb,SAFH,GAEwB,IAAA,CAAKc,KAF7B,CAEGd,SAFH;MAAA,IAGGO,EAHH,GAGgBJ,IAHhB,CAGGI,EAHH;QAGOQ,IAHP,GAGgBZ,IAHhB,CAGOY,IAHP;MAKL,OAAO,KAAA,CAAA,aAAA,CAAC,eAAD,EAAA;QAAiB,SAAS,EAAEf,SAA5B;QAAuC,SAAS,EAAEa,SAAlD;QAA6D,EAAE,EAAEN,EAAjE;QAAqE,IAAI,EAAEQ;MAA3E,CAAA,CAAP;IACH;;;EAhDgBnB,KAAK,CAACG,a;AAmD3B,eAAeD,MAAf","sourcesContent":["/**\n * @flow\n * @file avatar component\n * @author Box\n */\nimport * as React from 'react';\nimport AvatarComponent from '../../../components/avatar';\nimport type { GetAvatarUrlCallback } from '../../common/flowTypes';\nimport type { User } from '../../../common/types/core';\n\ntype Props = {\n    className?: string,\n    getAvatarUrl?: GetAvatarUrlCallback,\n    user: User,\n};\n\ntype State = {\n    avatarUrl?: ?string,\n};\n\nclass Avatar extends React.PureComponent<Props, State> {\n    state = {\n        avatarUrl: null,\n    };\n\n    isMounted: boolean = false;\n\n    /**\n     * Success handler for getting avatar url\n     *\n     * @param {string} avatarUrl the user avatar url\n     */\n    getAvatarUrlHandler = (avatarUrl: ?string) => {\n        if (this.isMounted) {\n            this.setState({\n                avatarUrl,\n            });\n        }\n    };\n\n    /**\n     * Gets the avatar URL for the user from the getAvatarUrl prop\n     *\n     * @return {Promise<?string>} Promise which resolve with the avatar url string\n     */\n    getAvatarUrl(): Promise<?string> {\n        const { user = {}, getAvatarUrl }: Props = this.props;\n        const { avatar_url = null, id } = user;\n\n        const avatarPromise = id && getAvatarUrl ? getAvatarUrl(`${id}`) : Promise.resolve(avatar_url);\n        return avatarPromise.then(this.getAvatarUrlHandler);\n    }\n\n    componentDidMount() {\n        this.isMounted = true;\n        this.getAvatarUrl();\n    }\n\n    componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    render() {\n        const { user, className }: Props = this.props;\n        const { avatarUrl }: State = this.state;\n        const { id, name } = user;\n\n        return <AvatarComponent avatarUrl={avatarUrl} className={className} id={id} name={name} />;\n    }\n}\n\nexport default Avatar;\n"]},"metadata":{},"sourceType":"module"}