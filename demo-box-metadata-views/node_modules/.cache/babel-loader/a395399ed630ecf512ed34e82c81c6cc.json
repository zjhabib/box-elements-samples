{"ast":null,"code":"import { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER } from './constants';\nvar floatRegex = /^[-+]?[0-9]*\\.?[0-9]*$/;\nvar integerRegex = /^[-+]?[0-9]+$/;\nvar floatValidator = function floatValidator(value) {\n  return !!value.match(floatRegex);\n};\nvar integerValidator = function integerValidator(value) {\n  return !!value.match(integerRegex);\n};\nvar isValidValue = function isValidValue(type, value) {\n  if (type === FIELD_TYPE_FLOAT && typeof value === 'string') {\n    return floatValidator(value);\n  }\n  if (type === FIELD_TYPE_INTEGER && typeof value === 'string') {\n    return integerValidator(value);\n  }\n  return true;\n}; // eslint-disable-next-line import/prefer-default-export\n\nexport { isValidValue };","map":{"version":3,"sources":["../../../src/features/metadata-instance-fields/validateMetadataField.js"],"names":["FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","floatRegex","integerRegex","floatValidator","value","match","integerValidator","isValidValue","type"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,kBAA3B,QAAqD,aAArD;AAGA,IAAMC,UAAU,GAAG,wBAAnB;AACA,IAAMC,YAAY,GAAG,eAArB;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAA;EAAA,OAAmB,CAAC,CAACA,KAAK,CAACC,KAAND,CAAYH,UAAZG,CAArB;AAAA,CAAvB;AACA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACF,KAAD,EAAA;EAAA,OAAmB,CAAC,CAACA,KAAK,CAACC,KAAND,CAAYF,YAAZE,CAArB;AAAA,CAAzB;AAEA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAeJ,KAAf,EAA6C;EAC9D,IAAII,IAAI,KAAKT,gBAATS,IAA6B,OAAOJ,KAAP,KAAiB,QAAlD,EAA4D;IACxD,OAAOD,cAAc,CAACC,KAAD,CAArB;EACH;EAED,IAAII,IAAI,KAAKR,kBAATQ,IAA+B,OAAOJ,KAAP,KAAiB,QAApD,EAA8D;IAC1D,OAAOE,gBAAgB,CAACF,KAAD,CAAvB;EACH;EAED,OAAO,IAAP;AACH,CAVD,C,CAYA;;AACA,SAASG,YAAT","sourcesContent":["// @flow\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER } from './constants';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\n\nconst floatRegex = /^[-+]?[0-9]*\\.?[0-9]*$/;\nconst integerRegex = /^[-+]?[0-9]+$/;\n\nconst floatValidator = (value: string) => !!value.match(floatRegex);\nconst integerValidator = (value: string) => !!value.match(integerRegex);\n\nconst isValidValue = (type: string, value: MetadataFieldValue) => {\n    if (type === FIELD_TYPE_FLOAT && typeof value === 'string') {\n        return floatValidator(value);\n    }\n\n    if (type === FIELD_TYPE_INTEGER && typeof value === 'string') {\n        return integerValidator(value);\n    }\n\n    return true;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { isValidValue };\n"]},"metadata":{},"sourceType":"module"}