{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Badgeable from '../badgeable';\nimport AvatarImage from './AvatarImage';\nimport AvatarInitials from './AvatarInitials';\nimport UnknownUserAvatar from './UnknownUserAvatar';\nimport GlobeBadge16 from '../../icon/fill/GlobeBadge16';\nimport './Avatar.scss';\nvar SIZES = {\n  small: true,\n  large: true\n};\nfunction Avatar(_ref) {\n  var _ref2;\n  var avatarUrl = _ref.avatarUrl,\n    className = _ref.className,\n    name = _ref.name,\n    id = _ref.id,\n    isExternal = _ref.isExternal,\n    _ref$shouldShowExtern = _ref.shouldShowExternal,\n    shouldShowExternal = _ref$shouldShowExtern === void 0 ? false : _ref$shouldShowExtern,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? '' : _ref$size;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    hasImageErrored = _React$useState2[0],\n    setHasImageErrored = _React$useState2[1];\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    prevAvatarUrl = _React$useState4[0],\n    setPrevAvatarUrl = _React$useState4[1];\n  var classes = classNames(['avatar', className, (_ref2 = {}, _defineProperty(_ref2, \"avatar--\".concat(size), size && SIZES[size]), _defineProperty(_ref2, 'avatar--isExternal', shouldShowExternal && isExternal), _ref2)]); // Reset hasImageErrored state when avatarUrl changes\n\n  if (avatarUrl !== prevAvatarUrl) {\n    setHasImageErrored(false);\n    setPrevAvatarUrl(avatarUrl);\n  }\n  var avatar;\n  if (avatarUrl && !hasImageErrored) {\n    avatar = React.createElement(AvatarImage, {\n      onError: function onError() {\n        setHasImageErrored(true);\n      },\n      url: avatarUrl\n    });\n  } else if (name) {\n    avatar = React.createElement(AvatarInitials, {\n      id: id,\n      name: name\n    });\n  } else {\n    avatar = React.createElement(UnknownUserAvatar, {\n      className: \"avatar-icon\"\n    });\n  }\n  return React.createElement(Badgeable, {\n    className: classes,\n    bottomRight: shouldShowExternal && isExternal ? React.createElement(GlobeBadge16, {\n      className: \"bdl-Avatar-externalBadge\"\n    }) : undefined\n  }, React.createElement(\"span\", {\n    role: \"presentation\"\n  }, avatar));\n}\nexport default Avatar;","map":{"version":3,"sources":["../../../src/components/avatar/Avatar.tsx"],"names":["React","classNames","Badgeable","AvatarImage","AvatarInitials","UnknownUserAvatar","GlobeBadge16","SIZES","small","large","Avatar","avatarUrl","className","name","id","isExternal","shouldShowExternal","size","hasImageErrored","setHasImageErrored","useState","prevAvatarUrl","setPrevAvatarUrl","classes","avatar","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Badgeable from '../badgeable';\nimport AvatarImage from './AvatarImage';\nimport AvatarInitials from './AvatarInitials';\nimport UnknownUserAvatar from './UnknownUserAvatar';\nimport GlobeBadge16 from '../../icon/fill/GlobeBadge16';\n\nimport './Avatar.scss';\n\nconst SIZES = { small: true, large: true };\n\nexport interface AvatarProps {\n    /**\n     * Url to avatar image.  If passed in, component will render the avatar image instead of the initials\n     *\n     * Required if \"name\" is not specified.\n     */\n    avatarUrl?: string | null;\n    /** classname to add to the container element. */\n    className?: string;\n    /** Users id */\n    id?: string | number | null;\n    /** Whether this avatar should be labeled as external in the current context */\n    isExternal?: boolean;\n    /**\n     * Users full name.\n     *\n     * Required if \"avatarUrl\" is not specified.\n     */\n    name?: string | null;\n    /** Show the external avatar marker if the avatar is marked as for an external user */\n    shouldShowExternal?: boolean;\n    /* avatar size (enum) */\n    size?: keyof typeof SIZES | '';\n}\n\nfunction Avatar({ avatarUrl, className, name, id, isExternal, shouldShowExternal = false, size = '' }: AvatarProps) {\n    const [hasImageErrored, setHasImageErrored] = React.useState<boolean>(false);\n    const [prevAvatarUrl, setPrevAvatarUrl] = React.useState<AvatarProps['avatarUrl']>(null);\n\n    const classes = classNames([\n        'avatar',\n        className,\n        { [`avatar--${size}`]: size && SIZES[size], 'avatar--isExternal': shouldShowExternal && isExternal },\n    ]);\n\n    // Reset hasImageErrored state when avatarUrl changes\n    if (avatarUrl !== prevAvatarUrl) {\n        setHasImageErrored(false);\n        setPrevAvatarUrl(avatarUrl);\n    }\n\n    let avatar;\n    if (avatarUrl && !hasImageErrored) {\n        avatar = (\n            <AvatarImage\n                onError={() => {\n                    setHasImageErrored(true);\n                }}\n                url={avatarUrl}\n            />\n        );\n    } else if (name) {\n        avatar = <AvatarInitials id={id} name={name} />;\n    } else {\n        avatar = <UnknownUserAvatar className=\"avatar-icon\" />;\n    }\n\n    return (\n        <Badgeable\n            className={classes}\n            bottomRight={\n                shouldShowExternal && isExternal ? <GlobeBadge16 className=\"bdl-Avatar-externalBadge\" /> : undefined\n            }\n        >\n            <span role=\"presentation\">{avatar}</span>\n        </Badgeable>\n    );\n}\n\nexport default Avatar;\n"]},"metadata":{},"sourceType":"module"}