{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * \n * @file Collapsed Version component\n */\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport IconInfoInverted from '../../../../icons/general/IconInfoInverted';\nimport PlainButton from '../../../../components/plain-button';\nimport messages from '../../../common/messages';\nimport selectors from '../../../common/selectors/version';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport './Version.scss';\nfunction getMessageForAction(action, collaborators, version_start, version_end) {\n  // We only support collapsing for multiple upload versions\n  if (action !== 'upload') {\n    return null;\n  }\n  var collaboratorIDs = Object.keys(collaborators);\n  var numberOfCollaborators = collaboratorIDs.length;\n  var versionRange = React.createElement(\"span\", {\n    className: \"bcs-Version-range\"\n  }, version_start, \" - \", version_end);\n  if (numberOfCollaborators === 1) {\n    var collaborator = collaborators[collaboratorIDs[0]];\n    return React.createElement(FormattedMessage, _extends({}, messages.versionUploadCollapsed, {\n      values: {\n        name: React.createElement(\"strong\", null, collaborator.name),\n        versions: versionRange\n      }\n    }));\n  }\n  return React.createElement(FormattedMessage, _extends({}, messages.versionMultipleUsersUploaded, {\n    values: {\n      numberOfCollaborators: numberOfCollaborators,\n      versions: versionRange\n    }\n  }));\n}\nvar CollapsedVersion = function CollapsedVersion(props) {\n  // $FlowFixMe\n  var action = selectors.getVersionAction(props);\n  var collaborators = props.collaborators,\n    intl = props.intl,\n    onInfo = props.onInfo,\n    versions = props.versions,\n    version_start = props.version_start,\n    version_end = props.version_end;\n  return React.createElement(\"div\", {\n    className: \"bcs-Version\"\n  }, React.createElement(\"span\", {\n    className: \"bcs-Version-message\"\n  }, getMessageForAction(action, collaborators, version_start, version_end)), onInfo ? React.createElement(\"span\", {\n    className: \"bcs-Version-actions\"\n  }, React.createElement(PlainButton, {\n    \"aria-label\": intl.formatMessage(messages.getVersionInfo),\n    className: \"bcs-Version-info\",\n    \"data-resin-target\": ACTIVITY_TARGETS.VERSION_CARD,\n    onClick: function onClick() {\n      onInfo({\n        versions: versions\n      });\n    },\n    type: \"button\"\n  }, React.createElement(IconInfoInverted, {\n    height: 16,\n    width: 16\n  }))) : null);\n};\nexport { CollapsedVersion as CollapsedVersionBase };\nexport default injectIntl(CollapsedVersion);","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/version/CollapsedVersion.js"],"names":["React","FormattedMessage","injectIntl","IconInfoInverted","PlainButton","messages","selectors","ACTIVITY_TARGETS","getMessageForAction","action","collaborators","version_start","version_end","collaboratorIDs","Object","keys","numberOfCollaborators","length","versionRange","collaborator","versionUploadCollapsed","name","versions","versionMultipleUsersUploaded","CollapsedVersion","props","getVersionAction","intl","onInfo","formatMessage","getVersionInfo","VERSION_CARD","CollapsedVersionBase"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Collapsed Version component\n */\n\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport IconInfoInverted from '../../../../icons/general/IconInfoInverted';\nimport PlainButton from '../../../../components/plain-button';\nimport messages from '../../../common/messages';\nimport selectors from '../../../common/selectors/version';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport type { User, FileVersions } from '../../../../common/types/core';\nimport './Version.scss';\n\nfunction getMessageForAction(\n    action: string,\n    collaborators: { [collaborator_id: string]: User },\n    version_start: number,\n    version_end: number,\n): React.Node {\n    // We only support collapsing for multiple upload versions\n    if (action !== 'upload') {\n        return null;\n    }\n\n    const collaboratorIDs = Object.keys(collaborators);\n    const numberOfCollaborators = collaboratorIDs.length;\n\n    const versionRange: React.Node = (\n        <span className=\"bcs-Version-range\">\n            {version_start} - {version_end}\n        </span>\n    );\n\n    if (numberOfCollaborators === 1) {\n        const collaborator = collaborators[collaboratorIDs[0]];\n        return (\n            <FormattedMessage\n                {...messages.versionUploadCollapsed}\n                values={{\n                    name: <strong>{collaborator.name}</strong>,\n                    versions: versionRange,\n                }}\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            {...messages.versionMultipleUsersUploaded}\n            values={{\n                numberOfCollaborators,\n                versions: versionRange,\n            }}\n        />\n    );\n}\n\ntype Props = {\n    collaborators: { [collaborator_id: string]: User },\n    onInfo?: Function,\n    version_end: number,\n    version_start: number,\n    versions: FileVersions,\n} & InjectIntlProvidedProps;\n\nconst CollapsedVersion = (props: Props): React.Node => {\n    // $FlowFixMe\n    const action = selectors.getVersionAction(props);\n    const { collaborators, intl, onInfo, versions, version_start, version_end } = props;\n\n    return (\n        <div className=\"bcs-Version\">\n            <span className=\"bcs-Version-message\">\n                {getMessageForAction(action, collaborators, version_start, version_end)}\n            </span>\n            {onInfo ? (\n                <span className=\"bcs-Version-actions\">\n                    <PlainButton\n                        aria-label={intl.formatMessage(messages.getVersionInfo)}\n                        className=\"bcs-Version-info\"\n                        data-resin-target={ACTIVITY_TARGETS.VERSION_CARD}\n                        onClick={() => {\n                            onInfo({ versions });\n                        }}\n                        type=\"button\"\n                    >\n                        <IconInfoInverted height={16} width={16} />\n                    </PlainButton>\n                </span>\n            ) : null}\n        </div>\n    );\n};\n\nexport { CollapsedVersion as CollapsedVersionBase };\nexport default injectIntl(CollapsedVersion);\n"]},"metadata":{},"sourceType":"module"}