{"ast":null,"code":"/**\n * \n * @file Preview sidebar nav button component\n * @author Box\n */\nimport * as React from 'react';\nimport { Route } from 'react-router-dom';\nimport NavButton from '../common/nav-button';\nimport Tooltip from '../../components/tooltip/Tooltip';\nimport './SidebarNavButton.scss';\nvar SidebarNavButton = React.forwardRef(function (props, ref) {\n  var dataResinTarget = props['data-resin-target'],\n    dataTestId = props['data-testid'],\n    children = props.children,\n    _props$elementId = props.elementId,\n    elementId = _props$elementId === void 0 ? '' : _props$elementId,\n    isOpen = props.isOpen,\n    sidebarView = props.sidebarView,\n    tooltip = props.tooltip;\n  var sidebarPath = \"/\".concat(sidebarView);\n  return React.createElement(Route, {\n    path: sidebarPath\n  }, function (_ref) {\n    var match = _ref.match;\n    var isMatch = !!match;\n    var isActive = function isActive() {\n      return isMatch && !!isOpen;\n    };\n    var isActiveValue = isActive();\n    var isExactMatch = isMatch && match.isExact;\n    var id = \"\".concat(elementId).concat(elementId === '' ? '' : '_').concat(sidebarView);\n    return React.createElement(Tooltip, {\n      position: \"middle-left\",\n      text: tooltip,\n      isTabbable: false\n    }, React.createElement(NavButton, {\n      activeClassName: \"bcs-is-selected\",\n      \"aria-selected\": isActiveValue,\n      \"aria-controls\": \"\".concat(id, \"-content\"),\n      className: \"bcs-NavButton\",\n      \"data-resin-target\": dataResinTarget,\n      \"data-testid\": dataTestId,\n      getDOMRef: ref,\n      id: id,\n      isActive: isActive,\n      replace: isExactMatch,\n      role: \"tab\",\n      tabIndex: isActiveValue ? '0' : '-1',\n      to: {\n        pathname: sidebarPath,\n        state: {\n          open: true\n        }\n      },\n      type: \"button\"\n    }, children));\n  });\n});\nexport default SidebarNavButton;","map":{"version":3,"sources":["../../../src/elements/content-sidebar/SidebarNavButton.js"],"names":["React","Route","NavButton","Tooltip","SidebarNavButton","forwardRef","props","ref","dataResinTarget","dataTestId","children","elementId","isOpen","sidebarView","tooltip","sidebarPath","match","isMatch","isActive","isActiveValue","isExactMatch","isExact","id","pathname","state","open"],"mappings":"AAAA;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAO,yBAAP;AAYA,IAAMC,gBAAgB,GAAG,KAAK,CAACC,UAAN,CAAwC,UAACC,KAAD,EAAeC,GAAf,EAAuC;EAAA,IAE3EC,eAF2E,GAShGF,KATgG,CAEhG,mBAFgG,CAAA;IAGjFG,UAHiF,GAShGH,KATgG,CAGhG,aAHgG,CAAA;IAIhGI,QAJgG,GAShGJ,KATgG,CAIhGI,QAJgG;IAAA,gBAAA,GAShGJ,KATgG,CAKhGK,SALgG;IAKhGA,SALgG,GAAA,gBAAA,KAAA,KAAA,CAAA,GAKpF,EALoF,GAAA,gBAAA;IAMhGC,MANgG,GAShGN,KATgG,CAMhGM,MANgG;IAOhGC,WAPgG,GAShGP,KATgG,CAOhGO,WAPgG;IAQhGC,OARgG,GAShGR,KATgG,CAQhGQ,OARgG;EAUpG,IAAMC,WAAW,GAAA,GAAA,CAAA,MAAA,CAAOF,WAAP,CAAjB;EAEA,OACI,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA;IAAO,IAAI,EAAEE;EAAb,CAAA,EACK,UAAA,IAAA,EAAe;IAAA,IAAZC,KAAY,GAAA,IAAA,CAAZA,KAAY;IACZ,IAAMC,OAAO,GAAG,CAAC,CAACD,KAAlB;IACA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAA,EAAA;MAAA,OAAMD,OAAO,IAAI,CAAC,CAACL,MAAnB;IAAA,CAAjB;IACA,IAAMO,aAAa,GAAGD,QAAQ,CAAA,CAA9B;IACA,IAAME,YAAY,GAAGH,OAAO,IAAID,KAAK,CAACK,OAAtC;IACA,IAAMC,EAAE,GAAA,EAAA,CAAA,MAAA,CAAMX,SAAN,CAAA,CAAA,MAAA,CAAkBA,SAAS,KAAK,EAAdA,GAAmB,EAAnBA,GAAwB,GAA1C,CAAA,CAAA,MAAA,CAAgDE,WAAhD,CAAR;IAEA,OACI,KAAA,CAAA,aAAA,CAAC,OAAD,EAAA;MAAS,QAAQ,EAAC,aAAlB;MAAgC,IAAI,EAAEC,OAAtC;MAA+C,UAAU,EAAE;IAA3D,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;MACI,eAAe,EAAC,iBADpB;MAEI,eAAA,EAAeK,aAFnB;MAGI,eAAA,EAAA,EAAA,CAAA,MAAA,CAAkBG,EAAlB,EAAA,UAAA,CAHJ;MAII,SAAS,EAAC,eAJd;MAKI,mBAAA,EAAmBd,eALvB;MAMI,aAAA,EAAaC,UANjB;MAOI,SAAS,EAAEF,GAPf;MAQI,EAAE,EAAEe,EARR;MASI,QAAQ,EAAEJ,QATd;MAUI,OAAO,EAAEE,YAVb;MAWI,IAAI,EAAC,KAXT;MAYI,QAAQ,EAAED,aAAa,GAAG,GAAH,GAAS,IAZpC;MAaI,EAAE,EAAE;QACAI,QAAQ,EAAER,WADV;QAEAS,KAAK,EAAE;UAAEC,IAAI,EAAE;QAAR;MAFP,CAbR;MAiBI,IAAI,EAAC;IAjBT,CAAA,EAmBKf,QAnBL,CADJ,CADJ;EAyBH,CAjCL,CADJ;AAqCH,CAjDwB,CAAzB;AAmDA,eAAeN,gBAAf","sourcesContent":["/**\n * @flow\n * @file Preview sidebar nav button component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { Route } from 'react-router-dom';\nimport NavButton from '../common/nav-button';\nimport Tooltip from '../../components/tooltip/Tooltip';\nimport './SidebarNavButton.scss';\n\ntype Props = {\n    'data-resin-target'?: string,\n    'data-testid'?: string,\n    children: React.Node,\n    elementId?: string,\n    isOpen?: boolean,\n    sidebarView: string,\n    tooltip: React.Node,\n};\n\nconst SidebarNavButton = React.forwardRef<Props, React.Ref<any>>((props: Props, ref: React.Ref<any>) => {\n    const {\n        'data-resin-target': dataResinTarget,\n        'data-testid': dataTestId,\n        children,\n        elementId = '',\n        isOpen,\n        sidebarView,\n        tooltip,\n    } = props;\n    const sidebarPath = `/${sidebarView}`;\n\n    return (\n        <Route path={sidebarPath}>\n            {({ match }) => {\n                const isMatch = !!match;\n                const isActive = () => isMatch && !!isOpen;\n                const isActiveValue = isActive();\n                const isExactMatch = isMatch && match.isExact;\n                const id = `${elementId}${elementId === '' ? '' : '_'}${sidebarView}`;\n\n                return (\n                    <Tooltip position=\"middle-left\" text={tooltip} isTabbable={false}>\n                        <NavButton\n                            activeClassName=\"bcs-is-selected\"\n                            aria-selected={isActiveValue}\n                            aria-controls={`${id}-content`}\n                            className=\"bcs-NavButton\"\n                            data-resin-target={dataResinTarget}\n                            data-testid={dataTestId}\n                            getDOMRef={ref}\n                            id={id}\n                            isActive={isActive}\n                            replace={isExactMatch}\n                            role=\"tab\"\n                            tabIndex={isActiveValue ? '0' : '-1'}\n                            to={{\n                                pathname: sidebarPath,\n                                state: { open: true },\n                            }}\n                            type=\"button\"\n                        >\n                            {children}\n                        </NavButton>\n                    </Tooltip>\n                );\n            }}\n        </Route>\n    );\n});\n\nexport default SidebarNavButton;\n"]},"metadata":{},"sourceType":"module"}