{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Transcript component\n * @author Box\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { bdlGray50 } from '../../../../styles/variables';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport IconCopy from '../../../../icons/general/IconCopy';\nimport IconExpand from '../../../../icons/general/IconExpand';\nimport IconCollapse from '../../../../icons/general/IconCollapse';\nimport { formatTime } from '../../../../utils/datetime';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport { copy } from '../../../../utils/download';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport messages from '../../../common/messages';\nimport { isValidTimeSlice } from './timeSliceUtils';\nimport TranscriptRow from './TranscriptRow';\nimport './Transcript.scss';\nvar Transcript = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Transcript, _React$PureComponent);\n  function Transcript() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Transcript);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Transcript)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isEditingIndex: undefined,\n      newTranscriptText: '',\n      isCollapsed: true,\n      isLoading: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"transcriptReducer\", function (accumulator, _ref) {\n      var appears = _ref.appears,\n        text = _ref.text;\n      var start = isValidTimeSlice(appears) && Array.isArray(appears) ? \"\".concat(formatTime(appears[0].start), \":\") : '';\n      return \"\".concat(accumulator).concat(start, \" \").concat(text || '', \"\\r\\n\");\n    });\n    _defineProperty(_assertThisInitialized(_this), \"transcriptMapper\", function (_ref2, index) {\n      var appears = _ref2.appears,\n        text = _ref2.text;\n      var _this$state = _this.state,\n        isEditingIndex = _this$state.isEditingIndex,\n        newTranscriptText = _this$state.newTranscriptText;\n      var isEditingRow = isEditingIndex === index;\n      var transcriptText = isEditingRow ? newTranscriptText : text;\n      var interactionTarget = isEditingRow ? SKILLS_TARGETS.TRANSCRIPTS.EDIT_TEXT : SKILLS_TARGETS.TRANSCRIPTS.TRANSCRIPT;\n      return React.createElement(TranscriptRow, {\n        key: index,\n        appears: appears,\n        interactionTarget: interactionTarget,\n        isEditing: isEditingRow,\n        onCancel: _this.onCancel,\n        onChange: _this.onChange,\n        onClick: function onClick() {\n          return _this.onClick(index);\n        },\n        onSave: _this.onSave,\n        text: transcriptText\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleIsEditing\", function () {\n      _this.setState(function (prevState) {\n        return {\n          isEditingIndex: typeof prevState.isEditingIndex === 'number' ? undefined : -1\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSave\", function () {\n      var _this$props = _this.props,\n        entries = _this$props.card.entries,\n        onSkillChange = _this$props.onSkillChange;\n      var _this$state2 = _this.state,\n        isEditingIndex = _this$state2.isEditingIndex,\n        newTranscriptText = _this$state2.newTranscriptText;\n      if (typeof isEditingIndex !== 'number') {\n        return;\n      }\n      var entry = entries[isEditingIndex];\n      if (entry.text === newTranscriptText) {\n        _this.onCancel();\n      } else {\n        _this.setState({\n          isLoading: true,\n          isEditingIndex: -1\n        });\n        onSkillChange(null, null, [{\n          replacement: _objectSpread({}, entry, {\n            text: newTranscriptText\n          }),\n          replaced: entry\n        }]);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      _this.setState({\n        isEditingIndex: -1,\n        newTranscriptText: ''\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      var currentTarget = event.currentTarget;\n      _this.setState({\n        newTranscriptText: currentTarget.value\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (index) {\n      var entries = _this.props.card.entries;\n      var isEditingIndex = _this.state.isEditingIndex;\n      if (typeof isEditingIndex === 'number') {\n        _this.setState({\n          isEditingIndex: index,\n          newTranscriptText: entries[index].text\n        });\n      } else {\n        _this.previewSegment(index);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"copyTranscript\", function () {\n      var entries = _this.props.card.entries;\n      var copiedClass = 'be-transcript-copied';\n      copy(entries.reduce(_this.transcriptReducer, '')); // Animate the button by adding a class\n\n      if (_this.copyBtn) {\n        _this.copyBtn.classList.add(copiedClass);\n      } // Remove the animation class\n\n      setTimeout(function () {\n        if (_this.copyBtn) {\n          _this.copyBtn.classList.remove(copiedClass);\n        }\n      }, 1000);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"copyBtnRef\", function (btn) {\n      _this.copyBtn = btn;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleExpandCollapse\", function () {\n      _this.setState(function (prevState) {\n        return {\n          isCollapsed: !prevState.isCollapsed\n        };\n      });\n    });\n    return _this;\n  }\n  _createClass(Transcript, [{\n    key: \"componentDidUpdate\",\n    /**\n     * Called when transcripts gets new properties\n     *\n     * @private\n     * @return {void}\n     */\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps === this.props) {\n        return;\n      }\n      var wasEditing = typeof this.state.isEditingIndex === 'number';\n      this.setState({\n        isEditingIndex: wasEditing ? -1 : undefined,\n        newTranscriptText: '',\n        isLoading: false\n      });\n    }\n    /**\n     * Reducer to accumulate all transcript entries for copying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @return {string} accumulated transcript entries\n     */\n  }, {\n    key: \"previewSegment\",\n    /**\n     * Previews a transcript segment\n     *\n     * @private\n     * @param {number|void} [index] - row index to edit\n     * @return {void}\n     */\n    value: function previewSegment(index) {\n      var _this$props2 = this.props,\n        entries = _this$props2.card.entries,\n        getViewer = _this$props2.getViewer;\n      var appears = entries[index].appears;\n      var viewer = getViewer ? getViewer() : null;\n      var isValid = isValidTimeSlice(appears) && Array.isArray(appears) && appears.length === 1;\n      var timeSlice = appears;\n      var start = isValid ? timeSlice[0].start : 0;\n      if (isValid && viewer && typeof viewer.play === 'function') {\n        viewer.play(start);\n      }\n    }\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: \"render\",\n    /**\n     * Renders the transcript\n     *\n     * @private\n     * @return {Object}\n     */\n    value: function render() {\n      var _this$props3 = this.props,\n        entries = _this$props3.card.entries,\n        isEditable = _this$props3.isEditable;\n      var _this$state3 = this.state,\n        isEditingIndex = _this$state3.isEditingIndex,\n        isCollapsed = _this$state3.isCollapsed,\n        isLoading = _this$state3.isLoading;\n      var hasEntries = entries.length > 0;\n      var hasManyEntries = entries.length > 5;\n      var isEditing = typeof isEditingIndex === 'number';\n      var editBtnClassName = classNames('be-transcript-edit', {\n        'be-transcript-is-editing': isEditing\n      });\n      var contentClassName = classNames({\n        'be-transcript-content-collapsed': isCollapsed\n      });\n      var expandCollapseMessage = isCollapsed ? messages.expand : messages.collapse;\n      return React.createElement(LoadingIndicatorWrapper, {\n        className: \"be-transcript\",\n        isLoading: isLoading\n      }, hasEntries && !isLoading && React.createElement(\"div\", {\n        className: \"be-transcript-actions\"\n      }, React.createElement(Tooltip, {\n        text: React.createElement(FormattedMessage, messages.copy)\n      }, React.createElement(PlainButton, {\n        className: \"be-transcript-copy\",\n        \"data-resin-target\": SKILLS_TARGETS.TRANSCRIPTS.COPY,\n        getDOMRef: this.copyBtnRef,\n        onClick: this.copyTranscript,\n        type: \"button\"\n      }, React.createElement(IconCopy, {\n        color: bdlGray50\n      }))), hasManyEntries && React.createElement(Tooltip, {\n        text: React.createElement(FormattedMessage, expandCollapseMessage)\n      }, React.createElement(PlainButton, {\n        className: \"be-transcript-expand\",\n        \"data-resin-target\": SKILLS_TARGETS.TRANSCRIPTS.EXPAND,\n        onClick: this.toggleExpandCollapse,\n        type: \"button\"\n      }, isCollapsed ? React.createElement(IconExpand, {\n        color: bdlGray50\n      }) : React.createElement(IconCollapse, {\n        color: bdlGray50\n      }))), isEditable && React.createElement(Tooltip, {\n        text: React.createElement(FormattedMessage, messages.editLabel)\n      }, React.createElement(PlainButton, {\n        className: editBtnClassName,\n        \"data-resin-target\": SKILLS_TARGETS.TRANSCRIPTS.EDIT,\n        onClick: this.toggleIsEditing,\n        type: \"button\"\n      }, React.createElement(IconEdit, null)))), isEditing ? React.createElement(\"div\", {\n        className: \"be-transcript-edit-message\"\n      }, React.createElement(FormattedMessage, messages.transcriptEdit)) : null, hasEntries ? React.createElement(\"div\", {\n        className: contentClassName\n      }, entries.map(this.transcriptMapper)) : React.createElement(FormattedMessage, messages.skillNoInfoFoundError));\n    }\n  }]);\n  return Transcript;\n}(React.PureComponent);\nexport default Transcript;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/skills/transcript/Transcript.js"],"names":["React","FormattedMessage","classNames","bdlGray50","PlainButton","IconEdit","IconCopy","IconExpand","IconCollapse","formatTime","LoadingIndicatorWrapper","Tooltip","copy","SKILLS_TARGETS","messages","isValidTimeSlice","TranscriptRow","Transcript","PureComponent","isEditingIndex","undefined","newTranscriptText","isCollapsed","isLoading","prevProps","props","wasEditing","state","setState","accumulator","appears","text","start","Array","isArray","index","isEditingRow","transcriptText","interactionTarget","TRANSCRIPTS","EDIT_TEXT","TRANSCRIPT","onCancel","onChange","onClick","onSave","prevState","card","entries","getViewer","viewer","isValid","length","timeSlice","play","onSkillChange","entry","replacement","replaced","event","currentTarget","value","previewSegment","copiedClass","reduce","transcriptReducer","copyBtn","classList","add","setTimeout","remove","btn","isEditable","hasEntries","hasManyEntries","isEditing","editBtnClassName","contentClassName","expandCollapseMessage","expand","collapse","COPY","copyBtnRef","copyTranscript","EXPAND","toggleExpandCollapse","editLabel","EDIT","toggleIsEditing","transcriptEdit","map","transcriptMapper","skillNoInfoFoundError"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Transcript component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { bdlGray50 } from '../../../../styles/variables';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport IconCopy from '../../../../icons/general/IconCopy';\nimport IconExpand from '../../../../icons/general/IconExpand';\nimport IconCollapse from '../../../../icons/general/IconCollapse';\nimport { formatTime } from '../../../../utils/datetime';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport { copy } from '../../../../utils/download';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport messages from '../../../common/messages';\nimport { isValidTimeSlice } from './timeSliceUtils';\nimport TranscriptRow from './TranscriptRow';\nimport type { SkillCardEntry, SkillCard, SkillCardEntryTimeSlice } from '../../../../common/types/skills';\nimport './Transcript.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\ntype State = {\n    isCollapsed: boolean,\n    isEditingIndex?: number,\n    isLoading: boolean,\n    newTranscriptText: string,\n};\n\nclass Transcript extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State = {\n        isEditingIndex: undefined,\n        newTranscriptText: '',\n        isCollapsed: true,\n        isLoading: false,\n    };\n\n    copyBtn: HTMLButtonElement;\n\n    /**\n     * Called when transcripts gets new properties\n     *\n     * @private\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        if (prevProps === this.props) {\n            return;\n        }\n\n        const wasEditing = typeof this.state.isEditingIndex === 'number';\n        this.setState({\n            isEditingIndex: wasEditing ? -1 : undefined,\n            newTranscriptText: '',\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Reducer to accumulate all transcript entries for copying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @return {string} accumulated transcript entries\n     */\n    transcriptReducer = (accumulator: string, { appears, text }: SkillCardEntry): string => {\n        const start: string =\n            isValidTimeSlice(appears) && Array.isArray(appears) ? `${formatTime(appears[0].start)}:` : '';\n        return `${accumulator}${start} ${text || ''}\\r\\n`;\n    };\n\n    /**\n     * Mapper to accumulate all transcript entries for displaying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @param {number} index - mapper index\n     * @return {string} accumulated transcript entries\n     */\n    transcriptMapper = ({ appears, text }: SkillCardEntry, index: number): React.Node => {\n        const { isEditingIndex, newTranscriptText }: State = this.state;\n        const isEditingRow = isEditingIndex === index;\n        const transcriptText = isEditingRow ? newTranscriptText : text;\n        const interactionTarget = isEditingRow\n            ? SKILLS_TARGETS.TRANSCRIPTS.EDIT_TEXT\n            : SKILLS_TARGETS.TRANSCRIPTS.TRANSCRIPT;\n        return (\n            <TranscriptRow\n                key={index}\n                appears={appears}\n                interactionTarget={interactionTarget}\n                isEditing={isEditingRow}\n                onCancel={this.onCancel}\n                onChange={this.onChange}\n                onClick={() => this.onClick(index)}\n                onSave={this.onSave}\n                text={transcriptText}\n            />\n        );\n    };\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditingIndex: typeof prevState.isEditingIndex === 'number' ? undefined : -1,\n        }));\n    };\n\n    /**\n     * Previews a transcript segment\n     *\n     * @private\n     * @param {number|void} [index] - row index to edit\n     * @return {void}\n     */\n    previewSegment(index: number) {\n        const {\n            card: { entries },\n            getViewer,\n        }: Props = this.props;\n        const { appears } = entries[index];\n        const viewer = getViewer ? getViewer() : null;\n        const isValid = isValidTimeSlice(appears) && Array.isArray(appears) && appears.length === 1;\n        const timeSlice = ((appears: any): Array<SkillCardEntryTimeSlice>);\n        const start = isValid ? timeSlice[0].start : 0;\n\n        if (isValid && viewer && typeof viewer.play === 'function') {\n            viewer.play(start);\n        }\n    }\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const {\n            card: { entries },\n            onSkillChange,\n        }: Props = this.props;\n        const { isEditingIndex, newTranscriptText }: State = this.state;\n\n        if (typeof isEditingIndex !== 'number') {\n            return;\n        }\n\n        const entry = entries[isEditingIndex];\n        if (entry.text === newTranscriptText) {\n            this.onCancel();\n        } else {\n            this.setState({ isLoading: true, isEditingIndex: -1 });\n            onSkillChange(null, null, [\n                {\n                    replacement: { ...entry, text: newTranscriptText },\n                    replaced: entry,\n                },\n            ]);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.setState({ isEditingIndex: -1, newTranscriptText: '' });\n    };\n\n    /**\n     * Reflects changes of editing\n     *\n     * @private\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onChange = (event: SyntheticKeyboardEvent<HTMLTextAreaElement>): void => {\n        const currentTarget = (event.currentTarget: HTMLTextAreaElement);\n        this.setState({\n            newTranscriptText: currentTarget.value,\n        });\n    };\n\n    /**\n     * Click handler for transcript\n     *\n     * @private\n     * @return {void}\n     */\n    onClick = (index: number): void => {\n        const {\n            card: { entries },\n        }: Props = this.props;\n        const { isEditingIndex }: State = this.state;\n        if (typeof isEditingIndex === 'number') {\n            this.setState({\n                isEditingIndex: index,\n                newTranscriptText: entries[index].text,\n            });\n        } else {\n            this.previewSegment(index);\n        }\n    };\n\n    /**\n     * Copies the transcript.\n     * Also animates the copy button.\n     *\n     * @private\n     * @return {void}\n     */\n    copyTranscript = () => {\n        const {\n            card: { entries },\n        }: Props = this.props;\n        const copiedClass = 'be-transcript-copied';\n        copy(entries.reduce(this.transcriptReducer, ''));\n\n        // Animate the button by adding a class\n        if (this.copyBtn) {\n            this.copyBtn.classList.add(copiedClass);\n        }\n\n        // Remove the animation class\n        setTimeout(() => {\n            if (this.copyBtn) {\n                this.copyBtn.classList.remove(copiedClass);\n            }\n        }, 1000);\n    };\n\n    /**\n     * Copy button reference\n     *\n     * @private\n     * @return {void}\n     */\n    copyBtnRef = (btn: HTMLButtonElement): void => {\n        this.copyBtn = btn;\n    };\n\n    /**\n     * Toggles transcript exapand and collapse\n     *\n     * @private\n     * @return {void}\n     */\n    toggleExpandCollapse = (): void => {\n        this.setState(prevState => ({\n            isCollapsed: !prevState.isCollapsed,\n        }));\n    };\n\n    /**\n     * Renders the transcript\n     *\n     * @private\n     * @return {Object}\n     */\n    render() {\n        const {\n            card: { entries },\n            isEditable,\n        }: Props = this.props;\n        const { isEditingIndex, isCollapsed, isLoading }: State = this.state;\n        const hasEntries = entries.length > 0;\n        const hasManyEntries = entries.length > 5;\n        const isEditing = typeof isEditingIndex === 'number';\n        const editBtnClassName = classNames('be-transcript-edit', {\n            'be-transcript-is-editing': isEditing,\n        });\n        const contentClassName = classNames({\n            'be-transcript-content-collapsed': isCollapsed,\n        });\n        const expandCollapseMessage = isCollapsed ? messages.expand : messages.collapse;\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-transcript\" isLoading={isLoading}>\n                {hasEntries && !isLoading && (\n                    <div className=\"be-transcript-actions\">\n                        <Tooltip text={<FormattedMessage {...messages.copy} />}>\n                            <PlainButton\n                                className=\"be-transcript-copy\"\n                                data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.COPY}\n                                getDOMRef={this.copyBtnRef}\n                                onClick={this.copyTranscript}\n                                type=\"button\"\n                            >\n                                <IconCopy color={bdlGray50} />\n                            </PlainButton>\n                        </Tooltip>\n                        {hasManyEntries && (\n                            <Tooltip text={<FormattedMessage {...expandCollapseMessage} />}>\n                                <PlainButton\n                                    className=\"be-transcript-expand\"\n                                    data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EXPAND}\n                                    onClick={this.toggleExpandCollapse}\n                                    type=\"button\"\n                                >\n                                    {isCollapsed ? (\n                                        <IconExpand color={bdlGray50} />\n                                    ) : (\n                                        <IconCollapse color={bdlGray50} />\n                                    )}\n                                </PlainButton>\n                            </Tooltip>\n                        )}\n                        {isEditable && (\n                            <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                                <PlainButton\n                                    className={editBtnClassName}\n                                    data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EDIT}\n                                    onClick={this.toggleIsEditing}\n                                    type=\"button\"\n                                >\n                                    <IconEdit />\n                                </PlainButton>\n                            </Tooltip>\n                        )}\n                    </div>\n                )}\n                {isEditing ? (\n                    <div className=\"be-transcript-edit-message\">\n                        <FormattedMessage {...messages.transcriptEdit} />\n                    </div>\n                ) : null}\n                {hasEntries ? (\n                    <div className={contentClassName}>{entries.map(this.transcriptMapper)}</div>\n                ) : (\n                    <FormattedMessage {...messages.skillNoInfoFoundError} />\n                )}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Transcript;\n"]},"metadata":{},"sourceType":"module"}