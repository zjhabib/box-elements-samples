{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport TetherComponent from 'react-tether';\nimport uniqueId from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport { KEYS } from '../../constants';\nimport './DropdownMenu.scss';\nvar DropdownMenu = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownMenu, _React$Component);\n  function DropdownMenu() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, DropdownMenu);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"menuID\", uniqueId('menu'));\n    _defineProperty(_assertThisInitialized(_this), \"menuButtonID\", uniqueId('menubutton'));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      initialFocusIndex: null,\n      isOpen: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openMenuAndSetFocusIndex\", function (initialFocusIndex) {\n      _this.setState({\n        initialFocusIndex: initialFocusIndex,\n        isOpen: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"closeMenu\", function () {\n      _this.setState({\n        isOpen: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"focusButton\", function () {\n      // @NOTE: This breaks encapsulation a bit, but the only other way is passing ref functions to unknown children components\n      var menuButtonEl = document.getElementById(_this.menuButtonID);\n      if (menuButtonEl) {\n        menuButtonEl.focus();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleButtonClick\", function (event) {\n      var isOpen = _this.state.isOpen;\n      event.stopPropagation();\n      event.preventDefault();\n      if (isOpen) {\n        _this.closeMenu();\n      } else {\n        _this.openMenuAndSetFocusIndex(null);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleButtonKeyDown\", function (event) {\n      var isOpen = _this.state.isOpen;\n      switch (event.key) {\n        case KEYS.space:\n        case KEYS.enter:\n        case KEYS.arrowDown:\n          event.stopPropagation();\n          event.preventDefault();\n          _this.openMenuAndSetFocusIndex(0);\n          break;\n        case KEYS.arrowUp:\n          event.stopPropagation();\n          event.preventDefault();\n          _this.openMenuAndSetFocusIndex(-1);\n          break;\n        case KEYS.escape:\n          if (isOpen) {\n            event.stopPropagation();\n          }\n          event.preventDefault();\n          _this.closeMenu();\n          break;\n        default:\n          break;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleMenuClose\", function (isKeyboardEvent, event) {\n      var _this$props$onMenuClo = _this.props.onMenuClose,\n        onMenuClose = _this$props$onMenuClo === void 0 ? noop : _this$props$onMenuClo;\n      _this.closeMenu();\n      _this.focusButton();\n      onMenuClose(event);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentClick\", function (event) {\n      var menuEl = document.getElementById(_this.menuID);\n      var menuButtonEl = document.getElementById(_this.menuButtonID); // Some DOM magic to get global click handlers to close menu when not interacting with menu or associated button\n\n      if (menuEl && menuButtonEl && event.target instanceof Node && !menuEl.contains(event.target) && !menuButtonEl.contains(event.target)) {\n        var _this$props$onMenuClo2 = _this.props.onMenuClose,\n          onMenuClose = _this$props$onMenuClo2 === void 0 ? noop : _this$props$onMenuClo2;\n        _this.closeMenu();\n        onMenuClose(event);\n      }\n    });\n    return _this;\n  }\n  _createClass(DropdownMenu, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var useBubble = this.props.useBubble;\n      if (!prevState.isOpen && this.state.isOpen) {\n        // When menu is being opened\n        document.addEventListener('click', this.handleDocumentClick, !useBubble);\n        document.addEventListener('contextmenu', this.handleDocumentClick, !useBubble);\n        var onMenuOpen = this.props.onMenuOpen;\n        if (onMenuOpen) {\n          onMenuOpen();\n        }\n      } else if (prevState.isOpen && !this.state.isOpen) {\n        // When menu is being closed\n        document.removeEventListener('contextmenu', this.handleDocumentClick, !useBubble);\n        document.removeEventListener('click', this.handleDocumentClick, !useBubble);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var useBubble = this.props.useBubble;\n      if (this.state.isOpen) {\n        // Clean-up global click handlers\n        document.removeEventListener('contextmenu', this.handleDocumentClick, !useBubble);\n        document.removeEventListener('click', this.handleDocumentClick, !useBubble);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        bodyElement = _this$props.bodyElement,\n        children = _this$props.children,\n        isRightAligned = _this$props.isRightAligned,\n        constrainToScrollParent = _this$props.constrainToScrollParent,\n        constrainToWindow = _this$props.constrainToWindow,\n        className = _this$props.className;\n      var _this$state = this.state,\n        isOpen = _this$state.isOpen,\n        initialFocusIndex = _this$state.initialFocusIndex;\n      var elements = React.Children.toArray(children);\n      if (elements.length !== 2) {\n        throw new Error('DropdownMenu must have exactly two children: A button component and a <Menu>');\n      }\n      var menuButton = elements[0];\n      var menu = elements[1];\n      var menuButtonProps = {\n        id: this.menuButtonID,\n        key: this.menuButtonID,\n        onClick: this.handleButtonClick,\n        // NOTE: Overrides button's handler\n        onKeyDown: this.handleButtonKeyDown,\n        // NOTE: Overrides button's handler\n        'aria-haspopup': 'true',\n        'aria-expanded': isOpen ? 'true' : 'false'\n      }; // Add this only when its open, otherwise the menuID element isn't rendered\n\n      if (isOpen) {\n        menuButtonProps['aria-controls'] = this.menuID;\n      }\n      var menuProps = {\n        id: this.menuID,\n        key: this.menuID,\n        initialFocusIndex: initialFocusIndex,\n        onClose: this.handleMenuClose,\n        'aria-labelledby': this.menuButtonID\n      };\n      var attachment = 'top left';\n      var targetAttachment = 'bottom left';\n      if (isRightAligned) {\n        attachment = 'top right';\n        targetAttachment = 'bottom right';\n      }\n      var constraints = [];\n      if (constrainToScrollParent) {\n        constraints.push({\n          to: 'scrollParent',\n          attachment: 'together'\n        });\n      }\n      if (constrainToWindow) {\n        constraints.push({\n          to: 'window',\n          attachment: 'together'\n        });\n      }\n      var bodyEl = bodyElement instanceof HTMLElement ? bodyElement : document.body;\n      return React.createElement(TetherComponent, {\n        attachment: attachment,\n        bodyElement: bodyEl,\n        className: className,\n        classPrefix: \"dropdown-menu\",\n        constraints: constraints,\n        enabled: isOpen,\n        targetAttachment: targetAttachment\n      }, React.cloneElement(menuButton, menuButtonProps), isOpen ? React.cloneElement(menu, menuProps) : null);\n    }\n  }]);\n  return DropdownMenu;\n}(React.Component);\n_defineProperty(DropdownMenu, \"defaultProps\", {\n  constrainToScrollParent: false,\n  constrainToWindow: false,\n  isRightAligned: false\n});\nexport default DropdownMenu;","map":{"version":3,"sources":["../../../src/components/dropdown-menu/DropdownMenu.js"],"names":["React","TetherComponent","uniqueId","noop","KEYS","DropdownMenu","Component","constrainToScrollParent","constrainToWindow","isRightAligned","initialFocusIndex","isOpen","prevProps","prevState","useBubble","props","state","document","addEventListener","handleDocumentClick","onMenuOpen","removeEventListener","setState","menuButtonEl","getElementById","menuButtonID","focus","event","stopPropagation","preventDefault","closeMenu","openMenuAndSetFocusIndex","key","space","enter","arrowDown","arrowUp","escape","isKeyboardEvent","onMenuClose","focusButton","menuEl","menuID","target","Node","contains","bodyElement","children","className","elements","Children","toArray","length","Error","menuButton","menu","menuButtonProps","id","onClick","handleButtonClick","onKeyDown","handleButtonKeyDown","menuProps","onClose","handleMenuClose","attachment","targetAttachment","constraints","push","to","bodyEl","HTMLElement","body","cloneElement"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport TetherComponent from 'react-tether';\nimport uniqueId from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\n\nimport { KEYS } from '../../constants';\nimport './DropdownMenu.scss';\n\ntype Props = {\n    bodyElement?: HTMLElement,\n    children: React.Node,\n    /** Forces menu to render within the scroll parent */\n    className?: string,\n    /** Forces menu to render within the visible window */\n    constrainToScrollParent: boolean,\n    /** Right aligns menu to button */\n    constrainToWindow: boolean,\n    /** Function called when menu is opened */\n    isRightAligned: boolean,\n    /** Handler for dropdown menu close events */\n    onMenuClose?: (event: SyntheticEvent<> | MouseEvent) => void,\n    /** Handler for dropdown menu open events */\n    onMenuOpen?: () => void,\n    /** Set true to close dropdown menu on event bubble instead of event capture */\n    useBubble?: boolean,\n};\n\ntype State = {\n    initialFocusIndex: ?number,\n    isOpen: boolean,\n};\n\nclass DropdownMenu extends React.Component<Props, State> {\n    static defaultProps = {\n        constrainToScrollParent: false,\n        constrainToWindow: false,\n        isRightAligned: false,\n    };\n\n    menuID = uniqueId('menu');\n\n    menuButtonID = uniqueId('menubutton');\n\n    state = {\n        initialFocusIndex: null,\n        isOpen: false,\n    };\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        const { useBubble } = this.props;\n        if (!prevState.isOpen && this.state.isOpen) {\n            // When menu is being opened\n            document.addEventListener('click', this.handleDocumentClick, !useBubble);\n            document.addEventListener('contextmenu', this.handleDocumentClick, !useBubble);\n\n            const { onMenuOpen } = this.props;\n            if (onMenuOpen) {\n                onMenuOpen();\n            }\n        } else if (prevState.isOpen && !this.state.isOpen) {\n            // When menu is being closed\n            document.removeEventListener('contextmenu', this.handleDocumentClick, !useBubble);\n            document.removeEventListener('click', this.handleDocumentClick, !useBubble);\n        }\n    }\n\n    componentWillUnmount() {\n        const { useBubble } = this.props;\n        if (this.state.isOpen) {\n            // Clean-up global click handlers\n            document.removeEventListener('contextmenu', this.handleDocumentClick, !useBubble);\n            document.removeEventListener('click', this.handleDocumentClick, !useBubble);\n        }\n    }\n\n    menuID: string;\n\n    menuButtonID: string;\n\n    openMenuAndSetFocusIndex = (initialFocusIndex: ?number) => {\n        this.setState({\n            initialFocusIndex,\n            isOpen: true,\n        });\n    };\n\n    closeMenu = () => {\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    focusButton = () => {\n        // @NOTE: This breaks encapsulation a bit, but the only other way is passing ref functions to unknown children components\n        const menuButtonEl = document.getElementById(this.menuButtonID);\n        if (menuButtonEl) {\n            menuButtonEl.focus();\n        }\n    };\n\n    handleButtonClick = (event: SyntheticEvent<>) => {\n        const { isOpen } = this.state;\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (isOpen) {\n            this.closeMenu();\n        } else {\n            this.openMenuAndSetFocusIndex(null);\n        }\n    };\n\n    handleButtonKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { isOpen } = this.state;\n\n        switch (event.key) {\n            case KEYS.space:\n            case KEYS.enter:\n            case KEYS.arrowDown:\n                event.stopPropagation();\n                event.preventDefault();\n\n                this.openMenuAndSetFocusIndex(0);\n                break;\n\n            case KEYS.arrowUp:\n                event.stopPropagation();\n                event.preventDefault();\n\n                this.openMenuAndSetFocusIndex(-1);\n                break;\n\n            case KEYS.escape:\n                if (isOpen) {\n                    event.stopPropagation();\n                }\n\n                event.preventDefault();\n                this.closeMenu();\n                break;\n\n            default:\n                break;\n        }\n    };\n\n    handleMenuClose = (isKeyboardEvent: boolean, event: SyntheticEvent<> | MouseEvent) => {\n        const { onMenuClose = noop } = this.props;\n        this.closeMenu();\n        this.focusButton();\n        onMenuClose(event);\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const menuEl = document.getElementById(this.menuID);\n        const menuButtonEl = document.getElementById(this.menuButtonID);\n\n        // Some DOM magic to get global click handlers to close menu when not interacting with menu or associated button\n        if (\n            menuEl &&\n            menuButtonEl &&\n            event.target instanceof Node &&\n            !menuEl.contains(event.target) &&\n            !menuButtonEl.contains(event.target)\n        ) {\n            const { onMenuClose = noop } = this.props;\n            this.closeMenu();\n            onMenuClose(event);\n        }\n    };\n\n    render() {\n        const {\n            bodyElement,\n            children,\n            isRightAligned,\n            constrainToScrollParent,\n            constrainToWindow,\n            className,\n        } = this.props;\n        const { isOpen, initialFocusIndex } = this.state;\n\n        const elements = React.Children.toArray(children);\n\n        if (elements.length !== 2) {\n            throw new Error('DropdownMenu must have exactly two children: A button component and a <Menu>');\n        }\n\n        const menuButton = elements[0];\n        const menu = elements[1];\n\n        const menuButtonProps: Object = {\n            id: this.menuButtonID,\n            key: this.menuButtonID,\n            onClick: this.handleButtonClick, // NOTE: Overrides button's handler\n            onKeyDown: this.handleButtonKeyDown, // NOTE: Overrides button's handler\n            'aria-haspopup': 'true',\n            'aria-expanded': isOpen ? 'true' : 'false',\n        };\n\n        // Add this only when its open, otherwise the menuID element isn't rendered\n        if (isOpen) {\n            menuButtonProps['aria-controls'] = this.menuID;\n        }\n\n        const menuProps = {\n            id: this.menuID,\n            key: this.menuID,\n            initialFocusIndex,\n            onClose: this.handleMenuClose,\n            'aria-labelledby': this.menuButtonID,\n        };\n\n        let attachment = 'top left';\n        let targetAttachment = 'bottom left';\n\n        if (isRightAligned) {\n            attachment = 'top right';\n            targetAttachment = 'bottom right';\n        }\n\n        const constraints = [];\n\n        if (constrainToScrollParent) {\n            constraints.push({\n                to: 'scrollParent',\n                attachment: 'together',\n            });\n        }\n\n        if (constrainToWindow) {\n            constraints.push({\n                to: 'window',\n                attachment: 'together',\n            });\n        }\n\n        const bodyEl = bodyElement instanceof HTMLElement ? bodyElement : document.body;\n\n        return (\n            <TetherComponent\n                attachment={attachment}\n                bodyElement={bodyEl}\n                className={className}\n                classPrefix=\"dropdown-menu\"\n                constraints={constraints}\n                enabled={isOpen}\n                targetAttachment={targetAttachment}\n            >\n                {React.cloneElement(menuButton, menuButtonProps)}\n                {isOpen ? React.cloneElement(menu, menuProps) : null}\n            </TetherComponent>\n        );\n    }\n}\n\nexport default DropdownMenu;\n"]},"metadata":{},"sourceType":"module"}