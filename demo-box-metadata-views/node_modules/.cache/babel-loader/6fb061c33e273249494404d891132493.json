{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Component for Approval comment form\n */\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Avatar from '../Avatar';\nimport CommentFormControls from './CommentFormControls';\nimport DraftJSMentionSelector, { createMentionSelectorState, getFormattedCommentText } from '../../../../components/form-elements/draft-js-mention-selector';\nimport Form from '../../../../components/form-elements/form/Form';\nimport Media from '../../../../components/media';\nimport messages from './messages';\nimport './CommentForm.scss';\nvar CommentForm = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CommentForm, _React$Component);\n  function CommentForm() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, CommentForm);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CommentForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      commentEditorState: createMentionSelectorState(_this.props.tagged_message)\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onFormValidSubmitHandler\", function () {\n      var _this$props = _this.props,\n        _this$props$createCom = _this$props.createComment,\n        createComment = _this$props$createCom === void 0 ? noop : _this$props$createCom,\n        _this$props$updateCom = _this$props.updateComment,\n        updateComment = _this$props$updateCom === void 0 ? noop : _this$props$updateCom,\n        onSubmit = _this$props.onSubmit,\n        entityId = _this$props.entityId;\n      var _this$getFormattedCom = _this.getFormattedCommentText(),\n        text = _this$getFormattedCom.text,\n        hasMention = _this$getFormattedCom.hasMention;\n      if (!text) {\n        return;\n      }\n      if (entityId) {\n        updateComment({\n          id: entityId,\n          text: text,\n          hasMention: hasMention\n        });\n      } else {\n        createComment({\n          text: text,\n          hasMention: hasMention\n        });\n      }\n      if (onSubmit) {\n        onSubmit();\n      }\n      _this.setState({\n        commentEditorState: createMentionSelectorState()\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onMentionSelectorChangeHandler\", function (nextEditorState) {\n      return _this.setState({\n        commentEditorState: nextEditorState\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getFormattedCommentText\", function () {\n      var commentEditorState = _this.state.commentEditorState;\n      return getFormattedCommentText(commentEditorState);\n    });\n    return _this;\n  }\n  _createClass(CommentForm, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var prevIsOpen = _ref.isOpen;\n      var isOpen = this.props.isOpen;\n      if (isOpen !== prevIsOpen && !isOpen) {\n        this.setState({\n          commentEditorState: createMentionSelectorState()\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        className = _this$props2.className,\n        getMentionWithQuery = _this$props2.getMentionWithQuery,\n        formatMessage = _this$props2.intl.formatMessage,\n        isDisabled = _this$props2.isDisabled,\n        isOpen = _this$props2.isOpen,\n        _this$props2$mentionS = _this$props2.mentionSelectorContacts,\n        mentionSelectorContacts = _this$props2$mentionS === void 0 ? [] : _this$props2$mentionS,\n        onCancel = _this$props2.onCancel,\n        onFocus = _this$props2.onFocus,\n        user = _this$props2.user,\n        isEditing = _this$props2.isEditing,\n        tagged_message = _this$props2.tagged_message,\n        getAvatarUrl = _this$props2.getAvatarUrl,\n        _this$props2$showTip = _this$props2.showTip,\n        showTip = _this$props2$showTip === void 0 ? true : _this$props2$showTip;\n      var commentEditorState = this.state.commentEditorState;\n      var inputContainerClassNames = classNames('bcs-CommentForm', className, {\n        'bcs-is-open': isOpen\n      });\n      return React.createElement(Media, {\n        className: inputContainerClassNames\n      }, !isEditing && React.createElement(Media.Figure, {\n        className: \"bcs-CommentForm-avatar\"\n      }, React.createElement(Avatar, {\n        getAvatarUrl: getAvatarUrl,\n        user: user\n      })), React.createElement(Media.Body, {\n        className: \"bcs-CommentForm-body\",\n        \"data-testid\": \"bcs-CommentForm-body\"\n      }, React.createElement(Form, {\n        onValidSubmit: this.onFormValidSubmitHandler\n      }, React.createElement(DraftJSMentionSelector, {\n        className: \"bcs-CommentForm-input\",\n        contacts: isOpen ? mentionSelectorContacts : [],\n        editorState: commentEditorState,\n        hideLabel: true,\n        isDisabled: isDisabled,\n        isRequired: isOpen,\n        name: \"commentText\",\n        label: formatMessage(messages.commentLabel),\n        onChange: this.onMentionSelectorChangeHandler,\n        onFocus: onFocus,\n        onMention: getMentionWithQuery,\n        placeholder: tagged_message ? undefined : formatMessage(messages.commentWrite),\n        validateOnBlur: false\n      }), showTip && React.createElement(\"aside\", {\n        className: \"bcs-CommentForm-tip\"\n      }, React.createElement(FormattedMessage, messages.atMentionTip)), isOpen && React.createElement(CommentFormControls, {\n        onCancel: onCancel\n      }))));\n    }\n  }]);\n  return CommentForm;\n}(React.Component); // For testing only\n\n_defineProperty(CommentForm, \"defaultProps\", {\n  isOpen: false\n});\nexport { CommentForm as CommentFormUnwrapped };\nexport default injectIntl(CommentForm);","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/comment-form/CommentForm.js"],"names":["React","noop","classNames","FormattedMessage","injectIntl","Avatar","CommentFormControls","DraftJSMentionSelector","createMentionSelectorState","getFormattedCommentText","Form","Media","messages","CommentForm","Component","isOpen","commentEditorState","props","tagged_message","prevIsOpen","setState","createComment","updateComment","onSubmit","entityId","text","hasMention","id","nextEditorState","state","className","getMentionWithQuery","intl","formatMessage","isDisabled","mentionSelectorContacts","onCancel","onFocus","user","isEditing","getAvatarUrl","showTip","inputContainerClassNames","onFormValidSubmitHandler","commentLabel","onMentionSelectorChangeHandler","undefined","commentWrite","atMentionTip","CommentFormUnwrapped"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Component for Approval comment form\n */\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport Avatar from '../Avatar';\nimport CommentFormControls from './CommentFormControls';\nimport DraftJSMentionSelector, {\n    createMentionSelectorState,\n    getFormattedCommentText,\n} from '../../../../components/form-elements/draft-js-mention-selector';\nimport Form from '../../../../components/form-elements/form/Form';\nimport Media from '../../../../components/media';\nimport messages from './messages';\nimport type { GetAvatarUrlCallback } from '../../../common/flowTypes';\nimport type { SelectorItems, User } from '../../../../common/types/core';\n\nimport './CommentForm.scss';\n\ntype Props = {\n    className: string,\n    createComment?: Function,\n    entityId?: string,\n    getAvatarUrl: GetAvatarUrlCallback,\n    getMentionWithQuery?: Function,\n    isDisabled?: boolean,\n    isEditing?: boolean,\n    isOpen: boolean,\n    mentionSelectorContacts?: SelectorItems<>,\n    onCancel: Function,\n    onFocus: Function,\n    onSubmit?: Function,\n    showTip?: boolean,\n    tagged_message?: string,\n    updateComment?: Function,\n    user: User,\n} & InjectIntlProvidedProps;\n\ntype State = {\n    commentEditorState: any,\n};\n\nclass CommentForm extends React.Component<Props, State> {\n    static defaultProps = {\n        isOpen: false,\n    };\n\n    state = {\n        commentEditorState: createMentionSelectorState(this.props.tagged_message),\n    };\n\n    componentDidUpdate({ isOpen: prevIsOpen }: Props): void {\n        const { isOpen } = this.props;\n\n        if (isOpen !== prevIsOpen && !isOpen) {\n            this.setState({\n                commentEditorState: createMentionSelectorState(),\n            });\n        }\n    }\n\n    onFormValidSubmitHandler = (): void => {\n        const { createComment = noop, updateComment = noop, onSubmit, entityId } = this.props;\n\n        const { text, hasMention } = this.getFormattedCommentText();\n\n        if (!text) {\n            return;\n        }\n\n        if (entityId) {\n            updateComment({ id: entityId, text, hasMention });\n        } else {\n            createComment({ text, hasMention });\n        }\n\n        if (onSubmit) {\n            onSubmit();\n        }\n\n        this.setState({\n            commentEditorState: createMentionSelectorState(),\n        });\n    };\n\n    onMentionSelectorChangeHandler = (nextEditorState: any): void =>\n        this.setState({ commentEditorState: nextEditorState });\n\n    /**\n     * Formats the comment editor's text such that it will be accepted by the server.\n     *\n     * @returns {Object}\n     */\n    getFormattedCommentText = (): { hasMention: boolean, text: string } => {\n        const { commentEditorState } = this.state;\n\n        return getFormattedCommentText(commentEditorState);\n    };\n\n    render(): React.Node {\n        const {\n            className,\n            getMentionWithQuery,\n            intl: { formatMessage },\n            isDisabled,\n            isOpen,\n            mentionSelectorContacts = [],\n            onCancel,\n            onFocus,\n            user,\n            isEditing,\n            tagged_message,\n            getAvatarUrl,\n            showTip = true,\n        } = this.props;\n        const { commentEditorState } = this.state;\n        const inputContainerClassNames = classNames('bcs-CommentForm', className, {\n            'bcs-is-open': isOpen,\n        });\n\n        return (\n            <Media className={inputContainerClassNames}>\n                {!isEditing && (\n                    <Media.Figure className=\"bcs-CommentForm-avatar\">\n                        <Avatar getAvatarUrl={getAvatarUrl} user={user} />\n                    </Media.Figure>\n                )}\n\n                <Media.Body className=\"bcs-CommentForm-body\" data-testid=\"bcs-CommentForm-body\">\n                    <Form onValidSubmit={this.onFormValidSubmitHandler}>\n                        <DraftJSMentionSelector\n                            className=\"bcs-CommentForm-input\"\n                            contacts={isOpen ? mentionSelectorContacts : []}\n                            editorState={commentEditorState}\n                            hideLabel\n                            isDisabled={isDisabled}\n                            isRequired={isOpen}\n                            name=\"commentText\"\n                            label={formatMessage(messages.commentLabel)}\n                            onChange={this.onMentionSelectorChangeHandler}\n                            onFocus={onFocus}\n                            onMention={getMentionWithQuery}\n                            placeholder={tagged_message ? undefined : formatMessage(messages.commentWrite)}\n                            validateOnBlur={false}\n                        />\n                        {showTip && (\n                            <aside className=\"bcs-CommentForm-tip\">\n                                <FormattedMessage {...messages.atMentionTip} />\n                            </aside>\n                        )}\n\n                        {isOpen && <CommentFormControls onCancel={onCancel} />}\n                    </Form>\n                </Media.Body>\n            </Media>\n        );\n    }\n}\n\n// For testing only\nexport { CommentForm as CommentFormUnwrapped };\nexport default injectIntl(CommentForm);\n"]},"metadata":{},"sourceType":"module"}