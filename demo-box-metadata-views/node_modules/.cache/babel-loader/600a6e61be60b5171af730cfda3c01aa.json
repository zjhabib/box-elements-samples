{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n/**\n * \n * @file Util for formatting tagged messages\n */\nimport * as React from 'react';\nimport { Link } from '../../../../components/link';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport UserLink from '../common/user-link'; // this regex matches one of the following regular expressions:\n// mentions: ([@＠﹫]\\[[0-9]+:[^\\]]+])\n// urls: (?:\\b)((?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(:\\d+)?(\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?)\n// NOTE: There are useless escapes in the regex below, should probably remove them when safe\n// eslint-disable-next-line\n\nvar splitRegex = /((?:[@＠﹫]\\[[0-9]+:[^\\]]+])|(?:\\b(?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(?::\\d+)?(?:\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?))/gim;\n/**\n * Formats a message a string and replaces the following:\n * - all occurrence of mention patterns with a UserLink component\n * - all occurrence of urls with a Link component\n * Ex mention format: @[123:Hello World]\n * @param {String} tagged_message The message string to format\n * @param {String} itemID The id of the tagged message\n * @param {Boolean} shouldReturnString The boolean value whether it should return string\n * @param {Function} [getUserProfileUrl] The method to generate a user profile url\n * @returns {String|React.Node}\n */\n\nvar formatTaggedMessage = function formatTaggedMessage(tagged_message, itemID, shouldReturnString, getUserProfileUrl) {\n  var contentItems = tagged_message.split(splitRegex).map(function (text, contentIndex) {\n    var contentKey = \"\".concat(contentIndex, \"-\").concat(itemID); // attempt mention match\n\n    var mentionMatch = text.match(/([@＠﹫])\\[([0-9]+):([^\\]]+)]/i);\n    if (mentionMatch) {\n      var _mentionMatch = _slicedToArray(mentionMatch, 4),\n        trigger = _mentionMatch[1],\n        id = _mentionMatch[2],\n        name = _mentionMatch[3];\n      if (shouldReturnString) {\n        return \"\".concat(trigger).concat(name);\n      }\n      return React.createElement(UserLink, {\n        key: contentKey,\n        className: \"bcs-comment-mention\",\n        \"data-resin-target\": ACTIVITY_TARGETS.MENTION,\n        getUserProfileUrl: getUserProfileUrl,\n        id: id,\n        name: \"\".concat(trigger).concat(name)\n      });\n    }\n    if (!shouldReturnString) {\n      // attempt url match\n      // NOTE: There are useless escapes in the regex below, should probably remove them when safe\n      var urlMatch = text.match(\n      // eslint-disable-next-line no-useless-escape\n      /((?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(?::\\d+)?(?:\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?)/i);\n      if (urlMatch) {\n        var _urlMatch = _slicedToArray(urlMatch, 2),\n          url = _urlMatch[1];\n        return React.createElement(Link, {\n          key: contentKey,\n          href: url\n        }, url);\n      }\n    }\n    return text;\n  });\n  return shouldReturnString ? contentItems.join('') : contentItems;\n};\nexport default formatTaggedMessage;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/utils/formatTaggedMessage.js"],"names":["React","Link","ACTIVITY_TARGETS","UserLink","splitRegex","formatTaggedMessage","tagged_message","itemID","shouldReturnString","getUserProfileUrl","contentItems","split","map","text","contentIndex","contentKey","mentionMatch","match","trigger","id","name","MENTION","urlMatch","url","join"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,QAAqB,6BAArB;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,OAAOC,QAAP,MAAqB,qBAArB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAU,GAAG,4HAAnB;AAEA;;;;;;;;;;;;AAWA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACxBC,cADwB,EAExBC,MAFwB,EAGxBC,kBAHwB,EAIxBC,iBAJwB,EAKF;EACtB,IAAMC,YAAY,GAAG,cAAc,CAACC,KAAf,CAAqBP,UAArB,CAAA,CAAiCQ,GAAjC,CAAqC,UAACC,IAAD,EAAeC,YAAf,EAAwC;IAC9F,IAAMC,UAAU,GAAA,EAAA,CAAA,MAAA,CAAMD,YAAN,EAAA,GAAA,CAAA,CAAA,MAAA,CAAsBP,MAAtB,CAAhB,CAD8F,CAE9F;;IACA,IAAMS,YAAY,GAAGH,IAAI,CAACI,KAALJ,CAAW,8BAAXA,CAArB;IACA,IAAIG,YAAJ,EAAkB;MAAA,IAAA,aAAA,GAAA,cAAA,CACgBA,YADhB,EAAA,CAAA,CAAA;QACLE,OADK,GAAA,aAAA,CAAA,CAAA,CAAA;QACIC,EADJ,GAAA,aAAA,CAAA,CAAA,CAAA;QACQC,IADR,GAAA,aAAA,CAAA,CAAA,CAAA;MAEd,IAAIZ,kBAAJ,EAAwB;QACpB,OAAA,EAAA,CAAA,MAAA,CAAUU,OAAV,CAAA,CAAA,MAAA,CAAoBE,IAApB,CAAA;MACH;MAED,OACI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;QACI,GAAG,EAAEL,UADT;QAEI,SAAS,EAAC,qBAFd;QAGI,mBAAA,EAAmBb,gBAAgB,CAACmB,OAHxC;QAII,iBAAiB,EAAEZ,iBAJvB;QAKI,EAAE,EAAEU,EALR;QAMI,IAAI,EAAA,EAAA,CAAA,MAAA,CAAKD,OAAL,CAAA,CAAA,MAAA,CAAeE,IAAf;MANR,CAAA,CADJ;IAUH;IAED,IAAI,CAACZ,kBAAL,EAAyB;MACrB;MACA;MACA,IAAMc,QAAQ,GAAGT,IAAI,CAACI,KAALJ;MACb;MACA,0FAFaA,CAAjB;MAIA,IAAIS,QAAJ,EAAc;QAAA,IAAA,SAAA,GAAA,cAAA,CACMA,QADN,EAAA,CAAA,CAAA;UACDC,GADC,GAAA,SAAA,CAAA,CAAA,CAAA;QAEV,OACI,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;UAAM,GAAG,EAAER,UAAX;UAAuB,IAAI,EAAEQ;QAA7B,CAAA,EACKA,GADL,CADJ;MAKH;IACJ;IAED,OAAOV,IAAP;EACH,CAxCoB,CAArB;EA0CA,OAAOL,kBAAkB,GAAGE,YAAY,CAACc,IAAbd,CAAkB,EAAlBA,CAAH,GAA2BA,YAApD;AACH,CAjDD;AAmDA,eAAeL,mBAAf","sourcesContent":["/**\n * @flow\n * @file Util for formatting tagged messages\n */\n\nimport * as React from 'react';\nimport { Link } from '../../../../components/link';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport UserLink from '../common/user-link';\n\n// this regex matches one of the following regular expressions:\n// mentions: ([@＠﹫]\\[[0-9]+:[^\\]]+])\n// urls: (?:\\b)((?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(:\\d+)?(\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?)\n// NOTE: There are useless escapes in the regex below, should probably remove them when safe\n// eslint-disable-next-line\nconst splitRegex = /((?:[@＠﹫]\\[[0-9]+:[^\\]]+])|(?:\\b(?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(?::\\d+)?(?:\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?))/gim;\n\n/**\n * Formats a message a string and replaces the following:\n * - all occurrence of mention patterns with a UserLink component\n * - all occurrence of urls with a Link component\n * Ex mention format: @[123:Hello World]\n * @param {String} tagged_message The message string to format\n * @param {String} itemID The id of the tagged message\n * @param {Boolean} shouldReturnString The boolean value whether it should return string\n * @param {Function} [getUserProfileUrl] The method to generate a user profile url\n * @returns {String|React.Node}\n */\nconst formatTaggedMessage = (\n    tagged_message: string,\n    itemID: string,\n    shouldReturnString: boolean,\n    getUserProfileUrl?: Function,\n): React.Node | string => {\n    const contentItems = tagged_message.split(splitRegex).map((text: string, contentIndex: number) => {\n        const contentKey = `${contentIndex}-${itemID}`;\n        // attempt mention match\n        const mentionMatch = text.match(/([@＠﹫])\\[([0-9]+):([^\\]]+)]/i);\n        if (mentionMatch) {\n            const [, trigger, id, name] = mentionMatch;\n            if (shouldReturnString) {\n                return `${trigger}${name}`;\n            }\n\n            return (\n                <UserLink\n                    key={contentKey}\n                    className=\"bcs-comment-mention\"\n                    data-resin-target={ACTIVITY_TARGETS.MENTION}\n                    getUserProfileUrl={getUserProfileUrl}\n                    id={id}\n                    name={`${trigger}${name}`}\n                />\n            );\n        }\n\n        if (!shouldReturnString) {\n            // attempt url match\n            // NOTE: There are useless escapes in the regex below, should probably remove them when safe\n            const urlMatch = text.match(\n                // eslint-disable-next-line no-useless-escape\n                /((?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(?::\\d+)?(?:\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?)/i,\n            );\n            if (urlMatch) {\n                const [, url] = urlMatch;\n                return (\n                    <Link key={contentKey} href={url}>\n                        {url}\n                    </Link>\n                );\n            }\n        }\n\n        return text;\n    });\n\n    return shouldReturnString ? contentItems.join('') : contentItems;\n};\n\nexport default formatTaggedMessage;\n"]},"metadata":{},"sourceType":"module"}