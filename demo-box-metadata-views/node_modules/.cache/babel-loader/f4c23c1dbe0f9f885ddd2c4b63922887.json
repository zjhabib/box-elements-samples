{"ast":null,"code":"/**\n * \n * @file Function to flatten an item list\n * @author Box\n */\nimport { getBadItemError } from './error';\nimport { TYPE_FOLDER, TYPE_FILE, TYPE_WEBLINK } from '../constants';\n\n/**\n * Takes an item list and flattens it by moving\n * all item entries into the cache and replacing the list\n * entries with references to those items in the cache.\n * Web links are trated as files.\n *\n * @param {Array} list to flatten\n * @param {Folder} folderAPI api for files\n * @param {File} fileAPI api for files\n * @param {WebLink} weblinkAPI api for web links\n * @return {Array} list with items replaced with reference keys\n */\nexport default function (list, folderAPI, fileAPI, weblinkAPI) {\n  var items = [];\n  list.forEach(function (item) {\n    var id = item.id,\n      type = item.type;\n    if (!id || !type) {\n      throw getBadItemError();\n    }\n    var api;\n    switch (type) {\n      case TYPE_FOLDER:\n        api = folderAPI;\n        break;\n      case TYPE_FILE:\n        api = fileAPI;\n        break;\n      case TYPE_WEBLINK:\n        api = weblinkAPI;\n        break;\n      default:\n        throw new Error('Unknown Type!');\n    }\n    var cache = api.getCache();\n    var key = api.getCacheKey(id);\n    if (cache.has(key)) {\n      cache.merge(key, item);\n    } else {\n      cache.set(key, item);\n    }\n    items.push(key);\n  });\n  return items;\n}","map":{"version":3,"sources":["../../src/utils/flatten.js"],"names":["getBadItemError","TYPE_FOLDER","TYPE_FILE","TYPE_WEBLINK","list","folderAPI","fileAPI","weblinkAPI","items","forEach","item","id","type","api","Error","cache","getCache","key","getCacheKey","has","merge","set","push"],"mappings":"AAAA;;;;;AAMA,SAASA,eAAT,QAAgC,SAAhC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,YAAjC,QAAqD,cAArD;;AAIA;;;;;;;;;;;;AAYA,eAAe,UAASC,IAAT,EAA0BC,SAA1B,EAAgDC,OAAhD,EAAkEC,UAAlE,EAAoG;EAC/G,IAAMC,KAAe,GAAG,EAAxB;EACAJ,IAAI,CAACK,OAALL,CAAa,UAACM,IAAD,EAAmB;IAAA,IACpBC,EADoB,GACED,IADF,CACpBC,EADoB;MAChBC,IADgB,GACEF,IADF,CAChBE,IADgB;IAE5B,IAAI,CAACD,EAAD,IAAO,CAACC,IAAZ,EAAkB;MACd,MAAMZ,eAAe,CAAA,CAArB;IACH;IAED,IAAIa,GAAJ;IACA,QAAQD,IAAR;MACI,KAAKX,WAAL;QACIY,GAAG,GAAGR,SAANQ;QACA;MACJ,KAAKX,SAAL;QACIW,GAAG,GAAGP,OAANO;QACA;MACJ,KAAKV,YAAL;QACIU,GAAG,GAAGN,UAANM;QACA;MACJ;QACI,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;IAXR;IAcA,IAAMC,KAAe,GAAGF,GAAG,CAACG,QAAJH,CAAAA,CAAxB;IACA,IAAMI,GAAW,GAAGJ,GAAG,CAACK,WAAJL,CAAgBF,EAAhBE,CAApB;IAEA,IAAIE,KAAK,CAACI,GAANJ,CAAUE,GAAVF,CAAJ,EAAoB;MAChBA,KAAK,CAACK,KAANL,CAAYE,GAAZF,EAAiBL,IAAjBK,CAAAA;IACH,CAFD,MAEO;MACHA,KAAK,CAACM,GAANN,CAAUE,GAAVF,EAAeL,IAAfK,CAAAA;IACH;IAEDP,KAAK,CAACc,IAANd,CAAWS,GAAXT,CAAAA;EACH,CA/BDJ,CAAAA;EAgCA,OAAOI,KAAP;AACH","sourcesContent":["/**\n * @flow\n * @file Function to flatten an item list\n * @author Box\n */\n\nimport { getBadItemError } from './error';\nimport { TYPE_FOLDER, TYPE_FILE, TYPE_WEBLINK } from '../constants';\nimport type { BoxItem } from '../common/types/core';\nimport type APICache from './Cache';\n\n/**\n * Takes an item list and flattens it by moving\n * all item entries into the cache and replacing the list\n * entries with references to those items in the cache.\n * Web links are trated as files.\n *\n * @param {Array} list to flatten\n * @param {Folder} folderAPI api for files\n * @param {File} fileAPI api for files\n * @param {WebLink} weblinkAPI api for web links\n * @return {Array} list with items replaced with reference keys\n */\nexport default function(list: BoxItem[], folderAPI: FolderAPI, fileAPI: FileAPI, weblinkAPI: WebLinkAPI): string[] {\n    const items: string[] = [];\n    list.forEach((item: BoxItem) => {\n        const { id, type }: BoxItem = item;\n        if (!id || !type) {\n            throw getBadItemError();\n        }\n\n        let api;\n        switch (type) {\n            case TYPE_FOLDER:\n                api = folderAPI;\n                break;\n            case TYPE_FILE:\n                api = fileAPI;\n                break;\n            case TYPE_WEBLINK:\n                api = weblinkAPI;\n                break;\n            default:\n                throw new Error('Unknown Type!');\n        }\n\n        const cache: APICache = api.getCache();\n        const key: string = api.getCacheKey(id);\n\n        if (cache.has(key)) {\n            cache.merge(key, item);\n        } else {\n            cache.set(key, item);\n        }\n\n        items.push(key);\n    });\n    return items;\n}\n"]},"metadata":{},"sourceType":"module"}