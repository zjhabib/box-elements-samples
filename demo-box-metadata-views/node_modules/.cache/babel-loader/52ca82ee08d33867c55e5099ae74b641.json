{"ast":null,"code":"import * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport TextInput from '../../components/text-input';\nimport messages from './messages';\nimport './TextMetadataField.scss';\nvar TextMetadataField = function TextMetadataField(_ref) {\n  var dataKey = _ref.dataKey,\n    dataValue = _ref.dataValue,\n    displayName = _ref.displayName,\n    description = _ref.description,\n    error = _ref.error,\n    intl = _ref.intl,\n    _onChange = _ref.onChange,\n    onRemove = _ref.onRemove,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'text' : _ref$type;\n  var value = '';\n  if (typeof dataValue === 'number') {\n    value = dataValue;\n  } else if (dataValue) {\n    value = dataValue;\n  }\n  return React.createElement(TextInput, {\n    className: \"bdl-TextMetadataField\",\n    description: description,\n    error: error,\n    hideOptionalLabel: true,\n    label: displayName,\n    name: dataKey,\n    onChange: function onChange(event) {\n      var currentTarget = event.currentTarget;\n      if (currentTarget.value) {\n        _onChange(dataKey, currentTarget.value);\n      } else {\n        onRemove(dataKey);\n      }\n    },\n    placeholder: intl.formatMessage(messages.metadataFieldSetValue),\n    type: type,\n    value: value\n  });\n};\nexport { TextMetadataField as TextMetadataFieldBase };\nexport default injectIntl(TextMetadataField);","map":{"version":3,"sources":["../../../src/features/metadata-instance-fields/TextMetadataField.js"],"names":["React","injectIntl","TextInput","messages","TextMetadataField","dataKey","dataValue","displayName","description","error","intl","onChange","onRemove","type","value","event","currentTarget","formatMessage","metadataFieldSetValue","TextMetadataFieldBase"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,0BAAP;AAcA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EAUb;EAAA,IATTC,OASS,GAAA,IAAA,CATTA,OASS;IARTC,SAQS,GAAA,IAAA,CARTA,SAQS;IAPTC,WAOS,GAAA,IAAA,CAPTA,WAOS;IANTC,WAMS,GAAA,IAAA,CANTA,WAMS;IALTC,KAKS,GAAA,IAAA,CALTA,KAKS;IAJTC,IAIS,GAAA,IAAA,CAJTA,IAIS;IAHTC,SAGS,GAAA,IAAA,CAHTA,QAGS;IAFTC,QAES,GAAA,IAAA,CAFTA,QAES;IAAA,SAAA,GAAA,IAAA,CADTC,IACS;IADTA,IACS,GAAA,SAAA,KAAA,KAAA,CAAA,GADF,MACE,GAAA,SAAA;EACT,IAAIC,KAAK,GAAG,EAAZ;EAEA,IAAI,OAAOR,SAAP,KAAqB,QAAzB,EAAmC;IAC/BQ,KAAK,GAAGR,SAARQ;EACH,CAFD,MAEO,IAAIR,SAAJ,EAAe;IAClBQ,KAAK,GAAGR,SAARQ;EACH;EAED,OACI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;IACI,SAAS,EAAC,uBADd;IAEI,WAAW,EAAEN,WAFjB;IAGI,KAAK,EAAEC,KAHX;IAII,iBAAiB,EAAA,IAJrB;IAKI,KAAK,EAAEF,WALX;IAMI,IAAI,EAAEF,OANV;IAOI,QAAQ,EAAE,SAAA,QAAA,CAACU,KAAD,EAAqD;MAC3D,IAAMC,aAAa,GAAID,KAAK,CAACC,aAA7B;MACA,IAAIA,aAAa,CAACF,KAAlB,EAAyB;QACrBH,SAAQ,CAACN,OAAD,EAAUW,aAAa,CAACF,KAAxB,CAARH;MACH,CAFD,MAEO;QACHC,QAAQ,CAACP,OAAD,CAARO;MACH;IACJ,CAdL;IAeI,WAAW,EAAEF,IAAI,CAACO,aAALP,CAAmBP,QAAQ,CAACe,qBAA5BR,CAfjB;IAgBI,IAAI,EAAEG,IAhBV;IAiBI,KAAK,EAAEC;EAjBX,CAAA,CADJ;AAqBH,CAxCD;AA0CA,SAASV,iBAAiB,IAAIe,qBAA9B;AACA,eAAelB,UAAU,CAACG,iBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport TextInput from '../../components/text-input';\n\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './TextMetadataField.scss';\n\ntype Props = {\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    intl: any,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    type?: string,\n};\n\nconst TextMetadataField = ({\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    intl,\n    onChange,\n    onRemove,\n    type = 'text',\n}: Props) => {\n    let value = '';\n\n    if (typeof dataValue === 'number') {\n        value = dataValue;\n    } else if (dataValue) {\n        value = dataValue;\n    }\n\n    return (\n        <TextInput\n            className=\"bdl-TextMetadataField\"\n            description={description}\n            error={error}\n            hideOptionalLabel\n            label={displayName}\n            name={dataKey}\n            onChange={(event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n                const currentTarget = (event.currentTarget: HTMLInputElement);\n                if (currentTarget.value) {\n                    onChange(dataKey, currentTarget.value);\n                } else {\n                    onRemove(dataKey);\n                }\n            }}\n            placeholder={intl.formatMessage(messages.metadataFieldSetValue)}\n            type={type}\n            value={value}\n        />\n    );\n};\n\nexport { TextMetadataField as TextMetadataFieldBase };\nexport default injectIntl(TextMetadataField);\n"]},"metadata":{},"sourceType":"module"}