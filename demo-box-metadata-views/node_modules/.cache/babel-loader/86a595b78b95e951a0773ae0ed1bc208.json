{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nvar LinkBase = function LinkBase(_ref) {\n  var children = _ref.children,\n    _ref$href = _ref.href,\n    href = _ref$href === void 0 ? '#' : _ref$href,\n    linkRef = _ref.linkRef,\n    target = _ref.target,\n    rel = _ref.rel,\n    component = _ref.component,\n    refProp = _ref.refProp,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"href\", \"linkRef\", \"target\", \"rel\", \"component\", \"refProp\"]);\n\n  // Automatically append rel=\"noopener\" for external links\n  // (security fix) if no `rel` was passed\n  var linkRel = target === '_blank' && !rel ? 'noopener' : rel;\n  var LinkComponent = component || 'a';\n  var ref = _defineProperty({}, refProp || 'ref', linkRef);\n  return React.createElement(LinkComponent, _extends({\n    href: href,\n    rel: linkRel,\n    target: target\n  }, ref, rest), children);\n};\nexport default LinkBase;","map":{"version":3,"sources":["../../../src/components/link/LinkBase.tsx"],"names":["React","LinkBase","children","href","linkRef","target","rel","component","refProp","rest","linkRel","LinkComponent","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAaA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,IAAA,EAAgG;EAAA,IAA7FC,QAA6F,GAAA,IAAA,CAA7FA,QAA6F;IAAA,SAAA,GAAA,IAAA,CAAnFC,IAAmF;IAAnFA,IAAmF,GAAA,SAAA,KAAA,KAAA,CAAA,GAA5E,GAA4E,GAAA,SAAA;IAAvEC,OAAuE,GAAA,IAAA,CAAvEA,OAAuE;IAA9DC,MAA8D,GAAA,IAAA,CAA9DA,MAA8D;IAAtDC,GAAsD,GAAA,IAAA,CAAtDA,GAAsD;IAAjDC,SAAiD,GAAA,IAAA,CAAjDA,SAAiD;IAAtCC,OAAsC,GAAA,IAAA,CAAtCA,OAAsC;IAA1BC,IAA0B,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAAA,QAAA,EAAA,KAAA,EAAA,WAAA,EAAA,SAAA,CAAA,CAAA;;EAC7G;EACA;EACA,IAAMC,OAAO,GAAGL,MAAM,KAAK,QAAXA,IAAuB,CAACC,GAAxBD,GAA8B,UAA9BA,GAA2CC,GAA3D;EACA,IAAMK,aAAa,GAAGJ,SAAS,IAAI,GAAnC;EACA,IAAMK,GAAG,GAAA,eAAA,CAAA,CAAA,CAAA,EAAMJ,OAAO,IAAI,KAAjB,EAAyBJ,OAAzB,CAAT;EAEA,OACI,KAAA,CAAA,aAAA,CAAC,aAAD,EAAA,QAAA,CAAA;IAAe,IAAI,EAAED,IAArB;IAA2B,GAAG,EAAEO,OAAhC;IAAyC,MAAM,EAAEL;EAAjD,CAAA,EAA6DO,GAA7D,EAAsEH,IAAtE,CAAA,EACKP,QADL,CADJ;AAKH,CAZD;AAcA,eAAeD,QAAf","sourcesContent":["import * as React from 'react';\n\nexport interface LinkBaseProps {\n    children: React.ReactChild;\n    className?: string;\n    component?: React.ElementType;\n    href?: string;\n    linkRef?: Function;\n    refProp?: string;\n    rel?: string;\n    target?: string;\n}\n\nconst LinkBase = ({ children, href = '#', linkRef, target, rel, component, refProp, ...rest }: LinkBaseProps) => {\n    // Automatically append rel=\"noopener\" for external links\n    // (security fix) if no `rel` was passed\n    const linkRel = target === '_blank' && !rel ? 'noopener' : rel;\n    const LinkComponent = component || 'a';\n    const ref = { [refProp || 'ref']: linkRef };\n\n    return (\n        <LinkComponent href={href} rel={linkRel} target={target} {...ref} {...rest}>\n            {children}\n        </LinkComponent>\n    );\n};\n\nexport default LinkBase;\n"]},"metadata":{},"sourceType":"module"}