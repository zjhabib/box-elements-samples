{"ast":null,"code":"var _ACTION_MAP;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Version component\n */\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport IconInfoInverted from '../../../../icons/general/IconInfoInverted';\nimport messages from '../../../common/messages';\nimport PlainButton from '../../../../components/plain-button';\nimport selectors from '../../../common/selectors/version';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport { FILE_REQUEST_NAME, VERSION_UPLOAD_ACTION, VERSION_DELETE_ACTION, VERSION_PROMOTE_ACTION, VERSION_RESTORE_ACTION } from '../../../../constants';\nimport './Version.scss';\nvar ACTION_MAP = (_ACTION_MAP = {}, _defineProperty(_ACTION_MAP, VERSION_DELETE_ACTION, messages.versionDeleted), _defineProperty(_ACTION_MAP, VERSION_PROMOTE_ACTION, messages.versionPromoted), _defineProperty(_ACTION_MAP, VERSION_RESTORE_ACTION, messages.versionRestored), _defineProperty(_ACTION_MAP, VERSION_UPLOAD_ACTION, messages.versionUploaded), _ACTION_MAP);\nvar Version = function Version(props) {\n  // $FlowFixMe\n  var action = selectors.getVersionAction(props);\n  var id = props.id,\n    intl = props.intl,\n    onInfo = props.onInfo,\n    version_number = props.version_number,\n    version_promoted = props.version_promoted; // $FlowFixMe\n\n  var user = selectors.getVersionUser(props);\n  var name = user.name === FILE_REQUEST_NAME ? intl.formatMessage(messages.fileRequestDisplayName) : user.name;\n  return React.createElement(\"div\", {\n    className: \"bcs-Version\"\n  }, React.createElement(\"span\", {\n    className: \"bcs-Version-message\"\n  }, React.createElement(FormattedMessage, _extends({}, ACTION_MAP[action], {\n    values: {\n      name: React.createElement(\"strong\", null, name),\n      version_number: version_number,\n      version_promoted: version_promoted\n    }\n  }))), onInfo ? React.createElement(\"span\", {\n    className: \"bcs-Version-actions\"\n  }, React.createElement(PlainButton, {\n    \"aria-label\": intl.formatMessage(messages.getVersionInfo),\n    className: \"bcs-Version-info\",\n    \"data-resin-target\": ACTIVITY_TARGETS.VERSION_CARD,\n    onClick: function onClick() {\n      onInfo({\n        id: id,\n        version_number: version_number\n      });\n    },\n    type: \"button\"\n  }, React.createElement(IconInfoInverted, {\n    height: 16,\n    width: 16\n  }))) : null);\n};\nexport { Version as VersionBase };\nexport default injectIntl(Version);","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/version/Version.js"],"names":["React","FormattedMessage","injectIntl","IconInfoInverted","messages","PlainButton","selectors","ACTIVITY_TARGETS","FILE_REQUEST_NAME","VERSION_UPLOAD_ACTION","VERSION_DELETE_ACTION","VERSION_PROMOTE_ACTION","VERSION_RESTORE_ACTION","ACTION_MAP","versionDeleted","versionPromoted","versionRestored","versionUploaded","Version","props","action","getVersionAction","id","intl","onInfo","version_number","version_promoted","user","getVersionUser","name","formatMessage","fileRequestDisplayName","getVersionInfo","VERSION_CARD","VersionBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AAEA,OAAOC,gBAAP,MAA6B,4CAA7B;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,SACIC,iBADJ,EAEIC,qBAFJ,EAGIC,qBAHJ,EAIIC,sBAJJ,EAKIC,sBALJ,QAMO,uBANP;AAQA,OAAO,gBAAP;AAUA,IAAMC,UAAU,IAAA,WAAA,GAAA,CAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EACXH,qBADW,EACaN,QAAQ,CAACU,cADtB,CAAA,EAAA,eAAA,CAAA,WAAA,EAEXH,sBAFW,EAEcP,QAAQ,CAACW,eAFvB,CAAA,EAAA,eAAA,CAAA,WAAA,EAGXH,sBAHW,EAGcR,QAAQ,CAACY,eAHvB,CAAA,EAAA,eAAA,CAAA,WAAA,EAIXP,qBAJW,EAIaL,QAAQ,CAACa,eAJtB,CAAA,EAAA,WAAA,CAAhB;AAOA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAA8B;EAC1C;EACA,IAAMC,MAAM,GAAGd,SAAS,CAACe,gBAAVf,CAA2Ba,KAA3Bb,CAAf;EAF0C,IAGlCgB,EAHkC,GAGqBH,KAHrB,CAGlCG,EAHkC;IAG9BC,IAH8B,GAGqBJ,KAHrB,CAG9BI,IAH8B;IAGxBC,MAHwB,GAGqBL,KAHrB,CAGxBK,MAHwB;IAGhBC,cAHgB,GAGqBN,KAHrB,CAGhBM,cAHgB;IAGAC,gBAHA,GAGqBP,KAHrB,CAGAO,gBAHA,CAAA,CAI1C;;EACA,IAAMC,IAAI,GAAGrB,SAAS,CAACsB,cAAVtB,CAAyBa,KAAzBb,CAAb;EACA,IAAMuB,IAAI,GAAGF,IAAI,CAACE,IAALF,KAAcnB,iBAAdmB,GAAkCJ,IAAI,CAACO,aAALP,CAAmBnB,QAAQ,CAAC2B,sBAA5BR,CAAlCI,GAAwFA,IAAI,CAACE,IAA1G;EACA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAC;EAAhB,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACQhB,UAAU,CAACO,MAAD,CADlB,EAAA;IAEI,MAAM,EAAE;MACJS,IAAI,EAAE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAASA,IAAT,CADF;MAEJJ,cAAc,EAAdA,cAFI;MAGJC,gBAAgB,EAAhBA;IAHI;EAFZ,CAAA,CAAA,CADJ,CADJ,EAWKF,MAAM,GACH,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAC;EAAhB,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACI,YAAA,EAAYD,IAAI,CAACO,aAALP,CAAmBnB,QAAQ,CAAC4B,cAA5BT,CADhB;IAEI,SAAS,EAAC,kBAFd;IAGI,mBAAA,EAAmBhB,gBAAgB,CAAC0B,YAHxC;IAII,OAAO,EAAE,SAAA,OAAA,CAAA,EAAM;MACXT,MAAM,CAAC;QAAEF,EAAE,EAAFA,EAAF;QAAMG,cAAc,EAAdA;MAAN,CAAD,CAAND;IACH,CANL;IAOI,IAAI,EAAC;EAPT,CAAA,EASI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA;IAAkB,MAAM,EAAE,EAA1B;IAA8B,KAAK,EAAE;EAArC,CAAA,CATJ,CADJ,CADG,GAcH,IAzBR,CADJ;AA6BH,CApCD;AAsCA,SAASN,OAAO,IAAIgB,WAApB;AACA,eAAehC,UAAU,CAACgB,OAAD,CAAzB","sourcesContent":["/**\n * @flow\n * @file Version component\n */\n\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport IconInfoInverted from '../../../../icons/general/IconInfoInverted';\nimport messages from '../../../common/messages';\nimport PlainButton from '../../../../components/plain-button';\nimport selectors from '../../../common/selectors/version';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport {\n    FILE_REQUEST_NAME,\n    VERSION_UPLOAD_ACTION,\n    VERSION_DELETE_ACTION,\n    VERSION_PROMOTE_ACTION,\n    VERSION_RESTORE_ACTION,\n} from '../../../../constants';\nimport type { User } from '../../../../common/types/core';\nimport './Version.scss';\n\ntype Props = {\n    id: string,\n    modified_by: User,\n    onInfo?: Function,\n    version_number: string,\n    version_promoted?: string,\n} & InjectIntlProvidedProps;\n\nconst ACTION_MAP = {\n    [VERSION_DELETE_ACTION]: messages.versionDeleted,\n    [VERSION_PROMOTE_ACTION]: messages.versionPromoted,\n    [VERSION_RESTORE_ACTION]: messages.versionRestored,\n    [VERSION_UPLOAD_ACTION]: messages.versionUploaded,\n};\n\nconst Version = (props: Props): React.Node => {\n    // $FlowFixMe\n    const action = selectors.getVersionAction(props);\n    const { id, intl, onInfo, version_number, version_promoted } = props;\n    // $FlowFixMe\n    const user = selectors.getVersionUser(props);\n    const name = user.name === FILE_REQUEST_NAME ? intl.formatMessage(messages.fileRequestDisplayName) : user.name;\n    return (\n        <div className=\"bcs-Version\">\n            <span className=\"bcs-Version-message\">\n                <FormattedMessage\n                    {...ACTION_MAP[action]}\n                    values={{\n                        name: <strong>{name}</strong>,\n                        version_number,\n                        version_promoted,\n                    }}\n                />\n            </span>\n            {onInfo ? (\n                <span className=\"bcs-Version-actions\">\n                    <PlainButton\n                        aria-label={intl.formatMessage(messages.getVersionInfo)}\n                        className=\"bcs-Version-info\"\n                        data-resin-target={ACTIVITY_TARGETS.VERSION_CARD}\n                        onClick={() => {\n                            onInfo({ id, version_number });\n                        }}\n                        type=\"button\"\n                    >\n                        <IconInfoInverted height={16} width={16} />\n                    </PlainButton>\n                </span>\n            ) : null}\n        </div>\n    );\n};\n\nexport { Version as VersionBase };\nexport default injectIntl(Version);\n"]},"metadata":{},"sourceType":"module"}