{"ast":null,"code":"/**\n * \n * @file Timeline line component\n * @author Box\n */\nimport React from 'react';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport './Timeslice.scss';\nvar LENGTH_TEXT_ITEMLINE = 290; // match with css\n\nvar MIN_WIDTH = 6; // Need at least some width to be clickable\n\nvar Timeslice = function Timeslice(_ref) {\n  var start = _ref.start,\n    end = _ref.end,\n    duration = _ref.duration,\n    _onClick = _ref.onClick,\n    index = _ref.index,\n    interactionTarget = _ref.interactionTarget;\n  if (typeof start !== 'number' || !duration || start >= duration) {\n    return null;\n  }\n  var barLength = LENGTH_TEXT_ITEMLINE;\n  var startLeft = Math.round(start * barLength / duration);\n  var minEnding = startLeft + MIN_WIDTH; // Need at least some width to be clickable\n\n  var ending = typeof end === 'number' ? Math.max(minEnding, end * barLength / duration) : minEnding;\n  var endLeft = Math.round(Math.min(barLength, ending));\n  var width = endLeft - startLeft; // If width is too small re-adjust the left position\n  // to get to at least 6px wide for clickability\n\n  if (width < MIN_WIDTH) {\n    startLeft -= MIN_WIDTH - width;\n    width = MIN_WIDTH;\n  }\n  return React.createElement(PlainButton, {\n    className: \"be-timeline-time\",\n    \"data-resin-target\": interactionTarget,\n    onClick: function onClick() {\n      return _onClick(index);\n    },\n    style: {\n      left: \"\".concat(startLeft, \"px\"),\n      width: \"\".concat(width, \"px\")\n    },\n    type: \"button\"\n  });\n};\nexport default Timeslice;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/skills/timeline/Timeslice.js"],"names":["React","PlainButton","LENGTH_TEXT_ITEMLINE","MIN_WIDTH","Timeslice","start","end","duration","onClick","index","interactionTarget","barLength","startLeft","Math","round","minEnding","ending","max","endLeft","min","width","left"],"mappings":"AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,iDAAxB;AACA,OAAO,kBAAP;AAWA,IAAMC,oBAAoB,GAAG,GAA7B,C,CAAkC;;AAClC,IAAMC,SAAS,GAAG,CAAlB,C,CAAqB;;AAErB,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAAwE;EAAA,IAArEC,KAAqE,GAAA,IAAA,CAArEA,KAAqE;IAA9DC,GAA8D,GAAA,IAAA,CAA9DA,GAA8D;IAAzDC,QAAyD,GAAA,IAAA,CAAzDA,QAAyD;IAA/CC,QAA+C,GAAA,IAAA,CAA/CA,OAA+C;IAAtCC,KAAsC,GAAA,IAAA,CAAtCA,KAAsC;IAA/BC,iBAA+B,GAAA,IAAA,CAA/BA,iBAA+B;EACtF,IAAI,OAAOL,KAAP,KAAiB,QAAjB,IAA6B,CAACE,QAA9B,IAA0CF,KAAK,IAAIE,QAAvD,EAAiE;IAC7D,OAAO,IAAP;EACH;EAED,IAAMI,SAAS,GAAGT,oBAAlB;EACA,IAAIU,SAAS,GAAGC,IAAI,CAACC,KAALD,CAAYR,KAAK,GAAGM,SAAT,GAAsBJ,QAAjCM,CAAhB;EACA,IAAME,SAAS,GAAGH,SAAS,GAAGT,SAA9B,CAPsF,CAO7C;;EACzC,IAAMa,MAAM,GAAG,OAAOV,GAAP,KAAe,QAAf,GAA0BO,IAAI,CAACI,GAALJ,CAASE,SAATF,EAAqBP,GAAG,GAAGK,SAAP,GAAoBJ,QAAxCM,CAA1B,GAA8EE,SAA7F;EACA,IAAMG,OAAO,GAAGL,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACM,GAALN,CAASF,SAATE,EAAoBG,MAApBH,CAAXA,CAAhB;EACA,IAAIO,KAAK,GAAGF,OAAO,GAAGN,SAAtB,CAVsF,CAYtF;EACA;;EACA,IAAIQ,KAAK,GAAGjB,SAAZ,EAAuB;IACnBS,SAAS,IAAIT,SAAS,GAAGiB,KAAzBR;IACAQ,KAAK,GAAGjB,SAARiB;EACH;EAED,OACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACI,SAAS,EAAC,kBADd;IAEI,mBAAA,EAAmBV,iBAFvB;IAGI,OAAO,EAAE,SAAA,OAAA,CAAA,EAAA;MAAA,OAAMF,QAAO,CAACC,KAAD,CAAb;IAAA,CAHb;IAII,KAAK,EAAE;MACHY,IAAI,EAAA,EAAA,CAAA,MAAA,CAAKT,SAAL,EAAA,IAAA,CADD;MAEHQ,KAAK,EAAA,EAAA,CAAA,MAAA,CAAKA,KAAL,EAAA,IAAA;IAFF,CAJX;IAQI,IAAI,EAAC;EART,CAAA,CADJ;AAYH,CA/BD;AAiCA,eAAehB,SAAf","sourcesContent":["/**\n * @flow\n * @file Timeline line component\n * @author Box\n */\n\nimport React from 'react';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport './Timeslice.scss';\n\ntype Props = {\n    duration: number,\n    end?: number,\n    index: number,\n    interactionTarget: string,\n    onClick: Function,\n    start: number,\n};\n\nconst LENGTH_TEXT_ITEMLINE = 290; // match with css\nconst MIN_WIDTH = 6; // Need at least some width to be clickable\n\nconst Timeslice = ({ start, end, duration, onClick, index, interactionTarget }: Props) => {\n    if (typeof start !== 'number' || !duration || start >= duration) {\n        return null;\n    }\n\n    const barLength = LENGTH_TEXT_ITEMLINE;\n    let startLeft = Math.round((start * barLength) / duration);\n    const minEnding = startLeft + MIN_WIDTH; // Need at least some width to be clickable\n    const ending = typeof end === 'number' ? Math.max(minEnding, (end * barLength) / duration) : minEnding;\n    const endLeft = Math.round(Math.min(barLength, ending));\n    let width = endLeft - startLeft;\n\n    // If width is too small re-adjust the left position\n    // to get to at least 6px wide for clickability\n    if (width < MIN_WIDTH) {\n        startLeft -= MIN_WIDTH - width;\n        width = MIN_WIDTH;\n    }\n\n    return (\n        <PlainButton\n            className=\"be-timeline-time\"\n            data-resin-target={interactionTarget}\n            onClick={() => onClick(index)}\n            style={{\n                left: `${startLeft}px`,\n                width: `${width}px`,\n            }}\n            type=\"button\"\n        />\n    );\n};\n\nexport default Timeslice;\n"]},"metadata":{},"sourceType":"module"}