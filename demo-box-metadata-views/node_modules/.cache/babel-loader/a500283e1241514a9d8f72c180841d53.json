{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _class, _temp;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, { SCROLL_DIRECTION_BACKWARD, SCROLL_DIRECTION_FORWARD } from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\nvar renderNull = function renderNull() {\n  return null;\n};\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nvar Grid = (_temp = _class = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Grid, _React$PureComponent);\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  function Grid(props) {\n    var _this;\n    _classCallCheck(this, Grid);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"_onGridRenderedMemoizer\", createCallbackMemoizer());\n    _defineProperty(_assertThisInitialized(_this), \"_onScrollMemoizer\", createCallbackMemoizer(false));\n    _defineProperty(_assertThisInitialized(_this), \"_deferredInvalidateColumnIndex\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_deferredInvalidateRowIndex\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_recomputeScrollLeftFlag\", false);\n    _defineProperty(_assertThisInitialized(_this), \"_recomputeScrollTopFlag\", false);\n    _defineProperty(_assertThisInitialized(_this), \"_horizontalScrollBarSize\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"_verticalScrollBarSize\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"_scrollbarPresenceChanged\", false);\n    _defineProperty(_assertThisInitialized(_this), \"_scrollingContainer\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_childrenToDisplay\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_columnStartIndex\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_columnStopIndex\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_rowStartIndex\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_rowStopIndex\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_renderedColumnStartIndex\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"_renderedColumnStopIndex\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"_renderedRowStartIndex\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"_renderedRowStopIndex\", 0);\n    _defineProperty(_assertThisInitialized(_this), \"_initialScrollTop\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_initialScrollLeft\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_disablePointerEventsTimeoutId\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_styleCache\", {});\n    _defineProperty(_assertThisInitialized(_this), \"_cellCache\", {});\n    _defineProperty(_assertThisInitialized(_this), \"_debounceScrollEndedCallback\", function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_invokeOnGridRenderedHelper\", function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_setScrollingContainerRef\", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    });\n    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n  _createClass(Grid, [{\n    key: \"getOffsetForCell\",\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$alignment = _ref.alignment,\n        alignment = _ref$alignment === void 0 ? this.props.scrollToAlignment : _ref$alignment,\n        _ref$columnIndex = _ref.columnIndex,\n        columnIndex = _ref$columnIndex === void 0 ? this.props.scrollToColumn : _ref$columnIndex,\n        _ref$rowIndex = _ref.rowIndex,\n        rowIndex = _ref$rowIndex === void 0 ? this.props.scrollToRow : _ref$rowIndex;\n      var offsetProps = _objectSpread({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows' height.\n     */\n  }, {\n    key: \"getTotalRowsHeight\",\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns' width.\n     */\n  }, {\n    key: \"getTotalColumnsWidth\",\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n  }, {\n    key: \"handleScrollEvent\",\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n        scrollLeftParam = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft,\n        _ref2$scrollTop = _ref2.scrollTop,\n        scrollTopParam = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop;\n\n      // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n      this._debounceScrollEnded();\n      var _this$props = this.props,\n        autoHeight = _this$props.autoHeight,\n        autoWidth = _this$props.autoWidth,\n        height = _this$props.height,\n        width = _this$props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n        var scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: scrollDirectionHorizontal,\n          scrollDirectionVertical: scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n        rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n  }, {\n    key: \"measureAllCells\",\n    value: function measureAllCells() {\n      var _this$props2 = this.props,\n        columnCount = _this$props2.columnCount,\n        rowCount = _this$props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref4$columnIndex = _ref4.columnIndex,\n        columnIndex = _ref4$columnIndex === void 0 ? 0 : _ref4$columnIndex,\n        _ref4$rowIndex = _ref4.rowIndex,\n        rowIndex = _ref4$rowIndex === void 0 ? 0 : _ref4$rowIndex;\n      var _this$props3 = this.props,\n        scrollToColumn = _this$props3.scrollToColumn,\n        scrollToRow = _this$props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n  }, {\n    key: \"scrollToCell\",\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n        rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_objectSpread({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_objectSpread({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n        getScrollbarSize = _this$props4.getScrollbarSize,\n        height = _this$props4.height,\n        scrollLeft = _this$props4.scrollLeft,\n        scrollToColumn = _this$props4.scrollToColumn,\n        scrollTop = _this$props4.scrollTop,\n        scrollToRow = _this$props4.scrollToRow,\n        width = _this$props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _objectSpread({}, prevState, {\n            needToResetStyleCache: false\n          });\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don't work in `react-test-renderer`\n\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n      var _this$props5 = this.props,\n        autoHeight = _this$props5.autoHeight,\n        autoWidth = _this$props5.autoWidth,\n        columnCount = _this$props5.columnCount,\n        height = _this$props5.height,\n        rowCount = _this$props5.rowCount,\n        scrollToAlignment = _this$props5.scrollToAlignment,\n        scrollToColumn = _this$props5.scrollToColumn,\n        scrollToRow = _this$props5.scrollToRow,\n        width = _this$props5.width;\n      var _this$state = this.state,\n        scrollLeft = _this$state.scrollLeft,\n        scrollPositionChangeReason = _this$state.scrollPositionChangeReason,\n        scrollTop = _this$state.scrollTop,\n        instanceProps = _this$state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        autoContainerWidth = _this$props6.autoContainerWidth,\n        autoHeight = _this$props6.autoHeight,\n        autoWidth = _this$props6.autoWidth,\n        className = _this$props6.className,\n        containerProps = _this$props6.containerProps,\n        containerRole = _this$props6.containerRole,\n        containerStyle = _this$props6.containerStyle,\n        height = _this$props6.height,\n        id = _this$props6.id,\n        noContentRenderer = _this$props6.noContentRenderer,\n        role = _this$props6.role,\n        style = _this$props6.style,\n        tabIndex = _this$props6.tabIndex,\n        width = _this$props6.width;\n      var _this$state2 = this.state,\n        instanceProps = _this$state2.instanceProps,\n        needToResetStyleCache = _this$state2.needToResetStyleCache;\n      var isScrolling = this._isScrolling();\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n      this._calculateChildrenToRender(this.props, this.state);\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return React.createElement(\"div\", _extends({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        \"aria-label\": this.props['aria-label'],\n        \"aria-readonly\": this.props['aria-readonly'],\n        className: clsx('ReactVirtualized__Grid', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _objectSpread({}, gridStyle, {}, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && React.createElement(\"div\", {\n        className: \"ReactVirtualized__Grid__innerScrollContainer\",\n        role: containerRole,\n        style: _objectSpread({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n  }, {\n    key: \"_calculateChildrenToRender\",\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n        cellRangeRenderer = props.cellRangeRenderer,\n        columnCount = props.columnCount,\n        deferredMeasurementCache = props.deferredMeasurementCache,\n        height = props.height,\n        overscanColumnCount = props.overscanColumnCount,\n        overscanIndicesGetter = props.overscanIndicesGetter,\n        overscanRowCount = props.overscanRowCount,\n        rowCount = props.rowCount,\n        width = props.width,\n        isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n        scrollDirectionVertical = state.scrollDirectionVertical,\n        instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n      var isScrolling = this._isScrolling(props, state);\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n  }, {\n    key: \"_debounceScrollEnded\",\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: \"_handleInvalidatedGridSize\",\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: \"_invokeOnScrollMemoizer\",\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n      var scrollLeft = _ref6.scrollLeft,\n        scrollTop = _ref6.scrollTop,\n        totalColumnsWidth = _ref6.totalColumnsWidth,\n        totalRowsHeight = _ref6.totalRowsHeight;\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n            scrollTop = _ref7.scrollTop;\n          var _this3$props = _this3.props,\n            height = _this3$props.height,\n            onScroll = _this3$props.onScroll,\n            width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: \"_isScrolling\",\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: \"_maybeCallOnScrollbarPresenceChange\",\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n        onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: \"scrollToPosition\",\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n        scrollTop = _ref8.scrollTop;\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: \"_updateScrollLeftForScrollToColumn\",\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: \"_resetStyleCache\",\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n          this._styleCache[key] = styleCache[key];\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateScrollTopForScrollToRow\",\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        Object.assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        Object.assign(newState, {\n          isScrolling: false\n        });\n      }\n      var maybeStateA;\n      var maybeStateB;\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n      newState.instanceProps = instanceProps;\n      return _objectSpread({}, newState, {}, maybeStateA, {}, maybeStateB);\n    }\n  }, {\n    key: \"_getEstimatedColumnSize\",\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: \"_getEstimatedRowSize\",\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: \"_getScrollToPositionStateUpdate\",\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n        scrollLeft = _ref9.scrollLeft,\n        scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n      return {};\n    }\n  }, {\n    key: \"_wrapSizeGetter\",\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n        height = nextProps.height,\n        scrollToAlignment = nextProps.scrollToAlignment,\n        scrollToColumn = nextProps.scrollToColumn,\n        width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n        instanceProps = prevState.instanceProps;\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n      return 0;\n    }\n  }, {\n    key: \"_getScrollLeftForScrollToColumnStateUpdate\",\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n      return {};\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n        rowCount = nextProps.rowCount,\n        scrollToAlignment = nextProps.scrollToAlignment,\n        scrollToRow = nextProps.scrollToRow,\n        width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n        instanceProps = prevState.instanceProps;\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n      return 0;\n    }\n  }, {\n    key: \"_getScrollTopForScrollToRowStateUpdate\",\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n      return {};\n    }\n  }]);\n  return Grid;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string.isRequired,\n  \"aria-readonly\": PropTypes.bool,\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  \"autoContainerWidth\": PropTypes.bool.isRequired,\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoHeight\": PropTypes.bool.isRequired,\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoWidth\": PropTypes.bool.isRequired,\n  /** Responsible for rendering a cell given an row and column index.  */\n  \"cellRenderer\": function cellRenderer() {\n    return (typeof bpfrpt_proptype_CellRenderer === \"function\" ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : PropTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  \"cellRangeRenderer\": function cellRangeRenderer() {\n    return (typeof bpfrpt_proptype_CellRangeRenderer === \"function\" ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : PropTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  \"className\": PropTypes.string,\n  /** Number of columns in grid.  */\n  \"columnCount\": PropTypes.number.isRequired,\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  \"columnWidth\": function columnWidth() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n  /** Unfiltered props for the Grid container. */\n  \"containerProps\": PropTypes.object,\n  /** ARIA role for the cell-container.  */\n  \"containerRole\": PropTypes.string.isRequired,\n  /** Optional inline style applied to inner cell-container */\n  \"containerStyle\": PropTypes.object.isRequired,\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  \"deferredMeasurementCache\": PropTypes.object,\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  \"estimatedColumnSize\": PropTypes.number.isRequired,\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": PropTypes.number.isRequired,\n  /** Exposed for testing purposes only.  */\n  \"getScrollbarSize\": PropTypes.func.isRequired,\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  \"height\": PropTypes.number.isRequired,\n  /** Optional custom id to attach to root Grid element.  */\n  \"id\": PropTypes.string,\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  \"isScrolling\": PropTypes.bool,\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  \"isScrollingOptOut\": PropTypes.bool.isRequired,\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  \"noContentRenderer\": function noContentRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === \"function\" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": PropTypes.func.isRequired,\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  \"onScrollbarPresenceChange\": PropTypes.func.isRequired,\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  \"onSectionRendered\": PropTypes.func.isRequired,\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanColumnCount\": PropTypes.number.isRequired,\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanRowCount\": PropTypes.number.isRequired,\n  /** ARIA role for the grid element.  */\n  \"role\": PropTypes.string.isRequired,\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  \"rowHeight\": function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n  /** Number of rows in grid.  */\n  \"rowCount\": PropTypes.number.isRequired,\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  \"scrollingResetTimeInterval\": PropTypes.number.isRequired,\n  /** Horizontal offset. */\n  \"scrollLeft\": PropTypes.number,\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === \"function\" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToColumn\": PropTypes.number.isRequired,\n  /** Vertical offset. */\n  \"scrollTop\": PropTypes.number,\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToRow\": PropTypes.number.isRequired,\n  /** Optional inline style */\n  \"style\": PropTypes.object.isRequired,\n  /** Tab index for focus */\n  \"tabIndex\": PropTypes.number,\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  \"width\": PropTypes.number.isRequired\n}), _temp);\n_defineProperty(Grid, \"defaultProps\", {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: defaultCellRangeRenderer,\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: scrollbarSize,\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n});\npolyfill(Grid);\nexport default Grid;\nimport { bpfrpt_proptype_CellRenderer } from \"./types\";\nimport { bpfrpt_proptype_CellRangeRenderer } from \"./types\";\nimport { bpfrpt_proptype_CellPosition } from \"./types\";\nimport { bpfrpt_proptype_CellSize } from \"./types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"./types\";\nimport { bpfrpt_proptype_NoContentRenderer } from \"./types\";\nimport { bpfrpt_proptype_Scroll } from \"./types\";\nimport { bpfrpt_proptype_ScrollbarPresenceChange } from \"./types\";\nimport { bpfrpt_proptype_RenderedSection } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndicesGetter } from \"./types\";\nimport { bpfrpt_proptype_Alignment } from \"./types\";\nimport { bpfrpt_proptype_CellCache } from \"./types\";\nimport { bpfrpt_proptype_StyleCache } from \"./types\";\nimport { bpfrpt_proptype_AnimationTimeoutId } from \"../utils/requestAnimationTimeout\";\nimport PropTypes from \"prop-types\";","map":{"version":3,"names":["_extends","_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","_defineProperty","_class","_temp","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","React","clsx","calculateSizeAndPositionDataAndUpdateScrollOffset","ScalingCellSizeAndPositionManager","createCallbackMemoizer","defaultOverscanIndicesGetter","SCROLL_DIRECTION_BACKWARD","SCROLL_DIRECTION_FORWARD","updateScrollIndexHelper","defaultCellRangeRenderer","scrollbarSize","polyfill","requestAnimationTimeout","cancelAnimationTimeout","DEFAULT_SCROLLING_RESET_TIME_INTERVAL","SCROLL_POSITION_CHANGE_REASONS","OBSERVED","REQUESTED","renderNull","Grid","_React$PureComponent","props","_this","call","_disablePointerEventsTimeoutId","setState","isScrolling","needToResetStyleCache","onSectionRendered","_onGridRenderedMemoizer","callback","indices","columnOverscanStartIndex","_columnStartIndex","columnOverscanStopIndex","_columnStopIndex","columnStartIndex","_renderedColumnStartIndex","columnStopIndex","_renderedColumnStopIndex","rowOverscanStartIndex","_rowStartIndex","rowOverscanStopIndex","_rowStopIndex","rowStartIndex","_renderedRowStartIndex","rowStopIndex","_renderedRowStopIndex","ref","_scrollingContainer","event","handleScrollEvent","columnSizeAndPositionManager","cellCount","columnCount","cellSizeGetter","params","_wrapSizeGetter","columnWidth","estimatedCellSize","_getEstimatedColumnSize","rowSizeAndPositionManager","rowCount","rowHeight","_getEstimatedRowSize","state","instanceProps","prevColumnWidth","prevRowHeight","prevColumnCount","prevRowCount","prevIsScrolling","prevScrollToColumn","scrollToColumn","prevScrollToRow","scrollToRow","scrollbarSizeMeasured","scrollDirectionHorizontal","scrollDirectionVertical","scrollLeft","scrollTop","scrollPositionChangeReason","_initialScrollTop","_getCalculatedScrollTop","_initialScrollLeft","_getCalculatedScrollLeft","value","getOffsetForCell","_ref","undefined","_ref$alignment","alignment","scrollToAlignment","_ref$columnIndex","columnIndex","_ref$rowIndex","rowIndex","offsetProps","getTotalRowsHeight","getTotalSize","getTotalColumnsWidth","_ref2","_ref2$scrollLeft","scrollLeftParam","_ref2$scrollTop","scrollTopParam","_debounceScrollEnded","_this$props","autoHeight","autoWidth","height","width","totalRowsHeight","totalColumnsWidth","Math","min","max","newState","_invokeOnScrollMemoizer","invalidateCellSizeAfterRender","_ref3","_deferredInvalidateColumnIndex","_deferredInvalidateRowIndex","measureAllCells","_this$props2","getSizeAndPositionOfCell","recomputeGridSize","_ref4","_ref4$columnIndex","_ref4$rowIndex","_this$props3","resetCell","_recomputeScrollLeftFlag","_recomputeScrollTopFlag","_styleCache","_cellCache","forceUpdate","scrollToCell","_ref5","_updateScrollLeftForScrollToColumn","_updateScrollTopForScrollToRow","componentDidMount","_this$props4","getScrollbarSize","_handleInvalidatedGridSize","prevState","stateUpdate","_getScrollToPositionStateUpdate","sizeIsBiggerThanZero","_invokeOnGridRenderedHelper","_maybeCallOnScrollbarPresenceChange","componentDidUpdate","prevProps","_this2","_this$props5","_this$state","columnOrRowCountJustIncreasedFromZero","sizeJustIncreasedFromZero","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToIndex","size","updateScrollIndexCallback","componentWillUnmount","render","_this$props6","autoContainerWidth","className","containerProps","containerRole","containerStyle","id","noContentRenderer","role","style","tabIndex","_this$state2","_isScrolling","gridStyle","boxSizing","direction","position","WebkitOverflowScrolling","willChange","_resetStyleCache","_calculateChildrenToRender","verticalScrollBarSize","horizontalScrollBarSize","_horizontalScrollBarSize","_verticalScrollBarSize","_scrollbarPresenceChanged","overflowX","overflowY","childrenToDisplay","_childrenToDisplay","showNoContentRenderer","createElement","_setScrollingContainerRef","onScroll","_onScroll","maxWidth","maxHeight","overflow","pointerEvents","cellRenderer","cellRangeRenderer","deferredMeasurementCache","overscanColumnCount","overscanIndicesGetter","overscanRowCount","isScrollingOptOut","visibleColumnIndices","getVisibleCellRange","containerSize","offset","visibleRowIndices","horizontalOffsetAdjustment","getOffsetAdjustment","verticalOffsetAdjustment","start","stop","overscanColumnIndices","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanRowIndices","overscanStartIndex","overscanStopIndex","hasFixedHeight","has","hasFixedWidth","cellCache","parent","styleCache","scrollingResetTimeInterval","_debounceScrollEndedCallback","_ref6","_this3","_onScrollMemoizer","_ref7","_this3$props","clientHeight","clientWidth","scrollHeight","scrollWidth","hasOwnProperty","Boolean","onScrollbarPresenceChange","horizontal","vertical","scrollToPosition","_ref8","_getScrollLeftForScrollToColumnStateUpdate","concat","_getScrollTopForScrollToRowStateUpdate","getDerivedStateFromProps","nextProps","assign","configure","maybeStateA","maybeStateB","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","updateScrollOffsetForScrollToIndex","estimatedColumnSize","estimatedRowSize","_ref9","finalColumn","targetIndex","scrollBarSize","getUpdatedOffsetForIndex","align","currentOffset","calculatedScrollLeft","finalRow","calculatedScrollTop","PureComponent","process","env","NODE_ENV","PropTypes","string","isRequired","bool","bpfrpt_proptype_CellRenderer","shape","bpfrpt_proptype_CellRangeRenderer","number","bpfrpt_proptype_CellSize","func","bpfrpt_proptype_NoContentRenderer","bpfrpt_proptype_OverscanIndicesGetter","bpfrpt_proptype_Alignment","bpfrpt_proptype_CellPosition","bpfrpt_proptype_CellSizeGetter","bpfrpt_proptype_Scroll","bpfrpt_proptype_ScrollbarPresenceChange","bpfrpt_proptype_RenderedSection","bpfrpt_proptype_CellCache","bpfrpt_proptype_StyleCache","bpfrpt_proptype_AnimationTimeoutId"],"sources":["/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/react-virtualized/dist/es/Grid/Grid.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, { SCROLL_DIRECTION_BACKWARD, SCROLL_DIRECTION_FORWARD } from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nvar Grid = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Grid, _React$PureComponent);\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  function Grid(props) {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"_onGridRenderedMemoizer\", createCallbackMemoizer());\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScrollMemoizer\", createCallbackMemoizer(false));\n\n    _defineProperty(_assertThisInitialized(_this), \"_deferredInvalidateColumnIndex\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_deferredInvalidateRowIndex\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_recomputeScrollLeftFlag\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_recomputeScrollTopFlag\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_horizontalScrollBarSize\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_verticalScrollBarSize\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_scrollbarPresenceChanged\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_scrollingContainer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_childrenToDisplay\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_columnStartIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_columnStopIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rowStartIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rowStopIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedColumnStartIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedColumnStopIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedRowStartIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderedRowStopIndex\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_initialScrollTop\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_initialScrollLeft\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_disablePointerEventsTimeoutId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_styleCache\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_cellCache\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"_debounceScrollEndedCallback\", function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_invokeOnGridRenderedHelper\", function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setScrollingContainerRef\", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    });\n\n    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  _createClass(Grid, [{\n    key: \"getOffsetForCell\",\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === void 0 ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === void 0 ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === void 0 ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _objectSpread({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows' height.\n     */\n\n  }, {\n    key: \"getTotalRowsHeight\",\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns' width.\n     */\n\n  }, {\n    key: \"getTotalColumnsWidth\",\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: \"handleScrollEvent\",\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop;\n\n      // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      this._debounceScrollEnded();\n\n      var _this$props = this.props,\n          autoHeight = _this$props.autoHeight,\n          autoWidth = _this$props.autoWidth,\n          height = _this$props.height,\n          width = _this$props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n        var scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: scrollDirectionHorizontal,\n          scrollDirectionVertical: scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: \"measureAllCells\",\n    value: function measureAllCells() {\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          rowCount = _this$props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === void 0 ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === void 0 ? 0 : _ref4$rowIndex;\n\n      var _this$props3 = this.props,\n          scrollToColumn = _this$props3.scrollToColumn,\n          scrollToRow = _this$props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: \"scrollToCell\",\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_objectSpread({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_objectSpread({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          getScrollbarSize = _this$props4.getScrollbarSize,\n          height = _this$props4.height,\n          scrollLeft = _this$props4.scrollLeft,\n          scrollToColumn = _this$props4.scrollToColumn,\n          scrollTop = _this$props4.scrollTop,\n          scrollToRow = _this$props4.scrollToRow,\n          width = _this$props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _objectSpread({}, prevState, {\n            needToResetStyleCache: false\n          });\n\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don't work in `react-test-renderer`\n\n\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          autoHeight = _this$props5.autoHeight,\n          autoWidth = _this$props5.autoWidth,\n          columnCount = _this$props5.columnCount,\n          height = _this$props5.height,\n          rowCount = _this$props5.rowCount,\n          scrollToAlignment = _this$props5.scrollToAlignment,\n          scrollToColumn = _this$props5.scrollToColumn,\n          scrollToRow = _this$props5.scrollToRow,\n          width = _this$props5.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollPositionChangeReason = _this$state.scrollPositionChangeReason,\n          scrollTop = _this$state.scrollTop,\n          instanceProps = _this$state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          autoContainerWidth = _this$props6.autoContainerWidth,\n          autoHeight = _this$props6.autoHeight,\n          autoWidth = _this$props6.autoWidth,\n          className = _this$props6.className,\n          containerProps = _this$props6.containerProps,\n          containerRole = _this$props6.containerRole,\n          containerStyle = _this$props6.containerStyle,\n          height = _this$props6.height,\n          id = _this$props6.id,\n          noContentRenderer = _this$props6.noContentRenderer,\n          role = _this$props6.role,\n          style = _this$props6.style,\n          tabIndex = _this$props6.tabIndex,\n          width = _this$props6.width;\n      var _this$state2 = this.state,\n          instanceProps = _this$state2.instanceProps,\n          needToResetStyleCache = _this$state2.needToResetStyleCache;\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return React.createElement(\"div\", _extends({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        \"aria-label\": this.props['aria-label'],\n        \"aria-readonly\": this.props['aria-readonly'],\n        className: clsx('ReactVirtualized__Grid', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _objectSpread({}, gridStyle, {}, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && React.createElement(\"div\", {\n        className: \"ReactVirtualized__Grid__innerScrollContainer\",\n        role: containerRole,\n        style: _objectSpread({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: \"_calculateChildrenToRender\",\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: \"_debounceScrollEnded\",\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: \"_handleInvalidatedGridSize\",\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: \"_invokeOnScrollMemoizer\",\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _this3$props = _this3.props,\n              height = _this3$props.height,\n              onScroll = _this3$props.onScroll,\n              width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: \"_isScrolling\",\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: \"_maybeCallOnScrollbarPresenceChange\",\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n        onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: \"scrollToPosition\",\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: \"_updateScrollLeftForScrollToColumn\",\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: \"_resetStyleCache\",\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateScrollTopForScrollToRow\",\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        Object.assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        Object.assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA;\n      var maybeStateB;\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n      return _objectSpread({}, newState, {}, maybeStateA, {}, maybeStateB);\n    }\n  }, {\n    key: \"_getEstimatedColumnSize\",\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: \"_getEstimatedRowSize\",\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: \"_getScrollToPositionStateUpdate\",\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_wrapSizeGetter\",\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollLeftForScrollToColumnStateUpdate\",\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollTopForScrollToRowStateUpdate\",\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n\n      return {};\n    }\n  }]);\n\n  return Grid;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string.isRequired,\n  \"aria-readonly\": PropTypes.bool,\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  \"autoContainerWidth\": PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoHeight\": PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoWidth\": PropTypes.bool.isRequired,\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  \"cellRenderer\": function cellRenderer() {\n    return (typeof bpfrpt_proptype_CellRenderer === \"function\" ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : PropTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  \"cellRangeRenderer\": function cellRangeRenderer() {\n    return (typeof bpfrpt_proptype_CellRangeRenderer === \"function\" ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : PropTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  \"className\": PropTypes.string,\n\n  /** Number of columns in grid.  */\n  \"columnCount\": PropTypes.number.isRequired,\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  \"columnWidth\": function columnWidth() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Unfiltered props for the Grid container. */\n  \"containerProps\": PropTypes.object,\n\n  /** ARIA role for the cell-container.  */\n  \"containerRole\": PropTypes.string.isRequired,\n\n  /** Optional inline style applied to inner cell-container */\n  \"containerStyle\": PropTypes.object.isRequired,\n\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  \"deferredMeasurementCache\": PropTypes.object,\n\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  \"estimatedColumnSize\": PropTypes.number.isRequired,\n\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": PropTypes.number.isRequired,\n\n  /** Exposed for testing purposes only.  */\n  \"getScrollbarSize\": PropTypes.func.isRequired,\n\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  \"height\": PropTypes.number.isRequired,\n\n  /** Optional custom id to attach to root Grid element.  */\n  \"id\": PropTypes.string,\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  \"isScrolling\": PropTypes.bool,\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  \"isScrollingOptOut\": PropTypes.bool.isRequired,\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  \"noContentRenderer\": function noContentRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === \"function\" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": PropTypes.func.isRequired,\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  \"onScrollbarPresenceChange\": PropTypes.func.isRequired,\n\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  \"onSectionRendered\": PropTypes.func.isRequired,\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanColumnCount\": PropTypes.number.isRequired,\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanRowCount\": PropTypes.number.isRequired,\n\n  /** ARIA role for the grid element.  */\n  \"role\": PropTypes.string.isRequired,\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  \"rowHeight\": function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in grid.  */\n  \"rowCount\": PropTypes.number.isRequired,\n\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  \"scrollingResetTimeInterval\": PropTypes.number.isRequired,\n\n  /** Horizontal offset. */\n  \"scrollLeft\": PropTypes.number,\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === \"function\" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToColumn\": PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": PropTypes.number,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToRow\": PropTypes.number.isRequired,\n\n  /** Optional inline style */\n  \"style\": PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": PropTypes.number,\n\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  \"width\": PropTypes.number.isRequired\n}), _temp);\n\n_defineProperty(Grid, \"defaultProps\", {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: defaultCellRangeRenderer,\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: scrollbarSize,\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n});\n\npolyfill(Grid);\nexport default Grid;\nimport { bpfrpt_proptype_CellRenderer } from \"./types\";\nimport { bpfrpt_proptype_CellRangeRenderer } from \"./types\";\nimport { bpfrpt_proptype_CellPosition } from \"./types\";\nimport { bpfrpt_proptype_CellSize } from \"./types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"./types\";\nimport { bpfrpt_proptype_NoContentRenderer } from \"./types\";\nimport { bpfrpt_proptype_Scroll } from \"./types\";\nimport { bpfrpt_proptype_ScrollbarPresenceChange } from \"./types\";\nimport { bpfrpt_proptype_RenderedSection } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndicesGetter } from \"./types\";\nimport { bpfrpt_proptype_Alignment } from \"./types\";\nimport { bpfrpt_proptype_CellCache } from \"./types\";\nimport { bpfrpt_proptype_StyleCache } from \"./types\";\nimport { bpfrpt_proptype_AnimationTimeoutId } from \"../utils/requestAnimationTimeout\";\nimport PropTypes from \"prop-types\";"],"mappings":"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"},"metadata":{},"sourceType":"module"}