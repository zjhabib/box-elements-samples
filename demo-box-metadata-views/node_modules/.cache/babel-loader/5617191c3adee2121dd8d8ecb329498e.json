{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport InlineNotice from '../inline-notice';\nvar InlineError = function InlineError(props) {\n  return React.createElement(InlineNotice, _extends({}, props, {\n    type: \"error\"\n  }));\n};\nexport default InlineError;","map":{"version":3,"sources":["../../../src/components/inline-error/InlineError.js"],"names":["React","InlineNotice","InlineError","props"],"mappings":";;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAA;EAAA,OAAkB,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAkBA,KAAlB,EAAA;IAAyB,IAAI,EAAC;EAA9B,CAAA,CAAA,CAAlB;AAAA,CAApB;AAEA,eAAeD,WAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport InlineNotice from '../inline-notice';\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    /** Title of the inline error. */\n    title: React.Node,\n};\n\nconst InlineError = (props: Props) => <InlineNotice {...props} type=\"error\" />;\n\nexport default InlineError;\n"]},"metadata":{},"sourceType":"module"}