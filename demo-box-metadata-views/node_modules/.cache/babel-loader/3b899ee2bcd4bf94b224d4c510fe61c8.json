{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport uuidv4 from 'uuid/v4';\nimport { isMarkSupported } from '../../../utils/performance';\nimport { EVENT_JS_READY } from './constants';\nimport { METRIC_TYPE_PREVIEW, METRIC_TYPE_ELEMENTS_LOAD_METRIC } from '../../../constants';\nvar SESSION_ID = uuidv4();\nvar uniqueEvents = new Set();\nvar Logger = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Logger, _React$Component);\n  function Logger(props) {\n    var _this;\n    _classCallCheck(this, Logger);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Logger).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"handlePreviewMetric\", function (data) {\n      var onMetric = _this.props.onMetric;\n      onMetric(_objectSpread({}, data, {\n        type: METRIC_TYPE_PREVIEW\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleReadyMetric\", function (data) {\n      if (!isMarkSupported) {\n        return;\n      }\n      var startMarkName = _this.props.startMarkName;\n      var metricData = _objectSpread({}, data, {\n        startMarkName: startMarkName\n      });\n      _this.logUniqueMetric(METRIC_TYPE_ELEMENTS_LOAD_METRIC, EVENT_JS_READY, metricData);\n    });\n    _this.loggerProps = {\n      onPreviewMetric: _this.handlePreviewMetric,\n      onReadyMetric: _this.handleReadyMetric\n    };\n    return _this;\n  }\n  _createClass(Logger, [{\n    key: \"createEventName\",\n    /**\n     * Creates an event name meant for use with an event which is unique and meant to be logged only once\n     *\n     * @param {string} name - The event name\n     * @returns {string} A string containing the component and event name\n     */\n    value: function createEventName(name) {\n      var source = this.props.source;\n      return \"\".concat(source, \"::\").concat(name);\n    }\n    /**\n     * Checks to see if the specified event for the component has already been fired.\n     *\n     * @param {string} component - the component name\n     * @param {string} name - the event name\n     * @returns {boolean} True if the event has already been fired\n     */\n  }, {\n    key: \"hasLoggedEvent\",\n    value: function hasLoggedEvent(name) {\n      return this.uniqueEvents.has(name);\n    }\n    /**\n     * Invokes the provided metric logging callback.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     */\n  }, {\n    key: \"logMetric\",\n    value: function logMetric(type, name, data) {\n      var _this$props = this.props,\n        onMetric = _this$props.onMetric,\n        source = _this$props.source;\n      var metric = _objectSpread({}, data, {\n        component: source,\n        name: name,\n        timestamp: this.getTimestamp(),\n        sessionId: this.sessionId,\n        type: type\n      });\n      onMetric(metric);\n    }\n    /**\n     * Logs a unique metric event. Prevents duplicate events from being logged in the session.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     */\n  }, {\n    key: \"logUniqueMetric\",\n    value: function logUniqueMetric(type, name, data) {\n      var eventName = this.createEventName(name);\n      if (this.hasLoggedEvent(eventName)) {\n        return;\n      }\n      this.logMetric(type, name, data);\n      this.uniqueEvents.add(eventName);\n    }\n    /**\n     * Preview metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n  }, {\n    key: \"getTimestamp\",\n    /**\n     * Create an ISO Timestamp for right now.\n     *\n     * @returns {string}\n     */\n    value: function getTimestamp() {\n      return new Date().toISOString();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        children = _this$props2.children,\n        onMetric = _this$props2.onMetric,\n        startMarkName = _this$props2.startMarkName,\n        rest = _objectWithoutProperties(_this$props2, [\"children\", \"onMetric\", \"startMarkName\"]);\n      return React.cloneElement(children, _objectSpread({}, rest, {\n        logger: this.loggerProps\n      }));\n    }\n  }, {\n    key: \"uniqueEvents\",\n    get: function get() {\n      return uniqueEvents;\n    }\n  }, {\n    key: \"sessionId\",\n    get: function get() {\n      return SESSION_ID;\n    }\n  }]);\n  return Logger;\n}(React.Component);\n_defineProperty(Logger, \"defaultProps\", {\n  onMetric: noop\n});\nexport default Logger;","map":{"version":3,"sources":["../../../../src/elements/common/logger/Logger.js"],"names":["React","noop","uuidv4","isMarkSupported","EVENT_JS_READY","METRIC_TYPE_PREVIEW","METRIC_TYPE_ELEMENTS_LOAD_METRIC","SESSION_ID","uniqueEvents","Set","Logger","Component","onMetric","props","loggerProps","onPreviewMetric","handlePreviewMetric","onReadyMetric","handleReadyMetric","name","source","has","type","data","metric","component","timestamp","getTimestamp","sessionId","eventName","createEventName","hasLoggedEvent","logMetric","add","startMarkName","metricData","logUniqueMetric","Date","toISOString","children","rest","cloneElement","logger"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport uuidv4 from 'uuid/v4';\nimport { isMarkSupported } from '../../../utils/performance';\nimport { EVENT_JS_READY } from './constants';\nimport { METRIC_TYPE_PREVIEW, METRIC_TYPE_ELEMENTS_LOAD_METRIC } from '../../../constants';\nimport type { ElementOrigin } from '../flowTypes';\nimport type { MetricType, ElementsLoadMetricData, LoggerProps } from '../../../common/types/logging';\n\ntype ElementsMetric = {\n    component: ElementOrigin,\n    name: string,\n    sessionId: string,\n    timestamp: string,\n    type: MetricType,\n} & ElementsLoadMetricData;\n\ntype Props = {\n    children: React.Element<any>,\n    fileId?: string,\n    onMetric: (data: Object) => void,\n    source: ElementOrigin,\n    startMarkName?: string,\n};\n\nconst SESSION_ID = uuidv4();\nconst uniqueEvents: Set<string> = new Set();\n\nclass Logger extends React.Component<Props> {\n    static defaultProps = {\n        onMetric: noop,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.loggerProps = {\n            onPreviewMetric: this.handlePreviewMetric,\n            onReadyMetric: this.handleReadyMetric,\n        };\n    }\n\n    loggerProps: LoggerProps;\n\n    get uniqueEvents(): Set<string> {\n        return uniqueEvents;\n    }\n\n    get sessionId(): string {\n        return SESSION_ID;\n    }\n\n    /**\n     * Creates an event name meant for use with an event which is unique and meant to be logged only once\n     *\n     * @param {string} name - The event name\n     * @returns {string} A string containing the component and event name\n     */\n    createEventName(name: string): string {\n        const { source } = this.props;\n        return `${source}::${name}`;\n    }\n\n    /**\n     * Checks to see if the specified event for the component has already been fired.\n     *\n     * @param {string} component - the component name\n     * @param {string} name - the event name\n     * @returns {boolean} True if the event has already been fired\n     */\n    hasLoggedEvent(name: string): boolean {\n        return this.uniqueEvents.has(name);\n    }\n\n    /**\n     * Invokes the provided metric logging callback.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     */\n    logMetric(type: MetricType, name: string, data: Object): void {\n        const { onMetric, source } = this.props;\n        const metric: ElementsMetric = {\n            ...data,\n            component: source,\n            name,\n            timestamp: this.getTimestamp(),\n            sessionId: this.sessionId,\n            type,\n        };\n\n        onMetric(metric);\n    }\n\n    /**\n     * Logs a unique metric event. Prevents duplicate events from being logged in the session.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     */\n    logUniqueMetric(type: MetricType, name: string, data: Object): void {\n        const eventName = this.createEventName(name);\n        if (this.hasLoggedEvent(eventName)) {\n            return;\n        }\n\n        this.logMetric(type, name, data);\n        this.uniqueEvents.add(eventName);\n    }\n\n    /**\n     * Preview metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handlePreviewMetric = (data: Object) => {\n        const { onMetric } = this.props;\n        onMetric({\n            ...data,\n            type: METRIC_TYPE_PREVIEW,\n        });\n    };\n\n    /**\n     * JS ready metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handleReadyMetric = (data: ElementsLoadMetricData) => {\n        if (!isMarkSupported) {\n            return;\n        }\n\n        const { startMarkName } = this.props;\n        const metricData = {\n            ...data,\n            startMarkName,\n        };\n        this.logUniqueMetric(METRIC_TYPE_ELEMENTS_LOAD_METRIC, EVENT_JS_READY, metricData);\n    };\n\n    /**\n     * Create an ISO Timestamp for right now.\n     *\n     * @returns {string}\n     */\n    getTimestamp(): string {\n        return new Date().toISOString();\n    }\n\n    render() {\n        const { children, onMetric, startMarkName, ...rest } = this.props;\n\n        return React.cloneElement(children, {\n            ...rest,\n            logger: this.loggerProps,\n        });\n    }\n}\n\nexport default Logger;\n"]},"metadata":{},"sourceType":"module"}