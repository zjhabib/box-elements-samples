{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Classification sidebar component\n * @author Box\n */\nimport React from 'react';\nimport getProp from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\nimport Classification, { classificationMessages, EditClassificationButton } from '../../features/classification';\nimport { INTERACTION_TARGET, SECTION_TARGETS } from '../common/interactionTargets';\nimport Collapsible from '../../components/collapsible';\nimport { FIELD_PERMISSIONS_CAN_UPLOAD } from '../../constants';\nimport './SidebarClassification.scss';\nvar SidebarClassification = function SidebarClassification(_ref) {\n  var classification = _ref.classification,\n    file = _ref.file,\n    onEdit = _ref.onEdit;\n  var isEditable = !!onEdit && getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n  var hasClassification = !!getProp(classification, 'name');\n  if (!hasClassification && !isEditable) {\n    return null;\n  }\n  return React.createElement(Collapsible, {\n    buttonProps: _defineProperty({}, INTERACTION_TARGET, SECTION_TARGETS.CLASSIFICATION),\n    className: \"bcs-SidebarClassification\",\n    headerActionItems: isEditable ? React.createElement(EditClassificationButton, {\n      className: \"bcs-SidebarClassification-edit\",\n      isEditing: hasClassification,\n      onEdit: onEdit\n    }) : null,\n    title: React.createElement(FormattedMessage, classificationMessages.classification)\n  }, React.createElement(Classification, _extends({}, classification, {\n    messageStyle: \"inline\"\n  })));\n};\nexport default SidebarClassification;","map":{"version":3,"sources":["../../../src/elements/content-sidebar/SidebarClassification.js"],"names":["React","getProp","FormattedMessage","Classification","classificationMessages","EditClassificationButton","INTERACTION_TARGET","SECTION_TARGETS","Collapsible","FIELD_PERMISSIONS_CAN_UPLOAD","SidebarClassification","classification","file","onEdit","isEditable","hasClassification","CLASSIFICATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,cAAP,IAAyBC,sBAAzB,EAAiDC,wBAAjD,QAAiF,+BAAjF;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,8BAApD;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,4BAAT,QAA6C,iBAA7C;AAGA,OAAO,8BAAP;AASA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,IAAA,EAA6C;EAAA,IAA1CC,cAA0C,GAAA,IAAA,CAA1CA,cAA0C;IAA1BC,IAA0B,GAAA,IAAA,CAA1BA,IAA0B;IAApBC,MAAoB,GAAA,IAAA,CAApBA,MAAoB;EACvE,IAAMC,UAAU,GAAG,CAAC,CAACD,MAAF,IAAYZ,OAAO,CAACW,IAAD,EAAOH,4BAAP,EAAqC,KAArC,CAAtC;EACA,IAAMM,iBAAiB,GAAG,CAAC,CAACd,OAAO,CAACU,cAAD,EAAiB,MAAjB,CAAnC;EACA,IAAI,CAACI,iBAAD,IAAsB,CAACD,UAA3B,EAAuC;IACnC,OAAO,IAAP;EACH;EACD,OACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACI,WAAW,EAAA,eAAA,CAAA,CAAA,CAAA,EACNR,kBADM,EACeC,eAAe,CAACS,cAD/B,CADf;IAII,SAAS,EAAC,2BAJd;IAKI,iBAAiB,EACbF,UAAU,GACN,KAAA,CAAA,aAAA,CAAC,wBAAD,EAAA;MACI,SAAS,EAAC,gCADd;MAEI,SAAS,EAAEC,iBAFf;MAGI,MAAM,EAAIF;IAHd,CAAA,CADM,GAMN,IAZZ;IAcI,KAAK,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBT,sBAAsB,CAACO,cAA7C;EAdX,CAAA,EAgBI,KAAA,CAAA,aAAA,CAAC,cAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAoBA,cAApB,EAAA;IAAoC,YAAY,EAAC;EAAjD,CAAA,CAAA,CAhBJ,CADJ;AAoBH,CA1BD;AA4BA,eAAeD,qBAAf","sourcesContent":["/**\n * @flow\n * @file Classification sidebar component\n * @author Box\n */\n\nimport React from 'react';\nimport getProp from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\n\nimport Classification, { classificationMessages, EditClassificationButton } from '../../features/classification';\nimport { INTERACTION_TARGET, SECTION_TARGETS } from '../common/interactionTargets';\nimport Collapsible from '../../components/collapsible';\nimport { FIELD_PERMISSIONS_CAN_UPLOAD } from '../../constants';\nimport type { ClassificationInfo } from './flowTypes';\nimport type { BoxItem } from '../../common/types/core';\nimport './SidebarClassification.scss';\n\ntype OnEdit = (e: SyntheticEvent<HTMLButtonElement>) => void;\ntype Props = {\n    classification?: ClassificationInfo,\n    file: BoxItem,\n    onEdit?: OnEdit,\n};\n\nconst SidebarClassification = ({ classification, file, onEdit }: Props) => {\n    const isEditable = !!onEdit && getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n    const hasClassification = !!getProp(classification, 'name');\n    if (!hasClassification && !isEditable) {\n        return null;\n    }\n    return (\n        <Collapsible\n            buttonProps={{\n                [INTERACTION_TARGET]: SECTION_TARGETS.CLASSIFICATION,\n            }}\n            className=\"bcs-SidebarClassification\"\n            headerActionItems={\n                isEditable ? (\n                    <EditClassificationButton\n                        className=\"bcs-SidebarClassification-edit\"\n                        isEditing={hasClassification}\n                        onEdit={((onEdit: any): OnEdit)}\n                    />\n                ) : null\n            }\n            title={<FormattedMessage {...classificationMessages.classification} />}\n        >\n            <Classification {...classification} messageStyle=\"inline\" />\n        </Collapsible>\n    );\n};\n\nexport default SidebarClassification;\n"]},"metadata":{},"sourceType":"module"}