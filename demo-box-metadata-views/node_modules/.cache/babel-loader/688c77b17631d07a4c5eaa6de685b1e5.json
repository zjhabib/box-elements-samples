{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport './Toggle.scss';\nvar Toggle = function Toggle(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    description = _ref.description,\n    isDisabled = _ref.isDisabled,\n    isOn = _ref.isOn,\n    _ref$isToggleRightAli = _ref.isToggleRightAligned,\n    isToggleRightAligned = _ref$isToggleRightAli === void 0 ? false : _ref$isToggleRightAli,\n    label = _ref.label,\n    name = _ref.name,\n    onBlur = _ref.onBlur,\n    onChange = _ref.onChange,\n    rest = _objectWithoutProperties(_ref, [\"className\", \"description\", \"isDisabled\", \"isOn\", \"isToggleRightAligned\", \"label\", \"name\", \"onBlur\", \"onChange\"]);\n  var classes = classNames('toggle-container', className, {\n    'is-toggle-right-aligned': isToggleRightAligned\n  });\n  var toggleElements = [React.createElement(\"div\", {\n    key: \"toggle-simple-switch\",\n    className: \"toggle-simple-switch\"\n  }), React.createElement(\"div\", {\n    key: \"toggle-simple-label\",\n    className: \"toggle-simple-label\"\n  }, label)];\n  if (isToggleRightAligned) {\n    toggleElements = toggleElements.reverse();\n  }\n  return React.createElement(\"div\", {\n    className: classes\n  }, React.createElement(\"label\", {\n    className: \"toggle-simple\"\n  }, React.createElement(\"input\", _extends({\n    checked: isOn,\n    className: \"toggle-simple-input\",\n    disabled: isDisabled,\n    name: name,\n    onBlur: onBlur,\n    onChange: onChange,\n    type: \"checkbox\"\n  }, rest)), toggleElements), description ? React.createElement(\"div\", {\n    className: \"toggle-simple-description\"\n  }, description) : null);\n};\nexport default Toggle;","map":{"version":3,"sources":["../../../src/components/toggle/Toggle.js"],"names":["React","classNames","Toggle","className","description","isDisabled","isOn","isToggleRightAligned","label","name","onBlur","onChange","rest","classes","toggleElements","reverse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,eAAP;AAuBA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,IAAA,EAWF;EAAA,IAAA,cAAA,GAAA,IAAA,CAVTC,SAUS;IAVTA,SAUS,GAAA,cAAA,KAAA,KAAA,CAAA,GAVG,EAUH,GAAA,cAAA;IATTC,WASS,GAAA,IAAA,CATTA,WASS;IARTC,UAQS,GAAA,IAAA,CARTA,UAQS;IAPTC,IAOS,GAAA,IAAA,CAPTA,IAOS;IAAA,qBAAA,GAAA,IAAA,CANTC,oBAMS;IANTA,oBAMS,GAAA,qBAAA,KAAA,KAAA,CAAA,GANc,KAMd,GAAA,qBAAA;IALTC,KAKS,GAAA,IAAA,CALTA,KAKS;IAJTC,IAIS,GAAA,IAAA,CAJTA,IAIS;IAHTC,MAGS,GAAA,IAAA,CAHTA,MAGS;IAFTC,QAES,GAAA,IAAA,CAFTA,QAES;IADNC,IACM,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,aAAA,EAAA,YAAA,EAAA,MAAA,EAAA,sBAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,UAAA,CAAA,CAAA;EACT,IAAMC,OAAO,GAAGZ,UAAU,CAAC,kBAAD,EAAqBE,SAArB,EAAgC;IACtD,yBAAA,EAA2BI;EAD2B,CAAhC,CAA1B;EAGA,IAAIO,cAAc,GAAG,CACjB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,GAAG,EAAC,sBAAT;IAAgC,SAAS,EAAC;EAA1C,CAAA,CADiB,EAEjB,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,GAAG,EAAC,qBAAT;IAA+B,SAAS,EAAC;EAAzC,CAAA,EACKN,KADL,CAFiB,CAArB;EAOA,IAAID,oBAAJ,EAA0B;IACtBO,cAAc,GAAGA,cAAc,CAACC,OAAfD,CAAAA,CAAjBA;EACH;EAED,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAED;EAAhB,CAAA,EAEI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;IAAO,SAAS,EAAC;EAAjB,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;IACI,OAAO,EAAEP,IADb;IAEI,SAAS,EAAC,qBAFd;IAGI,QAAQ,EAAED,UAHd;IAII,IAAI,EAAEI,IAJV;IAKI,MAAM,EAAEC,MALZ;IAMI,QAAQ,EAAEC,QANd;IAOI,IAAI,EAAC;EAPT,CAAA,EAQQC,IARR,CAAA,CADJ,EAWKE,cAXL,CAFJ,EAeKV,WAAW,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EAA4CA,WAA5C,CAAH,GAAoE,IAfpF,CADJ;AAmBH,CA7CD;AAgDA,eAAeF,MAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport './Toggle.scss';\n\ntype Props = {\n    className?: string,\n    /** Description of the input */\n    description?: React.Node,\n    isDisabled?: boolean, // @TODO: eventually call this `disabled`\n    /** Toggle state */\n    isOn?: boolean, // @TODO: eventually call this `checked`\n    /** If set to true, the toggle will be aligned to the right */\n    isToggleRightAligned?: boolean,\n    /** Label displayed for the input */\n    label: React.Node,\n    /** Name of the input */\n    name?: string,\n    /** blur callback function called with event as the argument */\n    onBlur?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** change callback function called with event as the argument */\n    onChange?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** optional value for the toggles checkbox */\n    value?: any,\n};\n\nconst Toggle = ({\n    className = '',\n    description,\n    isDisabled,\n    isOn,\n    isToggleRightAligned = false,\n    label,\n    name,\n    onBlur,\n    onChange,\n    ...rest\n}: Props) => {\n    const classes = classNames('toggle-container', className, {\n        'is-toggle-right-aligned': isToggleRightAligned,\n    });\n    let toggleElements = [\n        <div key=\"toggle-simple-switch\" className=\"toggle-simple-switch\" />,\n        <div key=\"toggle-simple-label\" className=\"toggle-simple-label\">\n            {label}\n        </div>,\n    ];\n\n    if (isToggleRightAligned) {\n        toggleElements = toggleElements.reverse();\n    }\n\n    return (\n        <div className={classes}>\n            {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n            <label className=\"toggle-simple\">\n                <input\n                    checked={isOn}\n                    className=\"toggle-simple-input\"\n                    disabled={isDisabled}\n                    name={name}\n                    onBlur={onBlur}\n                    onChange={onChange}\n                    type=\"checkbox\"\n                    {...rest}\n                />\n                {toggleElements}\n            </label>\n            {description ? <div className=\"toggle-simple-description\">{description}</div> : null}\n        </div>\n    );\n};\n\nexport type ToggleProps = Props;\nexport default Toggle;\n"]},"metadata":{},"sourceType":"module"}