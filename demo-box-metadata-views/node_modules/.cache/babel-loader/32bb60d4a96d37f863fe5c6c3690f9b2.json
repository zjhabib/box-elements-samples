{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager = /*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n      maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n      params = _objectWithoutProperties(_ref, [\"maxScrollSize\"]);\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n    _defineProperty(this, \"_cellSizeAndPositionManager\", void 0);\n    _defineProperty(this, \"_maxScrollSize\", void 0);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n  _createClass(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n        offset = _ref2.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n        align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n        containerSize = _ref3.containerSize,\n        currentOffset = _ref3.currentOffset,\n        targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n        offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n        offset = _ref5.offset,\n        totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n        offset = _ref6.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n        offset = _ref7.offset;\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n  return ScalingCellSizeAndPositionManager;\n}();\nexport { ScalingCellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";","map":{"version":3,"names":["_objectWithoutProperties","_classCallCheck","_createClass","_defineProperty","CellSizeAndPositionManager","getMaxElementSize","ScalingCellSizeAndPositionManager","_ref","_ref$maxScrollSize","maxScrollSize","params","_cellSizeAndPositionManager","_maxScrollSize","key","value","areOffsetsAdjusted","getTotalSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","getOffsetAdjustment","_ref2","containerSize","offset","totalSize","safeTotalSize","offsetPercentage","_getOffsetPercentage","Math","round","getSizeAndPositionOfCell","index","getSizeAndPositionOfLastMeasuredCell","min","getUpdatedOffsetForIndex","_ref3","_ref3$align","align","currentOffset","targetIndex","_safeOffsetToOffset","_offsetToSafeOffset","getVisibleCellRange","_ref4","resetCell","_ref5","_ref6","_ref7","default","bpfrpt_proptype_Alignment","bpfrpt_proptype_CellSizeGetter","bpfrpt_proptype_VisibleCellRange"],"sources":["/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/react-virtualized/dist/es/Grid/utils/ScalingCellSizeAndPositionManager.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n        params = _objectWithoutProperties(_ref, [\"maxScrollSize\"]);\n\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n\n    _defineProperty(this, \"_cellSizeAndPositionManager\", void 0);\n\n    _defineProperty(this, \"_maxScrollSize\", void 0);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  _createClass(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexport { ScalingCellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";"],"mappings":"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"},"metadata":{},"sourceType":"module"}