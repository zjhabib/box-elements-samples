{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\n/**\n * \n * @file Helper for the box versions API\n * @author Box\n */\nimport Base from './Base';\nimport { ERROR_CODE_FETCH_ACCESS_STATS } from '../constants';\nvar FileAccessStats = /*#__PURE__*/\nfunction (_Base) {\n  _inherits(FileAccessStats, _Base);\n  function FileAccessStats() {\n    _classCallCheck(this, FileAccessStats);\n    return _possibleConstructorReturn(this, _getPrototypeOf(FileAccessStats).apply(this, arguments));\n  }\n  _createClass(FileAccessStats, [{\n    key: \"getUrl\",\n    /**\n     * API URL for access stats\n     *\n     * @param {string} [id] - a box file id\n     * @return {string} base url for files\n     */\n    value: function getUrl(id) {\n      if (!id) {\n        throw new Error('Missing file id!');\n      }\n      return \"\".concat(this.getBaseApiUrl(), \"/file_access_stats/\").concat(id);\n    }\n    /**\n     * API for fetching access stats on a file\n     *\n     * @param {string} id - a box file id\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void>}\n     */\n  }, {\n    key: \"getFileAccessStats\",\n    value: function getFileAccessStats(id, successCallback, errorCallback) {\n      this.errorCode = ERROR_CODE_FETCH_ACCESS_STATS;\n      this.get({\n        id: id,\n        successCallback: successCallback,\n        errorCallback: errorCallback\n      });\n    }\n  }]);\n  return FileAccessStats;\n}(Base);\nexport default FileAccessStats;","map":{"version":3,"sources":["../../src/api/FileAccessStats.js"],"names":["Base","ERROR_CODE_FETCH_ACCESS_STATS","FileAccessStats","id","Error","getBaseApiUrl","successCallback","errorCallback","errorCode","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,6BAAT,QAA8C,cAA9C;IAGMC,e;;;;;;;;;IACF;;;;;;2BAMOC,E,EAAoB;MACvB,IAAI,CAACA,EAAL,EAAS;QACL,MAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;MACH;MAED,OAAA,EAAA,CAAA,MAAA,CAAU,IAAA,CAAKC,aAAL,CAAA,CAAV,EAAA,qBAAA,CAAA,CAAA,MAAA,CAAoDF,EAApD,CAAA;IACH;IAED;;;;;;;;;;uCAQmBA,E,EAAYG,e,EAA2BC,a,EAA4C;MAClG,IAAA,CAAKC,SAAL,GAAiBP,6BAAjB;MACA,IAAA,CAAKQ,GAAL,CAAS;QACLN,EAAE,EAAFA,EADK;QAELG,eAAe,EAAfA,eAFK;QAGLC,aAAa,EAAbA;MAHK,CAAT,CAAA;IAKH;;;EA9ByBP,I;AAiC9B,eAAeE,eAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box versions API\n * @author Box\n */\n\nimport Base from './Base';\nimport { ERROR_CODE_FETCH_ACCESS_STATS } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\nclass FileAccessStats extends Base {\n    /**\n     * API URL for access stats\n     *\n     * @param {string} [id] - a box file id\n     * @return {string} base url for files\n     */\n    getUrl(id: string): string {\n        if (!id) {\n            throw new Error('Missing file id!');\n        }\n\n        return `${this.getBaseApiUrl()}/file_access_stats/${id}`;\n    }\n\n    /**\n     * API for fetching access stats on a file\n     *\n     * @param {string} id - a box file id\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void>}\n     */\n    getFileAccessStats(id: string, successCallback: Function, errorCallback: ElementsErrorCallback): void {\n        this.errorCode = ERROR_CODE_FETCH_ACCESS_STATS;\n        this.get({\n            id,\n            successCallback,\n            errorCallback,\n        });\n    }\n}\n\nexport default FileAccessStats;\n"]},"metadata":{},"sourceType":"module"}