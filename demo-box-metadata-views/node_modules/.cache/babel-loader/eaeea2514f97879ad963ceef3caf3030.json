{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\n/**\n * \n * @file class for Box marker based API's to inherit common functionality from\n * @author Box\n */\nimport { getTypedFileId } from '../utils/file';\nimport Base from './Base';\nvar MarkerBasedApi = /*#__PURE__*/\nfunction (_Base) {\n  _inherits(MarkerBasedApi, _Base);\n  function MarkerBasedApi() {\n    _classCallCheck(this, MarkerBasedApi);\n    return _possibleConstructorReturn(this, _getPrototypeOf(MarkerBasedApi).apply(this, arguments));\n  }\n  _createClass(MarkerBasedApi, [{\n    key: \"hasMoreItems\",\n    /**\n     * @property {Data}\n     */\n\n    /**\n     * Determines if the API has more items to fetch\n     *\n     * @param {string} marker the marker from the start to start fetching at\n     * @return {boolean} true if there are more items\n     */\n    value: function hasMoreItems(marker) {\n      return marker !== null && marker !== '';\n    }\n    /**\n     * Helper for get\n     *\n     * @param {string} id the file id\n     * @param {string} marker the marker from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {Object} requestData the request query params\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling\n     * @private\n     */\n  }, {\n    key: \"markerGetRequest\",\n    value: function () {\n      var _markerGetRequest = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id, marker, limit, shouldFetchAll) {\n        var requestData,\n          url,\n          queryParams,\n          _ref,\n          data,\n          entries,\n          nextMarker,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                requestData = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};\n                if (!this.isDestroyed()) {\n                  _context.next = 3;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 3:\n                _context.prev = 3;\n                url = this.getUrl(id);\n                queryParams = _objectSpread({}, requestData, {\n                  marker: marker,\n                  limit: limit\n                });\n                _context.next = 8;\n                return this.xhr.get({\n                  url: url,\n                  id: getTypedFileId(id),\n                  params: queryParams\n                });\n              case 8:\n                _ref = _context.sent;\n                data = _ref.data;\n                entries = this.data ? this.data.entries : [];\n                this.data = _objectSpread({}, data, {\n                  entries: entries.concat(data.entries)\n                });\n                nextMarker = data.next_marker;\n                if (!(shouldFetchAll && this.hasMoreItems(nextMarker))) {\n                  _context.next = 16;\n                  break;\n                }\n                this.markerGetRequest(id, nextMarker, limit, shouldFetchAll, requestData);\n                return _context.abrupt(\"return\");\n              case 16:\n                this.successHandler(this.data);\n                _context.next = 22;\n                break;\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](3);\n                this.errorHandler(_context.t0);\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 19]]);\n      }));\n      function markerGetRequest(_x, _x2, _x3, _x4) {\n        return _markerGetRequest.apply(this, arguments);\n      }\n      return markerGetRequest;\n    }()\n    /**\n     * Marker based API get\n     * @param {Object} options\n     * @param {string} options.id the file id\n     * @param {Function} options.successCallback the success callback\n     * @param {Function} options.errorCallback the error callback\n     * @param {string} [options.marker] the marker from the start to start fetching at\n     * @param {number} [options.limit] the number of items to fetch\n     * @param {Object} options.requestData the request query params\n     * @param {boolean} [options.shouldFetchAll] true if should get all the pages before calling the sucessCallback\n     */\n  }, {\n    key: \"markerGet\",\n    value: function () {\n      var _markerGet = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref2) {\n        var id, successCallback, errorCallback, _ref2$marker, marker, _ref2$limit, limit, requestData, _ref2$shouldFetchAll, shouldFetchAll;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                id = _ref2.id, successCallback = _ref2.successCallback, errorCallback = _ref2.errorCallback, _ref2$marker = _ref2.marker, marker = _ref2$marker === void 0 ? '' : _ref2$marker, _ref2$limit = _ref2.limit, limit = _ref2$limit === void 0 ? 1000 : _ref2$limit, requestData = _ref2.requestData, _ref2$shouldFetchAll = _ref2.shouldFetchAll, shouldFetchAll = _ref2$shouldFetchAll === void 0 ? true : _ref2$shouldFetchAll;\n                this.successCallback = successCallback;\n                this.errorCallback = errorCallback;\n                return _context2.abrupt(\"return\", this.markerGetRequest(id, marker, limit, shouldFetchAll, requestData));\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function markerGet(_x5) {\n        return _markerGet.apply(this, arguments);\n      }\n      return markerGet;\n    }()\n  }]);\n  return MarkerBasedApi;\n}(Base);\nexport default MarkerBasedApi;","map":{"version":3,"sources":["../../src/api/MarkerBasedAPI.js"],"names":["getTypedFileId","Base","MarkerBasedApi","marker","id","limit","shouldFetchAll","requestData","isDestroyed","url","getUrl","queryParams","data","xhr","get","params","entries","concat","nextMarker","next_marker","hasMoreItems","markerGetRequest","successHandler","errorHandler","successCallback","errorCallback"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,SAASA,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;IAcMC,c;;;;;;;;;IACF;;;;IAKA;;;;;;iCAMaC,M,EAAyB;MAClC,OAAOA,MAAM,KAAK,IAAXA,IAAmBA,MAAM,KAAK,EAArC;IACH;IAED;;;;;;;;;;;;;;gDAWIC,E,EACAD,M,EACAE,K,EACAC,c;;;;;;;;;;;;;gBACAC,W,2DAAsB,CAAA,C;qBAElB,IAAA,CAAKC,WAAL,CAAA,C;;;;;;;gBAMMC,G,GAAM,IAAA,CAAKC,MAAL,CAAYN,EAAZ,C;gBACNO,W,qBACCJ,W;kBACHJ,MAAM,EAANA,M;kBACAE,KAAK,EAALA;;;uBAGmC,IAAA,CAAKQ,GAAL,CAASC,GAAT,CAAa;kBAChDL,GAAG,EAAHA,GADgD;kBAEhDL,EAAE,EAAEJ,cAAc,CAACI,EAAD,CAF8B;kBAGhDW,MAAM,EAAEJ;gBAHwC,CAAb,C;;;gBAA/BC,I,QAAAA,I;gBAMFI,O,GAAU,IAAA,CAAKJ,IAAL,GAAY,IAAA,CAAKA,IAAL,CAAUI,OAAtB,GAAgC,E;gBAChD,IAAA,CAAKJ,IAAL,GAAA,aAAA,CAAA,CAAA,CAAA,EACOA,IADP,EAAA;kBAEII,OAAO,EAAEA,OAAO,CAACC,MAARD,CAAeJ,IAAI,CAACI,OAApBA;gBAFb,CAAA,CAAA;gBAIME,U,GAAaN,IAAI,CAACO,W;sBACpBb,cAAc,IAAI,IAAA,CAAKc,YAAL,CAAkBF,UAAlB,C;;;;gBAClB,IAAA,CAAKG,gBAAL,CAAsBjB,EAAtB,EAA0Bc,UAA1B,EAAsCb,KAAtC,EAA6CC,cAA7C,EAA6DC,WAA7D,CAAA;;;gBAIJ,IAAA,CAAKe,cAAL,CAAoB,IAAA,CAAKV,IAAzB,CAAA;;;;;;gBAEA,IAAA,CAAKW,YAAL,CAAA,QAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;IAIR;;;;;;;;;;;;;;;;;;;;;gBAYInB,E,SAAAA,E,EACAoB,e,SAAAA,e,EACAC,a,SAAAA,a,uBACAtB,M,EAAAA,M,6BAAS,E,qCACTE,K,EAAAA,K,4BAAQ,I,gBACRE,W,SAAAA,W,+BACAD,c,EAAAA,c,qCAAiB,I;gBAUjB,IAAA,CAAKkB,eAAL,GAAuBA,eAAvB;gBACA,IAAA,CAAKC,aAAL,GAAqBA,aAArB;kDAEO,IAAA,CAAKJ,gBAAL,CAAsBjB,EAAtB,EAA0BD,MAA1B,EAAkCE,KAAlC,EAAyCC,cAAzC,EAAyDC,WAAzD,C;;;;;;;;;;;;;;;EApGcN,I;AAwG7B,eAAeC,cAAf","sourcesContent":["/**\n * @flow\n * @file class for Box marker based API's to inherit common functionality from\n * @author Box\n */\nimport { getTypedFileId } from '../utils/file';\nimport Base from './Base';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\ntype Params = {\n    limit: number,\n    marker: string,\n};\n\ntype Data = {\n    entries: Array<any>,\n    limit: number,\n    next_marker: string,\n};\n\nclass MarkerBasedApi extends Base {\n    /**\n     * @property {Data}\n     */\n    data: Data;\n\n    /**\n     * Determines if the API has more items to fetch\n     *\n     * @param {string} marker the marker from the start to start fetching at\n     * @return {boolean} true if there are more items\n     */\n    hasMoreItems(marker: string): boolean {\n        return marker !== null && marker !== '';\n    }\n\n    /**\n     * Helper for get\n     *\n     * @param {string} id the file id\n     * @param {string} marker the marker from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {Object} requestData the request query params\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling\n     * @private\n     */\n    async markerGetRequest(\n        id: string,\n        marker: string,\n        limit: number,\n        shouldFetchAll: boolean,\n        requestData: Object = {},\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Make the XHR request\n        try {\n            const url = this.getUrl(id);\n            const queryParams: Params = {\n                ...requestData,\n                marker,\n                limit,\n            };\n\n            const { data }: { data: Data } = await this.xhr.get({\n                url,\n                id: getTypedFileId(id),\n                params: queryParams,\n            });\n\n            const entries = this.data ? this.data.entries : [];\n            this.data = {\n                ...data,\n                entries: entries.concat(data.entries),\n            };\n            const nextMarker = data.next_marker;\n            if (shouldFetchAll && this.hasMoreItems(nextMarker)) {\n                this.markerGetRequest(id, nextMarker, limit, shouldFetchAll, requestData);\n                return;\n            }\n\n            this.successHandler(this.data);\n        } catch (error) {\n            this.errorHandler(error);\n        }\n    }\n\n    /**\n     * Marker based API get\n     * @param {Object} options\n     * @param {string} options.id the file id\n     * @param {Function} options.successCallback the success callback\n     * @param {Function} options.errorCallback the error callback\n     * @param {string} [options.marker] the marker from the start to start fetching at\n     * @param {number} [options.limit] the number of items to fetch\n     * @param {Object} options.requestData the request query params\n     * @param {boolean} [options.shouldFetchAll] true if should get all the pages before calling the sucessCallback\n     */\n    async markerGet({\n        id,\n        successCallback,\n        errorCallback,\n        marker = '',\n        limit = 1000,\n        requestData,\n        shouldFetchAll = true,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        limit?: number,\n        marker?: string,\n        requestData?: Object,\n        shouldFetchAll?: boolean,\n        successCallback: Function,\n    }): Promise<void> {\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        return this.markerGetRequest(id, marker, limit, shouldFetchAll, requestData);\n    }\n}\n\nexport default MarkerBasedApi;\n"]},"metadata":{},"sourceType":"module"}