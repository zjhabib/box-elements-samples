{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport LoadingIndicator, { LoadingIndicatorSize } from './LoadingIndicator';\nimport './LoadingIndicatorWrapper.scss';\nexport var LoadingIndicatorWrapperPosition;\n(function (LoadingIndicatorWrapperPosition) {\n  LoadingIndicatorWrapperPosition[\"CENTER\"] = \"center\";\n  LoadingIndicatorWrapperPosition[\"TOP\"] = \"top\";\n})(LoadingIndicatorWrapperPosition || (LoadingIndicatorWrapperPosition = {}));\nvar LoadingIndicatorWrapper = function LoadingIndicatorWrapper(_ref) {\n  var children = _ref.children,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    _ref$crawlerPosition = _ref.crawlerPosition,\n    crawlerPosition = _ref$crawlerPosition === void 0 ? LoadingIndicatorWrapperPosition.CENTER : _ref$crawlerPosition,\n    _ref$crawlerSize = _ref.crawlerSize,\n    crawlerSize = _ref$crawlerSize === void 0 ? LoadingIndicatorSize.DEFAULT : _ref$crawlerSize,\n    _ref$isLoading = _ref.isLoading,\n    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,\n    _ref$hideContent = _ref.hideContent,\n    hideContent = _ref$hideContent === void 0 ? false : _ref$hideContent,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"crawlerPosition\", \"crawlerSize\", \"isLoading\", \"hideContent\"]);\n  var crawlerPositionClassName = classnames('loading-indicator-veil', {\n    'is-with-top-crawler': crawlerPosition === LoadingIndicatorWrapperPosition.TOP,\n    'is-with-center-crawler': crawlerPosition === LoadingIndicatorWrapperPosition.CENTER\n  }, hideContent ? 'hide-content' : 'blur-content');\n  return React.createElement(\"div\", _extends({\n    className: \"loading-indicator-wrapper \".concat(className)\n  }, rest), children, isLoading && React.createElement(\"div\", {\n    className: crawlerPositionClassName\n  }, React.createElement(LoadingIndicator, {\n    size: crawlerSize\n  })));\n};\nexport default LoadingIndicatorWrapper;","map":{"version":3,"sources":["../../../src/components/loading-indicator/LoadingIndicatorWrapper.tsx"],"names":["React","classnames","LoadingIndicator","LoadingIndicatorSize","LoadingIndicatorWrapperPosition","LoadingIndicatorWrapper","children","className","crawlerPosition","CENTER","crawlerSize","DEFAULT","isLoading","hideContent","rest","crawlerPositionClassName","TOP"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,gBAAP,IAA2BC,oBAA3B,QAAuD,oBAAvD;AACA,OAAO,gCAAP;AAEA,OAAA,IAAYC,+BAAZ;WAAYA,+B;EAAAA,+B;EAAAA,+B;GAAAA,+B,KAAAA,+B;AAmBZ,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,IAAA,EAQI;EAAA,IAPhCC,QAOgC,GAAA,IAAA,CAPhCA,QAOgC;IAAA,cAAA,GAAA,IAAA,CANhCC,SAMgC;IANhCA,SAMgC,GAAA,cAAA,KAAA,KAAA,CAAA,GANpB,EAMoB,GAAA,cAAA;IAAA,oBAAA,GAAA,IAAA,CALhCC,eAKgC;IALhCA,eAKgC,GAAA,oBAAA,KAAA,KAAA,CAAA,GALdJ,+BAA+B,CAACK,MAKlB,GAAA,oBAAA;IAAA,gBAAA,GAAA,IAAA,CAJhCC,WAIgC;IAJhCA,WAIgC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAJlBP,oBAAoB,CAACQ,OAIH,GAAA,gBAAA;IAAA,cAAA,GAAA,IAAA,CAHhCC,SAGgC;IAHhCA,SAGgC,GAAA,cAAA,KAAA,KAAA,CAAA,GAHpB,KAGoB,GAAA,cAAA;IAAA,gBAAA,GAAA,IAAA,CAFhCC,WAEgC;IAFhCA,WAEgC,GAAA,gBAAA,KAAA,KAAA,CAAA,GAFlB,KAEkB,GAAA,gBAAA;IAD7BC,IAC6B,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,WAAA,EAAA,aAAA,CAAA,CAAA;EAChC,IAAMC,wBAAwB,GAAGd,UAAU,CACvC,wBADuC,EAEvC;IACI,qBAAA,EAAuBO,eAAe,KAAKJ,+BAA+B,CAACY,GAD/E;IAEI,wBAAA,EAA0BR,eAAe,KAAKJ,+BAA+B,CAACK;EAFlF,CAFuC,EAMvCI,WAAW,GAAG,cAAH,GAAoB,cANQ,CAA3C;EAQA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;IAAK,SAAS,EAAA,4BAAA,CAAA,MAAA,CAA+BN,SAA/B;EAAd,CAAA,EAA8DO,IAA9D,CAAA,EACKR,QADL,EAEKM,SAAS,IACN,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAEG;EAAhB,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA;IAAkB,IAAI,EAAEL;EAAxB,CAAA,CADJ,CAHR,CADJ;AAUH,CA3BD;AA6BA,eAAeL,uBAAf","sourcesContent":["import * as React from 'react';\nimport classnames from 'classnames';\nimport LoadingIndicator, { LoadingIndicatorSize } from './LoadingIndicator';\nimport './LoadingIndicatorWrapper.scss';\n\nexport enum LoadingIndicatorWrapperPosition {\n    CENTER = 'center',\n    TOP = 'top',\n}\nexport interface LoadingIndicatorWrapperProps {\n    /** The content to wrap */\n    children: React.ReactChild;\n    /** Custom class for the loading indicator wrapper */\n    className?: string;\n    /** Location of the loading indicator - top, center */\n    crawlerPosition?: LoadingIndicatorWrapperPosition;\n    /** Size of the loading indicator - small, medium, large, default */\n    crawlerSize?: LoadingIndicatorSize;\n    /** Makes the background white hiding the content */\n    hideContent?: boolean;\n    /** Indicates whether loading indicator should show */\n    isLoading?: boolean;\n}\n\nconst LoadingIndicatorWrapper = ({\n    children,\n    className = '',\n    crawlerPosition = LoadingIndicatorWrapperPosition.CENTER,\n    crawlerSize = LoadingIndicatorSize.DEFAULT,\n    isLoading = false,\n    hideContent = false,\n    ...rest\n}: LoadingIndicatorWrapperProps) => {\n    const crawlerPositionClassName = classnames(\n        'loading-indicator-veil',\n        {\n            'is-with-top-crawler': crawlerPosition === LoadingIndicatorWrapperPosition.TOP,\n            'is-with-center-crawler': crawlerPosition === LoadingIndicatorWrapperPosition.CENTER,\n        },\n        hideContent ? 'hide-content' : 'blur-content',\n    );\n    return (\n        <div className={`loading-indicator-wrapper ${className}`} {...rest}>\n            {children}\n            {isLoading && (\n                <div className={crawlerPositionClassName}>\n                    <LoadingIndicator size={crawlerSize} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default LoadingIndicatorWrapper;\n"]},"metadata":{},"sourceType":"module"}