{"ast":null,"code":"var _rotations;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nexport var DirectionType;\n(function (DirectionType) {\n  DirectionType[\"DOWN\"] = \"down\";\n  DirectionType[\"LEFT\"] = \"left\";\n  DirectionType[\"RIGHT\"] = \"right\";\n  DirectionType[\"UP\"] = \"up\";\n})(DirectionType || (DirectionType = {}));\nvar rotations = (_rotations = {}, _defineProperty(_rotations, DirectionType.DOWN, 135), _defineProperty(_rotations, DirectionType.LEFT, 225), _defineProperty(_rotations, DirectionType.RIGHT, 45), _defineProperty(_rotations, DirectionType.UP, 315), _rotations);\nvar IconChevron = function IconChevron(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? '#000' : _ref$color,\n    _ref$direction = _ref.direction,\n    direction = _ref$direction === void 0 ? DirectionType.UP : _ref$direction,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? '9px' : _ref$size,\n    _ref$thickness = _ref.thickness,\n    thickness = _ref$thickness === void 0 ? '2px' : _ref$thickness;\n  return React.createElement(\"span\", {\n    className: \"icon-chevron icon-chevron-\".concat(direction, \" \").concat(className),\n    style: {\n      borderColor: color,\n      borderStyle: 'solid solid none none',\n      borderWidth: thickness,\n      display: 'inline-block',\n      height: size,\n      transform: \"rotate(\".concat(rotations[direction], \"deg)\"),\n      width: size\n    }\n  });\n};\nexport default IconChevron;","map":{"version":3,"sources":["../../../src/icons/general/IconChevron.tsx"],"names":["React","DirectionType","rotations","DOWN","LEFT","RIGHT","UP","IconChevron","className","color","direction","size","thickness","borderColor","borderStyle","borderWidth","display","height","transform","width"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAA,IAAYC,aAAZ;WAAYA,a;EAAAA,a;EAAAA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a;AAOZ,IAAMC,SAAS,IAAA,UAAA,GAAA,CAAA,CAAA,EAAA,eAAA,CAAA,UAAA,EACVD,aAAa,CAACE,IADJ,EACW,GADX,CAAA,EAAA,eAAA,CAAA,UAAA,EAEVF,aAAa,CAACG,IAFJ,EAEW,GAFX,CAAA,EAAA,eAAA,CAAA,UAAA,EAGVH,aAAa,CAACI,KAHJ,EAGY,EAHZ,CAAA,EAAA,eAAA,CAAA,UAAA,EAIVJ,aAAa,CAACK,EAJJ,EAIS,GAJT,CAAA,EAAA,UAAA,CAAf;AAoBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAAA;EAAA,IAAA,cAAA,GAAA,IAAA,CAChBC,SADgB;IAChBA,SADgB,GAAA,cAAA,KAAA,KAAA,CAAA,GACJ,EADI,GAAA,cAAA;IAAA,UAAA,GAAA,IAAA,CAEhBC,KAFgB;IAEhBA,KAFgB,GAAA,UAAA,KAAA,KAAA,CAAA,GAER,MAFQ,GAAA,UAAA;IAAA,cAAA,GAAA,IAAA,CAGhBC,SAHgB;IAGhBA,SAHgB,GAAA,cAAA,KAAA,KAAA,CAAA,GAGJT,aAAa,CAACK,EAHV,GAAA,cAAA;IAAA,SAAA,GAAA,IAAA,CAIhBK,IAJgB;IAIhBA,IAJgB,GAAA,SAAA,KAAA,KAAA,CAAA,GAIT,KAJS,GAAA,SAAA;IAAA,cAAA,GAAA,IAAA,CAKhBC,SALgB;IAKhBA,SALgB,GAAA,cAAA,KAAA,KAAA,CAAA,GAKJ,KALI,GAAA,cAAA;EAAA,OAOhB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IACI,SAAS,EAAA,4BAAA,CAAA,MAAA,CAA+BF,SAA/B,EAAA,GAAA,CAAA,CAAA,MAAA,CAA4CF,SAA5C,CADb;IAEI,KAAK,EAAE;MACHK,WAAW,EAAEJ,KADV;MAEHK,WAAW,EAAE,uBAFV;MAGHC,WAAW,EAAEH,SAHV;MAIHI,OAAO,EAAE,cAJN;MAKHC,MAAM,EAAEN,IALL;MAMHO,SAAS,EAAA,SAAA,CAAA,MAAA,CAAYhB,SAAS,CAACQ,SAAD,CAArB,EAAA,MAAA,CANN;MAOHS,KAAK,EAAER;IAPJ;EAFX,CAAA,CAPgB;AAAA,CAApB;AAqBA,eAAeJ,WAAf","sourcesContent":["import * as React from 'react';\n\nexport enum DirectionType {\n    DOWN = 'down',\n    LEFT = 'left',\n    RIGHT = 'right',\n    UP = 'up',\n}\n\nconst rotations = {\n    [DirectionType.DOWN]: 135,\n    [DirectionType.LEFT]: 225,\n    [DirectionType.RIGHT]: 45,\n    [DirectionType.UP]: 315,\n};\n\ninterface IconChevronProps {\n    /** Class name for the icon */\n    className?: string;\n    /** A string describing the color for the icon */\n    color?: string;\n    /** A string describing the direction of the icon */\n    direction?: DirectionType;\n    /** A string describing the size of the icon */\n    size?: string;\n    /** A string describing the thickness of the icon */\n    thickness?: string;\n}\n\nconst IconChevron = ({\n    className = '',\n    color = '#000',\n    direction = DirectionType.UP,\n    size = '9px',\n    thickness = '2px',\n}: IconChevronProps) => (\n    <span\n        className={`icon-chevron icon-chevron-${direction} ${className}`}\n        style={{\n            borderColor: color,\n            borderStyle: 'solid solid none none',\n            borderWidth: thickness,\n            display: 'inline-block',\n            height: size,\n            transform: `rotate(${rotations[direction]}deg)`,\n            width: size,\n        }}\n    />\n);\n\nexport default IconChevron;\n"]},"metadata":{},"sourceType":"module"}