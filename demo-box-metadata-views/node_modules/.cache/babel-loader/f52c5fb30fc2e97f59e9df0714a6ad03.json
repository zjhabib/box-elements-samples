{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * \n * @file Helper for some browser utilities\n * @author Box\n */\nvar isDashSupported;\nvar Browser = /*#__PURE__*/\nfunction () {\n  function Browser() {\n    _classCallCheck(this, Browser);\n  }\n  _createClass(Browser, null, [{\n    key: \"getUserAgent\",\n    /**\n     * Returns the user agent.\n     * Helps in mocking out.\n     *\n     * @return {String} navigator userAgent\n     */\n    value: function getUserAgent() {\n      return global.navigator.userAgent;\n    }\n    /**\n     * Returns whether browser is mobile.\n     *\n     * @return {boolean} Whether browser is mobile\n     */\n  }, {\n    key: \"isMobile\",\n    value: function isMobile() {\n      // Relying on the user agent to avoid desktop browsers on machines with touch screens.\n      return /iphone|ipad|ipod|android|blackberry|bb10|mini|windows\\sce|palm/i.test(Browser.getUserAgent());\n    }\n    /**\n     * Returns whether browser is IE.\n     *\n     * @return {boolena} Whether browser is IE\n     */\n  }, {\n    key: \"isIE\",\n    value: function isIE() {\n      return /Trident/i.test(Browser.getUserAgent());\n    }\n    /**\n     * Checks the browser for Dash support using H264 high.\n     * Dash requires MediaSource extensions to exist and be applicable\n     * to the H264 container (since we use H264 and not webm)\n     *\n     * @public\n     * @param {boolean} recheck - recheck support\n     * @return {boolean} true if dash is usable\n     */\n  }, {\n    key: \"canPlayDash\",\n    value: function canPlayDash() {\n      var recheck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (typeof isDashSupported === 'undefined' || recheck) {\n        var mse = global.MediaSource;\n        isDashSupported = !!mse && typeof mse.isTypeSupported === 'function' && mse.isTypeSupported('video/mp4; codecs=\"avc1.64001E\"');\n      }\n      return isDashSupported;\n    }\n    /**\n     * Checks whether the browser has support for the Clipboard API. This new API supercedes\n     * the `execCommand`-based API and uses Promises for detecting whether it works or not.\n     *\n     * This check determines if the browser can support writing to the clipboard.\n     * @see https://www.w3.org/TR/clipboard-apis/#async-clipboard-api\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Clipboard\n     *\n     * @return {boolean} whether writing to the clipboard is possible\n     */\n  }, {\n    key: \"canWriteToClipboard\",\n    value: function canWriteToClipboard() {\n      return !!(global.navigator.clipboard && global.navigator.clipboard.writeText);\n    }\n    /**\n     * Checks whether the browser has support for the Clipboard API. This new API supercedes\n     * the `execCommand`-based API and uses Promises for detecting whether it works or not.\n     *\n     * This check determines if the browser can support reading from the clipboard.\n     * @see https://www.w3.org/TR/clipboard-apis/#async-clipboard-api\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Clipboard\n     *\n     * @return {boolean} whether reading from the clipboard is possible\n     */\n  }, {\n    key: \"canReadFromClipboard\",\n    value: function canReadFromClipboard() {\n      return !!(global.navigator.clipboard && global.navigator.clipboard.readText);\n    }\n  }]);\n  return Browser;\n}();\nexport default Browser;","map":{"version":3,"sources":["../../src/utils/Browser.js"],"names":["isDashSupported","Browser","global","navigator","userAgent","test","getUserAgent","recheck","mse","MediaSource","isTypeSupported","clipboard","writeText","readText"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,IAAIA,eAAJ;IAEMC,O;;;;;;;IACF;;;;;;mCAM8B;MAC1B,OAAOC,MAAM,CAACC,SAAPD,CAAiBE,SAAxB;IACH;IAED;;;;;;;+BAK2B;MACvB;MACA,OAAO,iEAAA,CAAkEC,IAAlE,CAAuEJ,OAAO,CAACK,YAARL,CAAAA,CAAvE,CAAP;IACH;IAED;;;;;;;2BAKc;MACV,OAAO,UAAA,CAAWI,IAAX,CAAgBJ,OAAO,CAACK,YAARL,CAAAA,CAAhB,CAAP;IACH;IAED;;;;;;;;;;;kCAS6C;MAAA,IAA1BM,OAA0B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO;MACzC,IAAI,OAAOP,eAAP,KAA2B,WAA3B,IAA0CO,OAA9C,EAAuD;QACnD,IAAMC,GAAG,GAAGN,MAAM,CAACO,WAAnB;QACAT,eAAe,GACX,CAAC,CAACQ,GAAF,IACA,OAAOA,GAAG,CAACE,eAAX,KAA+B,UAD/B,IAEAF,GAAG,CAACE,eAAJF,CAAoB,iCAApBA,CAHJR;MAIH;MAED,OAAOA,eAAP;IACH;IAED;;;;;;;;;;;;0CAU6B;MACzB,OAAO,CAAC,EAAEE,MAAM,CAACC,SAAPD,CAAiBS,SAAjBT,IAA8BA,MAAM,CAACC,SAAPD,CAAiBS,SAAjBT,CAA2BU,SAA3D,CAAR;IACH;IAED;;;;;;;;;;;;2CAU8B;MAC1B,OAAO,CAAC,EAAEV,MAAM,CAACC,SAAPD,CAAiBS,SAAjBT,IAA8BA,MAAM,CAACC,SAAPD,CAAiBS,SAAjBT,CAA2BW,QAA3D,CAAR;IACH;;;;AAGL,eAAeZ,OAAf","sourcesContent":["/**\n * @flow\n * @file Helper for some browser utilities\n * @author Box\n */\n\nlet isDashSupported;\n\nclass Browser {\n    /**\n     * Returns the user agent.\n     * Helps in mocking out.\n     *\n     * @return {String} navigator userAgent\n     */\n    static getUserAgent(): string {\n        return global.navigator.userAgent;\n    }\n\n    /**\n     * Returns whether browser is mobile.\n     *\n     * @return {boolean} Whether browser is mobile\n     */\n    static isMobile(): boolean {\n        // Relying on the user agent to avoid desktop browsers on machines with touch screens.\n        return /iphone|ipad|ipod|android|blackberry|bb10|mini|windows\\sce|palm/i.test(Browser.getUserAgent());\n    }\n\n    /**\n     * Returns whether browser is IE.\n     *\n     * @return {boolena} Whether browser is IE\n     */\n    static isIE() {\n        return /Trident/i.test(Browser.getUserAgent());\n    }\n\n    /**\n     * Checks the browser for Dash support using H264 high.\n     * Dash requires MediaSource extensions to exist and be applicable\n     * to the H264 container (since we use H264 and not webm)\n     *\n     * @public\n     * @param {boolean} recheck - recheck support\n     * @return {boolean} true if dash is usable\n     */\n    static canPlayDash(recheck: boolean = false) {\n        if (typeof isDashSupported === 'undefined' || recheck) {\n            const mse = global.MediaSource;\n            isDashSupported =\n                !!mse &&\n                typeof mse.isTypeSupported === 'function' &&\n                mse.isTypeSupported('video/mp4; codecs=\"avc1.64001E\"');\n        }\n\n        return isDashSupported;\n    }\n\n    /**\n     * Checks whether the browser has support for the Clipboard API. This new API supercedes\n     * the `execCommand`-based API and uses Promises for detecting whether it works or not.\n     *\n     * This check determines if the browser can support writing to the clipboard.\n     * @see https://www.w3.org/TR/clipboard-apis/#async-clipboard-api\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Clipboard\n     *\n     * @return {boolean} whether writing to the clipboard is possible\n     */\n    static canWriteToClipboard() {\n        return !!(global.navigator.clipboard && global.navigator.clipboard.writeText);\n    }\n\n    /**\n     * Checks whether the browser has support for the Clipboard API. This new API supercedes\n     * the `execCommand`-based API and uses Promises for detecting whether it works or not.\n     *\n     * This check determines if the browser can support reading from the clipboard.\n     * @see https://www.w3.org/TR/clipboard-apis/#async-clipboard-api\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Clipboard\n     *\n     * @return {boolean} whether reading from the clipboard is possible\n     */\n    static canReadFromClipboard() {\n        return !!(global.navigator.clipboard && global.navigator.clipboard.readText);\n    }\n}\n\nexport default Browser;\n"]},"metadata":{},"sourceType":"module"}