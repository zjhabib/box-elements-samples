{"ast":null,"code":"/**\n * Parse a comma separated values text and return an array of separated strings\n *\n * @param  {string} text The input string\n * @return {array} A list of separated strings\n *\n * @example\n * parse('a, b, \"c, d\"')\n * returns [\"a\", \"b\", \"c, d\"]\n */\nfunction parseCSV(text) {\n  if (text === null || typeof text === 'undefined') {\n    // Input text is either null or undefined\n    return [];\n  } // Convert the comma separated text into array\n  //\n  // The logic of the regular expression is simple\n  // look ahead comma or carriage return and retrieve:\n  //   1. either strings that are surrounded by double quotes\n  //   2. or strings that do not contain comma and carriage return\n\n  var components = text.match(/(\".*?\"|[^\",\\r\\n]+)(?=\\s*[,\\r\\n]|\\s*$)/g);\n  if (!components) {\n    // No match pattern is found\n    return [];\n  }\n  return components.map(function (c) {\n    // Trim the leading and trailing spaces\n    c = c.trim(); // Remove double quote pairs from both ends\n    // example '\"\"\"abc\"\"\"' will be altered to 'abc'\n\n    while (c.length >= 2 && c.charAt(0) === '\"' && c.charAt(c.length - 1) === '\"') {\n      c = c.substr(1, c.length - 2);\n    }\n    return c;\n  });\n}\nexport default parseCSV;","map":{"version":3,"sources":["../../src/utils/parseCSV.js"],"names":["parseCSV","text","components","match","map","c","trim","length","charAt","substr"],"mappings":"AAAA;;;;;;;;;;AAUA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;EACpB,IAAIA,IAAI,KAAK,IAATA,IAAiB,OAAOA,IAAP,KAAgB,WAArC,EAAkD;IAC9C;IACA,OAAO,EAAP;EACH,CAJmB,CAMpB;EACA;EACA;EACA;EACA;EACA;;EACA,IAAMC,UAAU,GAAGD,IAAI,CAACE,KAALF,CAAW,wCAAXA,CAAnB;EACA,IAAI,CAACC,UAAL,EAAiB;IACb;IACA,OAAO,EAAP;EACH;EAED,OAAO,UAAU,CAACE,GAAX,CAAe,UAAA,CAAC,EAAI;IACvB;IACAC,CAAC,GAAGA,CAAC,CAACC,IAAFD,CAAAA,CAAJA,CAFuB,CAIvB;IACA;;IACA,OAAOA,CAAC,CAACE,MAAFF,IAAY,CAAZA,IAAiBA,CAAC,CAACG,MAAFH,CAAS,CAATA,CAAAA,KAAgB,GAAjCA,IAAwCA,CAAC,CAACG,MAAFH,CAASA,CAAC,CAACE,MAAFF,GAAW,CAApBA,CAAAA,KAA2B,GAA1E,EAA+E;MAC3EA,CAAC,GAAGA,CAAC,CAACI,MAAFJ,CAAS,CAATA,EAAYA,CAAC,CAACE,MAAFF,GAAW,CAAvBA,CAAJA;IACH;IAED,OAAOA,CAAP;EACH,CAXM,CAAP;AAYH;AAED,eAAeL,QAAf","sourcesContent":["/**\n * Parse a comma separated values text and return an array of separated strings\n *\n * @param  {string} text The input string\n * @return {array} A list of separated strings\n *\n * @example\n * parse('a, b, \"c, d\"')\n * returns [\"a\", \"b\", \"c, d\"]\n */\nfunction parseCSV(text) {\n    if (text === null || typeof text === 'undefined') {\n        // Input text is either null or undefined\n        return [];\n    }\n\n    // Convert the comma separated text into array\n    //\n    // The logic of the regular expression is simple\n    // look ahead comma or carriage return and retrieve:\n    //   1. either strings that are surrounded by double quotes\n    //   2. or strings that do not contain comma and carriage return\n    const components = text.match(/(\".*?\"|[^\",\\r\\n]+)(?=\\s*[,\\r\\n]|\\s*$)/g);\n    if (!components) {\n        // No match pattern is found\n        return [];\n    }\n\n    return components.map(c => {\n        // Trim the leading and trailing spaces\n        c = c.trim();\n\n        // Remove double quote pairs from both ends\n        // example '\"\"\"abc\"\"\"' will be altered to 'abc'\n        while (c.length >= 2 && c.charAt(0) === '\"' && c.charAt(c.length - 1) === '\"') {\n            c = c.substr(1, c.length - 2);\n        }\n\n        return c;\n    });\n}\n\nexport default parseCSV;\n"]},"metadata":{},"sourceType":"module"}