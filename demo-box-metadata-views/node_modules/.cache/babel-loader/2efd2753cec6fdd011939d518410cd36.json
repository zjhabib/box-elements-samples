{"ast":null,"code":"import * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport Button from '../../components/button/Button';\nimport ButtonGroup from '../../components/button-group/ButtonGroup';\nimport IconMinus from '../../icons/general/IconMinusThin';\nimport IconPlus from '../../icons/general/IconPlusThin';\nimport Field from './MetadataField';\nimport messages from './messages';\nimport './CustomMetadataField.scss';\nvar COLOR_999 = '#999';\nvar CustomMetadataField = function CustomMetadataField(_ref) {\n  var intl = _ref.intl,\n    canEdit = _ref.canEdit,\n    isLast = _ref.isLast,\n    dataKey = _ref.dataKey,\n    dataValue = _ref.dataValue,\n    onAdd = _ref.onAdd,\n    onChange = _ref.onChange,\n    onRemove = _ref.onRemove;\n  var addBtn = React.createElement(Button, {\n    \"aria-label\": intl.formatMessage(messages.customAdd),\n    \"data-resin-target\": \"metadata-customfieldnew\",\n    onClick: onAdd,\n    type: \"button\"\n  }, React.createElement(IconPlus, {\n    color: COLOR_999\n  }));\n  var removeBtn = React.createElement(Button, {\n    \"aria-label\": intl.formatMessage(messages.customRemove),\n    \"data-resin-target\": \"metadata-customfieldremove\",\n    onClick: function onClick() {\n      if (onRemove) {\n        onRemove(dataKey);\n      }\n    },\n    type: \"button\"\n  }, React.createElement(IconMinus, {\n    color: COLOR_999\n  }));\n  return React.createElement(\"div\", {\n    className: \"bdl-CustomMetadataField\"\n  }, React.createElement(Field, {\n    canEdit: canEdit,\n    dataKey: dataKey,\n    dataValue: dataValue,\n    displayName: dataKey,\n    onChange: onChange // Custom metadata doesn't allow removing of props if the value is emptied out, leave it as empty string\n    ,\n\n    onRemove: function onRemove(key) {\n      return onChange(key, '');\n    },\n    type: \"string\"\n  }), canEdit && React.createElement(\"div\", {\n    className: \"bdl-CustomMetadataField-customActions\"\n  }, isLast ? React.createElement(ButtonGroup, null, removeBtn, addBtn) : removeBtn));\n};\nexport { CustomMetadataField as CustomMetadataFieldBase };\nexport default injectIntl(CustomMetadataField);","map":{"version":3,"sources":["../../../src/features/metadata-instance-fields/CustomMetadataField.js"],"names":["React","injectIntl","Button","ButtonGroup","IconMinus","IconPlus","Field","messages","COLOR_999","CustomMetadataField","intl","canEdit","isLast","dataKey","dataValue","onAdd","onChange","onRemove","addBtn","formatMessage","customAdd","removeBtn","customRemove","key","CustomMetadataFieldBase"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,WAAP,MAAwB,2CAAxB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,4BAAP;AAaA,IAAMC,SAAS,GAAG,MAAlB;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,IAAA,EAAqF;EAAA,IAAlFC,IAAkF,GAAA,IAAA,CAAlFA,IAAkF;IAA5EC,OAA4E,GAAA,IAAA,CAA5EA,OAA4E;IAAnEC,MAAmE,GAAA,IAAA,CAAnEA,MAAmE;IAA3DC,OAA2D,GAAA,IAAA,CAA3DA,OAA2D;IAAlDC,SAAkD,GAAA,IAAA,CAAlDA,SAAkD;IAAvCC,KAAuC,GAAA,IAAA,CAAvCA,KAAuC;IAAhCC,QAAgC,GAAA,IAAA,CAAhCA,QAAgC;IAAtBC,QAAsB,GAAA,IAAA,CAAtBA,QAAsB;EAC7G,IAAMC,MAAM,GACR,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA;IACI,YAAA,EAAYR,IAAI,CAACS,aAALT,CAAmBH,QAAQ,CAACa,SAA5BV,CADhB;IAEI,mBAAA,EAAkB,yBAFtB;IAGI,OAAO,EAAEK,KAHb;IAII,IAAI,EAAC;EAJT,CAAA,EAMI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;IAAU,KAAK,EAAEP;EAAjB,CAAA,CANJ,CADJ;EAWA,IAAMa,SAAS,GACX,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA;IACI,YAAA,EAAYX,IAAI,CAACS,aAALT,CAAmBH,QAAQ,CAACe,YAA5BZ,CADhB;IAEI,mBAAA,EAAkB,4BAFtB;IAGI,OAAO,EAAE,SAAA,OAAA,CAAA,EAAM;MACX,IAAIO,QAAJ,EAAc;QACVA,QAAQ,CAACJ,OAAD,CAARI;MACH;IACJ,CAPL;IAQI,IAAI,EAAC;EART,CAAA,EAUI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;IAAW,KAAK,EAAET;EAAlB,CAAA,CAVJ,CADJ;EAeA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA;IACI,OAAO,EAAEG,OADb;IAEI,OAAO,EAAEE,OAFb;IAGI,SAAS,EAAEC,SAHf;IAII,WAAW,EAAED,OAJjB;IAKI,QAAQ,EAAEG,QALd,CAMI;IAAA;;IACA,QAAQ,EAAE,SAAA,QAAA,CAACO,GAAD,EAAA;MAAA,OAAiBP,QAAQ,CAACO,GAAD,EAAM,EAAN,CAAzB;IAAA,CAPd;IAQI,IAAI,EAAC;EART,CAAA,CADJ,EAWKZ,OAAO,IACJ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACKC,MAAM,GACH,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA,IAAA,EACKS,SADL,EAEKH,MAFL,CADG,GAMHG,SAPR,CAZR,CADJ;AA0BH,CArDD;AAuDA,SAASZ,mBAAmB,IAAIe,uBAAhC;AACA,eAAevB,UAAU,CAACQ,mBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport ButtonGroup from '../../components/button-group/ButtonGroup';\nimport IconMinus from '../../icons/general/IconMinusThin';\nimport IconPlus from '../../icons/general/IconPlusThin';\nimport Field from './MetadataField';\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './CustomMetadataField.scss';\n\ntype Props = {\n    canEdit: boolean,\n    dataKey: string,\n    dataValue: MetadataFieldValue,\n    intl: any,\n    isLast: boolean,\n    onAdd: () => void,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n};\n\nconst COLOR_999 = '#999';\n\nconst CustomMetadataField = ({ intl, canEdit, isLast, dataKey, dataValue, onAdd, onChange, onRemove }: Props) => {\n    const addBtn = (\n        <Button\n            aria-label={intl.formatMessage(messages.customAdd)}\n            data-resin-target=\"metadata-customfieldnew\"\n            onClick={onAdd}\n            type=\"button\"\n        >\n            <IconPlus color={COLOR_999} />\n        </Button>\n    );\n\n    const removeBtn = (\n        <Button\n            aria-label={intl.formatMessage(messages.customRemove)}\n            data-resin-target=\"metadata-customfieldremove\"\n            onClick={() => {\n                if (onRemove) {\n                    onRemove(dataKey);\n                }\n            }}\n            type=\"button\"\n        >\n            <IconMinus color={COLOR_999} />\n        </Button>\n    );\n\n    return (\n        <div className=\"bdl-CustomMetadataField\">\n            <Field\n                canEdit={canEdit}\n                dataKey={dataKey}\n                dataValue={dataValue}\n                displayName={dataKey}\n                onChange={onChange}\n                // Custom metadata doesn't allow removing of props if the value is emptied out, leave it as empty string\n                onRemove={(key: string) => onChange(key, '')}\n                type=\"string\"\n            />\n            {canEdit && (\n                <div className=\"bdl-CustomMetadataField-customActions\">\n                    {isLast ? (\n                        <ButtonGroup>\n                            {removeBtn}\n                            {addBtn}\n                        </ButtonGroup>\n                    ) : (\n                        removeBtn\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport { CustomMetadataField as CustomMetadataFieldBase };\nexport default injectIntl(CustomMetadataField);\n"]},"metadata":{},"sourceType":"module"}