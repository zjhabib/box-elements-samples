{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport defaultHeaderRenderer from './defaultHeaderRenderer';\nimport defaultCellRenderer from './defaultCellRenderer';\nimport defaultCellDataGetter from './defaultCellDataGetter';\nimport SortDirection from './SortDirection';\n/**\n * Describes the header and cell contents of a table column.\n */\n\nvar Column = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Column, _React$Component);\n  function Column() {\n    _classCallCheck(this, Column);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Column).apply(this, arguments));\n  }\n  return Column;\n}(React.Component);\n_defineProperty(Column, \"defaultProps\", {\n  cellDataGetter: defaultCellDataGetter,\n  cellRenderer: defaultCellRenderer,\n  defaultSortDirection: SortDirection.ASC,\n  flexGrow: 0,\n  flexShrink: 1,\n  headerRenderer: defaultHeaderRenderer,\n  style: {}\n});\nexport { Column as default };\nColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Optional aria-label value to set on the column header */\n  'aria-label': PropTypes.string,\n  /**\n   * Callback responsible for returning a cell's data, given its :dataKey\n   * ({ columnData: any, dataKey: string, rowData: any }): any\n   */\n  cellDataGetter: PropTypes.func,\n  /**\n   * Callback responsible for rendering a cell's contents.\n   * ({ cellData: any, columnData: any, dataKey: string, rowData: any, rowIndex: number }): node\n   */\n  cellRenderer: PropTypes.func,\n  /** Optional CSS class to apply to cell */\n  className: PropTypes.string,\n  /** Optional additional data passed to this column's :cellDataGetter */\n  columnData: PropTypes.object,\n  /** Uniquely identifies the row-data attribute corresponding to this cell */\n  dataKey: PropTypes.any.isRequired,\n  /** Optional direction to be used when clicked the first time */\n  defaultSortDirection: PropTypes.oneOf([SortDirection.ASC, SortDirection.DESC]),\n  /** If sort is enabled for the table at large, disable it for this column */\n  disableSort: PropTypes.bool,\n  /** Flex grow style; defaults to 0 */\n  flexGrow: PropTypes.number,\n  /** Flex shrink style; defaults to 1 */\n  flexShrink: PropTypes.number,\n  /** Optional CSS class to apply to this column's header */\n  headerClassName: PropTypes.string,\n  /**\n   * Optional callback responsible for rendering a column header contents.\n   * ({ columnData: object, dataKey: string, disableSort: boolean, label: node, sortBy: string, sortDirection: string }): PropTypes.node\n   */\n  headerRenderer: PropTypes.func.isRequired,\n  /** Optional inline style to apply to this column's header */\n  headerStyle: PropTypes.object,\n  /** Optional id to set on the column header */\n  id: PropTypes.string,\n  /** Header label for this column */\n  label: PropTypes.node,\n  /** Maximum width of column; this property will only be used if :flexGrow is > 0. */\n  maxWidth: PropTypes.number,\n  /** Minimum width of column. */\n  minWidth: PropTypes.number,\n  /** Optional inline style to apply to cell */\n  style: PropTypes.object,\n  /** Flex basis (width) for this column; This value can grow or shrink based on :flexGrow and :flexShrink properties. */\n  width: PropTypes.number.isRequired\n} : {};","map":{"version":3,"names":["_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","_inherits","_defineProperty","PropTypes","React","defaultHeaderRenderer","defaultCellRenderer","defaultCellDataGetter","SortDirection","Column","_React$Component","apply","arguments","Component","cellDataGetter","cellRenderer","defaultSortDirection","ASC","flexGrow","flexShrink","headerRenderer","style","default","propTypes","process","env","NODE_ENV","string","func","className","columnData","object","dataKey","any","isRequired","oneOf","DESC","disableSort","bool","number","headerClassName","headerStyle","id","label","node","maxWidth","minWidth","width"],"sources":["/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/react-virtualized/dist/es/Table/Column.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport defaultHeaderRenderer from './defaultHeaderRenderer';\nimport defaultCellRenderer from './defaultCellRenderer';\nimport defaultCellDataGetter from './defaultCellDataGetter';\nimport SortDirection from './SortDirection';\n/**\n * Describes the header and cell contents of a table column.\n */\n\nvar Column =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Column, _React$Component);\n\n  function Column() {\n    _classCallCheck(this, Column);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Column).apply(this, arguments));\n  }\n\n  return Column;\n}(React.Component);\n\n_defineProperty(Column, \"defaultProps\", {\n  cellDataGetter: defaultCellDataGetter,\n  cellRenderer: defaultCellRenderer,\n  defaultSortDirection: SortDirection.ASC,\n  flexGrow: 0,\n  flexShrink: 1,\n  headerRenderer: defaultHeaderRenderer,\n  style: {}\n});\n\nexport { Column as default };\nColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Optional aria-label value to set on the column header */\n  'aria-label': PropTypes.string,\n\n  /**\n   * Callback responsible for returning a cell's data, given its :dataKey\n   * ({ columnData: any, dataKey: string, rowData: any }): any\n   */\n  cellDataGetter: PropTypes.func,\n\n  /**\n   * Callback responsible for rendering a cell's contents.\n   * ({ cellData: any, columnData: any, dataKey: string, rowData: any, rowIndex: number }): node\n   */\n  cellRenderer: PropTypes.func,\n\n  /** Optional CSS class to apply to cell */\n  className: PropTypes.string,\n\n  /** Optional additional data passed to this column's :cellDataGetter */\n  columnData: PropTypes.object,\n\n  /** Uniquely identifies the row-data attribute corresponding to this cell */\n  dataKey: PropTypes.any.isRequired,\n\n  /** Optional direction to be used when clicked the first time */\n  defaultSortDirection: PropTypes.oneOf([SortDirection.ASC, SortDirection.DESC]),\n\n  /** If sort is enabled for the table at large, disable it for this column */\n  disableSort: PropTypes.bool,\n\n  /** Flex grow style; defaults to 0 */\n  flexGrow: PropTypes.number,\n\n  /** Flex shrink style; defaults to 1 */\n  flexShrink: PropTypes.number,\n\n  /** Optional CSS class to apply to this column's header */\n  headerClassName: PropTypes.string,\n\n  /**\n   * Optional callback responsible for rendering a column header contents.\n   * ({ columnData: object, dataKey: string, disableSort: boolean, label: node, sortBy: string, sortDirection: string }): PropTypes.node\n   */\n  headerRenderer: PropTypes.func.isRequired,\n\n  /** Optional inline style to apply to this column's header */\n  headerStyle: PropTypes.object,\n\n  /** Optional id to set on the column header */\n  id: PropTypes.string,\n\n  /** Header label for this column */\n  label: PropTypes.node,\n\n  /** Maximum width of column; this property will only be used if :flexGrow is > 0. */\n  maxWidth: PropTypes.number,\n\n  /** Minimum width of column. */\n  minWidth: PropTypes.number,\n\n  /** Optional inline style to apply to cell */\n  style: PropTypes.object,\n\n  /** Flex basis (width) for this column; This value can grow or shrink based on :flexGrow and :flexShrink properties. */\n  width: PropTypes.number.isRequired\n} : {};"],"mappings":"AAAA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,OAAOC,0BAA0B,MAAM,kDAAkD;AACzF,OAAOC,eAAe,MAAM,uCAAuC;AACnE,OAAOC,SAAS,MAAM,iCAAiC;AACvD,OAAOC,eAAe,MAAM,uCAAuC;AACnE,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,aAAa,MAAM,iBAAiB;AAC3C;AACA;AACA;;AAEA,IAAIC,MAAM,GACV;AACA,UAAUC,gBAAgB,EAAE;EAC1BT,SAAS,CAACQ,MAAM,EAAEC,gBAAgB,CAAC;EAEnC,SAASD,MAAMA,CAAA,EAAG;IAChBX,eAAe,CAAC,IAAI,EAAEW,MAAM,CAAC;IAE7B,OAAOV,0BAA0B,CAAC,IAAI,EAAEC,eAAe,CAACS,MAAM,CAAC,CAACE,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,CAAC;EACzF;EAEA,OAAOH,MAAM;AACf,CAAC,CAACL,KAAK,CAACS,SAAS,CAAC;AAElBX,eAAe,CAACO,MAAM,EAAE,cAAc,EAAE;EACtCK,cAAc,EAAEP,qBAAqB;EACrCQ,YAAY,EAAET,mBAAmB;EACjCU,oBAAoB,EAAER,aAAa,CAACS,GAAG;EACvCC,QAAQ,EAAE,CAAC;EACXC,UAAU,EAAE,CAAC;EACbC,cAAc,EAAEf,qBAAqB;EACrCgB,KAAK,EAAE,CAAC;AACV,CAAC,CAAC;AAEF,SAASZ,MAAM,IAAIa,OAAO;AAC1Bb,MAAM,CAACc,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG;EACzD;EACA,YAAY,EAAEvB,SAAS,CAACwB,MAAM;EAE9B;AACF;AACA;AACA;EACEb,cAAc,EAAEX,SAAS,CAACyB,IAAI;EAE9B;AACF;AACA;AACA;EACEb,YAAY,EAAEZ,SAAS,CAACyB,IAAI;EAE5B;EACAC,SAAS,EAAE1B,SAAS,CAACwB,MAAM;EAE3B;EACAG,UAAU,EAAE3B,SAAS,CAAC4B,MAAM;EAE5B;EACAC,OAAO,EAAE7B,SAAS,CAAC8B,GAAG,CAACC,UAAU;EAEjC;EACAlB,oBAAoB,EAAEb,SAAS,CAACgC,KAAK,CAAC,CAAC3B,aAAa,CAACS,GAAG,EAAET,aAAa,CAAC4B,IAAI,CAAC,CAAC;EAE9E;EACAC,WAAW,EAAElC,SAAS,CAACmC,IAAI;EAE3B;EACApB,QAAQ,EAAEf,SAAS,CAACoC,MAAM;EAE1B;EACApB,UAAU,EAAEhB,SAAS,CAACoC,MAAM;EAE5B;EACAC,eAAe,EAAErC,SAAS,CAACwB,MAAM;EAEjC;AACF;AACA;AACA;EACEP,cAAc,EAAEjB,SAAS,CAACyB,IAAI,CAACM,UAAU;EAEzC;EACAO,WAAW,EAAEtC,SAAS,CAAC4B,MAAM;EAE7B;EACAW,EAAE,EAAEvC,SAAS,CAACwB,MAAM;EAEpB;EACAgB,KAAK,EAAExC,SAAS,CAACyC,IAAI;EAErB;EACAC,QAAQ,EAAE1C,SAAS,CAACoC,MAAM;EAE1B;EACAO,QAAQ,EAAE3C,SAAS,CAACoC,MAAM;EAE1B;EACAlB,KAAK,EAAElB,SAAS,CAAC4B,MAAM;EAEvB;EACAgB,KAAK,EAAE5C,SAAS,CAACoC,MAAM,CAACL;AAC1B,CAAC,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module"}