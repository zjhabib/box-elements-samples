{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport getProp from 'lodash/get';\nimport AutoSizer from 'react-virtualized/dist/es/AutoSizer';\nimport GridView from '../../components/grid-view/GridView';\nimport ItemGridCell from './ItemGridCell';\nvar ItemGrid = function ItemGrid(_ref) {\n  var currentCollection = _ref.currentCollection,\n    gridColumnCount = _ref.gridColumnCount,\n    rootId = _ref.rootId,\n    rest = _objectWithoutProperties(_ref, [\"currentCollection\", \"gridColumnCount\", \"rootId\"]);\n\n  /**\n   * Renderer used for cards in grid view\n   *\n   * @param {number} slotIndex - index of item in currentCollection.items\n   * @return {React.Element} - Element to display in card\n   */\n  var slotRenderer = function slotRenderer(slotIndex) {\n    var item = getProp(currentCollection, \"items[\".concat(slotIndex, \"]\"));\n    return item ? React.createElement(ItemGridCell, _extends({\n      item: item,\n      rootId: rootId\n    }, rest)) : null;\n  };\n  return React.createElement(AutoSizer, null, function (_ref2) {\n    var height = _ref2.height,\n      width = _ref2.width;\n    return React.createElement(GridView, {\n      columnCount: gridColumnCount,\n      currentCollection: currentCollection,\n      height: height,\n      slotRenderer: slotRenderer,\n      width: width\n    });\n  });\n};\nexport default ItemGrid;","map":{"version":3,"sources":["../../../src/elements/content-explorer/ItemGrid.js"],"names":["React","getProp","AutoSizer","GridView","ItemGridCell","ItemGrid","currentCollection","gridColumnCount","rootId","rest","slotRenderer","slotIndex","item","height","width"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAUA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,IAAA,EAAoE;EAAA,IAAjEC,iBAAiE,GAAA,IAAA,CAAjEA,iBAAiE;IAA9CC,eAA8C,GAAA,IAAA,CAA9CA,eAA8C;IAA7BC,MAA6B,GAAA,IAAA,CAA7BA,MAA6B;IAAlBC,IAAkB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,mBAAA,EAAA,iBAAA,EAAA,QAAA,CAAA,CAAA;;EACjF;;;;;;EAMA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAA4C;IAC7D,IAAMC,IAAc,GAAGX,OAAO,CAACK,iBAAD,EAAA,QAAA,CAAA,MAAA,CAA6BK,SAA7B,EAAA,GAAA,CAAA,CAA9B;IAEA,OAAOC,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA,QAAA,CAAA;MAAc,IAAI,EAAEA,IAApB;MAA0B,MAAM,EAAEJ;IAAlC,CAAA,EAA8CC,IAA9C,CAAA,CAAH,GAA4D,IAAvE;EACH,CAJD;EAMA,OACI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA,IAAA,EACK,UAAA,KAAA,EAAA;IAAA,IAAGI,MAAH,GAAA,KAAA,CAAGA,MAAH;MAAWC,KAAX,GAAA,KAAA,CAAWA,KAAX;IAAA,OACG,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;MACI,WAAW,EAAEP,eADjB;MAEI,iBAAiB,EAAED,iBAFvB;MAGI,MAAM,EAAEO,MAHZ;MAII,YAAY,EAAEH,YAJlB;MAKI,KAAK,EAAEI;IALX,CAAA,CADH;EAAA,CADL,CADJ;AAaH,CA1BD;AA4BA,eAAeT,QAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport getProp from 'lodash/get';\nimport AutoSizer from 'react-virtualized/dist/es/AutoSizer';\nimport GridView from '../../components/grid-view/GridView';\nimport ItemGridCell from './ItemGridCell';\nimport type { ItemGridProps } from './flowTypes';\nimport type { BoxItem, Collection } from '../../common/types/core';\n\ntype Props = {\n    currentCollection: Collection,\n    gridColumnCount: number,\n    ...$Exact<ItemGridProps>,\n};\n\nconst ItemGrid = ({ currentCollection, gridColumnCount, rootId, ...rest }: Props) => {\n    /**\n     * Renderer used for cards in grid view\n     *\n     * @param {number} slotIndex - index of item in currentCollection.items\n     * @return {React.Element} - Element to display in card\n     */\n    const slotRenderer = (slotIndex: number): ?React.Element<any> => {\n        const item: ?BoxItem = getProp(currentCollection, `items[${slotIndex}]`);\n\n        return item ? <ItemGridCell item={item} rootId={rootId} {...rest} /> : null;\n    };\n\n    return (\n        <AutoSizer>\n            {({ height, width }) => (\n                <GridView\n                    columnCount={gridColumnCount}\n                    currentCollection={currentCollection}\n                    height={height}\n                    slotRenderer={slotRenderer}\n                    width={width}\n                />\n            )}\n        </AutoSizer>\n    );\n};\n\nexport default ItemGrid;\n"]},"metadata":{},"sourceType":"module"}