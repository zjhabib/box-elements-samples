{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Helper for the Box Collaborations API\n * @author Box\n *\n * The Collaborations API is different from the other APIs related to collaborations/collaborators.\n * - The Item Collaborations (File Collaborations and Folder Collaborations) API only accepts GET requests for a single item;\n *   it returns an object containing all the users who are collaborated on that item.\n * - The File Collaborators API is used exclusively in the ContentSidebar UI Element.\n * - This API enables CRUD actions on a single collaboration for a single item. For more information, see the API docs at\n *   https://developer.box.com/reference/resources/collaboration/.\n */\nimport Base from './Base';\nvar Collaborations = /*#__PURE__*/\nfunction (_Base) {\n  _inherits(Collaborations, _Base);\n  function Collaborations() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Collaborations);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Collaborations)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"addCollaboration\", function (item, collaboration, successCallback, errorCallback) {\n      var id = item.id;\n      _this.post({\n        id: id,\n        data: {\n          data: _objectSpread({\n            item: item\n          }, collaboration)\n        },\n        errorCallback: errorCallback,\n        successCallback: successCallback,\n        url: _this.getUrl()\n      });\n    });\n    return _this;\n  }\n  _createClass(Collaborations, [{\n    key: \"getUrl\",\n    /**\n     * API URL for collaborations\n     *\n     * @return {string} Base URL for collaborations\n     */\n    value: function getUrl() {\n      return \"\".concat(this.getBaseApiUrl(), \"/collaborations\");\n    }\n    /**\n     * Add a collaboration for a single user or a single group to a file or folder.\n     * Users can be added by ID or login (email); groups can only be added by ID.\n     *\n     * @param {BoxItem} item\n     * @param {$Shape<Collaboration>} collaboration\n     * @param {(data?: Object) => void} successCallback\n     * @param {ElementsErrorCallback} errorCallback\n     */\n  }]);\n\n  return Collaborations;\n}(Base);\nexport default Collaborations;","map":{"version":3,"sources":["../../src/api/Collaborations.js"],"names":["Base","Collaborations","getBaseApiUrl","item","collaboration","successCallback","errorCallback","id","post","data","url","getUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAaA,OAAOA,IAAP,MAAiB,QAAjB;IAIMC,c;;;;;;;;;;;uEAmBiB,UACfE,IADe,EAEfC,aAFe,EAGfC,eAHe,EAIfC,aAJe,EAKR;MAAA,IACCC,EADD,GACQJ,IADR,CACCI,EADD;MAEP,KAAA,CAAKC,IAAL,CAAU;QACND,EAAE,EAAFA,EADM;QAENE,IAAI,EAAE;UACFA,IAAI,EAAA,aAAA,CAAA;YACAN,IAAI,EAAJA;UADA,CAAA,EAEGC,aAFH;QADF,CAFA;QAQNE,aAAa,EAAbA,aARM;QASND,eAAe,EAAfA,eATM;QAUNK,GAAG,EAAE,KAAA,CAAKC,MAAL,CAAA;MAVC,CAAV,CAAA;IAYH,C;;;;;IArCD;;;;;6BAKiB;MACb,OAAA,EAAA,CAAA,MAAA,CAAU,IAAA,CAAKT,aAAL,CAAA,CAAV,EAAA,iBAAA,CAAA;IACH;IAED;;;;;;;;;;;;EAVyBF,I;AAyC7B,eAAeC,cAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the Box Collaborations API\n * @author Box\n *\n * The Collaborations API is different from the other APIs related to collaborations/collaborators.\n * - The Item Collaborations (File Collaborations and Folder Collaborations) API only accepts GET requests for a single item;\n *   it returns an object containing all the users who are collaborated on that item.\n * - The File Collaborators API is used exclusively in the ContentSidebar UI Element.\n * - This API enables CRUD actions on a single collaboration for a single item. For more information, see the API docs at\n *   https://developer.box.com/reference/resources/collaboration/.\n */\n\nimport Base from './Base';\nimport type { BoxItem, Collaboration } from '../common/types/core';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\nclass Collaborations extends Base {\n    /**\n     * API URL for collaborations\n     *\n     * @return {string} Base URL for collaborations\n     */\n    getUrl(): string {\n        return `${this.getBaseApiUrl()}/collaborations`;\n    }\n\n    /**\n     * Add a collaboration for a single user or a single group to a file or folder.\n     * Users can be added by ID or login (email); groups can only be added by ID.\n     *\n     * @param {BoxItem} item\n     * @param {$Shape<Collaboration>} collaboration\n     * @param {(data?: Object) => void} successCallback\n     * @param {ElementsErrorCallback} errorCallback\n     */\n    addCollaboration = (\n        item: BoxItem,\n        collaboration: $Shape<Collaboration>,\n        successCallback: (data?: Object) => void,\n        errorCallback: ElementsErrorCallback,\n    ): void => {\n        const { id } = item;\n        this.post({\n            id,\n            data: {\n                data: {\n                    item,\n                    ...collaboration,\n                },\n            },\n            errorCallback,\n            successCallback,\n            url: this.getUrl(),\n        });\n    };\n}\n\nexport default Collaborations;\n"]},"metadata":{},"sourceType":"module"}