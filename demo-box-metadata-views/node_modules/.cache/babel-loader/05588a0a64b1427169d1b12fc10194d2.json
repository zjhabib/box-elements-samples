{"ast":null,"code":"/**\n * \n * @file Upload state component\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport ErrorEmptyState from '../../icons/states/ErrorEmptyState';\nimport UploadEmptyState from '../../icons/states/UploadEmptyState';\nimport UploadSuccessState from '../../icons/states/UploadSuccessState';\nimport messages from '../common/messages';\nimport UploadStateContent from './UploadStateContent';\nimport { VIEW_ERROR, VIEW_UPLOAD_EMPTY, VIEW_UPLOAD_IN_PROGRESS, VIEW_UPLOAD_SUCCESS } from '../../constants';\nimport './UploadState.scss';\nvar UploadState = function UploadState(_ref) {\n  var canDrop = _ref.canDrop,\n    hasItems = _ref.hasItems,\n    isOver = _ref.isOver,\n    isTouch = _ref.isTouch,\n    view = _ref.view,\n    onSelect = _ref.onSelect,\n    isFolderUploadEnabled = _ref.isFolderUploadEnabled;\n  var icon;\n  var content;\n  switch (view) {\n    case VIEW_ERROR:\n      icon = React.createElement(ErrorEmptyState, null);\n      content = React.createElement(UploadStateContent, {\n        message: React.createElement(FormattedMessage, messages.uploadError)\n      });\n      break;\n    case VIEW_UPLOAD_EMPTY:\n      icon = React.createElement(UploadEmptyState, null);\n      /* eslint-disable no-nested-ternary */\n\n      content = canDrop && hasItems ? React.createElement(UploadStateContent, {\n        message: React.createElement(FormattedMessage, messages.uploadInProgress)\n      }) : isTouch ? React.createElement(UploadStateContent, {\n        fileInputLabel: React.createElement(FormattedMessage, messages.uploadNoDragDrop),\n        onChange: onSelect,\n        useButton: true\n      }) : React.createElement(UploadStateContent, {\n        fileInputLabel: React.createElement(FormattedMessage, messages.uploadEmptyFileInput),\n        folderInputLabel: isFolderUploadEnabled && React.createElement(FormattedMessage, messages.uploadEmptyFolderInput),\n        message: isFolderUploadEnabled ? React.createElement(FormattedMessage, messages.uploadEmptyWithFolderUploadEnabled) : React.createElement(FormattedMessage, messages.uploadEmptyWithFolderUploadDisabled),\n        onChange: onSelect\n      });\n      /* eslint-enable no-nested-ternary */\n\n      break;\n    case VIEW_UPLOAD_IN_PROGRESS:\n      icon = React.createElement(UploadEmptyState, null);\n      content = React.createElement(UploadStateContent, {\n        message: React.createElement(FormattedMessage, messages.uploadInProgress)\n      });\n      break;\n    case VIEW_UPLOAD_SUCCESS:\n      icon = React.createElement(UploadSuccessState, null);\n      content = React.createElement(UploadStateContent, {\n        fileInputLabel: React.createElement(FormattedMessage, messages.uploadSuccessFileInput),\n        folderInputLabel: isFolderUploadEnabled && React.createElement(FormattedMessage, messages.uploadSuccessFolderInput),\n        message: React.createElement(FormattedMessage, messages.uploadSuccess),\n        onChange: onSelect,\n        useButton: isTouch\n      });\n      break;\n    default:\n      break;\n\n    /* eslint-enable jsx-a11y/label-has-for */\n  }\n\n  var className = classNames('bcu-upload-state', {\n    'bcu-is-droppable': isOver && canDrop,\n    'bcu-is-not-droppable': isOver && !canDrop,\n    'bcu-has-items': hasItems\n  });\n  return React.createElement(\"div\", {\n    className: className\n  }, React.createElement(\"div\", null, icon, content), React.createElement(\"div\", {\n    className: \"bcu-drag-drop-overlay\"\n  }));\n};\nexport default UploadState;","map":{"version":3,"sources":["../../../src/elements/content-uploader/UploadState.js"],"names":["React","classNames","FormattedMessage","ErrorEmptyState","UploadEmptyState","UploadSuccessState","messages","UploadStateContent","VIEW_ERROR","VIEW_UPLOAD_EMPTY","VIEW_UPLOAD_IN_PROGRESS","VIEW_UPLOAD_SUCCESS","UploadState","canDrop","hasItems","isOver","isTouch","view","onSelect","isFolderUploadEnabled","icon","content","uploadError","uploadInProgress","uploadNoDragDrop","uploadEmptyFileInput","uploadEmptyFolderInput","uploadEmptyWithFolderUploadEnabled","uploadEmptyWithFolderUploadDisabled","uploadSuccessFileInput","uploadSuccessFolderInput","uploadSuccess","className"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Upload state component\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport ErrorEmptyState from '../../icons/states/ErrorEmptyState';\nimport UploadEmptyState from '../../icons/states/UploadEmptyState';\nimport UploadSuccessState from '../../icons/states/UploadSuccessState';\nimport messages from '../common/messages';\nimport UploadStateContent from './UploadStateContent';\nimport { VIEW_ERROR, VIEW_UPLOAD_EMPTY, VIEW_UPLOAD_IN_PROGRESS, VIEW_UPLOAD_SUCCESS } from '../../constants';\nimport type { View } from '../../common/types/core';\n\nimport './UploadState.scss';\n\ntype Props = {\n    canDrop: boolean,\n    hasItems: boolean,\n    isFolderUploadEnabled: boolean,\n    isOver: boolean,\n    isTouch: boolean,\n    onSelect: Function,\n    view: View,\n};\n\nconst UploadState = ({ canDrop, hasItems, isOver, isTouch, view, onSelect, isFolderUploadEnabled }: Props) => {\n    let icon;\n    let content;\n    switch (view) {\n        case VIEW_ERROR:\n            icon = <ErrorEmptyState />;\n            content = <UploadStateContent message={<FormattedMessage {...messages.uploadError} />} />;\n            break;\n        case VIEW_UPLOAD_EMPTY:\n            icon = <UploadEmptyState />;\n            /* eslint-disable no-nested-ternary */\n            content =\n                canDrop && hasItems ? (\n                    <UploadStateContent message={<FormattedMessage {...messages.uploadInProgress} />} />\n                ) : isTouch ? (\n                    <UploadStateContent\n                        fileInputLabel={<FormattedMessage {...messages.uploadNoDragDrop} />}\n                        onChange={onSelect}\n                        useButton\n                    />\n                ) : (\n                    <UploadStateContent\n                        fileInputLabel={<FormattedMessage {...messages.uploadEmptyFileInput} />}\n                        folderInputLabel={\n                            isFolderUploadEnabled && <FormattedMessage {...messages.uploadEmptyFolderInput} />\n                        }\n                        message={\n                            isFolderUploadEnabled ? (\n                                <FormattedMessage {...messages.uploadEmptyWithFolderUploadEnabled} />\n                            ) : (\n                                <FormattedMessage {...messages.uploadEmptyWithFolderUploadDisabled} />\n                            )\n                        }\n                        onChange={onSelect}\n                    />\n                );\n            /* eslint-enable no-nested-ternary */\n            break;\n        case VIEW_UPLOAD_IN_PROGRESS:\n            icon = <UploadEmptyState />;\n            content = <UploadStateContent message={<FormattedMessage {...messages.uploadInProgress} />} />;\n            break;\n        case VIEW_UPLOAD_SUCCESS:\n            icon = <UploadSuccessState />;\n            content = (\n                <UploadStateContent\n                    fileInputLabel={<FormattedMessage {...messages.uploadSuccessFileInput} />}\n                    folderInputLabel={\n                        isFolderUploadEnabled && <FormattedMessage {...messages.uploadSuccessFolderInput} />\n                    }\n                    message={<FormattedMessage {...messages.uploadSuccess} />}\n                    onChange={onSelect}\n                    useButton={isTouch}\n                />\n            );\n            break;\n        default:\n            break;\n        /* eslint-enable jsx-a11y/label-has-for */\n    }\n\n    const className = classNames('bcu-upload-state', {\n        'bcu-is-droppable': isOver && canDrop,\n        'bcu-is-not-droppable': isOver && !canDrop,\n        'bcu-has-items': hasItems,\n    });\n\n    return (\n        <div className={className}>\n            <div>\n                {icon}\n                {content}\n            </div>\n            <div className=\"bcu-drag-drop-overlay\" />\n        </div>\n    );\n};\n\nexport default UploadState;\n"]},"metadata":{},"sourceType":"module"}