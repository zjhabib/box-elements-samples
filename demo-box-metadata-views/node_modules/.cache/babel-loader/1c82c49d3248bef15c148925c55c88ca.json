{"ast":null,"code":"/**\n * \n * @file Helper functions for keyboard events\n * @author Box\n */\n\n/**\n * Function to decode key events into keys.\n * Works for both React synthetic and native events.\n *\n * Will output in the format Shift+I, Control+I...\n * Will outpur Space for spacebar.\n * Will return empty string for modifiers only.\n *\n * @public\n * @param {Event} event - Keyboard event\n * @return {string} Decoded keydown key or empty string\n */\nfunction decode(event) {\n  var modifier = ''; // KeyboardEvent.key is the new spec supported in Chrome, Firefox and IE.\n  // KeyboardEvent.keyIdentifier is the old spec supported in Safari.\n  // Priority is given to the new spec.\n  // $FlowFixMe\n\n  var keyIdentifier = event.keyIdentifier;\n  var key = event.key || keyIdentifier || ''; // Get the modifiers on their own\n\n  if (event.ctrlKey) {\n    modifier = 'Control';\n  } else if (event.shiftKey) {\n    modifier = 'Shift';\n  } else if (event.metaKey) {\n    modifier = 'Meta';\n  } // The key and keyIdentifier specs also include modifiers.\n  // Since we are manually getting the modifiers above we do\n  // not want to trap them again here.\n\n  if (key === modifier) {\n    key = '';\n  } // keyIdentifier spec returns UTF8 char codes\n  // Need to convert them back to ascii.\n\n  if (key.indexOf('U+') === 0) {\n    if (key === 'U+001B') {\n      key = 'Escape';\n    } else {\n      key = String.fromCharCode(Number(key.replace('U+', '0x')));\n    }\n  } // If nothing was pressed or we evaluated to nothing, just return\n\n  if (!key) {\n    return '';\n  } // Special casing for space bar\n\n  if (key === ' ') {\n    key = 'Space';\n  } // Edge bug which outputs \"Esc\" instead of \"Escape\"\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n\n  if (key === 'Esc') {\n    key = 'Escape';\n  } // keyIdentifier spec does not prefix the word Arrow.\n  // Newer key spec does it automatically.\n\n  if (key === 'Right' || key === 'Left' || key === 'Down' || key === 'Up') {\n    key = \"Arrow\".concat(key);\n  }\n  if (modifier) {\n    modifier += '+';\n  }\n  return modifier + key;\n}\nexport { decode }; // eslint-disable-line","map":{"version":3,"sources":["../../src/utils/keys.js"],"names":["decode","event","modifier","keyIdentifier","key","ctrlKey","shiftKey","metaKey","indexOf","String","fromCharCode","Number","replace"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAYA,SAASA,MAAT,CAAgBC,KAAhB,EAA4E;EACxE,IAAIC,QAAQ,GAAG,EAAf,CADwE,CAGxE;EACA;EACA;EACA;;EANwE,IAOhEC,aAPgE,GAO9CF,KAP8C,CAOhEE,aAPgE;EAQxE,IAAIC,GAAW,GAAGH,KAAK,CAACG,GAANH,IAAaE,aAAbF,IAA8B,EAAhD,CARwE,CAUxE;;EACA,IAAIA,KAAK,CAACI,OAAV,EAAmB;IACfH,QAAQ,GAAG,SAAXA;EACH,CAFD,MAEO,IAAID,KAAK,CAACK,QAAV,EAAoB;IACvBJ,QAAQ,GAAG,OAAXA;EACH,CAFM,MAEA,IAAID,KAAK,CAACM,OAAV,EAAmB;IACtBL,QAAQ,GAAG,MAAXA;EACH,CAjBuE,CAmBxE;EACA;EACA;;EACA,IAAIE,GAAG,KAAKF,QAAZ,EAAsB;IAClBE,GAAG,GAAG,EAANA;EACH,CAxBuE,CA0BxE;EACA;;EACA,IAAIA,GAAG,CAACI,OAAJJ,CAAY,IAAZA,CAAAA,KAAsB,CAA1B,EAA6B;IACzB,IAAIA,GAAG,KAAK,QAAZ,EAAsB;MAClBA,GAAG,GAAG,QAANA;IACH,CAFD,MAEO;MACHA,GAAG,GAAGK,MAAM,CAACC,YAAPD,CAAoBE,MAAM,CAACP,GAAG,CAACQ,OAAJR,CAAY,IAAZA,EAAkB,IAAlBA,CAAD,CAA1BK,CAANL;IACH;EACJ,CAlCuE,CAoCxE;;EACA,IAAI,CAACA,GAAL,EAAU;IACN,OAAO,EAAP;EACH,CAvCuE,CAyCxE;;EACA,IAAIA,GAAG,KAAK,GAAZ,EAAiB;IACbA,GAAG,GAAG,OAANA;EACH,CA5CuE,CA8CxE;EACA;;EACA,IAAIA,GAAG,KAAK,KAAZ,EAAmB;IACfA,GAAG,GAAG,QAANA;EACH,CAlDuE,CAoDxE;EACA;;EACA,IAAIA,GAAG,KAAK,OAARA,IAAmBA,GAAG,KAAK,MAA3BA,IAAqCA,GAAG,KAAK,MAA7CA,IAAuDA,GAAG,KAAK,IAAnE,EAAyE;IACrEA,GAAG,GAAA,OAAA,CAAA,MAAA,CAAWA,GAAX,CAAHA;EACH;EAED,IAAIF,QAAJ,EAAc;IACVA,QAAQ,IAAI,GAAZA;EACH;EAED,OAAOA,QAAQ,GAAGE,GAAlB;AACH;AAED,SAASJ,MAAT,G,CAAmB","sourcesContent":["/**\n * @flow\n * @file Helper functions for keyboard events\n * @author Box\n */\n\n/**\n * Function to decode key events into keys.\n * Works for both React synthetic and native events.\n *\n * Will output in the format Shift+I, Control+I...\n * Will outpur Space for spacebar.\n * Will return empty string for modifiers only.\n *\n * @public\n * @param {Event} event - Keyboard event\n * @return {string} Decoded keydown key or empty string\n */\nfunction decode(event: KeyboardEvent | SyntheticKeyboardEvent<HTMLElement>) {\n    let modifier = '';\n\n    // KeyboardEvent.key is the new spec supported in Chrome, Firefox and IE.\n    // KeyboardEvent.keyIdentifier is the old spec supported in Safari.\n    // Priority is given to the new spec.\n    // $FlowFixMe\n    const { keyIdentifier } = event;\n    let key: string = event.key || keyIdentifier || '';\n\n    // Get the modifiers on their own\n    if (event.ctrlKey) {\n        modifier = 'Control';\n    } else if (event.shiftKey) {\n        modifier = 'Shift';\n    } else if (event.metaKey) {\n        modifier = 'Meta';\n    }\n\n    // The key and keyIdentifier specs also include modifiers.\n    // Since we are manually getting the modifiers above we do\n    // not want to trap them again here.\n    if (key === modifier) {\n        key = '';\n    }\n\n    // keyIdentifier spec returns UTF8 char codes\n    // Need to convert them back to ascii.\n    if (key.indexOf('U+') === 0) {\n        if (key === 'U+001B') {\n            key = 'Escape';\n        } else {\n            key = String.fromCharCode(Number(key.replace('U+', '0x')));\n        }\n    }\n\n    // If nothing was pressed or we evaluated to nothing, just return\n    if (!key) {\n        return '';\n    }\n\n    // Special casing for space bar\n    if (key === ' ') {\n        key = 'Space';\n    }\n\n    // Edge bug which outputs \"Esc\" instead of \"Escape\"\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n    if (key === 'Esc') {\n        key = 'Escape';\n    }\n\n    // keyIdentifier spec does not prefix the word Arrow.\n    // Newer key spec does it automatically.\n    if (key === 'Right' || key === 'Left' || key === 'Down' || key === 'Up') {\n        key = `Arrow${key}`;\n    }\n\n    if (modifier) {\n        modifier += '+';\n    }\n\n    return modifier + key;\n}\n\nexport { decode }; // eslint-disable-line\n"]},"metadata":{},"sourceType":"module"}