{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar BROWSER_CONSTANTS = {\n  CHROME: 'Chrome',\n  EDGE: 'Edge',\n  FIREFOX: 'Firefox',\n  MAC: 'Mac',\n  SAFARI: 'Safari',\n  IE: 'Explorer'\n};\nvar MIN_FOLDER_UPLOAD_CHROME = '21';\nvar MIN_FOLDER_UPLOAD_EDGE = '14';\nvar MIN_FOLDER_UPLOAD_FIREFOX = '50';\nvar MIN_FOLDER_UPLOAD_SAFARI = '11.1';\nvar BROWSER_DATA = [{\n  key: 'userAgent',\n  subString: BROWSER_CONSTANTS.EDGE,\n  identity: BROWSER_CONSTANTS.EDGE\n}, {\n  key: 'userAgent',\n  subString: BROWSER_CONSTANTS.CHROME,\n  identity: BROWSER_CONSTANTS.CHROME\n}, {\n  // Chrome on iOS uses criOS to indicate that it is a chrome browser\n  // https://developer.chrome.com/multidevice/user-agent\n  key: 'userAgent',\n  subString: 'criOS',\n  identity: BROWSER_CONSTANTS.CHROME,\n  versionSearch: 'criOS'\n}, {\n  key: 'vendor',\n  subString: 'Apple',\n  identity: BROWSER_CONSTANTS.SAFARI,\n  versionSearch: 'Version'\n}, {\n  key: 'userAgent',\n  subString: BROWSER_CONSTANTS.FIREFOX,\n  identity: BROWSER_CONSTANTS.FIREFOX\n}, {\n  key: 'userAgent',\n  subString: 'MSIE',\n  identity: 'Explorer',\n  versionSearch: 'MSIE'\n}, {\n  key: 'userAgent',\n  subString: 'Trident',\n  identity: 'Explorer',\n  versionSearch: 'rv'\n}, {\n  key: 'userAgent',\n  subString: 'Gecko',\n  identity: 'Mozilla',\n  versionSearch: 'rv'\n}];\nvar OS_DATA = [{\n  key: 'platform',\n  subString: 'Win',\n  identity: 'Windows'\n}, {\n  key: 'userAgent',\n  subString: 'iPod',\n  identity: 'iOS',\n  device: 'iPod'\n}, {\n  key: 'userAgent',\n  subString: 'iPhone',\n  identity: 'iOS',\n  device: 'iPhone'\n}, {\n  key: 'userAgent',\n  subString: 'iPad',\n  identity: 'iOS',\n  device: 'iPad'\n}, {\n  // Make sure Mac is lower than iPhone/iPad/iPod in the array order as iOS user agent also includes 'Mac'\n  key: 'platform',\n  subString: BROWSER_CONSTANTS.MAC,\n  identity: BROWSER_CONSTANTS.MAC\n}, {\n  // Make sure Android is above Linux, as Android user agent also includes 'Linux'\n  key: 'userAgent',\n  subString: 'Android',\n  identity: 'Android'\n}, {\n  key: 'platform',\n  subString: 'Linux',\n  identity: 'Linux'\n}];\n/**\n * Searches for the identity of the browser in the provided array or known browsers.\n * @param {Object} navigator\n * @param {Array} data - list of supported browsers, filled with browser information\n * to determine the current browser identity\n * @returns {Object} - the identity of the browser\n */\n\nfunction getBrowserData(navigator, data) {\n  var dataString;\n  var identity = null;\n  var device = null;\n  var versionSearchString = '';\n  for (var i = 0, len = data.length; i < len; i += 1) {\n    dataString = navigator[data[i].key];\n    versionSearchString = data[i].versionSearch || data[i].identity;\n    if (dataString && dataString.indexOf(data[i].subString) !== -1) {\n      /* eslint-disable prefer-destructuring */\n      identity = data[i].identity;\n      device = data[i].device;\n      /* eslint-enable prefer-destructuring */\n\n      break;\n    }\n  }\n  return {\n    identity: identity,\n    device: device,\n    versionSearchString: versionSearchString\n  };\n}\n/**\n * searches for the version of the browser in the provided array\n *\n * @param {string} dataString - a string that contains the version information,\n *        either navigator.userAgent or navigator.appVersion\n * @param {string} versionSearchString\n * @returns {string} - empty if versionString does not exist in dataString, else the version as a string.\n */\n\nfunction getBrowserVersion(dataString, versionSearchString) {\n  var index = dataString.indexOf(versionSearchString);\n  if (index === -1) {\n    return '';\n  } // This regex grabs the decimal value of the version\n\n  var versionArr = dataString.substring(index + versionSearchString.length + 1).match(/[0-9]+(?:\\.[0-9]*)?/);\n  if (versionArr && versionArr.length) {\n    return versionArr[0];\n  }\n  return '';\n}\n/**\n * @param {string} [objectID] optional. Defaults to a random string, just to validate\n * the ability of creating the ActiveXObject on the browser\n * @returns {boolean}\n */\n\nfunction isActiveXObjectEnabledForIE(objectID) {\n  var objectIdentifier = objectID || 'htmlfile';\n  var enabled = false;\n  try {\n    if ('ActiveXObject' in window) {\n      var _window = window,\n        ActiveXObject = _window.ActiveXObject;\n      enabled = !!new ActiveXObject(objectIdentifier);\n    }\n  } catch (exception) {\n    enabled = false;\n  }\n  return enabled;\n}\nvar BrowserUtils = /*#__PURE__*/\nfunction () {\n  function BrowserUtils() {\n    _classCallCheck(this, BrowserUtils);\n    var _window2 = window,\n      navigator = _window2.navigator;\n    var browserData = getBrowserData(navigator, BROWSER_DATA);\n    var osInfo = getBrowserData(navigator, OS_DATA);\n    this.browser = browserData.identity || 'unknown';\n    this.version = getBrowserVersion(navigator.userAgent, browserData.versionSearchString) || getBrowserVersion(navigator.appVersion, browserData.versionSearchString) || 'unknown';\n    this.OS = osInfo.identity || 'unknown';\n    this.device = osInfo.device || 'unknown';\n  }\n  /**\n   * Returns the browser name as a string if recognized, else 'an unknown browser'.\n   * @returns {string} browser name\n   */\n\n  _createClass(BrowserUtils, [{\n    key: \"getName\",\n    value: function getName() {\n      return this.browser;\n    }\n    /**\n     * Returns the browser version as a string.\n     * @returns {string} version string\n     */\n  }, {\n    key: \"getVersion\",\n    value: function getVersion() {\n      return this.version;\n    }\n    /**\n     * Returns true if the browser is of type 'type' and the version of browser >= 'min' parameter.\n     *\n     * @param {string} name - The name of the browser\n     * @param {string | number} minVersion - The version number to be equal to or greater than.\n     * @returns {boolean} - true if current browser name is same as passed in and\n     *     browser version greater or equal to minVersion\n     */\n  }, {\n    key: \"isMinBrowser\",\n    value: function isMinBrowser(name, minVersion) {\n      return this.browser.toLowerCase() === name.toLowerCase() && parseFloat(this.version) >= parseFloat(minVersion);\n    }\n    /**\n     * Returns true if the current browser is Safari.\n     * @returns {boolean} True if browser is Safari\n     */\n  }, {\n    key: \"isSafari\",\n    value: function isSafari() {\n      return this.browser === BROWSER_CONSTANTS.SAFARI;\n    }\n    /**\n     * Returns true if the current browser is firefox.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isFirefox\",\n    value: function isFirefox() {\n      return this.browser === BROWSER_CONSTANTS.FIREFOX;\n    }\n    /**\n     * Returns true if the current browser is chrome.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isChrome\",\n    value: function isChrome() {\n      return this.browser === BROWSER_CONSTANTS.CHROME;\n    }\n    /**\n     * Returns true if the current browser is internet explorer (ie).\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isIE\",\n    value: function isIE() {\n      return this.browser === BROWSER_CONSTANTS.IE;\n    }\n    /**\n     * Returns true if the current browser is microsoft edge.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isEdge\",\n    value: function isEdge() {\n      return this.browser === BROWSER_CONSTANTS.EDGE;\n    }\n    /**\n     * Checks if a specific plugin is supported and does not realy on\n     * plugins generally being supported.\n     * @param {string} [pluginID] optional. The specific plugin which should be checked for support\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isIEAndSpecificBrowserPluginSupported\",\n    value: function isIEAndSpecificBrowserPluginSupported(pluginID) {\n      return this.isIE() && isActiveXObjectEnabledForIE(pluginID);\n    }\n  }]);\n  return BrowserUtils;\n}();\nvar BrowserInstance = new BrowserUtils(); // for testing only\n\nexport { BrowserUtils, BROWSER_CONSTANTS, MIN_FOLDER_UPLOAD_CHROME, MIN_FOLDER_UPLOAD_EDGE, MIN_FOLDER_UPLOAD_FIREFOX, MIN_FOLDER_UPLOAD_SAFARI }; // export as a singleton\n\nexport default BrowserInstance;","map":{"version":3,"sources":["../../../src/api/box-edit/BrowserUtils.js"],"names":["BROWSER_CONSTANTS","CHROME","EDGE","FIREFOX","MAC","SAFARI","IE","MIN_FOLDER_UPLOAD_CHROME","MIN_FOLDER_UPLOAD_EDGE","MIN_FOLDER_UPLOAD_FIREFOX","MIN_FOLDER_UPLOAD_SAFARI","BROWSER_DATA","key","subString","identity","versionSearch","OS_DATA","device","getBrowserData","navigator","data","dataString","versionSearchString","i","len","length","indexOf","getBrowserVersion","index","versionArr","substring","match","isActiveXObjectEnabledForIE","objectID","objectIdentifier","enabled","window","ActiveXObject","exception","BrowserUtils","browserData","osInfo","browser","version","userAgent","appVersion","OS","name","minVersion","toLowerCase","parseFloat","pluginID","isIE","BrowserInstance"],"mappings":"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","sourcesContent":["// @flow\nconst BROWSER_CONSTANTS = {\n    CHROME: 'Chrome',\n    EDGE: 'Edge',\n    FIREFOX: 'Firefox',\n    MAC: 'Mac',\n    SAFARI: 'Safari',\n    IE: 'Explorer',\n};\nconst MIN_FOLDER_UPLOAD_CHROME = '21';\nconst MIN_FOLDER_UPLOAD_EDGE = '14';\nconst MIN_FOLDER_UPLOAD_FIREFOX = '50';\nconst MIN_FOLDER_UPLOAD_SAFARI = '11.1';\n\nconst BROWSER_DATA = [\n    {\n        key: 'userAgent',\n        subString: BROWSER_CONSTANTS.EDGE,\n        identity: BROWSER_CONSTANTS.EDGE,\n    },\n    {\n        key: 'userAgent',\n        subString: BROWSER_CONSTANTS.CHROME,\n        identity: BROWSER_CONSTANTS.CHROME,\n    },\n    {\n        // Chrome on iOS uses criOS to indicate that it is a chrome browser\n        // https://developer.chrome.com/multidevice/user-agent\n        key: 'userAgent',\n        subString: 'criOS',\n        identity: BROWSER_CONSTANTS.CHROME,\n        versionSearch: 'criOS',\n    },\n    {\n        key: 'vendor',\n        subString: 'Apple',\n        identity: BROWSER_CONSTANTS.SAFARI,\n        versionSearch: 'Version',\n    },\n    {\n        key: 'userAgent',\n        subString: BROWSER_CONSTANTS.FIREFOX,\n        identity: BROWSER_CONSTANTS.FIREFOX,\n    },\n    {\n        key: 'userAgent',\n        subString: 'MSIE',\n        identity: 'Explorer',\n        versionSearch: 'MSIE',\n    },\n    {\n        key: 'userAgent',\n        subString: 'Trident',\n        identity: 'Explorer',\n        versionSearch: 'rv',\n    },\n    {\n        key: 'userAgent',\n        subString: 'Gecko',\n        identity: 'Mozilla',\n        versionSearch: 'rv',\n    },\n];\n\nconst OS_DATA = [\n    {\n        key: 'platform',\n        subString: 'Win',\n        identity: 'Windows',\n    },\n    {\n        key: 'userAgent',\n        subString: 'iPod',\n        identity: 'iOS',\n        device: 'iPod',\n    },\n    {\n        key: 'userAgent',\n        subString: 'iPhone',\n        identity: 'iOS',\n        device: 'iPhone',\n    },\n    {\n        key: 'userAgent',\n        subString: 'iPad',\n        identity: 'iOS',\n        device: 'iPad',\n    },\n    {\n        // Make sure Mac is lower than iPhone/iPad/iPod in the array order as iOS user agent also includes 'Mac'\n        key: 'platform',\n        subString: BROWSER_CONSTANTS.MAC,\n        identity: BROWSER_CONSTANTS.MAC,\n    },\n    {\n        // Make sure Android is above Linux, as Android user agent also includes 'Linux'\n        key: 'userAgent',\n        subString: 'Android',\n        identity: 'Android',\n    },\n    {\n        key: 'platform',\n        subString: 'Linux',\n        identity: 'Linux',\n    },\n];\n\n/**\n * Searches for the identity of the browser in the provided array or known browsers.\n * @param {Object} navigator\n * @param {Array} data - list of supported browsers, filled with browser information\n * to determine the current browser identity\n * @returns {Object} - the identity of the browser\n */\nfunction getBrowserData(navigator: Object, data: Array<Object>) {\n    let dataString;\n    let identity = null;\n    let device = null;\n    let versionSearchString = '';\n\n    for (let i = 0, len = data.length; i < len; i += 1) {\n        dataString = navigator[data[i].key];\n        versionSearchString = data[i].versionSearch || data[i].identity;\n\n        if (dataString && dataString.indexOf(data[i].subString) !== -1) {\n            /* eslint-disable prefer-destructuring */\n            identity = data[i].identity;\n            device = data[i].device;\n            /* eslint-enable prefer-destructuring */\n            break;\n        }\n    }\n\n    return {\n        identity,\n        device,\n        versionSearchString,\n    };\n}\n\n/**\n * searches for the version of the browser in the provided array\n *\n * @param {string} dataString - a string that contains the version information,\n *        either navigator.userAgent or navigator.appVersion\n * @param {string} versionSearchString\n * @returns {string} - empty if versionString does not exist in dataString, else the version as a string.\n */\nfunction getBrowserVersion(dataString: string, versionSearchString: string) {\n    const index = dataString.indexOf(versionSearchString);\n    if (index === -1) {\n        return '';\n    }\n\n    // This regex grabs the decimal value of the version\n    const versionArr = dataString.substring(index + versionSearchString.length + 1).match(/[0-9]+(?:\\.[0-9]*)?/);\n    if (versionArr && versionArr.length) {\n        return versionArr[0];\n    }\n    return '';\n}\n\n/**\n * @param {string} [objectID] optional. Defaults to a random string, just to validate\n * the ability of creating the ActiveXObject on the browser\n * @returns {boolean}\n */\nfunction isActiveXObjectEnabledForIE(objectID: string) {\n    const objectIdentifier = objectID || 'htmlfile';\n    let enabled = false;\n\n    try {\n        if ('ActiveXObject' in window) {\n            const { ActiveXObject } = window;\n            enabled = !!new ActiveXObject(objectIdentifier);\n        }\n    } catch (exception) {\n        enabled = false;\n    }\n\n    return enabled;\n}\n\nclass BrowserUtils {\n    browser: string;\n\n    version: string;\n\n    OS: string;\n\n    device: string;\n\n    constructor() {\n        const { navigator } = window;\n        const browserData = getBrowserData(navigator, BROWSER_DATA);\n        const osInfo = getBrowserData(navigator, OS_DATA);\n\n        this.browser = browserData.identity || 'unknown';\n        this.version =\n            getBrowserVersion(navigator.userAgent, browserData.versionSearchString) ||\n            getBrowserVersion(navigator.appVersion, browserData.versionSearchString) ||\n            'unknown';\n        this.OS = osInfo.identity || 'unknown';\n        this.device = osInfo.device || 'unknown';\n    }\n\n    /**\n     * Returns the browser name as a string if recognized, else 'an unknown browser'.\n     * @returns {string} browser name\n     */\n    getName() {\n        return this.browser;\n    }\n\n    /**\n     * Returns the browser version as a string.\n     * @returns {string} version string\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * Returns true if the browser is of type 'type' and the version of browser >= 'min' parameter.\n     *\n     * @param {string} name - The name of the browser\n     * @param {string | number} minVersion - The version number to be equal to or greater than.\n     * @returns {boolean} - true if current browser name is same as passed in and\n     *     browser version greater or equal to minVersion\n     */\n    isMinBrowser(name: string, minVersion: string | number): boolean {\n        return this.browser.toLowerCase() === name.toLowerCase() && parseFloat(this.version) >= parseFloat(minVersion);\n    }\n\n    /**\n     * Returns true if the current browser is Safari.\n     * @returns {boolean} True if browser is Safari\n     */\n    isSafari() {\n        return this.browser === BROWSER_CONSTANTS.SAFARI;\n    }\n\n    /**\n     * Returns true if the current browser is firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this.browser === BROWSER_CONSTANTS.FIREFOX;\n    }\n\n    /**\n     * Returns true if the current browser is chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this.browser === BROWSER_CONSTANTS.CHROME;\n    }\n\n    /**\n     * Returns true if the current browser is internet explorer (ie).\n     * @returns {boolean}\n     */\n    isIE() {\n        return this.browser === BROWSER_CONSTANTS.IE;\n    }\n\n    /**\n     * Returns true if the current browser is microsoft edge.\n     * @returns {boolean}\n     */\n    isEdge() {\n        return this.browser === BROWSER_CONSTANTS.EDGE;\n    }\n\n    /**\n     * Checks if a specific plugin is supported and does not realy on\n     * plugins generally being supported.\n     * @param {string} [pluginID] optional. The specific plugin which should be checked for support\n     * @returns {boolean}\n     */\n    isIEAndSpecificBrowserPluginSupported(pluginID: string) {\n        return this.isIE() && isActiveXObjectEnabledForIE(pluginID);\n    }\n}\n\nconst BrowserInstance = new BrowserUtils();\n\n// for testing only\nexport {\n    BrowserUtils,\n    BROWSER_CONSTANTS,\n    MIN_FOLDER_UPLOAD_CHROME,\n    MIN_FOLDER_UPLOAD_EDGE,\n    MIN_FOLDER_UPLOAD_FIREFOX,\n    MIN_FOLDER_UPLOAD_SAFARI,\n};\n// export as a singleton\nexport default BrowserInstance;\n"]},"metadata":{},"sourceType":"module"}