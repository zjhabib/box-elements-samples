{"ast":null,"code":"/**\n * \n * @file Content sub header component\n * @author Box\n */\nimport React from 'react';\nimport Sort from './Sort';\nimport Add from './Add';\nimport GridViewSlider from '../../../components/grid-view/GridViewSlider';\nimport ViewModeChangeButton from './ViewModeChangeButton';\nimport { VIEW_FOLDER, VIEW_MODE_GRID } from '../../../constants';\nimport './SubHeaderRight.scss';\nvar SubHeaderRight = function SubHeaderRight(_ref) {\n  var canCreateNewFolder = _ref.canCreateNewFolder,\n    canUpload = _ref.canUpload,\n    currentCollection = _ref.currentCollection,\n    gridColumnCount = _ref.gridColumnCount,\n    gridMaxColumns = _ref.gridMaxColumns,\n    gridMinColumns = _ref.gridMinColumns,\n    maxGridColumnCountForWidth = _ref.maxGridColumnCountForWidth,\n    onCreate = _ref.onCreate,\n    onGridViewSliderChange = _ref.onGridViewSliderChange,\n    onSortChange = _ref.onSortChange,\n    onUpload = _ref.onUpload,\n    onViewModeChange = _ref.onViewModeChange,\n    view = _ref.view,\n    viewMode = _ref.viewMode;\n  var sortBy = currentCollection.sortBy,\n    sortDirection = currentCollection.sortDirection,\n    _currentCollection$it = currentCollection.items,\n    items = _currentCollection$it === void 0 ? [] : _currentCollection$it;\n  var hasGridView = !!gridColumnCount;\n  var hasItems = items.length > 0;\n  var isFolder = view === VIEW_FOLDER;\n  var showSort = isFolder && hasItems;\n  var showAdd = (!!canUpload || !!canCreateNewFolder) && isFolder;\n  return React.createElement(\"div\", {\n    className: \"be-sub-header-right\"\n  }, hasItems && viewMode === VIEW_MODE_GRID && React.createElement(GridViewSlider, {\n    columnCount: gridColumnCount,\n    gridMaxColumns: gridMaxColumns,\n    gridMinColumns: gridMinColumns,\n    maxColumnCount: maxGridColumnCountForWidth,\n    onChange: onGridViewSliderChange\n  }), hasItems && hasGridView && React.createElement(ViewModeChangeButton, {\n    viewMode: viewMode,\n    onViewModeChange: onViewModeChange\n  }), showSort && !!sortBy && !!sortDirection && React.createElement(Sort, {\n    onSortChange: onSortChange,\n    sortBy: sortBy,\n    sortDirection: sortDirection\n  }), showAdd && React.createElement(Add, {\n    isDisabled: !isFolder,\n    onCreate: onCreate,\n    onUpload: onUpload,\n    showCreate: canCreateNewFolder,\n    showUpload: canUpload\n  }));\n};\nexport default SubHeaderRight;","map":{"version":3,"sources":["../../../../src/elements/common/sub-header/SubHeaderRight.js"],"names":["React","Sort","Add","GridViewSlider","ViewModeChangeButton","VIEW_FOLDER","VIEW_MODE_GRID","SubHeaderRight","canCreateNewFolder","canUpload","currentCollection","gridColumnCount","gridMaxColumns","gridMinColumns","maxGridColumnCountForWidth","onCreate","onGridViewSliderChange","onSortChange","onUpload","onViewModeChange","view","viewMode","sortBy","sortDirection","items","hasGridView","hasItems","length","isFolder","showSort","showAdd"],"mappings":"AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,cAAP,MAA2B,8CAA3B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,oBAA5C;AAGA,OAAO,uBAAP;AAmBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAeV;EAAA,IAdTC,kBAcS,GAAA,IAAA,CAdTA,kBAcS;IAbTC,SAaS,GAAA,IAAA,CAbTA,SAaS;IAZTC,iBAYS,GAAA,IAAA,CAZTA,iBAYS;IAXTC,eAWS,GAAA,IAAA,CAXTA,eAWS;IAVTC,cAUS,GAAA,IAAA,CAVTA,cAUS;IATTC,cASS,GAAA,IAAA,CATTA,cASS;IARTC,0BAQS,GAAA,IAAA,CARTA,0BAQS;IAPTC,QAOS,GAAA,IAAA,CAPTA,QAOS;IANTC,sBAMS,GAAA,IAAA,CANTA,sBAMS;IALTC,YAKS,GAAA,IAAA,CALTA,YAKS;IAJTC,QAIS,GAAA,IAAA,CAJTA,QAIS;IAHTC,gBAGS,GAAA,IAAA,CAHTA,gBAGS;IAFTC,IAES,GAAA,IAAA,CAFTA,IAES;IADTC,QACS,GAAA,IAAA,CADTA,QACS;EAAA,IACDC,MADC,GACiDZ,iBADjD,CACDY,MADC;IACOC,aADP,GACiDb,iBADjD,CACOa,aADP;IAAA,qBAAA,GACiDb,iBADjD,CACsBc,KADtB;IACsBA,KADtB,GAAA,qBAAA,KAAA,KAAA,CAAA,GAC8B,EAD9B,GAAA,qBAAA;EAET,IAAMC,WAAoB,GAAG,CAAC,CAACd,eAA/B;EACA,IAAMe,QAAiB,GAAGF,KAAK,CAACG,MAANH,GAAe,CAAzC;EACA,IAAMI,QAAiB,GAAGR,IAAI,KAAKf,WAAnC;EACA,IAAMwB,QAAiB,GAAGD,QAAQ,IAAIF,QAAtC;EACA,IAAMI,OAAgB,GAAG,CAAC,CAAC,CAACrB,SAAF,IAAe,CAAC,CAACD,kBAAlB,KAAyCoB,QAAlE;EACA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACKF,QAAQ,IAAIL,QAAQ,KAAKf,cAAzBoB,IACG,KAAA,CAAA,aAAA,CAAC,cAAD,EAAA;IACI,WAAW,EAAEf,eADjB;IAEI,cAAc,EAAEC,cAFpB;IAGI,cAAc,EAAEC,cAHpB;IAII,cAAc,EAAEC,0BAJpB;IAKI,QAAQ,EAAEE;EALd,CAAA,CAFR,EAUKU,QAAQ,IAAID,WAAZC,IACG,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAA;IAAsB,QAAQ,EAAEL,QAAhC;IAA0C,gBAAgB,EAAEF;EAA5D,CAAA,CAXR,EAaKU,QAAQ,IAAI,CAAC,CAACP,MAAdO,IAAwB,CAAC,CAACN,aAA1BM,IACG,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IAAM,YAAY,EAAEZ,YAApB;IAAkC,MAAM,EAAEK,MAA1C;IAAkD,aAAa,EAAEC;EAAjE,CAAA,CAdR,EAgBKO,OAAO,IACJ,KAAA,CAAA,aAAA,CAAC,GAAD,EAAA;IACI,UAAU,EAAE,CAACF,QADjB;IAEI,QAAQ,EAAEb,QAFd;IAGI,QAAQ,EAAEG,QAHd;IAII,UAAU,EAAEV,kBAJhB;IAKI,UAAU,EAAEC;EALhB,CAAA,CAjBR,CADJ;AA4BH,CAlDD;AAoDA,eAAeF,cAAf","sourcesContent":["/**\n * @flow\n * @file Content sub header component\n * @author Box\n */\n\nimport React from 'react';\nimport Sort from './Sort';\nimport Add from './Add';\nimport GridViewSlider from '../../../components/grid-view/GridViewSlider';\nimport ViewModeChangeButton from './ViewModeChangeButton';\nimport { VIEW_FOLDER, VIEW_MODE_GRID } from '../../../constants';\nimport type { ViewMode } from '../flowTypes';\nimport type { View, Collection } from '../../../common/types/core';\nimport './SubHeaderRight.scss';\n\ntype Props = {\n    canCreateNewFolder: boolean,\n    canUpload: boolean,\n    currentCollection: Collection,\n    gridColumnCount: number,\n    gridMaxColumns: number,\n    gridMinColumns: number,\n    maxGridColumnCountForWidth: number,\n    onCreate: Function,\n    onGridViewSliderChange: (newSliderValue: number) => void,\n    onSortChange: Function,\n    onUpload: Function,\n    onViewModeChange?: (viewMode: ViewMode) => void,\n    view: View,\n    viewMode: ViewMode,\n};\n\nconst SubHeaderRight = ({\n    canCreateNewFolder,\n    canUpload,\n    currentCollection,\n    gridColumnCount,\n    gridMaxColumns,\n    gridMinColumns,\n    maxGridColumnCountForWidth,\n    onCreate,\n    onGridViewSliderChange,\n    onSortChange,\n    onUpload,\n    onViewModeChange,\n    view,\n    viewMode,\n}: Props) => {\n    const { sortBy, sortDirection, items = [] }: Collection = currentCollection;\n    const hasGridView: boolean = !!gridColumnCount;\n    const hasItems: boolean = items.length > 0;\n    const isFolder: boolean = view === VIEW_FOLDER;\n    const showSort: boolean = isFolder && hasItems;\n    const showAdd: boolean = (!!canUpload || !!canCreateNewFolder) && isFolder;\n    return (\n        <div className=\"be-sub-header-right\">\n            {hasItems && viewMode === VIEW_MODE_GRID && (\n                <GridViewSlider\n                    columnCount={gridColumnCount}\n                    gridMaxColumns={gridMaxColumns}\n                    gridMinColumns={gridMinColumns}\n                    maxColumnCount={maxGridColumnCountForWidth}\n                    onChange={onGridViewSliderChange}\n                />\n            )}\n            {hasItems && hasGridView && (\n                <ViewModeChangeButton viewMode={viewMode} onViewModeChange={onViewModeChange} />\n            )}\n            {showSort && !!sortBy && !!sortDirection && (\n                <Sort onSortChange={onSortChange} sortBy={sortBy} sortDirection={sortDirection} />\n            )}\n            {showAdd && (\n                <Add\n                    isDisabled={!isFolder}\n                    onCreate={onCreate}\n                    onUpload={onUpload}\n                    showCreate={canCreateNewFolder}\n                    showUpload={canUpload}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default SubHeaderRight;\n"]},"metadata":{},"sourceType":"module"}