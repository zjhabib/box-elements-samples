{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * \n * @file Upload state content component\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport UploadInput from './UploadInput';\nvar UploadStateContent = function UploadStateContent(_ref) {\n  var fileInputLabel = _ref.fileInputLabel,\n    folderInputLabel = _ref.folderInputLabel,\n    message = _ref.message,\n    onChange = _ref.onChange,\n    _ref$useButton = _ref.useButton,\n    useButton = _ref$useButton === void 0 ? false : _ref$useButton;\n  var messageContent = message ? React.createElement(\"div\", {\n    className: \"bcu-upload-state-message\"\n  }, message) : null;\n  var inputLabelClass = useButton ? 'btn btn-primary be-input-btn' : 'be-input-link';\n  var shouldShowFolderUploadInput = !useButton && !!folderInputLabel;\n  var handleChange = function handleChange(event) {\n    if (!onChange) {\n      return;\n    }\n    onChange(event);\n    var currentTarget = event.currentTarget; // resets the file input selection\n\n    currentTarget.value = '';\n  };\n  var fileInputContent = React.createElement(UploadInput, {\n    handleChange: handleChange,\n    inputLabel: fileInputLabel,\n    inputLabelClass: inputLabelClass\n  });\n  var folderInputContent = shouldShowFolderUploadInput ? React.createElement(UploadInput, {\n    handleChange: handleChange,\n    inputLabel: folderInputLabel,\n    inputLabelClass: inputLabelClass,\n    isFolderUpload: true\n  }) : null;\n  var inputsContent;\n  if (fileInputContent && folderInputContent) {\n    inputsContent = React.createElement(FormattedMessage, _extends({}, messages.uploadOptions, {\n      values: {\n        option1: fileInputContent,\n        option2: folderInputContent\n      }\n    }));\n  } else if (fileInputContent) {\n    inputsContent = fileInputContent;\n  }\n  return React.createElement(\"div\", null, messageContent, inputsContent && React.createElement(\"div\", {\n    className: \"bcu-upload-input-container\"\n  }, inputsContent));\n};\nexport default UploadStateContent;","map":{"version":3,"sources":["../../../src/elements/content-uploader/UploadStateContent.js"],"names":["React","FormattedMessage","messages","UploadInput","UploadStateContent","fileInputLabel","folderInputLabel","message","onChange","useButton","messageContent","inputLabelClass","shouldShowFolderUploadInput","handleChange","event","currentTarget","value","fileInputContent","folderInputContent","inputsContent","uploadOptions","option1","option2"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAUA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,IAAA,EAAuF;EAAA,IAApFC,cAAoF,GAAA,IAAA,CAApFA,cAAoF;IAApEC,gBAAoE,GAAA,IAAA,CAApEA,gBAAoE;IAAlDC,OAAkD,GAAA,IAAA,CAAlDA,OAAkD;IAAzCC,QAAyC,GAAA,IAAA,CAAzCA,QAAyC;IAAA,cAAA,GAAA,IAAA,CAA/BC,SAA+B;IAA/BA,SAA+B,GAAA,cAAA,KAAA,KAAA,CAAA,GAAnB,KAAmB,GAAA,cAAA;EAC9G,IAAMC,cAAc,GAAGH,OAAO,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EAA2CA,OAA3C,CAAH,GAA+D,IAA7F;EACA,IAAMI,eAAe,GAAGF,SAAS,GAAG,8BAAH,GAAoC,eAArE;EACA,IAAMG,2BAA2B,GAAG,CAACH,SAAD,IAAc,CAAC,CAACH,gBAApD;EAEA,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAkD;IACnE,IAAI,CAACN,QAAL,EAAe;MACX;IACH;IAEDA,QAAQ,CAACM,KAAD,CAARN;IAEA,IAAMO,aAAa,GAAID,KAAK,CAACC,aAA7B,CAPmE,CAQnE;;IACAA,aAAa,CAACC,KAAdD,GAAsB,EAAtBA;EACH,CAVD;EAYA,IAAME,gBAAgB,GAClB,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IAAa,YAAY,EAAEJ,YAA3B;IAAyC,UAAU,EAAER,cAArD;IAAqE,eAAe,EAAEM;EAAtF,CAAA,CADJ;EAGA,IAAMO,kBAAkB,GAAGN,2BAA2B,GAClD,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACI,YAAY,EAAEC,YADlB;IAEI,UAAU,EAAEP,gBAFhB;IAGI,eAAe,EAAEK,eAHrB;IAII,cAAc,EAAA;EAJlB,CAAA,CADkD,GAOlD,IAPJ;EASA,IAAIQ,aAAJ;EACA,IAAIF,gBAAgB,IAAIC,kBAAxB,EAA4C;IACxCC,aAAa,GACT,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACQjB,QAAQ,CAACkB,aADjB,EAAA;MAEI,MAAM,EAAE;QACJC,OAAO,EAAEJ,gBADL;QAEJK,OAAO,EAAEJ;MAFL;IAFZ,CAAA,CAAA,CADJC;EASH,CAVD,MAUO,IAAIF,gBAAJ,EAAsB;IACzBE,aAAa,GAAGF,gBAAhBE;EACH;EAED,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACKT,cADL,EAEKS,aAAa,IAAI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EAA6CA,aAA7C,CAFtB,CADJ;AAMH,CAlDD;AAoDA,eAAef,kBAAf","sourcesContent":["/**\n * @flow\n * @file Upload state content component\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport UploadInput from './UploadInput';\n\ntype Props = {\n    fileInputLabel?: React.Node,\n    folderInputLabel?: React.Node,\n    message?: React.Node,\n    onChange?: Function,\n    useButton?: boolean,\n};\n\nconst UploadStateContent = ({ fileInputLabel, folderInputLabel, message, onChange, useButton = false }: Props) => {\n    const messageContent = message ? <div className=\"bcu-upload-state-message\">{message}</div> : null;\n    const inputLabelClass = useButton ? 'btn btn-primary be-input-btn' : 'be-input-link';\n    const shouldShowFolderUploadInput = !useButton && !!folderInputLabel;\n\n    const handleChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        if (!onChange) {\n            return;\n        }\n\n        onChange(event);\n\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        // resets the file input selection\n        currentTarget.value = '';\n    };\n\n    const fileInputContent = (\n        <UploadInput handleChange={handleChange} inputLabel={fileInputLabel} inputLabelClass={inputLabelClass} />\n    );\n    const folderInputContent = shouldShowFolderUploadInput ? (\n        <UploadInput\n            handleChange={handleChange}\n            inputLabel={folderInputLabel}\n            inputLabelClass={inputLabelClass}\n            isFolderUpload\n        />\n    ) : null;\n\n    let inputsContent;\n    if (fileInputContent && folderInputContent) {\n        inputsContent = (\n            <FormattedMessage\n                {...messages.uploadOptions}\n                values={{\n                    option1: fileInputContent,\n                    option2: folderInputContent,\n                }}\n            />\n        );\n    } else if (fileInputContent) {\n        inputsContent = fileInputContent;\n    }\n\n    return (\n        <div>\n            {messageContent}\n            {inputsContent && <div className=\"bcu-upload-input-container\">{inputsContent}</div>}\n        </div>\n    );\n};\n\nexport default UploadStateContent;\n"]},"metadata":{},"sourceType":"module"}