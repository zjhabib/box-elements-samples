{"ast":null,"code":"/**\n * \n * @file Item action component\n */\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport IconCheck from '../../icons/general/IconCheck';\nimport IconClose from '../../icons/general/IconClose';\nimport IconInProgress from './IconInProgress';\nimport IconRetry from '../../icons/general/IconRetry';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport Tooltip from '../../components/tooltip';\nimport messages from '../common/messages';\nimport { STATUS_PENDING, STATUS_IN_PROGRESS, STATUS_STAGED, STATUS_COMPLETE, STATUS_ERROR } from '../../constants';\nimport './ItemAction.scss';\nvar ICON_CHECK_COLOR = '#26C281';\nvar ItemAction = function ItemAction(_ref) {\n  var status = _ref.status,\n    onClick = _ref.onClick,\n    intl = _ref.intl,\n    isResumableUploadsEnabled = _ref.isResumableUploadsEnabled,\n    _ref$isFolder = _ref.isFolder,\n    isFolder = _ref$isFolder === void 0 ? false : _ref$isFolder;\n  var icon = React.createElement(IconClose, null);\n  var tooltip;\n  if (isFolder && status !== STATUS_PENDING) {\n    return null;\n  }\n  switch (status) {\n    case STATUS_COMPLETE:\n      icon = React.createElement(IconCheck, {\n        color: ICON_CHECK_COLOR\n      });\n      if (!isResumableUploadsEnabled) {\n        tooltip = messages.remove;\n      }\n      break;\n    case STATUS_ERROR:\n      icon = React.createElement(IconRetry, {\n        height: 24,\n        width: 24\n      });\n      tooltip = isResumableUploadsEnabled ? messages.resume : messages.retry;\n      break;\n    case STATUS_IN_PROGRESS:\n    case STATUS_STAGED:\n      if (isResumableUploadsEnabled) {\n        icon = React.createElement(LoadingIndicator, null);\n      } else {\n        icon = React.createElement(IconInProgress, null);\n        tooltip = messages.uploadsCancelButtonTooltip;\n      }\n      break;\n    case STATUS_PENDING:\n    default:\n      if (isResumableUploadsEnabled) {\n        icon = React.createElement(LoadingIndicator, null);\n      } else {\n        tooltip = messages.uploadsCancelButtonTooltip;\n      }\n      break;\n  }\n  return React.createElement(\"div\", {\n    className: \"bcu-item-action\"\n  }, tooltip ? React.createElement(Tooltip, {\n    position: \"top-left\",\n    text: intl.formatMessage(tooltip)\n  }, React.createElement(PlainButton, {\n    onClick: onClick,\n    type: \"button\",\n    isDisabled: status === STATUS_STAGED\n  }, icon)) : icon);\n};\nexport { ItemAction as ItemActionForTesting };\nexport default injectIntl(ItemAction);","map":{"version":3,"sources":["../../../src/elements/content-uploader/ItemAction.js"],"names":["React","injectIntl","IconCheck","IconClose","IconInProgress","IconRetry","LoadingIndicator","PlainButton","Tooltip","messages","STATUS_PENDING","STATUS_IN_PROGRESS","STATUS_STAGED","STATUS_COMPLETE","STATUS_ERROR","ICON_CHECK_COLOR","ItemAction","status","onClick","intl","isResumableUploadsEnabled","isFolder","icon","tooltip","remove","resume","retry","uploadsCancelButtonTooltip","formatMessage","ItemActionForTesting"],"mappings":"AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,WAAP,MAAwB,2CAAxB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,aAA7C,EAA4DC,eAA5D,EAA6EC,YAA7E,QAAiG,iBAAjG;AAGA,OAAO,mBAAP;AAEA,IAAMC,gBAAgB,GAAG,SAAzB;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAAmF;EAAA,IAAhFC,MAAgF,GAAA,IAAA,CAAhFA,MAAgF;IAAxEC,OAAwE,GAAA,IAAA,CAAxEA,OAAwE;IAA/DC,IAA+D,GAAA,IAAA,CAA/DA,IAA+D;IAAzDC,yBAAyD,GAAA,IAAA,CAAzDA,yBAAyD;IAAA,aAAA,GAAA,IAAA,CAA9BC,QAA8B;IAA9BA,QAA8B,GAAA,aAAA,KAAA,KAAA,CAAA,GAAnB,KAAmB,GAAA,aAAA;EAClG,IAAIC,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA,IAAA,CAAX;EACA,IAAIC,OAAJ;EAEA,IAAIF,QAAQ,IAAIJ,MAAM,KAAKP,cAA3B,EAA2C;IACvC,OAAO,IAAP;EACH;EAED,QAAQO,MAAR;IACI,KAAKJ,eAAL;MACIS,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;QAAW,KAAK,EAAEP;MAAlB,CAAA,CAAPO;MACA,IAAI,CAACF,yBAAL,EAAgC;QAC5BG,OAAO,GAAGd,QAAQ,CAACe,MAAnBD;MACH;MACD;IACJ,KAAKT,YAAL;MACIQ,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;QAAW,MAAM,EAAE,EAAnB;QAAuB,KAAK,EAAE;MAA9B,CAAA,CAAPA;MACAC,OAAO,GAAGH,yBAAyB,GAAGX,QAAQ,CAACgB,MAAZ,GAAqBhB,QAAQ,CAACiB,KAAjEH;MACA;IACJ,KAAKZ,kBAAL;IACA,KAAKC,aAAL;MACI,IAAIQ,yBAAJ,EAA+B;QAC3BE,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,IAAA,CAAPA;MACH,CAFD,MAEO;QACHA,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,cAAD,EAAA,IAAA,CAAPA;QACAC,OAAO,GAAGd,QAAQ,CAACkB,0BAAnBJ;MACH;MACD;IACJ,KAAKb,cAAL;IACA;MACI,IAAIU,yBAAJ,EAA+B;QAC3BE,IAAI,GAAG,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,IAAA,CAAPA;MACH,CAFD,MAEO;QACHC,OAAO,GAAGd,QAAQ,CAACkB,0BAAnBJ;MACH;MACD;EA3BR;EA8BA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACKA,OAAO,GACJ,KAAA,CAAA,aAAA,CAAC,OAAD,EAAA;IAAS,QAAQ,EAAC,UAAlB;IAA6B,IAAI,EAAEJ,IAAI,CAACS,aAALT,CAAmBI,OAAnBJ;EAAnC,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IAAa,OAAO,EAAED,OAAtB;IAA+B,IAAI,EAAC,QAApC;IAA6C,UAAU,EAAED,MAAM,KAAKL;EAApE,CAAA,EACKU,IADL,CADJ,CADI,GAOJA,IARR,CADJ;AAaH,CAnDD;AAqDA,SAASN,UAAU,IAAIa,oBAAvB;AACA,eAAe5B,UAAU,CAACe,UAAD,CAAzB","sourcesContent":["/**\n * @flow\n * @file Item action component\n */\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport IconCheck from '../../icons/general/IconCheck';\nimport IconClose from '../../icons/general/IconClose';\nimport IconInProgress from './IconInProgress';\nimport IconRetry from '../../icons/general/IconRetry';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport Tooltip from '../../components/tooltip';\nimport messages from '../common/messages';\nimport { STATUS_PENDING, STATUS_IN_PROGRESS, STATUS_STAGED, STATUS_COMPLETE, STATUS_ERROR } from '../../constants';\nimport type { UploadStatus } from '../../common/types/upload';\n\nimport './ItemAction.scss';\n\nconst ICON_CHECK_COLOR = '#26C281';\n\ntype Props = {\n    isFolder?: boolean,\n    isResumableUploadsEnabled: boolean,\n    onClick: Function,\n    status: UploadStatus,\n} & InjectIntlProvidedProps;\n\nconst ItemAction = ({ status, onClick, intl, isResumableUploadsEnabled, isFolder = false }: Props) => {\n    let icon = <IconClose />;\n    let tooltip;\n\n    if (isFolder && status !== STATUS_PENDING) {\n        return null;\n    }\n\n    switch (status) {\n        case STATUS_COMPLETE:\n            icon = <IconCheck color={ICON_CHECK_COLOR} />;\n            if (!isResumableUploadsEnabled) {\n                tooltip = messages.remove;\n            }\n            break;\n        case STATUS_ERROR:\n            icon = <IconRetry height={24} width={24} />;\n            tooltip = isResumableUploadsEnabled ? messages.resume : messages.retry;\n            break;\n        case STATUS_IN_PROGRESS:\n        case STATUS_STAGED:\n            if (isResumableUploadsEnabled) {\n                icon = <LoadingIndicator />;\n            } else {\n                icon = <IconInProgress />;\n                tooltip = messages.uploadsCancelButtonTooltip;\n            }\n            break;\n        case STATUS_PENDING:\n        default:\n            if (isResumableUploadsEnabled) {\n                icon = <LoadingIndicator />;\n            } else {\n                tooltip = messages.uploadsCancelButtonTooltip;\n            }\n            break;\n    }\n\n    return (\n        <div className=\"bcu-item-action\">\n            {tooltip ? (\n                <Tooltip position=\"top-left\" text={intl.formatMessage(tooltip)}>\n                    <PlainButton onClick={onClick} type=\"button\" isDisabled={status === STATUS_STAGED}>\n                        {icon}\n                    </PlainButton>\n                </Tooltip>\n            ) : (\n                icon\n            )}\n        </div>\n    );\n};\n\nexport { ItemAction as ItemActionForTesting };\nexport default injectIntl(ItemAction);\n"]},"metadata":{},"sourceType":"module"}