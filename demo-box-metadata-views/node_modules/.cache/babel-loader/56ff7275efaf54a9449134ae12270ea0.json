{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * \n * @file Local storage wrapper that falls back to an in memory store\n * @author Box\n */\nimport Cache from './Cache';\nvar KEY_PREFIX = 'localStore';\nvar SERVICE_VERSION = '0';\nvar LocalStore = /*#__PURE__*/\nfunction () {\n  /**\n   * [constructor]\n   *\n   * @return {void}\n   */\n  function LocalStore() {\n    _classCallCheck(this, LocalStore);\n    this.memoryStore = new Cache();\n    try {\n      this.localStorage = window.localStorage;\n      this.isLocalStorageAvailable = this.canUseLocalStorage();\n    } catch (e) {\n      this.isLocalStorageAvailable = false;\n    }\n  }\n  /**\n   * Builds a key for the session store\n   * @private\n   * @param  {string} key\n   *\n   * @return {string}\n   */\n\n  _createClass(LocalStore, [{\n    key: \"buildKey\",\n    value: function buildKey(key) {\n      return \"\".concat(KEY_PREFIX, \"/\").concat(SERVICE_VERSION, \"/\").concat(key);\n    }\n    /**\n     * Test to see browser can use local storage.\n     * See http://stackoverflow.com/questions/14555347\n     * Note that this will return false if we are actually hitting the maximum localStorage\n     * size (5MB / 2.5M chars)\n     *\n     * @private\n     * @return {boolean} True if browser can use localStore\n     */\n  }, {\n    key: \"canUseLocalStorage\",\n    value: function canUseLocalStorage() {\n      if (!this.localStorage) {\n        return false;\n      }\n      try {\n        this.localStorage.setItem(this.buildKey('TestKey'), 'testValue');\n        this.localStorage.removeItem(this.buildKey('TestKey'));\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    /**\n     * Set an item\n     *\n     * @param {string} key\n     * @param {*} value\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      if (this.isLocalStorageAvailable) {\n        try {\n          this.localStorage.setItem(this.buildKey(key), JSON.stringify(value));\n        } catch (e) {// no-op\n        }\n      } else {\n        this.memoryStore.set(key, value);\n      }\n    }\n    /**\n     * Get an item\n     *\n     * @param  {string} key\n     *\n     * @return {*}\n     */\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      if (this.isLocalStorageAvailable) {\n        try {\n          var item = this.localStorage.getItem(this.buildKey(key));\n          if (!item) {\n            return null;\n          }\n          return JSON.parse(item);\n        } catch (e) {\n          return null;\n        }\n      } else {\n        return this.memoryStore.get(key);\n      }\n    }\n    /**\n     * Remove an item\n     *\n     * @param  {string} key\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key) {\n      if (this.isLocalStorageAvailable) {\n        try {\n          this.localStorage.removeItem(this.buildKey(key));\n        } catch (e) {// no-op\n        }\n        return;\n      }\n      this.memoryStore.unset(key);\n    }\n  }]);\n  return LocalStore;\n}();\nexport default LocalStore;","map":{"version":3,"sources":["../../src/utils/LocalStore.js"],"names":["Cache","KEY_PREFIX","SERVICE_VERSION","LocalStore","memoryStore","localStorage","window","isLocalStorageAvailable","canUseLocalStorage","e","key","setItem","buildKey","removeItem","value","JSON","stringify","set","item","getItem","parse","get","unset"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,SAAlB;AAGA,IAAMC,UAAU,GAAG,YAAnB;AACA,IAAMC,eAAe,GAAG,GAAxB;IAEMC,U;;EAOF;;;;;EAKA,SAAA,UAAA,CAAA,EAAc;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;IACV,IAAA,CAAKC,WAAL,GAAmB,IAAIJ,KAAJ,CAAA,CAAnB;IACA,IAAI;MACA,IAAA,CAAKK,YAAL,GAAoBC,MAAM,CAACD,YAA3B;MACA,IAAA,CAAKE,uBAAL,GAA+B,IAAA,CAAKC,kBAAL,CAAA,CAA/B;IACH,CAHD,CAGE,OAAOC,CAAP,EAAU;MACR,IAAA,CAAKF,uBAAL,GAA+B,KAA/B;IACH;EACJ;EAED;;;;;;;;;;6BAOSG,G,EAAqB;MAC1B,OAAA,EAAA,CAAA,MAAA,CAAUT,UAAV,EAAA,GAAA,CAAA,CAAA,MAAA,CAAwBC,eAAxB,EAAA,GAAA,CAAA,CAAA,MAAA,CAA2CQ,GAA3C,CAAA;IACH;IAED;;;;;;;;;;;yCAS8B;MAC1B,IAAI,CAAC,IAAA,CAAKL,YAAV,EAAwB;QACpB,OAAO,KAAP;MACH;MAED,IAAI;QACA,IAAA,CAAKA,YAAL,CAAkBM,OAAlB,CAA0B,IAAA,CAAKC,QAAL,CAAc,SAAd,CAA1B,EAAoD,WAApD,CAAA;QACA,IAAA,CAAKP,YAAL,CAAkBQ,UAAlB,CAA6B,IAAA,CAAKD,QAAL,CAAc,SAAd,CAA7B,CAAA;QACA,OAAO,IAAP;MACH,CAJD,CAIE,OAAOH,CAAP,EAAU;QACR,OAAO,KAAP;MACH;IACJ;IAED;;;;;;;;;;4BAQQC,G,EAAaI,K,EAAY;MAC7B,IAAI,IAAA,CAAKP,uBAAT,EAAkC;QAC9B,IAAI;UACA,IAAA,CAAKF,YAAL,CAAkBM,OAAlB,CAA0B,IAAA,CAAKC,QAAL,CAAcF,GAAd,CAA1B,EAA8CK,IAAI,CAACC,SAALD,CAAeD,KAAfC,CAA9C,CAAA;QACH,CAFD,CAEE,OAAON,CAAP,EAAU,CACR;QAAA;MAEP,CAND,MAMO;QACH,IAAA,CAAKL,WAAL,CAAiBa,GAAjB,CAAqBP,GAArB,EAA0BI,KAA1B,CAAA;MACH;IACJ;IAED;;;;;;;;;4BAOQJ,G,EAAsB;MAC1B,IAAI,IAAA,CAAKH,uBAAT,EAAkC;QAC9B,IAAI;UACA,IAAMW,IAAI,GAAG,IAAA,CAAKb,YAAL,CAAkBc,OAAlB,CAA0B,IAAA,CAAKP,QAAL,CAAcF,GAAd,CAA1B,CAAb;UACA,IAAI,CAACQ,IAAL,EAAW;YACP,OAAO,IAAP;UACH;UAED,OAAOH,IAAI,CAACK,KAALL,CAAWG,IAAXH,CAAP;QACH,CAPD,CAOE,OAAON,CAAP,EAAU;UACR,OAAO,IAAP;QACH;MACJ,CAXD,MAWO;QACH,OAAO,IAAA,CAAKL,WAAL,CAAiBiB,GAAjB,CAAqBX,GAArB,CAAP;MACH;IACJ;IAED;;;;;;;;;+BAOWA,G,EAAmB;MAC1B,IAAI,IAAA,CAAKH,uBAAT,EAAkC;QAC9B,IAAI;UACA,IAAA,CAAKF,YAAL,CAAkBQ,UAAlB,CAA6B,IAAA,CAAKD,QAAL,CAAcF,GAAd,CAA7B,CAAA;QACH,CAFD,CAEE,OAAOD,CAAP,EAAU,CACR;QAAA;QAGJ;MACH;MAED,IAAA,CAAKL,WAAL,CAAiBkB,KAAjB,CAAuBZ,GAAvB,CAAA;IACH;;;;AAGL,eAAeP,UAAf","sourcesContent":["/**\n * @flow\n * @file Local storage wrapper that falls back to an in memory store\n * @author Box\n */\n\nimport Cache from './Cache';\nimport type APICache from './Cache';\n\nconst KEY_PREFIX = 'localStore';\nconst SERVICE_VERSION = '0';\n\nclass LocalStore {\n    memoryStore: APICache;\n\n    localStorage: typeof localStorage;\n\n    isLocalStorageAvailable: boolean;\n\n    /**\n     * [constructor]\n     *\n     * @return {void}\n     */\n    constructor() {\n        this.memoryStore = new Cache();\n        try {\n            this.localStorage = window.localStorage;\n            this.isLocalStorageAvailable = this.canUseLocalStorage();\n        } catch (e) {\n            this.isLocalStorageAvailable = false;\n        }\n    }\n\n    /**\n     * Builds a key for the session store\n     * @private\n     * @param  {string} key\n     *\n     * @return {string}\n     */\n    buildKey(key: string): string {\n        return `${KEY_PREFIX}/${SERVICE_VERSION}/${key}`;\n    }\n\n    /**\n     * Test to see browser can use local storage.\n     * See http://stackoverflow.com/questions/14555347\n     * Note that this will return false if we are actually hitting the maximum localStorage\n     * size (5MB / 2.5M chars)\n     *\n     * @private\n     * @return {boolean} True if browser can use localStore\n     */\n    canUseLocalStorage(): boolean {\n        if (!this.localStorage) {\n            return false;\n        }\n\n        try {\n            this.localStorage.setItem(this.buildKey('TestKey'), 'testValue');\n            this.localStorage.removeItem(this.buildKey('TestKey'));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Set an item\n     *\n     * @param {string} key\n     * @param {*} value\n     *\n     * @return {void}\n     */\n    setItem(key: string, value: any) {\n        if (this.isLocalStorageAvailable) {\n            try {\n                this.localStorage.setItem(this.buildKey(key), JSON.stringify(value));\n            } catch (e) {\n                // no-op\n            }\n        } else {\n            this.memoryStore.set(key, value);\n        }\n    }\n\n    /**\n     * Get an item\n     *\n     * @param  {string} key\n     *\n     * @return {*}\n     */\n    getItem(key: string): ?Object {\n        if (this.isLocalStorageAvailable) {\n            try {\n                const item = this.localStorage.getItem(this.buildKey(key));\n                if (!item) {\n                    return null;\n                }\n\n                return JSON.parse(item);\n            } catch (e) {\n                return null;\n            }\n        } else {\n            return this.memoryStore.get(key);\n        }\n    }\n\n    /**\n     * Remove an item\n     *\n     * @param  {string} key\n     *\n     * @return {void}\n     */\n    removeItem(key: string): void {\n        if (this.isLocalStorageAvailable) {\n            try {\n                this.localStorage.removeItem(this.buildKey(key));\n            } catch (e) {\n                // no-op\n            }\n\n            return;\n        }\n\n        this.memoryStore.unset(key);\n    }\n}\n\nexport default LocalStore;\n"]},"metadata":{},"sourceType":"module"}