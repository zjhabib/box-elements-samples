{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nvar MenuLinkItem = function MenuLinkItem(_ref) {\n  var children = _ref.children,\n    _ref$isSelected = _ref.isSelected,\n    isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,\n    _ref$isSelectItem = _ref.isSelectItem,\n    isSelectItem = _ref$isSelectItem === void 0 ? false : _ref$isSelectItem,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"isSelected\", \"isSelectItem\"]);\n  var linkEl = React.Children.only(children);\n  var listItemProps = omit(rest, ['role', 'tabIndex']);\n  listItemProps.role = 'none';\n  var linkProps = {\n    className: classNames('menu-item', linkEl ? linkEl.props.className : '', {\n      'is-select-item': isSelectItem,\n      'is-selected': isSelected\n    }),\n    role: isSelectItem ? 'menuitemradio' : 'menuitem',\n    tabIndex: -1\n  };\n  if (isSelectItem) {\n    linkProps['aria-checked'] = isSelected;\n  }\n  return React.createElement(\"li\", listItemProps, React.cloneElement(linkEl, linkProps));\n};\nexport default MenuLinkItem;","map":{"version":3,"sources":["../../../src/components/menu/MenuLinkItem.tsx"],"names":["React","classNames","omit","MenuLinkItem","children","isSelected","isSelectItem","rest","linkEl","Children","only","listItemProps","role","linkProps","className","props","tabIndex","cloneElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAIA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAoF;EAAA,IAAjFC,QAAiF,GAAA,IAAA,CAAjFA,QAAiF;IAAA,eAAA,GAAA,IAAA,CAAvEC,UAAuE;IAAvEA,UAAuE,GAAA,eAAA,KAAA,KAAA,CAAA,GAA1D,KAA0D,GAAA,eAAA;IAAA,iBAAA,GAAA,IAAA,CAAnDC,YAAmD;IAAnDA,YAAmD,GAAA,iBAAA,KAAA,KAAA,CAAA,GAApC,KAAoC,GAAA,iBAAA;IAA1BC,IAA0B,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,YAAA,EAAA,cAAA,CAAA,CAAA;EACrG,IAAMC,MAAM,GAAGR,KAAK,CAACS,QAANT,CAAeU,IAAfV,CAAoBI,QAApBJ,CAAf;EAEA,IAAMW,aAA4B,GAAGT,IAAI,CAACK,IAAD,EAAO,CAAC,MAAD,EAAS,UAAT,CAAP,CAAzC;EACAI,aAAa,CAACC,IAAdD,GAAqB,MAArBA;EAEA,IAAME,SAAwB,GAAG;IAC7BC,SAAS,EAAEb,UAAU,CAAC,WAAD,EAAcO,MAAM,GAAGA,MAAM,CAACO,KAAPP,CAAaM,SAAhB,GAA4B,EAAhD,EAAoD;MACrE,gBAAA,EAAkBR,YADmD;MAErE,aAAA,EAAeD;IAFsD,CAApD,CADQ;IAK7BO,IAAI,EAAEN,YAAY,GAAG,eAAH,GAAqB,UALV;IAM7BU,QAAQ,EAAE,CAAC;EANkB,CAAjC;EASA,IAAIV,YAAJ,EAAkB;IACdO,SAAS,CAAC,cAAD,CAATA,GAA4BR,UAA5BQ;EACH;EAED,OAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAQF,aAAR,EAAwBX,KAAK,CAACiB,YAANjB,CAAmBQ,MAAnBR,EAA2Ba,SAA3Bb,CAAxB,CAAP;AACH,CApBD;AAsBA,eAAeG,YAAf","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\nimport { MenuItemProps } from './MenuItem';\n\nconst MenuLinkItem = ({ children, isSelected = false, isSelectItem = false, ...rest }: MenuItemProps) => {\n    const linkEl = React.Children.only(children) as React.ReactElement;\n\n    const listItemProps: MenuItemProps = omit(rest, ['role', 'tabIndex']);\n    listItemProps.role = 'none';\n\n    const linkProps: MenuItemProps = {\n        className: classNames('menu-item', linkEl ? linkEl.props.className : '', {\n            'is-select-item': isSelectItem,\n            'is-selected': isSelected,\n        }),\n        role: isSelectItem ? 'menuitemradio' : 'menuitem',\n        tabIndex: -1,\n    };\n\n    if (isSelectItem) {\n        linkProps['aria-checked'] = isSelected;\n    }\n\n    return <li {...listItemProps}>{React.cloneElement(linkEl, linkProps)}</li>;\n};\n\nexport default MenuLinkItem;\n"]},"metadata":{},"sourceType":"module"}