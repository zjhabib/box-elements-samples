{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Component for Approval comment form\n */\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport getProp from 'lodash/get';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport commonMessages from '../../../../common/messages';\nimport messages from './messages';\nimport commentFormMessages from '../comment-form/messages';\nimport Form from '../../../../components/form-elements/form/Form';\nimport ContactDatalistItem from '../../../../components/contact-datalist-item/ContactDatalistItem';\nimport TextArea from '../../../../components/text-area';\nimport DatePicker from '../../../../components/date-picker/DatePicker';\nimport Checkbox from '../../../../components/checkbox';\nimport PillSelectorDropdown from '../../../../components/pill-selector-dropdown/PillSelectorDropdown';\nimport Button from '../../../../components/button/Button';\nimport { FeatureFlag } from '../../../common/feature-checking';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport { TASK_COMPLETION_RULE_ANY, TASK_COMPLETION_RULE_ALL, TASK_EDIT_MODE_CREATE, TASK_EDIT_MODE_EDIT } from '../../../../constants';\nimport { ACTIVITY_TARGETS, INTERACTION_TARGET } from '../../../common/interactionTargets';\nimport TaskError from './TaskError';\nimport './TaskForm.scss';\nfunction convertAssigneesToSelectorItems(approvers) {\n  return approvers.map(function (_ref) {\n    var target = _ref.target;\n    var newSelectorItem = {\n      id: target.id,\n      name: target.name,\n      item: target,\n      value: target.id,\n      text: target.name // for PillSelectorDropdown SelectorOptions type\n    };\n\n    return newSelectorItem;\n  });\n}\nvar TaskForm = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskForm, _React$Component);\n  function TaskForm() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, TaskForm);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TaskForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", _this.getInitialFormState());\n    _defineProperty(_assertThisInitialized(_this), \"validateForm\", function (only) {\n      _this.setState(function (state) {\n        var intl = _this.props.intl;\n        var approvers = state.approvers,\n          message = state.message,\n          approverTextInput = state.approverTextInput;\n        var assigneeFieldMissingError = {\n          code: 'required',\n          message: intl.formatMessage(commonMessages.requiredFieldError)\n        };\n        var assigneeFieldInvalidError = {\n          code: 'invalid',\n          message: intl.formatMessage(commonMessages.invalidUserError)\n        };\n        var messageFieldError = {\n          code: 'required',\n          message: intl.formatMessage(commonMessages.requiredFieldError)\n        };\n        var formValidityState = {\n          taskAssignees: (approverTextInput.length ? assigneeFieldInvalidError : null) || (approvers.length ? null : assigneeFieldMissingError),\n          taskName: message ? null : messageFieldError,\n          taskDueDate: null\n        };\n        var isValid = Object.values(formValidityState).every(function (val) {\n          return val == null;\n        });\n        return {\n          isValid: isValid,\n          formValidityState: only ? _objectSpread({}, state.formValidityState, _defineProperty({}, only, formValidityState[only])) : formValidityState\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getErrorByFieldname\", function (fieldName) {\n      var formValidityState = _this.state.formValidityState;\n      return formValidityState[fieldName] ? formValidityState[fieldName].message : null;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"clearForm\", function () {\n      return _this.setState(_this.getInitialFormState());\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleInvalidSubmit\", function () {\n      _this.validateForm();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmitSuccess\", function () {\n      var onSubmitSuccess = _this.props.onSubmitSuccess;\n      if (onSubmitSuccess) {\n        onSubmitSuccess();\n      }\n      _this.clearForm();\n      _this.setState({\n        isLoading: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmitError\", function (e) {\n      var onSubmitError = _this.props.onSubmitError;\n      onSubmitError(e);\n      _this.setState({\n        isLoading: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"addResinInfo\", function () {\n      var _this$props = _this.props,\n        id = _this$props.id,\n        taskType = _this$props.taskType,\n        editMode = _this$props.editMode;\n      var dueDate = _this.state.dueDate;\n      var addedAssignees = _this.getAddedAssignees();\n      var removedAssignees = _this.getRemovedAssignees();\n      return {\n        'data-resin-taskid': id,\n        'data-resin-tasktype': taskType,\n        'data-resin-isediting': editMode === TASK_EDIT_MODE_EDIT,\n        'data-resin-numassigneesadded': addedAssignees.filter(function (assignee) {\n          return assignee.target.type === 'user';\n        }).length,\n        'data-resin-numgroupssadded': addedAssignees.filter(function (assignee) {\n          return assignee.target.type === 'group';\n        }).length,\n        'data-resin-numassigneesremoved': removedAssignees.length,\n        'data-resin-assigneesadded': addedAssignees.map(function (assignee) {\n          return assignee.target.id;\n        }),\n        'data-resin-assigneesremoved': removedAssignees.map(function (assignee) {\n          return assignee.target.id;\n        }),\n        'data-resin-duedate': dueDate && dueDate.getTime()\n      };\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getAddedAssignees\", function () {\n      // Added assignees are the ones in state that weren't in the prop\n      var approvers = _this.props.approvers;\n      var currentApprovers = _this.state.approvers;\n      var approverIds = approvers.map(function (approver) {\n        return approver.id;\n      });\n      return currentApprovers.filter(function (currentApprover) {\n        return approverIds.indexOf(currentApprover.id) === -1;\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getRemovedAssignees\", function () {\n      // Assignees to remove are the ones in the prop that cannot be found in state\n      var approvers = _this.props.approvers;\n      var currentApprovers = _this.state.approvers;\n      var currentApproverIds = currentApprovers.map(function (currentApprover) {\n        return currentApprover.id;\n      });\n      return approvers.filter(function (approver) {\n        return currentApproverIds.indexOf(approver.id) === -1;\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleValidSubmit\", function () {\n      var _this$props2 = _this.props,\n        id = _this$props2.id,\n        createTask = _this$props2.createTask,\n        editTask = _this$props2.editTask,\n        editMode = _this$props2.editMode,\n        taskType = _this$props2.taskType;\n      var _this$state = _this.state,\n        message = _this$state.message,\n        currentApprovers = _this$state.approvers,\n        dueDate = _this$state.dueDate,\n        completionRule = _this$state.completionRule,\n        isValid = _this$state.isValid;\n      var dueDateString = dueDate && dueDate.toISOString();\n      if (!isValid) return;\n      _this.setState({\n        isLoading: true\n      });\n      if (editMode === TASK_EDIT_MODE_EDIT && editTask) {\n        editTask({\n          id: id,\n          completion_rule: completionRule,\n          description: message,\n          due_at: dueDateString,\n          addedAssignees: convertAssigneesToSelectorItems(_this.getAddedAssignees()),\n          removedAssignees: _this.getRemovedAssignees()\n        }, _this.handleSubmitSuccess, _this.handleSubmitError);\n      } else {\n        createTask(message, convertAssigneesToSelectorItems(currentApprovers), taskType, dueDateString, completionRule, _this.handleSubmitSuccess, _this.handleSubmitError);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDueDateChange\", function (date) {\n      var dateValue = null;\n      if (date) {\n        dateValue = new Date(date); // The date given to us is midnight of the date selected.\n        // Modify date to be the end of day (minus 1 millisecond) for the given due date\n\n        dateValue.setHours(23, 59, 59, 999);\n      }\n      _this.setState({\n        dueDate: dateValue\n      });\n      _this.validateForm('taskDueDate');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleCompletionRuleChange\", function (event) {\n      _this.setState({\n        completionRule: event.target.checked ? TASK_COMPLETION_RULE_ANY : TASK_COMPLETION_RULE_ALL\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleApproverSelectorInput\", function (value) {\n      var _this$props$getApprov = _this.props.getApproverWithQuery,\n        getApproverWithQuery = _this$props$getApprov === void 0 ? noop : _this$props$getApprov;\n      _this.setState({\n        approverTextInput: value\n      });\n      getApproverWithQuery(value);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleApproverSelectorSelect\", function (pills) {\n      _this.setState({\n        approvers: _this.state.approvers.concat(pills.map(function (pill) {\n          return {\n            id: '',\n            target: pill.item,\n            role: 'ASSIGNEE',\n            type: 'task_collaborator',\n            status: 'NOT_STARTED',\n            permissions: {\n              can_delete: false,\n              can_update: false\n            }\n          };\n        })),\n        approverTextInput: ''\n      });\n      _this.validateForm('taskAssignees');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleApproverSelectorRemove\", function (option, index) {\n      var approvers = _toConsumableArray(_this.state.approvers);\n      approvers.splice(index, 1);\n      _this.setState({\n        approvers: approvers\n      });\n      _this.validateForm('taskAssignees');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleChangeMessage\", function (e) {\n      e.persist();\n      _this.setState({\n        message: e.currentTarget.value\n      });\n      _this.validateForm('taskName');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleCancelClick\", function () {\n      _this.props.onCancel();\n    });\n    return _this;\n  }\n  _createClass(TaskForm, [{\n    key: \"getInitialFormState\",\n    value: function getInitialFormState() {\n      var _this$props3 = this.props,\n        dueDate = _this$props3.dueDate,\n        id = _this$props3.id,\n        message = _this$props3.message,\n        approvers = _this$props3.approvers,\n        completionRule = _this$props3.completionRule;\n      return {\n        id: id,\n        completionRule: completionRule || TASK_COMPLETION_RULE_ALL,\n        approvers: approvers,\n        approverTextInput: '',\n        dueDate: dueDate ? new Date(dueDate) : null,\n        formValidityState: {},\n        message: message,\n        isLoading: false,\n        isValid: null\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n        _ref5;\n      var _this$props4 = this.props,\n        approverSelectorContacts = _this$props4.approverSelectorContacts,\n        className = _this$props4.className,\n        error = _this$props4.error,\n        isDisabled = _this$props4.isDisabled,\n        intl = _this$props4.intl,\n        editMode = _this$props4.editMode,\n        taskType = _this$props4.taskType;\n      var _this$state2 = this.state,\n        dueDate = _this$state2.dueDate,\n        approvers = _this$state2.approvers,\n        message = _this$state2.message,\n        formValidityState = _this$state2.formValidityState,\n        isLoading = _this$state2.isLoading,\n        completionRule = _this$state2.completionRule;\n      var inputContainerClassNames = classNames('bcs-task-input-container', 'bcs-task-input-is-open', className);\n      var isCreateEditMode = editMode === TASK_EDIT_MODE_CREATE;\n      var selectedApprovers = convertAssigneesToSelectorItems(approvers); // filter out selected approvers\n      // map to datalist item format\n\n      var approverOptions = approverSelectorContacts.filter(function (_ref2) {\n        var id = _ref2.id;\n        return !selectedApprovers.find(function (_ref3) {\n          var value = _ref3.value;\n          return value === id;\n        });\n      });\n      var pillSelectorOverlayClasses = classNames({\n        scrollable: approverOptions.length > 4\n      });\n      var submitButtonMessage = isCreateEditMode ? messages.tasksAddTaskFormSubmitLabel : messages.tasksEditTaskFormSubmitLabel;\n      var shouldShowCompletionRule = approvers.length > 0; // Enable checkbox when there is a group or multiple users being assigned\n      // TODO: consider setting contants for assignee types to src/constants.js\n      // - move from src/features/collaborator-avatars/constants.js\n\n      var isCompletionRuleCheckboxDisabled = approvers.filter(function (approver) {\n        return approver.target.type === 'group';\n      }).length <= 0 && approvers.filter(function (approver) {\n        return approver.target.type === 'user';\n      }).length <= 1;\n      var isCompletionRuleCheckboxChecked = completionRule === TASK_COMPLETION_RULE_ANY;\n      var isForbiddenErrorOnEdit = isLoading || getProp(error, 'status') === 403 && !isCreateEditMode;\n      return React.createElement(\"div\", {\n        className: inputContainerClassNames,\n        \"data-resin-component\": \"taskform\"\n      }, React.createElement(\"div\", {\n        className: \"bcs-task-input-form-container\"\n      }, React.createElement(TaskError, {\n        editMode: editMode,\n        error: error,\n        taskType: taskType\n      }), React.createElement(Form, {\n        formValidityState: formValidityState,\n        onInvalidSubmit: this.handleInvalidSubmit,\n        onValidSubmit: this.handleValidSubmit\n      }, React.createElement(PillSelectorDropdown, {\n        className: pillSelectorOverlayClasses,\n        error: this.getErrorByFieldname('taskAssignees'),\n        disabled: isForbiddenErrorOnEdit,\n        inputProps: {\n          'data-testid': 'task-form-assignee-input'\n        },\n        isRequired: true,\n        label: React.createElement(FormattedMessage, messages.tasksAddTaskFormSelectAssigneesLabel),\n        name: \"taskAssignees\",\n        onBlur: function onBlur() {\n          return _this2.validateForm('taskAssignees');\n        },\n        onInput: this.handleApproverSelectorInput,\n        onRemove: this.handleApproverSelectorRemove,\n        onSelect: this.handleApproverSelectorSelect,\n        placeholder: intl.formatMessage(commentFormMessages.approvalAddAssignee),\n        selectedOptions: selectedApprovers,\n        selectorOptions: approverOptions,\n        shouldSetActiveItemOnOpen: true,\n        shouldClearUnmatchedInput: true,\n        validateForError: function validateForError() {\n          return _this2.validateForm('taskAssignees');\n        }\n      }, approverOptions.map(function (_ref4) {\n        var id = _ref4.id,\n          name = _ref4.name,\n          _ref4$item = _ref4.item,\n          item = _ref4$item === void 0 ? {} : _ref4$item;\n        return React.createElement(ContactDatalistItem, {\n          key: id,\n          \"data-testid\": \"task-assignee-option\",\n          name: name,\n          subtitle: item.type === 'group' ? React.createElement(FormattedMessage, messages.taskCreateGroupLabel) : item.email\n        });\n      })), shouldShowCompletionRule && React.createElement(React.Fragment, null, React.createElement(FeatureFlag, {\n        feature: \"activityFeed.tasks.assignToGroup\"\n      }, React.createElement(Checkbox, {\n        \"data-testid\": \"task-form-completion-rule-checkbox-group\",\n        isChecked: isCompletionRuleCheckboxChecked,\n        isDisabled: isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit,\n        label: React.createElement(FormattedMessage, messages.taskAnyCheckboxLabel),\n        tooltip: intl.formatMessage(messages.taskAnyInfoGroupTooltip),\n        name: \"completionRule\",\n        onChange: this.handleCompletionRuleChange\n      })), React.createElement(FeatureFlag, {\n        not: true,\n        feature: \"activityFeed.tasks.assignToGroup\"\n      }, React.createElement(Checkbox, {\n        \"data-testid\": \"task-form-completion-rule-checkbox\",\n        isChecked: isCompletionRuleCheckboxChecked,\n        isDisabled: isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit,\n        label: React.createElement(FormattedMessage, messages.taskAnyCheckboxLabel),\n        tooltip: intl.formatMessage(messages.taskAnyInfoTooltip),\n        name: \"completionRule\",\n        onChange: this.handleCompletionRuleChange\n      }))), React.createElement(TextArea, {\n        className: \"bcs-task-name-input\",\n        \"data-testid\": \"task-form-name-input\",\n        disabled: isDisabled || isForbiddenErrorOnEdit,\n        error: this.getErrorByFieldname('taskName'),\n        isRequired: true,\n        label: React.createElement(FormattedMessage, messages.tasksAddTaskFormMessageLabel),\n        name: \"taskName\",\n        onBlur: function onBlur() {\n          return _this2.validateForm('taskName');\n        },\n        onChange: this.handleChangeMessage,\n        placeholder: intl.formatMessage(commentFormMessages.commentWrite),\n        value: message\n      }), React.createElement(DatePicker, {\n        className: \"bcs-task-add-due-date-input\",\n        error: this.getErrorByFieldname('taskDueDate'),\n        inputProps: (_ref5 = {}, _defineProperty(_ref5, INTERACTION_TARGET, ACTIVITY_TARGETS.TASK_DATE_PICKER), _defineProperty(_ref5, 'data-testid', 'task-form-date-input'), _ref5),\n        isDisabled: isForbiddenErrorOnEdit,\n        isRequired: false,\n        label: React.createElement(FormattedMessage, messages.tasksAddTaskFormDueDateLabel),\n        minDate: new Date(),\n        name: \"taskDueDate\",\n        onChange: this.handleDueDateChange,\n        placeholder: intl.formatMessage(commentFormMessages.approvalSelectDate),\n        value: dueDate || undefined\n      }), React.createElement(\"div\", {\n        className: \"bcs-task-input-controls\"\n      }, React.createElement(Button, _extends({\n        className: \"bcs-task-input-cancel-btn\",\n        \"data-resin-target\": ACTIVITY_TARGETS.APPROVAL_FORM_CANCEL,\n        \"data-testid\": \"task-form-cancel-button\",\n        onClick: this.handleCancelClick,\n        isDisabled: isLoading,\n        type: \"button\"\n      }, this.addResinInfo()), React.createElement(FormattedMessage, messages.tasksAddTaskFormCancelLabel)), React.createElement(PrimaryButton, _extends({\n        className: \"bcs-task-input-submit-btn\",\n        \"data-resin-target\": ACTIVITY_TARGETS.APPROVAL_FORM_POST,\n        \"data-testid\": \"task-form-submit-button\",\n        isDisabled: isForbiddenErrorOnEdit,\n        isLoading: isLoading\n      }, this.addResinInfo()), React.createElement(FormattedMessage, submitButtonMessage))))));\n    }\n  }]);\n  return TaskForm;\n}(React.Component); // For testing only\n\n_defineProperty(TaskForm, \"defaultProps\", {\n  approvers: [],\n  approverSelectorContacts: [],\n  editMode: TASK_EDIT_MODE_CREATE,\n  id: '',\n  message: ''\n});\nexport { TaskForm as TaskFormUnwrapped };\nexport default injectIntl(TaskForm);","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-form/TaskForm.js"],"names":["React","noop","getProp","classNames","FormattedMessage","injectIntl","commonMessages","messages","commentFormMessages","Form","ContactDatalistItem","TextArea","DatePicker","Checkbox","PillSelectorDropdown","Button","FeatureFlag","PrimaryButton","TASK_COMPLETION_RULE_ANY","TASK_COMPLETION_RULE_ALL","TASK_EDIT_MODE_CREATE","TASK_EDIT_MODE_EDIT","ACTIVITY_TARGETS","INTERACTION_TARGET","TaskError","convertAssigneesToSelectorItems","approvers","map","target","newSelectorItem","id","name","item","value","text","TaskForm","Component","approverSelectorContacts","editMode","message","getInitialFormState","dueDate","completionRule","props","approverTextInput","Date","formValidityState","isLoading","isValid","only","setState","intl","state","assigneeFieldMissingError","code","formatMessage","requiredFieldError","assigneeFieldInvalidError","invalidUserError","messageFieldError","taskAssignees","length","taskName","taskDueDate","values","every","val","fieldName","validateForm","onSubmitSuccess","clearForm","e","onSubmitError","taskType","addedAssignees","getAddedAssignees","removedAssignees","getRemovedAssignees","filter","assignee","type","getTime","currentApprovers","approverIds","approver","indexOf","currentApprover","currentApproverIds","createTask","editTask","dueDateString","toISOString","completion_rule","description","due_at","handleSubmitSuccess","handleSubmitError","date","dateValue","setHours","event","checked","getApproverWithQuery","pills","concat","pill","role","status","permissions","can_delete","can_update","option","index","splice","persist","currentTarget","onCancel","className","error","isDisabled","inputContainerClassNames","isCreateEditMode","selectedApprovers","approverOptions","find","pillSelectorOverlayClasses","scrollable","submitButtonMessage","tasksAddTaskFormSubmitLabel","tasksEditTaskFormSubmitLabel","shouldShowCompletionRule","isCompletionRuleCheckboxDisabled","isCompletionRuleCheckboxChecked","isForbiddenErrorOnEdit","handleInvalidSubmit","handleValidSubmit","getErrorByFieldname","tasksAddTaskFormSelectAssigneesLabel","handleApproverSelectorInput","handleApproverSelectorRemove","handleApproverSelectorSelect","approvalAddAssignee","taskCreateGroupLabel","email","taskAnyCheckboxLabel","taskAnyInfoGroupTooltip","handleCompletionRuleChange","taskAnyInfoTooltip","tasksAddTaskFormMessageLabel","handleChangeMessage","commentWrite","TASK_DATE_PICKER","tasksAddTaskFormDueDateLabel","handleDueDateChange","approvalSelectDate","undefined","APPROVAL_FORM_CANCEL","handleCancelClick","addResinInfo","tasksAddTaskFormCancelLabel","APPROVAL_FORM_POST","TaskFormUnwrapped"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Component for Approval comment form\n */\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport getProp from 'lodash/get';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport commonMessages from '../../../../common/messages';\nimport messages from './messages';\nimport commentFormMessages from '../comment-form/messages';\nimport Form from '../../../../components/form-elements/form/Form';\nimport ContactDatalistItem from '../../../../components/contact-datalist-item/ContactDatalistItem';\nimport TextArea from '../../../../components/text-area';\nimport DatePicker from '../../../../components/date-picker/DatePicker';\nimport Checkbox from '../../../../components/checkbox';\nimport PillSelectorDropdown from '../../../../components/pill-selector-dropdown/PillSelectorDropdown';\nimport Button from '../../../../components/button/Button';\nimport { FeatureFlag } from '../../../common/feature-checking';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport {\n    TASK_COMPLETION_RULE_ANY,\n    TASK_COMPLETION_RULE_ALL,\n    TASK_EDIT_MODE_CREATE,\n    TASK_EDIT_MODE_EDIT,\n} from '../../../../constants';\nimport { ACTIVITY_TARGETS, INTERACTION_TARGET } from '../../../common/interactionTargets';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskType,\n    TaskEditMode,\n    TaskUpdatePayload,\n} from '../../../../common/types/tasks';\nimport TaskError from './TaskError';\nimport type { GetAvatarUrlCallback } from '../../../common/flowTypes';\nimport type { ElementsXhrError } from '../../../../common/types/api';\nimport type { SelectorItems, SelectorItem, UserMini, GroupMini } from '../../../../common/types/core';\n\nimport './TaskForm.scss';\n\ntype TaskFormProps = {|\n    error?: { status: number }, // TODO: update to ElementsXhrError once API supports it\n    isDisabled?: boolean,\n    onCancel: () => any,\n    onSubmitError: (e: ElementsXhrError) => any,\n    onSubmitSuccess: () => any,\n    taskType: TaskType,\n|};\n\ntype TaskFormFieldProps = {|\n    approvers: Array<TaskCollabAssignee>,\n    completionRule: TaskCompletionRule,\n    dueDate?: ?string,\n    id: string,\n    message: string,\n|};\n\ntype TaskFormConsumerProps = {|\n    ...TaskFormFieldProps,\n    approverSelectorContacts: SelectorItems<UserMini | GroupMini>,\n    className?: string,\n    createTask: (\n        text: string,\n        approvers: SelectorItems<>,\n        taskType: TaskType,\n        dueDate: ?string,\n        completionRule: TaskCompletionRule,\n        onSuccess: ?Function,\n        onError: ?Function,\n    ) => any,\n    editMode?: TaskEditMode,\n    editTask?: (task: TaskUpdatePayload, onSuccess: ?Function, onError: ?Function) => any,\n    getApproverWithQuery?: Function,\n    getAvatarUrl: GetAvatarUrlCallback,\n|};\n\ntype Props = TaskFormProps & TaskFormConsumerProps & InjectIntlProvidedProps;\n\ntype TaskFormFieldName = 'taskName' | 'taskAssignees' | 'taskDueDate';\n\ntype State = {|\n    approverTextInput: string, // partial text input value for approver field before autocomplete/select\n    approvers: Array<TaskCollabAssignee>,\n    completionRule: TaskCompletionRule,\n    dueDate?: ?Date,\n    formValidityState: { [key: TaskFormFieldName]: ?{ code: string, message: string } },\n    id: string,\n    isLoading: boolean,\n    isValid: ?boolean,\n    message: string,\n|};\n\nfunction convertAssigneesToSelectorItems(approvers: Array<TaskCollabAssignee>): SelectorItems<> {\n    return approvers.map(({ target }) => {\n        const newSelectorItem: SelectorItem<UserMini | GroupMini> = {\n            id: target.id,\n            name: target.name,\n            item: target,\n            value: target.id,\n            text: target.name, // for PillSelectorDropdown SelectorOptions type\n        };\n\n        return newSelectorItem;\n    });\n}\n\nclass TaskForm extends React.Component<Props, State> {\n    static defaultProps = {\n        approvers: [],\n        approverSelectorContacts: [],\n        editMode: TASK_EDIT_MODE_CREATE,\n        id: '',\n        message: '',\n    };\n\n    state = this.getInitialFormState();\n\n    getInitialFormState() {\n        const { dueDate, id, message, approvers, completionRule } = this.props;\n        return {\n            id,\n            completionRule: completionRule || TASK_COMPLETION_RULE_ALL,\n            approvers,\n            approverTextInput: '',\n            dueDate: dueDate ? new Date(dueDate) : null,\n            formValidityState: {},\n            message,\n            isLoading: false,\n            isValid: null,\n        };\n    }\n\n    validateForm = (only?: TaskFormFieldName) => {\n        this.setState(state => {\n            const { intl } = this.props;\n            const { approvers, message, approverTextInput } = state;\n            const assigneeFieldMissingError = {\n                code: 'required',\n                message: intl.formatMessage(commonMessages.requiredFieldError),\n            };\n            const assigneeFieldInvalidError = {\n                code: 'invalid',\n                message: intl.formatMessage(commonMessages.invalidUserError),\n            };\n            const messageFieldError = {\n                code: 'required',\n                message: intl.formatMessage(commonMessages.requiredFieldError),\n            };\n            const formValidityState = {\n                taskAssignees:\n                    (approverTextInput.length ? assigneeFieldInvalidError : null) ||\n                    (approvers.length ? null : assigneeFieldMissingError),\n                taskName: message ? null : messageFieldError,\n                taskDueDate: null,\n            };\n            const isValid = Object.values(formValidityState).every(val => val == null);\n            return {\n                isValid,\n                formValidityState: only\n                    ? { ...state.formValidityState, [only]: formValidityState[only] }\n                    : formValidityState,\n            };\n        });\n    };\n\n    getErrorByFieldname = (fieldName: TaskFormFieldName) => {\n        const { formValidityState } = this.state;\n        return formValidityState[fieldName] ? formValidityState[fieldName].message : null;\n    };\n\n    clearForm = () => this.setState(this.getInitialFormState());\n\n    handleInvalidSubmit = () => {\n        this.validateForm();\n    };\n\n    handleSubmitSuccess = () => {\n        const { onSubmitSuccess } = this.props;\n        if (onSubmitSuccess) {\n            onSubmitSuccess();\n        }\n\n        this.clearForm();\n        this.setState({ isLoading: false });\n    };\n\n    handleSubmitError = (e: ElementsXhrError) => {\n        const { onSubmitError } = this.props;\n        onSubmitError(e);\n        this.setState({ isLoading: false });\n    };\n\n    addResinInfo = (): Object => {\n        const { id, taskType, editMode } = this.props;\n        const { dueDate } = this.state;\n        const addedAssignees = this.getAddedAssignees();\n        const removedAssignees = this.getRemovedAssignees();\n\n        return {\n            'data-resin-taskid': id,\n            'data-resin-tasktype': taskType,\n            'data-resin-isediting': editMode === TASK_EDIT_MODE_EDIT,\n            'data-resin-numassigneesadded': addedAssignees.filter(assignee => assignee.target.type === 'user').length,\n            'data-resin-numgroupssadded': addedAssignees.filter(assignee => assignee.target.type === 'group').length,\n            'data-resin-numassigneesremoved': removedAssignees.length,\n            'data-resin-assigneesadded': addedAssignees.map(assignee => assignee.target.id),\n            'data-resin-assigneesremoved': removedAssignees.map(assignee => assignee.target.id),\n            'data-resin-duedate': dueDate && dueDate.getTime(),\n        };\n    };\n\n    getAddedAssignees = (): Array<TaskCollabAssignee> => {\n        // Added assignees are the ones in state that weren't in the prop\n        const { approvers } = this.props;\n        const { approvers: currentApprovers } = this.state;\n        const approverIds = approvers.map(approver => approver.id);\n        return currentApprovers.filter(currentApprover => approverIds.indexOf(currentApprover.id) === -1);\n    };\n\n    getRemovedAssignees = (): Array<TaskCollabAssignee> => {\n        // Assignees to remove are the ones in the prop that cannot be found in state\n        const { approvers } = this.props;\n        const { approvers: currentApprovers } = this.state;\n        const currentApproverIds = currentApprovers.map(currentApprover => currentApprover.id);\n        return approvers.filter(approver => currentApproverIds.indexOf(approver.id) === -1);\n    };\n\n    handleValidSubmit = (): void => {\n        const { id, createTask, editTask, editMode, taskType } = this.props;\n        const { message, approvers: currentApprovers, dueDate, completionRule, isValid } = this.state;\n        const dueDateString = dueDate && dueDate.toISOString();\n\n        if (!isValid) return;\n\n        this.setState({ isLoading: true });\n\n        if (editMode === TASK_EDIT_MODE_EDIT && editTask) {\n            editTask(\n                {\n                    id,\n                    completion_rule: completionRule,\n                    description: message,\n                    due_at: dueDateString,\n                    addedAssignees: convertAssigneesToSelectorItems(this.getAddedAssignees()),\n                    removedAssignees: this.getRemovedAssignees(),\n                },\n                this.handleSubmitSuccess,\n                this.handleSubmitError,\n            );\n        } else {\n            createTask(\n                message,\n                convertAssigneesToSelectorItems(currentApprovers),\n                taskType,\n                dueDateString,\n                completionRule,\n                this.handleSubmitSuccess,\n                this.handleSubmitError,\n            );\n        }\n    };\n\n    handleDueDateChange = (date: ?string): void => {\n        let dateValue = null;\n        if (date) {\n            dateValue = new Date(date);\n            // The date given to us is midnight of the date selected.\n            // Modify date to be the end of day (minus 1 millisecond) for the given due date\n            dateValue.setHours(23, 59, 59, 999);\n        }\n\n        this.setState({ dueDate: dateValue });\n        this.validateForm('taskDueDate');\n    };\n\n    handleCompletionRuleChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.setState({ completionRule: event.target.checked ? TASK_COMPLETION_RULE_ANY : TASK_COMPLETION_RULE_ALL });\n    };\n\n    handleApproverSelectorInput = (value: any): void => {\n        const { getApproverWithQuery = noop } = this.props;\n        this.setState({ approverTextInput: value });\n        getApproverWithQuery(value);\n    };\n\n    handleApproverSelectorSelect = (pills: Array<any>): void => {\n        this.setState({\n            approvers: this.state.approvers.concat(\n                pills.map(pill => {\n                    return {\n                        id: '',\n                        target: pill.item,\n                        role: 'ASSIGNEE',\n                        type: 'task_collaborator',\n                        status: 'NOT_STARTED',\n                        permissions: { can_delete: false, can_update: false },\n                    };\n                }),\n            ),\n            approverTextInput: '',\n        });\n\n        this.validateForm('taskAssignees');\n    };\n\n    handleApproverSelectorRemove = (option: any, index: number): void => {\n        const approvers = [...this.state.approvers];\n        approvers.splice(index, 1);\n        this.setState({ approvers });\n        this.validateForm('taskAssignees');\n    };\n\n    handleChangeMessage = (e: SyntheticInputEvent<HTMLTextAreaElement>) => {\n        e.persist();\n        this.setState({ message: e.currentTarget.value });\n        this.validateForm('taskName');\n    };\n\n    handleCancelClick = () => {\n        this.props.onCancel();\n    };\n\n    render() {\n        const { approverSelectorContacts, className, error, isDisabled, intl, editMode, taskType } = this.props;\n        const { dueDate, approvers, message, formValidityState, isLoading, completionRule } = this.state;\n        const inputContainerClassNames = classNames('bcs-task-input-container', 'bcs-task-input-is-open', className);\n        const isCreateEditMode = editMode === TASK_EDIT_MODE_CREATE;\n        const selectedApprovers = convertAssigneesToSelectorItems(approvers);\n\n        // filter out selected approvers\n        // map to datalist item format\n        const approverOptions = approverSelectorContacts.filter(\n            ({ id }) => !selectedApprovers.find(({ value }) => value === id),\n        );\n\n        const pillSelectorOverlayClasses = classNames({\n            scrollable: approverOptions.length > 4,\n        });\n\n        const submitButtonMessage = isCreateEditMode\n            ? messages.tasksAddTaskFormSubmitLabel\n            : messages.tasksEditTaskFormSubmitLabel;\n        const shouldShowCompletionRule = approvers.length > 0;\n\n        // Enable checkbox when there is a group or multiple users being assigned\n        // TODO: consider setting contants for assignee types to src/constants.js\n        // - move from src/features/collaborator-avatars/constants.js\n        const isCompletionRuleCheckboxDisabled =\n            approvers.filter(approver => approver.target.type === 'group').length <= 0 &&\n            approvers.filter(approver => approver.target.type === 'user').length <= 1;\n\n        const isCompletionRuleCheckboxChecked = completionRule === TASK_COMPLETION_RULE_ANY;\n        const isForbiddenErrorOnEdit = isLoading || (getProp(error, 'status') === 403 && !isCreateEditMode);\n\n        return (\n            <div className={inputContainerClassNames} data-resin-component=\"taskform\">\n                <div className=\"bcs-task-input-form-container\">\n                    <TaskError editMode={editMode} error={error} taskType={taskType} />\n                    <Form\n                        formValidityState={formValidityState}\n                        onInvalidSubmit={this.handleInvalidSubmit}\n                        onValidSubmit={this.handleValidSubmit}\n                    >\n                        <PillSelectorDropdown\n                            className={pillSelectorOverlayClasses}\n                            error={this.getErrorByFieldname('taskAssignees')}\n                            disabled={isForbiddenErrorOnEdit}\n                            inputProps={{ 'data-testid': 'task-form-assignee-input' }}\n                            isRequired\n                            label={<FormattedMessage {...messages.tasksAddTaskFormSelectAssigneesLabel} />}\n                            name=\"taskAssignees\"\n                            onBlur={() => this.validateForm('taskAssignees')}\n                            onInput={this.handleApproverSelectorInput}\n                            onRemove={this.handleApproverSelectorRemove}\n                            onSelect={this.handleApproverSelectorSelect}\n                            placeholder={intl.formatMessage(commentFormMessages.approvalAddAssignee)}\n                            selectedOptions={selectedApprovers}\n                            selectorOptions={approverOptions}\n                            shouldSetActiveItemOnOpen\n                            shouldClearUnmatchedInput\n                            validateForError={() => this.validateForm('taskAssignees')}\n                        >\n                            {approverOptions.map(({ id, name, item = {} }) => (\n                                <ContactDatalistItem\n                                    key={id}\n                                    data-testid=\"task-assignee-option\"\n                                    name={name}\n                                    subtitle={\n                                        item.type === 'group' ? (\n                                            <FormattedMessage {...messages.taskCreateGroupLabel} />\n                                        ) : (\n                                            item.email\n                                        )\n                                    }\n                                />\n                            ))}\n                        </PillSelectorDropdown>\n\n                        {shouldShowCompletionRule && (\n                            <>\n                                <FeatureFlag feature=\"activityFeed.tasks.assignToGroup\">\n                                    <Checkbox\n                                        data-testid=\"task-form-completion-rule-checkbox-group\"\n                                        isChecked={isCompletionRuleCheckboxChecked}\n                                        isDisabled={isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit}\n                                        label={<FormattedMessage {...messages.taskAnyCheckboxLabel} />}\n                                        tooltip={intl.formatMessage(messages.taskAnyInfoGroupTooltip)}\n                                        name=\"completionRule\"\n                                        onChange={this.handleCompletionRuleChange}\n                                    />\n                                </FeatureFlag>\n                                <FeatureFlag not feature=\"activityFeed.tasks.assignToGroup\">\n                                    <Checkbox\n                                        data-testid=\"task-form-completion-rule-checkbox\"\n                                        isChecked={isCompletionRuleCheckboxChecked}\n                                        isDisabled={isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit}\n                                        label={<FormattedMessage {...messages.taskAnyCheckboxLabel} />}\n                                        tooltip={intl.formatMessage(messages.taskAnyInfoTooltip)}\n                                        name=\"completionRule\"\n                                        onChange={this.handleCompletionRuleChange}\n                                    />\n                                </FeatureFlag>\n                            </>\n                        )}\n\n                        <TextArea\n                            className=\"bcs-task-name-input\"\n                            data-testid=\"task-form-name-input\"\n                            disabled={isDisabled || isForbiddenErrorOnEdit}\n                            error={this.getErrorByFieldname('taskName')}\n                            isRequired\n                            label={<FormattedMessage {...messages.tasksAddTaskFormMessageLabel} />}\n                            name=\"taskName\"\n                            onBlur={() => this.validateForm('taskName')}\n                            onChange={this.handleChangeMessage}\n                            placeholder={intl.formatMessage(commentFormMessages.commentWrite)}\n                            value={message}\n                        />\n                        <DatePicker\n                            className=\"bcs-task-add-due-date-input\"\n                            error={this.getErrorByFieldname('taskDueDate')}\n                            inputProps={{\n                                [INTERACTION_TARGET]: ACTIVITY_TARGETS.TASK_DATE_PICKER,\n                                'data-testid': 'task-form-date-input',\n                            }}\n                            isDisabled={isForbiddenErrorOnEdit}\n                            isRequired={false}\n                            label={<FormattedMessage {...messages.tasksAddTaskFormDueDateLabel} />}\n                            minDate={new Date()}\n                            name=\"taskDueDate\"\n                            onChange={this.handleDueDateChange}\n                            placeholder={intl.formatMessage(commentFormMessages.approvalSelectDate)}\n                            value={dueDate || undefined}\n                        />\n                        <div className=\"bcs-task-input-controls\">\n                            <Button\n                                className=\"bcs-task-input-cancel-btn\"\n                                data-resin-target={ACTIVITY_TARGETS.APPROVAL_FORM_CANCEL}\n                                data-testid=\"task-form-cancel-button\"\n                                onClick={this.handleCancelClick}\n                                isDisabled={isLoading}\n                                type=\"button\"\n                                {...this.addResinInfo()}\n                            >\n                                <FormattedMessage {...messages.tasksAddTaskFormCancelLabel} />\n                            </Button>\n                            <PrimaryButton\n                                className=\"bcs-task-input-submit-btn\"\n                                data-resin-target={ACTIVITY_TARGETS.APPROVAL_FORM_POST}\n                                data-testid=\"task-form-submit-button\"\n                                isDisabled={isForbiddenErrorOnEdit}\n                                isLoading={isLoading}\n                                {...this.addResinInfo()}\n                            >\n                                <FormattedMessage {...submitButtonMessage} />\n                            </PrimaryButton>\n                        </div>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\n// For testing only\nexport { TaskForm as TaskFormUnwrapped };\nexport type { TaskFormConsumerProps as TaskFormProps };\n\nexport default injectIntl(TaskForm);\n"]},"metadata":{},"sourceType":"module"}