{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport AddTaskMenu from './AddTaskMenu';\nimport TaskModal from './TaskModal';\nimport { TASK_TYPE_APPROVAL } from '../../constants';\nvar AddTaskButton = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddTaskButton, _React$Component);\n  function AddTaskButton() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, AddTaskButton);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddTaskButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"buttonRef\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      error: null,\n      isTaskFormOpen: false,\n      taskType: TASK_TYPE_APPROVAL\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleClickMenuItem\", function (taskType) {\n      _this.props.history.replace({\n        state: {\n          open: true\n        }\n      });\n      _this.setState({\n        isTaskFormOpen: true,\n        taskType: taskType\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleModalClose\", function () {\n      var onTaskModalClose = _this.props.onTaskModalClose;\n      _this.setState({\n        isTaskFormOpen: false,\n        error: null\n      });\n      if (_this.buttonRef.current) {\n        _this.buttonRef.current.focus();\n      }\n      onTaskModalClose();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmitError\", function (e) {\n      return _this.setState({\n        error: e\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setAddTaskButtonRef\", function (element) {\n      _this.buttonRef.current = element;\n    });\n    return _this;\n  }\n  _createClass(AddTaskButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        isDisabled = _this$props.isDisabled,\n        taskFormProps = _this$props.taskFormProps;\n      var _this$state = this.state,\n        isTaskFormOpen = _this$state.isTaskFormOpen,\n        taskType = _this$state.taskType,\n        error = _this$state.error;\n      return React.createElement(React.Fragment, null, React.createElement(AddTaskMenu, {\n        isDisabled: isDisabled,\n        onMenuItemClick: this.handleClickMenuItem,\n        setAddTaskButtonRef: this.setAddTaskButtonRef\n      }), React.createElement(TaskModal, {\n        error: error,\n        onSubmitError: this.handleSubmitError,\n        onSubmitSuccess: this.handleModalClose,\n        onModalClose: this.handleModalClose,\n        isTaskFormOpen: isTaskFormOpen,\n        taskFormProps: taskFormProps,\n        taskType: taskType\n      }));\n    }\n  }]);\n  return AddTaskButton;\n}(React.Component);\n_defineProperty(AddTaskButton, \"defaultProps\", {\n  isDisabled: false\n});\nexport { AddTaskButton as AddTaskButtonComponent };\nexport default withRouter(AddTaskButton);","map":{"version":3,"sources":["../../../src/elements/content-sidebar/AddTaskButton.js"],"names":["React","withRouter","AddTaskMenu","TaskModal","TASK_TYPE_APPROVAL","AddTaskButton","Component","createRef","error","isTaskFormOpen","taskType","isDisabled","props","history","replace","state","open","setState","onTaskModalClose","buttonRef","current","focus","e","element","taskFormProps","handleClickMenuItem","setAddTaskButtonRef","handleSubmitError","handleModalClose","AddTaskButtonComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA+C,kBAA/C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;IAkBMC,a;;;;;;;;;;;gEACUL,KAAK,CAACO,SAANP,CAAAA,C;4DAEJ;MACJQ,KAAK,EAAE,IADH;MAEJC,cAAc,EAAE,KAFZ;MAGJC,QAAQ,EAAEN;IAHN,C;0EAcc,UAACM,QAAD,EAAwB;MAC1C,KAAA,CAAKE,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B;QAAEC,KAAK,EAAE;UAAEC,IAAI,EAAE;QAAR;MAAT,CAA3B,CAAA;MACA,KAAA,CAAKC,QAAL,CAAc;QAAER,cAAc,EAAE,IAAlB;QAAwBC,QAAQ,EAARA;MAAxB,CAAd,CAAA;IACH,C;uEAEkB,YAAM;MAAA,IACbQ,gBADa,GACQ,KAAA,CAAKN,KADb,CACbM,gBADa;MAErB,KAAA,CAAKD,QAAL,CAAc;QAAER,cAAc,EAAE,KAAlB;QAAyBD,KAAK,EAAE;MAAhC,CAAd,CAAA;MACA,IAAI,KAAA,CAAKW,SAAL,CAAeC,OAAnB,EAA4B;QACxB,KAAA,CAAKD,SAAL,CAAeC,OAAf,CAAuBC,KAAvB,CAAA,CAAA;MACH;MACDH,gBAAgB,CAAA,CAAA;IACnB,C;wEAEmB,UAACI,CAAD,EAAA;MAAA,OAAyB,KAAA,CAAKL,QAAL,CAAc;QAAET,KAAK,EAAEc;MAAT,CAAd,CAAzB;IAAA,C;0EAEE,UAACC,OAAD,EAAgC;MAClD,KAAA,CAAKJ,SAAL,CAAeC,OAAf,GAAyBG,OAAzB;IACH,C;;;;;6BAEQ;MAAA,IAAA,WAAA,GACiC,IAAA,CAAKX,KADtC;QACGD,UADH,GAAA,WAAA,CACGA,UADH;QACea,aADf,GAAA,WAAA,CACeA,aADf;MAAA,IAAA,WAAA,GAEuC,IAAA,CAAKT,KAF5C;QAEGN,cAFH,GAAA,WAAA,CAEGA,cAFH;QAEmBC,QAFnB,GAAA,WAAA,CAEmBA,QAFnB;QAE6BF,KAF7B,GAAA,WAAA,CAE6BA,KAF7B;MAIL,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;QACI,UAAU,EAAEG,UADhB;QAEI,eAAe,EAAE,IAAA,CAAKc,mBAF1B;QAGI,mBAAmB,EAAE,IAAA,CAAKC;MAH9B,CAAA,CADJ,EAMI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;QACI,KAAK,EAAElB,KADX;QAEI,aAAa,EAAE,IAAA,CAAKmB,iBAFxB;QAGI,eAAe,EAAE,IAAA,CAAKC,gBAH1B;QAII,YAAY,EAAE,IAAA,CAAKA,gBAJvB;QAKI,cAAc,EAAEnB,cALpB;QAMI,aAAa,EAAEe,aANnB;QAOI,QAAQ,EAAEd;MAPd,CAAA,CANJ,CADJ;IAkBH;;;EA3DuBV,KAAK,CAACM,S;gBAA5BD,a,kBASoB;EAClBM,UAAU,EAAE;AADM,C;AAqD1B,SAASN,aAAa,IAAIwB,sBAA1B;AACA,eAAe5B,UAAU,CAACI,aAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { withRouter, type RouterHistory } from 'react-router-dom';\nimport AddTaskMenu from './AddTaskMenu';\nimport TaskModal from './TaskModal';\nimport { TASK_TYPE_APPROVAL } from '../../constants';\nimport type { TaskFormProps } from './activity-feed/task-form/TaskForm';\nimport type { TaskType } from '../../common/types/tasks';\nimport type { ElementsXhrError } from '../../common/types/api';\n\ntype Props = {|\n    history: RouterHistory,\n    isDisabled: boolean,\n    onTaskModalClose: () => void,\n    taskFormProps: TaskFormProps,\n|};\n\ntype State = {\n    error: ?ElementsXhrError,\n    isTaskFormOpen: boolean,\n    taskType: TaskType,\n};\n\nclass AddTaskButton extends React.Component<Props, State> {\n    buttonRef = React.createRef<HTMLButtonElement>();\n\n    state = {\n        error: null,\n        isTaskFormOpen: false,\n        taskType: TASK_TYPE_APPROVAL,\n    };\n\n    static defaultProps = {\n        isDisabled: false,\n    };\n\n    /*\n    1. Pushing the open state into history keeps the sidebar open upon resize and refresh\n    2. Preventing the sidebar from closing keeps the task modal open upon edit and resize\n    */\n    handleClickMenuItem = (taskType: TaskType) => {\n        this.props.history.replace({ state: { open: true } });\n        this.setState({ isTaskFormOpen: true, taskType });\n    };\n\n    handleModalClose = () => {\n        const { onTaskModalClose } = this.props;\n        this.setState({ isTaskFormOpen: false, error: null });\n        if (this.buttonRef.current) {\n            this.buttonRef.current.focus();\n        }\n        onTaskModalClose();\n    };\n\n    handleSubmitError = (e: ElementsXhrError) => this.setState({ error: e });\n\n    setAddTaskButtonRef = (element: HTMLButtonElement) => {\n        this.buttonRef.current = element;\n    };\n\n    render() {\n        const { isDisabled, taskFormProps } = this.props;\n        const { isTaskFormOpen, taskType, error } = this.state;\n\n        return (\n            <>\n                <AddTaskMenu\n                    isDisabled={isDisabled}\n                    onMenuItemClick={this.handleClickMenuItem}\n                    setAddTaskButtonRef={this.setAddTaskButtonRef}\n                />\n                <TaskModal\n                    error={error}\n                    onSubmitError={this.handleSubmitError}\n                    onSubmitSuccess={this.handleModalClose}\n                    onModalClose={this.handleModalClose}\n                    isTaskFormOpen={isTaskFormOpen}\n                    taskFormProps={taskFormProps}\n                    taskType={taskType}\n                />\n            </>\n        );\n    }\n}\n\nexport { AddTaskButton as AddTaskButtonComponent };\nexport default withRouter(AddTaskButton);\n"]},"metadata":{},"sourceType":"module"}