{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Editable Skill Keywords card component\n * @author Box\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PillSelector from '../../../../components/pill-selector-dropdown/PillSelector';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport Button from '../../../../components/button/Button';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport getPills from './keywordUtils';\nimport './EditableKeywords.scss';\nvar EditableKeywords = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(EditableKeywords, _React$PureComponent);\n\n  /**\n   * [constructor]\n   *\n   * @public\n   * @return {EditableKeywords}\n   */\n  function EditableKeywords(props) {\n    var _this;\n    _classCallCheck(this, EditableKeywords);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditableKeywords).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"onRemove\", function (option, index) {\n      // eslint-disable-line\n      var _this$props = _this.props,\n        onDelete = _this$props.onDelete,\n        keywords = _this$props.keywords;\n      onDelete(keywords[index]);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (_ref) {\n      var key = _ref.key;\n      if (key === 'Enter' && !_this.state.isInCompositionMode) {\n        _this.onBlur();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function () {\n      var onAdd = _this.props.onAdd;\n      var keyword = _this.state.keyword;\n      if (keyword) {\n        onAdd({\n          type: 'text',\n          text: keyword\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCompositionStart\", function () {\n      _this.setState({\n        isInCompositionMode: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCompositionEnd\", function () {\n      _this.setState({\n        isInCompositionMode: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onInput\", function (event) {\n      var currentTarget = event.currentTarget;\n      _this.setState({\n        keyword: currentTarget.value\n      });\n    });\n    _this.state = {\n      pills: getPills(props.keywords),\n      keyword: '',\n      isInCompositionMode: false\n    };\n    return _this;\n  }\n  /**\n   * Called when keywords gets new properties.\n   * Should reset to original state.\n   *\n   * @private\n   * @param {Object} nextProps - component props\n   * @return {void}\n   */\n\n  _createClass(EditableKeywords, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref2) {\n      var prevKeywords = _ref2.keywords;\n      var keywords = this.props.keywords;\n      if (prevKeywords !== keywords) {\n        this.setState({\n          pills: getPills(keywords),\n          keyword: ''\n        });\n      }\n    }\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} option - pill\n     * @param {number} index - pill index\n     * @return {void}\n     */\n  }, {\n    key: \"render\",\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    value: function render() {\n      var _this$props2 = this.props,\n        onSave = _this$props2.onSave,\n        onCancel = _this$props2.onCancel;\n      var _this$state = this.state,\n        pills = _this$state.pills,\n        keyword = _this$state.keyword;\n      return React.createElement(\"span\", {\n        className: \"bdl-EditableKeywords\"\n      }, React.createElement(PillSelector, {\n        onBlur: this.onBlur,\n        onCompositionEnd: this.onCompositionEnd,\n        onCompositionStart: this.onCompositionStart,\n        onInput: this.onInput,\n        onKeyDown: this.onKeyDown,\n        onPaste: this.onInput,\n        onRemove: this.onRemove,\n        selectedOptions: pills,\n        value: keyword\n      }), React.createElement(\"div\", {\n        className: \"be-keywords-buttons\"\n      }, React.createElement(Button, {\n        \"data-resin-target\": SKILLS_TARGETS.KEYWORDS.EDIT_CANCEL,\n        onClick: onCancel,\n        type: \"button\"\n      }, React.createElement(FormattedMessage, messages.cancel)), React.createElement(PrimaryButton, {\n        \"data-resin-target\": SKILLS_TARGETS.KEYWORDS.EDIT_SAVE,\n        onClick: onSave,\n        type: \"button\"\n      }, React.createElement(FormattedMessage, messages.save))));\n    }\n  }]);\n  return EditableKeywords;\n}(React.PureComponent);\nexport default EditableKeywords;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/skills/keywords/EditableKeywords.js"],"names":["React","FormattedMessage","PillSelector","PrimaryButton","Button","messages","SKILLS_TARGETS","getPills","EditableKeywords","PureComponent","props","state","pills","keywords","keyword","isInCompositionMode","prevKeywords","setState","option","index","onDelete","key","onBlur","onAdd","type","text","event","currentTarget","value","onSave","onCancel","onCompositionEnd","onCompositionStart","onInput","onKeyDown","onRemove","KEYWORDS","EDIT_CANCEL","cancel","EDIT_SAVE","save"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Editable Skill Keywords card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PillSelector from '../../../../components/pill-selector-dropdown/PillSelector';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport Button from '../../../../components/button/Button';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport getPills from './keywordUtils';\nimport type { Pill, Pills } from './flowTypes';\nimport type { SkillCardEntry } from '../../../../common/types/skills';\nimport './EditableKeywords.scss';\n\ntype Props = {\n    keywords: Array<SkillCardEntry>,\n    onAdd: Function,\n    onCancel: Function,\n    onDelete: Function,\n    onSave: Function,\n};\n\ntype State = {\n    isInCompositionMode: boolean,\n    keyword: string,\n    pills: Pills,\n};\n\nclass EditableKeywords extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {EditableKeywords}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            pills: getPills(props.keywords),\n            keyword: '',\n            isInCompositionMode: false,\n        };\n    }\n\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} nextProps - component props\n     * @return {void}\n     */\n    componentDidUpdate({ keywords: prevKeywords }: Props): void {\n        const { keywords } = this.props;\n\n        if (prevKeywords !== keywords) {\n            this.setState({ pills: getPills(keywords), keyword: '' });\n        }\n    }\n\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} option - pill\n     * @param {number} index - pill index\n     * @return {void}\n     */\n    onRemove = (option: Pill, index: number): void => {\n        // eslint-disable-line\n        const { onDelete, keywords }: Props = this.props;\n        onDelete(keywords[index]);\n    };\n\n    /**\n     * When pressing enter in the pill input box\n     *\n     * @private\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyDown = ({ key }: SyntheticKeyboardEvent<HTMLInputElement>): void => {\n        if (key === 'Enter' && !this.state.isInCompositionMode) {\n            this.onBlur();\n        }\n    };\n\n    /**\n     * Called when pill selector is blurred.\n     * Adds a new pill if needed.\n     *\n     * @private\n     * @return {void}\n     */\n    onBlur = () => {\n        const { onAdd }: Props = this.props;\n        const { keyword } = this.state;\n\n        if (keyword) {\n            onAdd({\n                type: 'text',\n                text: keyword,\n            });\n        }\n    };\n\n    /**\n     * Enables composition mode.\n     *\n     * @private\n     * @return {void}\n     */\n    onCompositionStart = () => {\n        this.setState({ isInCompositionMode: true });\n    };\n\n    /**\n     * Disables composition mode.\n     *\n     * @private\n     * @return {void}\n     */\n    onCompositionEnd = () => {\n        this.setState({ isInCompositionMode: false });\n    };\n\n    /**\n     * Called when pill selector gets new input value.\n     *\n     * @private\n     * @return {void}\n     */\n    onInput = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            keyword: currentTarget.value,\n        });\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { onSave, onCancel }: Props = this.props;\n        const { pills, keyword }: State = this.state;\n        return (\n            <span className=\"bdl-EditableKeywords\">\n                <PillSelector\n                    onBlur={this.onBlur}\n                    onCompositionEnd={this.onCompositionEnd}\n                    onCompositionStart={this.onCompositionStart}\n                    onInput={this.onInput}\n                    onKeyDown={this.onKeyDown}\n                    onPaste={this.onInput}\n                    onRemove={this.onRemove}\n                    selectedOptions={pills}\n                    value={keyword}\n                />\n                <div className=\"be-keywords-buttons\">\n                    <Button data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT_CANCEL} onClick={onCancel} type=\"button\">\n                        <FormattedMessage {...messages.cancel} />\n                    </Button>\n                    <PrimaryButton data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT_SAVE} onClick={onSave} type=\"button\">\n                        <FormattedMessage {...messages.save} />\n                    </PrimaryButton>\n                </div>\n            </span>\n        );\n    }\n}\n\nexport default EditableKeywords;\n"]},"metadata":{},"sourceType":"module"}