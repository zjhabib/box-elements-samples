{"ast":null,"code":"/**\n * \n * @file Function to sort the item list\n * @author Box\n */\nimport comparator from './comparator';\nimport { getBadItemError } from './error';\nfunction isSortingNeeded(order, sortBy, sortDirection) {\n  return !Array.isArray(order) || !order.some(function (entry) {\n    return entry.by === sortBy && entry.direction === sortDirection;\n  });\n}\n/**\n * Sorts items in place\n *\n * @param {Object} item box item object\n * @param {string} sortBy sort by field\n * @param {string} sortDirection the sort direction\n * @param {Cache} cache item cache\n * @return {void}\n */\n\nexport default function (item, sortBy, sortDirection, cache) {\n  var item_collection = item.item_collection;\n  if (!item_collection) {\n    throw getBadItemError();\n  }\n  var entries = item_collection.entries,\n    order = item_collection.order;\n  if (!Array.isArray(entries)) {\n    throw getBadItemError();\n  }\n  if (isSortingNeeded(order, sortBy, sortDirection)) {\n    entries.sort(comparator(sortBy, sortDirection, cache));\n    item_collection.order = [{\n      by: sortBy,\n      direction: sortDirection\n    }];\n  }\n  return item;\n}\n/**\n * Sort valid feed items, descending by created_at time.\n *\n * @param {Array<?Comments | ?Tasks | ?FileVersions>} args - Arguments list of each item container\n * type that is allowed in the feed.\n * @return {Array<?Comments | ?Tasks | ?FileVersions>} the sorted feed items\n */\n\nexport function sortFeedItems() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var feedItems = args.reduce(function (items, itemContainer) {\n    if (itemContainer) {\n      return items.concat(itemContainer.entries);\n    }\n    return items;\n  }, []).sort(function (a, b) {\n    return Date.parse(a.created_at) - Date.parse(b.created_at);\n  });\n  return feedItems;\n}","map":{"version":3,"sources":["../../src/utils/sorter.js"],"names":["comparator","getBadItemError","isSortingNeeded","order","sortBy","sortDirection","Array","isArray","some","entry","by","direction","item","cache","item_collection","entries","sort","sortFeedItems","args","feedItems","reduce","items","itemContainer","concat","a","b","Date","parse","created_at"],"mappings":"AAAA;;;;;AAMA,OAAOA,UAAP,MAAuB,cAAvB;AACA,SAASC,eAAT,QAAgC,SAAhC;AAYA,SAASC,eAAT,CAAyBC,KAAzB,EAA0CC,MAA1C,EAA0DC,aAA1D,EAAiG;EAC7F,OAAO,CAACC,KAAK,CAACC,OAAND,CAAcH,KAAdG,CAAD,IAAyB,CAAC,KAAK,CAACE,IAAN,CAAW,UAAA,KAAK,EAAA;IAAA,OAAIC,KAAK,CAACC,EAAND,KAAaL,MAAbK,IAAuBA,KAAK,CAACE,SAANF,KAAoBJ,aAA/C;EAAA,CAAhB,CAAjC;AACH;AAED;;;;;;;;;;AASA,eAAe,UACXO,IADW,EAEXR,MAFW,EAGXC,aAHW,EAIXQ,KAJW,EAKK;EAAA,IACRC,eADQ,GAC8BF,IAD9B,CACRE,eADQ;EAEhB,IAAI,CAACA,eAAL,EAAsB;IAClB,MAAMb,eAAe,CAAA,CAArB;EACH;EAJe,IAMRc,OANQ,GAMuCD,eANvC,CAMRC,OANQ;IAMCZ,KAND,GAMuCW,eANvC,CAMCX,KAND;EAOhB,IAAI,CAACG,KAAK,CAACC,OAAND,CAAcS,OAAdT,CAAL,EAA6B;IACzB,MAAML,eAAe,CAAA,CAArB;EACH;EAED,IAAIC,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAgBC,aAAhB,CAAnB,EAAmD;IAC/CU,OAAO,CAACC,IAARD,CAAaf,UAAU,CAACI,MAAD,EAASC,aAAT,EAAwBQ,KAAxB,CAAvBE,CAAAA;IACAD,eAAe,CAACX,KAAhBW,GAAwB,CACpB;MACIJ,EAAE,EAAEN,MADR;MAEIO,SAAS,EAAEN;IAFf,CADoB,CAAxBS;EAMH;EAED,OAAOF,IAAP;AACH;AAED;;;;;;;;AAOA,OAAO,SAASK,aAAT,CAAA,EAEM;EAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EADNC,IACM,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;IADNA,IACM,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA;EAAA;EACT,IAAMC,SAAoB,GAAG,IAAI,CAC5BC,MADwB,CACjB,UAACC,KAAD,EAAQC,aAAR,EAA0B;IAC9B,IAAIA,aAAJ,EAAmB;MACf,OAAOD,KAAK,CAACE,MAANF,CAAaC,aAAa,CAACP,OAA3BM,CAAP;IACH;IAED,OAAOA,KAAP;EACH,CAPwB,EAOtB,EAPsB,CAAA,CAQxBL,IARwB,CAQnB,UAACQ,CAAD,EAAIC,CAAJ,EAAA;IAAA,OAAUC,IAAI,CAACC,KAALD,CAAWF,CAAC,CAACI,UAAbF,CAAAA,GAA2BA,IAAI,CAACC,KAALD,CAAWD,CAAC,CAACG,UAAbF,CAArC;EAAA,CARmB,CAA7B;EAUA,OAAOP,SAAP;AACH","sourcesContent":["/**\n * @flow\n * @file Function to sort the item list\n * @author Box\n */\n\nimport comparator from './comparator';\nimport { getBadItemError } from './error';\nimport type { Annotations, AppActivityItems, Comments, FeedItems, Tasks } from '../common/types/feed';\nimport type {\n    SortBy,\n    SortDirection,\n    Order,\n    FlattenedBoxItem,\n    FlattenedBoxItemCollection,\n    FileVersions,\n} from '../common/types/core';\nimport type APICache from './Cache';\n\nfunction isSortingNeeded(order?: Order[], sortBy: SortBy, sortDirection: SortDirection): boolean {\n    return !Array.isArray(order) || !order.some(entry => entry.by === sortBy && entry.direction === sortDirection);\n}\n\n/**\n * Sorts items in place\n *\n * @param {Object} item box item object\n * @param {string} sortBy sort by field\n * @param {string} sortDirection the sort direction\n * @param {Cache} cache item cache\n * @return {void}\n */\nexport default function(\n    item: FlattenedBoxItem,\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n    cache: APICache,\n): FlattenedBoxItem {\n    const { item_collection }: FlattenedBoxItem = item;\n    if (!item_collection) {\n        throw getBadItemError();\n    }\n\n    const { entries, order }: FlattenedBoxItemCollection = item_collection;\n    if (!Array.isArray(entries)) {\n        throw getBadItemError();\n    }\n\n    if (isSortingNeeded(order, sortBy, sortDirection)) {\n        entries.sort(comparator(sortBy, sortDirection, cache));\n        item_collection.order = [\n            {\n                by: sortBy,\n                direction: sortDirection,\n            },\n        ];\n    }\n\n    return item;\n}\n\n/**\n * Sort valid feed items, descending by created_at time.\n *\n * @param {Array<?Comments | ?Tasks | ?FileVersions>} args - Arguments list of each item container\n * type that is allowed in the feed.\n * @return {Array<?Comments | ?Tasks | ?FileVersions>} the sorted feed items\n */\nexport function sortFeedItems(\n    ...args: Array<?Comments | ?Tasks | ?FileVersions | ?AppActivityItems | ?Annotations>\n): FeedItems {\n    const feedItems: FeedItems = args\n        .reduce((items, itemContainer) => {\n            if (itemContainer) {\n                return items.concat(itemContainer.entries);\n            }\n\n            return items;\n        }, [])\n        .sort((a, b) => Date.parse(a.created_at) - Date.parse(b.created_at));\n\n    return feedItems;\n}\n"]},"metadata":{},"sourceType":"module"}