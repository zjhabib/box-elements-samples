{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport DatalistItem from '../../components/datalist-item';\nimport SelectorDropdown from '../../components/selector-dropdown';\nimport SearchForm from '../../components/search-form/SearchForm';\nimport PlainButton from '../../components/plain-button';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport { Flyout, Overlay } from '../../components/flyout';\nimport MenuToggle from '../../components/dropdown-menu/MenuToggle';\nimport messages from './messages';\nimport TEMPLATE_CUSTOM_PROPERTIES from './constants';\nimport './TemplateDropdown.scss';\nvar InputContainer = function InputContainer(_ref) {\n  var _ref$inputProps = _ref.inputProps,\n    inputProps = _ref$inputProps === void 0 ? {} : _ref$inputProps,\n    rest = _objectWithoutProperties(_ref, [\"inputProps\"]);\n  return React.createElement(SearchForm, _extends({}, inputProps, rest, {\n    shouldPreventClearEventPropagation: true,\n    \"data-resin-target\": \"metadata-templatesearch\"\n  }));\n};\nvar getAvailableTemplates = function getAvailableTemplates(allTemplates, usedTemplates) {\n  return allTemplates.filter(function (template) {\n    return usedTemplates.findIndex(function (usedTemplate) {\n      return usedTemplate.templateKey === template.templateKey && usedTemplate.scope === template.scope;\n    }) === -1;\n  });\n};\nvar TemplateDropdown = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TemplateDropdown, _React$PureComponent);\n  function TemplateDropdown(props) {\n    var _this;\n    _classCallCheck(this, TemplateDropdown);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TemplateDropdown).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"getDropdown\", function () {\n      var _this$props = _this.props,\n        isDropdownBusy = _this$props.isDropdownBusy,\n        onAdd = _this$props.onAdd,\n        activeTemplate = _this$props.activeTemplate,\n        defaultTemplateIcon = _this$props.defaultTemplateIcon,\n        activeTemplateIcon = _this$props.activeTemplateIcon,\n        allTemplates = _this$props.templates,\n        title = _this$props.title,\n        usedTemplates = _this$props.usedTemplates;\n      var templates = _this.state.templates;\n      var hasUnusedTemplates = getAvailableTemplates(allTemplates, usedTemplates).length > 0;\n      var hasTemplates = allTemplates.length > 0;\n      var hasResults = templates.length > 0;\n      var indicatorOrMessage = null;\n      if (isDropdownBusy) {\n        indicatorOrMessage = React.createElement(LoadingIndicator, {\n          className: \"metadata-instance-editor-template-message template-dropdown-loading-indicator\"\n        });\n      } else if (!hasTemplates || !hasUnusedTemplates || !hasResults) {\n        var message = {\n          id: ''\n        };\n        if (!hasTemplates) {\n          message = messages.metadataTemplatesServerHasNoTemplates;\n        } else if (!hasUnusedTemplates) {\n          message = messages.metadataTemplatesNoRemainingTemplates;\n        } else if (!hasResults) {\n          message = messages.metadataTemplatesNoResults;\n        }\n        indicatorOrMessage = React.createElement(\"i\", {\n          className: \"metadata-instance-editor-template-message\"\n        }, React.createElement(FormattedMessage, message));\n      }\n      var renderedTemplates = templates.map(function (template) {\n        var isTemplateSelected = activeTemplate && activeTemplate.id === template.id;\n        var buttonClassName = classNames('metadata-template-dropdown-select-template', {\n          'metadata-template-dropdown-is-selected': isTemplateSelected\n        });\n        return React.createElement(DatalistItem, {\n          key: template.id\n        }, React.createElement(PlainButton, {\n          className: buttonClassName,\n          tabIndex: \"-1\",\n          type: \"button\"\n        }, isTemplateSelected ? activeTemplateIcon : defaultTemplateIcon, _this.getTemplateName(template)));\n      });\n      return React.createElement(React.Fragment, null, React.createElement(SelectorDropdown, {\n        className: \"metadata-instance-editor-template-dropdown-menu\",\n        title: title,\n        isAlwaysOpen: true,\n        onSelect: function onSelect(index) {\n          onAdd(templates[index]);\n        },\n        selector: _this.getSelector(),\n        shouldScroll: true\n      }, indicatorOrMessage ? null : renderedTemplates), indicatorOrMessage);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getSelector\", function () {\n      var intl = _this.props.intl;\n      var filterText = _this.state.filterText;\n      return React.createElement(InputContainer, {\n        label: \"\",\n        onChange: _this.handleUserInput,\n        placeholder: intl.formatMessage(messages.metadataTemplateSearchPlaceholder),\n        type: \"text\",\n        useClearButton: true,\n        value: filterText\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleUserInput\", function (userInput) {\n      var _this$props2 = _this.props,\n        allTemplates = _this$props2.templates,\n        usedTemplates = _this$props2.usedTemplates;\n      var filterText = userInput;\n      var templates = getAvailableTemplates(allTemplates, usedTemplates);\n      _this.setState({\n        filterText: filterText,\n        templates: templates.filter(function (template) {\n          var label = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES ? messages.customTitle.defaultMessage : template.displayName;\n          return label.toLowerCase().includes(filterText.toLowerCase());\n        })\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onOpen\", function () {\n      var _this$props3 = _this.props,\n        onDropdownToggle = _this$props3.onDropdownToggle,\n        templates = _this$props3.templates,\n        usedTemplates = _this$props3.usedTemplates;\n      if (onDropdownToggle) {\n        onDropdownToggle(true);\n      }\n      _this.setState({\n        isDropdownOpen: true,\n        filterText: '',\n        templates: getAvailableTemplates(templates, usedTemplates)\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onClose\", function () {\n      var onDropdownToggle = _this.props.onDropdownToggle;\n      if (onDropdownToggle) {\n        onDropdownToggle(false);\n      }\n      _this.setState({\n        isDropdownOpen: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderEntryButton\", function () {\n      var entryButton = _this.props.entryButton;\n      var isDropdownOpen = _this.state.isDropdownOpen;\n      var buttonToggleClassName = classNames('lnk', {\n        'is-toggled': isDropdownOpen\n      });\n      if (entryButton) {\n        return entryButton;\n      }\n      return React.createElement(PlainButton, {\n        \"data-resin-target\": \"metadata-templateaddmenu\",\n        className: buttonToggleClassName,\n        type: \"button\"\n      }, React.createElement(MenuToggle, null, React.createElement(FormattedMessage, messages.metadataTemplateAdd)));\n    });\n    _this.state = {\n      isDropdownOpen: false,\n      filterText: '',\n      templates: getAvailableTemplates(props.templates, props.usedTemplates)\n    };\n    return _this;\n  }\n  /**\n   * Updates the state\n   *\n   * @param {Object} prevProps - next props\n   * @return {void}\n   */\n\n  _createClass(TemplateDropdown, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref2) {\n      var prevTemplates = _ref2.templates,\n        prevUsedTemplates = _ref2.usedTemplates;\n      var _this$props4 = this.props,\n        templates = _this$props4.templates,\n        usedTemplates = _this$props4.usedTemplates;\n      if (!isEqual(prevTemplates, templates) || !isEqual(prevUsedTemplates, usedTemplates)) {\n        this.setState({\n          templates: getAvailableTemplates(templates, usedTemplates)\n        });\n      }\n    }\n  }, {\n    key: \"getTemplateName\",\n    /**\n     * Returns template display name.\n     * For custom metadata we have it on the client.\n     *\n     * @return {React.Node} - string or formatted name\n     */\n    value: function getTemplateName(template) {\n      return template.templateKey === TEMPLATE_CUSTOM_PROPERTIES ? React.createElement(FormattedMessage, _extends({\n        className: \"template-display-name\"\n      }, messages.customTitle)) : React.createElement(\"div\", {\n        className: \"template-display-name\"\n      }, template.displayName);\n    }\n    /**\n     * Updates the filter text and filters the results\n     *\n     * @param {UserInput} userInput - input value returned from onChangeHandler from SearchForm.js\n     * @return {void}\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      var flyoutClassName = classNames('metadata-instance-editor-template-dropdown-flyout', className);\n      return React.createElement(Flyout, {\n        className: flyoutClassName,\n        closeOnClick: true,\n        closeOnClickOutside: true,\n        onClose: this.onClose,\n        onOpen: this.onOpen,\n        position: \"bottom-left\",\n        shouldDefaultFocus: true\n      }, this.renderEntryButton(), React.createElement(Overlay, null, this.getDropdown()));\n    }\n  }]);\n  return TemplateDropdown;\n}(React.PureComponent);\nexport { TemplateDropdown as TemplateDropdownBase };\nexport default injectIntl(TemplateDropdown);","map":{"version":3,"sources":["../../../src/features/metadata-instance-editor/TemplateDropdown.js"],"names":["React","classNames","isEqual","FormattedMessage","injectIntl","DatalistItem","SelectorDropdown","SearchForm","PlainButton","LoadingIndicator","Flyout","Overlay","MenuToggle","messages","TEMPLATE_CUSTOM_PROPERTIES","InputContainer","inputProps","rest","getAvailableTemplates","allTemplates","usedTemplates","filter","template","findIndex","usedTemplate","templateKey","scope","TemplateDropdown","PureComponent","props","state","isDropdownOpen","filterText","templates","prevTemplates","prevUsedTemplates","setState","isDropdownBusy","onAdd","activeTemplate","defaultTemplateIcon","activeTemplateIcon","title","hasUnusedTemplates","length","hasTemplates","hasResults","indicatorOrMessage","message","id","metadataTemplatesServerHasNoTemplates","metadataTemplatesNoRemainingTemplates","metadataTemplatesNoResults","renderedTemplates","map","isTemplateSelected","buttonClassName","getTemplateName","index","getSelector","intl","handleUserInput","formatMessage","metadataTemplateSearchPlaceholder","customTitle","displayName","userInput","label","defaultMessage","toLowerCase","includes","onDropdownToggle","entryButton","buttonToggleClassName","metadataTemplateAdd","className","flyoutClassName","onClose","onOpen","renderEntryButton","getDropdown","TemplateDropdownBase"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport DatalistItem from '../../components/datalist-item';\nimport SelectorDropdown from '../../components/selector-dropdown';\nimport SearchForm from '../../components/search-form/SearchForm';\nimport PlainButton from '../../components/plain-button';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport { Flyout, Overlay } from '../../components/flyout';\n\nimport MenuToggle from '../../components/dropdown-menu/MenuToggle';\nimport messages from './messages';\nimport TEMPLATE_CUSTOM_PROPERTIES from './constants';\nimport type { MetadataTemplate } from '../../common/types/metadata';\nimport './TemplateDropdown.scss';\n\ntype Props = {\n    activeTemplate?: ?MetadataTemplate,\n    activeTemplateIcon?: React.Node,\n    className?: string,\n    defaultTemplateIcon?: React.Node,\n    entryButton?: React.Node,\n    intl: any,\n    isDropdownBusy?: boolean,\n    onAdd: (template: MetadataTemplate) => void,\n    onDropdownToggle?: (isDropdownOpen: boolean) => void,\n    templates: Array<MetadataTemplate>,\n    title?: React.Node,\n    usedTemplates: Array<MetadataTemplate>,\n};\n\ntype State = {\n    filterText: string,\n    isDropdownOpen: boolean,\n    templates: Array<MetadataTemplate>,\n};\n\nconst InputContainer = ({ inputProps = {}, ...rest }: { inputProps?: Object }) => (\n    <SearchForm\n        {...inputProps}\n        {...rest}\n        shouldPreventClearEventPropagation\n        data-resin-target=\"metadata-templatesearch\"\n    />\n);\n\nconst getAvailableTemplates = (allTemplates: Array<MetadataTemplate>, usedTemplates: Array<MetadataTemplate>) =>\n    allTemplates.filter(\n        (template: MetadataTemplate) =>\n            usedTemplates.findIndex(\n                (usedTemplate: MetadataTemplate) =>\n                    usedTemplate.templateKey === template.templateKey && usedTemplate.scope === template.scope,\n            ) === -1,\n    );\n\nclass TemplateDropdown extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isDropdownOpen: false,\n            filterText: '',\n            templates: getAvailableTemplates(props.templates, props.usedTemplates),\n        };\n    }\n\n    /**\n     * Updates the state\n     *\n     * @param {Object} prevProps - next props\n     * @return {void}\n     */\n    componentDidUpdate({ templates: prevTemplates, usedTemplates: prevUsedTemplates }: Props) {\n        const { templates, usedTemplates } = this.props;\n\n        if (!isEqual(prevTemplates, templates) || !isEqual(prevUsedTemplates, usedTemplates)) {\n            this.setState({\n                templates: getAvailableTemplates(templates, usedTemplates),\n            });\n        }\n    }\n\n    getDropdown = () => {\n        const {\n            isDropdownBusy,\n            onAdd,\n            activeTemplate,\n            defaultTemplateIcon,\n            activeTemplateIcon,\n            templates: allTemplates,\n            title,\n            usedTemplates,\n        }: Props = this.props;\n        const { templates }: State = this.state;\n        const hasUnusedTemplates = getAvailableTemplates(allTemplates, usedTemplates).length > 0;\n        const hasTemplates = allTemplates.length > 0;\n        const hasResults = templates.length > 0;\n\n        let indicatorOrMessage = null;\n\n        if (isDropdownBusy) {\n            indicatorOrMessage = (\n                <LoadingIndicator className=\"metadata-instance-editor-template-message template-dropdown-loading-indicator\" />\n            );\n        } else if (!hasTemplates || !hasUnusedTemplates || !hasResults) {\n            let message = { id: '' };\n\n            if (!hasTemplates) {\n                message = messages.metadataTemplatesServerHasNoTemplates;\n            } else if (!hasUnusedTemplates) {\n                message = messages.metadataTemplatesNoRemainingTemplates;\n            } else if (!hasResults) {\n                message = messages.metadataTemplatesNoResults;\n            }\n\n            indicatorOrMessage = (\n                <i className=\"metadata-instance-editor-template-message\">\n                    <FormattedMessage {...message} />\n                </i>\n            );\n        }\n\n        const renderedTemplates = templates.map(template => {\n            const isTemplateSelected = activeTemplate && activeTemplate.id === template.id;\n\n            const buttonClassName = classNames('metadata-template-dropdown-select-template', {\n                'metadata-template-dropdown-is-selected': isTemplateSelected,\n            });\n\n            return (\n                <DatalistItem key={template.id}>\n                    <PlainButton className={buttonClassName} tabIndex=\"-1\" type=\"button\">\n                        {isTemplateSelected ? activeTemplateIcon : defaultTemplateIcon}\n                        {this.getTemplateName(template)}\n                    </PlainButton>\n                </DatalistItem>\n            );\n        });\n\n        return (\n            <>\n                <SelectorDropdown\n                    className=\"metadata-instance-editor-template-dropdown-menu\"\n                    title={title}\n                    isAlwaysOpen\n                    onSelect={(index: number) => {\n                        onAdd(templates[index]);\n                    }}\n                    selector={this.getSelector()}\n                    shouldScroll\n                >\n                    {indicatorOrMessage ? null : renderedTemplates}\n                </SelectorDropdown>\n                {indicatorOrMessage}\n            </>\n        );\n    };\n\n    /**\n     * Returns the input field for the drop down\n     *\n     * @return {React.Node} - input selector\n     */\n    getSelector = () => {\n        const { intl }: Props = this.props;\n        const { filterText }: State = this.state;\n        return (\n            <InputContainer\n                label=\"\"\n                onChange={this.handleUserInput}\n                placeholder={intl.formatMessage(messages.metadataTemplateSearchPlaceholder)}\n                type=\"text\"\n                useClearButton\n                value={filterText}\n            />\n        );\n    };\n\n    /**\n     * Returns template display name.\n     * For custom metadata we have it on the client.\n     *\n     * @return {React.Node} - string or formatted name\n     */\n    getTemplateName(template: MetadataTemplate): React.Node {\n        return template.templateKey === TEMPLATE_CUSTOM_PROPERTIES ? (\n            <FormattedMessage className=\"template-display-name\" {...messages.customTitle} />\n        ) : (\n            <div className=\"template-display-name\">{template.displayName}</div>\n        );\n    }\n\n    /**\n     * Updates the filter text and filters the results\n     *\n     * @param {UserInput} userInput - input value returned from onChangeHandler from SearchForm.js\n     * @return {void}\n     */\n    handleUserInput = (userInput: string) => {\n        const { templates: allTemplates, usedTemplates } = this.props;\n        const filterText = userInput;\n        const templates = getAvailableTemplates(allTemplates, usedTemplates);\n\n        this.setState({\n            filterText,\n            templates: templates.filter(template => {\n                const label: string = ((template.templateKey === TEMPLATE_CUSTOM_PROPERTIES\n                    ? messages.customTitle.defaultMessage\n                    : template.displayName): any);\n                return label.toLowerCase().includes(filterText.toLowerCase());\n            }),\n        });\n    };\n\n    onOpen = () => {\n        const { onDropdownToggle, templates, usedTemplates } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(true);\n        }\n\n        this.setState({\n            isDropdownOpen: true,\n            filterText: '',\n            templates: getAvailableTemplates(templates, usedTemplates),\n        });\n    };\n\n    onClose = () => {\n        const { onDropdownToggle } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(false);\n        }\n\n        this.setState({ isDropdownOpen: false });\n    };\n\n    renderEntryButton = () => {\n        const { entryButton } = this.props;\n        const { isDropdownOpen } = this.state;\n        const buttonToggleClassName = classNames('lnk', {\n            'is-toggled': isDropdownOpen,\n        });\n        if (entryButton) {\n            return entryButton;\n        }\n        return (\n            <PlainButton data-resin-target=\"metadata-templateaddmenu\" className={buttonToggleClassName} type=\"button\">\n                <MenuToggle>\n                    <FormattedMessage {...messages.metadataTemplateAdd} />\n                </MenuToggle>\n            </PlainButton>\n        );\n    };\n\n    render() {\n        const { className } = this.props;\n        const flyoutClassName = classNames('metadata-instance-editor-template-dropdown-flyout', className);\n\n        return (\n            <Flyout\n                className={flyoutClassName}\n                closeOnClick\n                closeOnClickOutside\n                onClose={this.onClose}\n                onOpen={this.onOpen}\n                position=\"bottom-left\"\n                shouldDefaultFocus\n            >\n                {this.renderEntryButton()}\n                <Overlay>{this.getDropdown()}</Overlay>\n            </Flyout>\n        );\n    }\n}\n\nexport { TemplateDropdown as TemplateDropdownBase };\nexport default injectIntl(TemplateDropdown);\n"]},"metadata":{},"sourceType":"module"}