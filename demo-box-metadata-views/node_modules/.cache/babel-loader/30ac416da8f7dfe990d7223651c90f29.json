{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { CellMeasurer, CellMeasurerCache } from 'react-virtualized/dist/es/CellMeasurer';\nimport Table, { Column } from 'react-virtualized/dist/es/Table';\nimport getProp from 'lodash/get';\nimport GridViewSlot from './GridViewSlot';\nimport 'react-virtualized/styles.css';\nimport './GridView.scss';\nvar GridView = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GridView, _React$Component);\n  function GridView() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, GridView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GridView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"cache\", new CellMeasurerCache({\n      defaultHeight: 300,\n      defaultWidth: 400,\n      fixedWidth: true\n    }));\n    _defineProperty(_assertThisInitialized(_this), \"cellRenderer\", function (_ref) {\n      var dataKey = _ref.dataKey,\n        parent = _ref.parent,\n        rowIndex = _ref.rowIndex;\n      var _this$props = _this.props,\n        columnCount = _this$props.columnCount,\n        currentCollection = _this$props.currentCollection,\n        slotRenderer = _this$props.slotRenderer;\n      var count = getProp(currentCollection, 'items.length', 0);\n      var contents = [];\n      var startingIndex = rowIndex * columnCount;\n      var maxSlotIndex = Math.min(startingIndex + columnCount, count);\n      for (var _slotIndex = startingIndex; _slotIndex < maxSlotIndex; _slotIndex += 1) {\n        var _getProp = getProp(currentCollection, \"items[\".concat(_slotIndex, \"]\")),\n          id = _getProp.id,\n          selected = _getProp.selected; // using item's id as key is important for renrendering.  React Virtualized Table rerenders\n        // on every 1px scroll, so using improper key would lead to image flickering in each\n        // card of the grid view when scrolling.\n\n        contents.push(React.createElement(GridViewSlot, {\n          key: id,\n          selected: selected,\n          slotIndex: _slotIndex,\n          slotRenderer: slotRenderer,\n          slotWidth: \"\".concat((100 / columnCount).toFixed(4), \"%\")\n        }));\n      }\n      return React.createElement(CellMeasurer, {\n        key: dataKey,\n        cache: _this.cache,\n        columnIndex: 0,\n        parent: parent,\n        rowIndex: rowIndex\n      }, React.createElement(\"div\", {\n        className: \"bdl-GridView-row\"\n      }, contents));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"rowGetter\", function (_ref2) {\n      var index = _ref2.index;\n      return index;\n    });\n    return _this;\n  }\n  _createClass(GridView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref3) {\n      var prevColumnCount = _ref3.columnCount,\n        prevWidth = _ref3.width;\n      var _this$props2 = this.props,\n        columnCount = _this$props2.columnCount,\n        width = _this$props2.width; // The React Virtualized Table must be notified whenever the heights of rows\n      // could potentially change. If omitted, rows are sized\n      // incorrectly resulting in gaps or content overlap.\n\n      if (columnCount !== prevColumnCount || width !== prevWidth) {\n        this.cache.clearAll();\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n        columnCount = _this$props3.columnCount,\n        currentCollection = _this$props3.currentCollection,\n        height = _this$props3.height,\n        width = _this$props3.width;\n      var count = getProp(currentCollection, 'items.length', 0);\n      var rowCount = Math.ceil(count / columnCount);\n      return React.createElement(Table, {\n        className: \"bdl-GridView\",\n        disableHeader: true,\n        height: height,\n        rowCount: rowCount,\n        rowGetter: this.rowGetter,\n        rowHeight: this.cache.rowHeight,\n        width: width,\n        gridClassName: \"bdl-GridView-body\",\n        rowClassName: \"bdl-GridView-tableRow\",\n        scrollToIndex: 0,\n        sortDirection: \"ASC\"\n      }, React.createElement(Column, {\n        cellRenderer: this.cellRenderer,\n        dataKey: \"\",\n        flexGrow: 1,\n        width: 400\n      }));\n    }\n  }]);\n  return GridView;\n}(React.Component);\nexport default GridView;","map":{"version":3,"sources":["../../../src/components/grid-view/GridView.js"],"names":["React","CellMeasurer","CellMeasurerCache","Table","Column","getProp","GridViewSlot","GridView","Component","defaultHeight","defaultWidth","fixedWidth","columnCount","prevColumnCount","width","prevWidth","props","cache","clearAll","forceUpdate","dataKey","parent","rowIndex","currentCollection","slotRenderer","count","contents","startingIndex","maxSlotIndex","Math","min","slotIndex","id","selected","push","toFixed","index","height","rowCount","ceil","rowGetter","rowHeight","cellRenderer"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { CellMeasurer, CellMeasurerCache } from 'react-virtualized/dist/es/CellMeasurer';\nimport Table, { Column } from 'react-virtualized/dist/es/Table';\nimport getProp from 'lodash/get';\nimport GridViewSlot from './GridViewSlot';\nimport type { Collection } from '../../common/types/core';\n\nimport 'react-virtualized/styles.css';\nimport './GridView.scss';\n\ntype TableCellRendererParams = {\n    cellData: ?any,\n    columnData: ?any,\n    dataKey: string,\n    parent: Object,\n    rowData: any,\n    rowIndex: number,\n};\n\ntype Props = {\n    columnCount: number,\n    currentCollection: Collection,\n    height: number,\n    slotRenderer: (slotIndex: number) => ?React.Element<any>,\n    width: number,\n};\n\ntype RowGetterParams = {\n    index: number,\n};\n\nclass GridView extends React.Component<Props> {\n    cache = new CellMeasurerCache({\n        defaultHeight: 300,\n        defaultWidth: 400,\n        fixedWidth: true,\n    });\n\n    componentDidUpdate({ columnCount: prevColumnCount, width: prevWidth }: Props) {\n        const { columnCount, width } = this.props;\n\n        // The React Virtualized Table must be notified whenever the heights of rows\n        // could potentially change. If omitted, rows are sized\n        // incorrectly resulting in gaps or content overlap.\n        if (columnCount !== prevColumnCount || width !== prevWidth) {\n            this.cache.clearAll();\n            this.forceUpdate();\n        }\n    }\n\n    cellRenderer = ({ dataKey, parent, rowIndex }: TableCellRendererParams) => {\n        const { columnCount, currentCollection, slotRenderer } = this.props;\n        const count = getProp(currentCollection, 'items.length', 0);\n        const contents = [];\n\n        const startingIndex = rowIndex * columnCount;\n        const maxSlotIndex = Math.min(startingIndex + columnCount, count);\n\n        for (let slotIndex = startingIndex; slotIndex < maxSlotIndex; slotIndex += 1) {\n            const { id, selected } = getProp(currentCollection, `items[${slotIndex}]`);\n\n            // using item's id as key is important for renrendering.  React Virtualized Table rerenders\n            // on every 1px scroll, so using improper key would lead to image flickering in each\n            // card of the grid view when scrolling.\n            contents.push(\n                <GridViewSlot\n                    key={id}\n                    selected={selected}\n                    slotIndex={slotIndex}\n                    slotRenderer={slotRenderer}\n                    slotWidth={`${(100 / columnCount).toFixed(4)}%`}\n                />,\n            );\n        }\n\n        return (\n            <CellMeasurer key={dataKey} cache={this.cache} columnIndex={0} parent={parent} rowIndex={rowIndex}>\n                <div className=\"bdl-GridView-row\">{contents}</div>\n            </CellMeasurer>\n        );\n    };\n\n    rowGetter = ({ index }: RowGetterParams) => {\n        return index;\n    };\n\n    render() {\n        const { columnCount, currentCollection, height, width } = this.props;\n        const count = getProp(currentCollection, 'items.length', 0);\n        const rowCount = Math.ceil(count / columnCount);\n\n        return (\n            <Table\n                className=\"bdl-GridView\"\n                disableHeader\n                height={height}\n                rowCount={rowCount}\n                rowGetter={this.rowGetter}\n                rowHeight={this.cache.rowHeight}\n                width={width}\n                gridClassName=\"bdl-GridView-body\"\n                rowClassName=\"bdl-GridView-tableRow\"\n                scrollToIndex={0}\n                sortDirection=\"ASC\"\n            >\n                <Column cellRenderer={this.cellRenderer} dataKey=\"\" flexGrow={1} width={400} />\n            </Table>\n        );\n    }\n}\n\nexport default GridView;\n"]},"metadata":{},"sourceType":"module"}