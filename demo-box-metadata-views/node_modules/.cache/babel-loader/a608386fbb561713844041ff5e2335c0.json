{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport noop from 'lodash/noop';\nimport Button from '../../../components/button';\nimport IconGridViewInverted from '../../../icons/general/IconGridViewInverted';\nimport IconListView from '../../../icons/general/IconListView';\nimport messages from '../messages';\nimport Tooltip from '../Tooltip';\nimport { VIEW_MODE_GRID, VIEW_MODE_LIST } from '../../../constants';\nimport { bdlGray50 } from '../../../styles/variables';\nimport './ViewModeChangeButton.scss';\nvar ViewModeChangeButton = function ViewModeChangeButton(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    _ref$onViewModeChange = _ref.onViewModeChange,\n    onViewModeChange = _ref$onViewModeChange === void 0 ? noop : _ref$onViewModeChange,\n    intl = _ref.intl,\n    viewMode = _ref.viewMode,\n    rest = _objectWithoutProperties(_ref, [\"className\", \"onViewModeChange\", \"intl\", \"viewMode\"]);\n  var isGridView = viewMode === VIEW_MODE_GRID;\n  var viewMessage = isGridView ? intl.formatMessage(messages.listView) : intl.formatMessage(messages.gridView);\n  var onClick = function onClick() {\n    onViewModeChange(isGridView ? VIEW_MODE_LIST : VIEW_MODE_GRID);\n  };\n  return React.createElement(Tooltip, {\n    text: viewMessage\n  }, React.createElement(Button, _extends({\n    \"aria-label\": viewMessage,\n    \"data-testid\": \"view-mode-change-button\",\n    className: classNames('bdl-ViewModeChangeButton', className),\n    type: \"button\",\n    onClick: onClick\n  }, rest), isGridView ? React.createElement(IconListView, {\n    color: bdlGray50,\n    width: 17,\n    height: 17\n  }) : React.createElement(IconGridViewInverted, {\n    color: bdlGray50,\n    width: 17,\n    height: 17\n  })));\n};\nexport default injectIntl(ViewModeChangeButton);","map":{"version":3,"sources":["../../../../src/elements/common/sub-header/ViewModeChangeButton.js"],"names":["React","injectIntl","classNames","noop","Button","IconGridViewInverted","IconListView","messages","Tooltip","VIEW_MODE_GRID","VIEW_MODE_LIST","bdlGray50","ViewModeChangeButton","className","onViewModeChange","intl","viewMode","rest","isGridView","viewMessage","formatMessage","listView","gridView","onClick"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,oBAAP,MAAiC,6CAAjC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,oBAA/C;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,OAAO,6BAAP;AAQA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,IAAA,EAAiF;EAAA,IAAA,cAAA,GAAA,IAAA,CAA9EC,SAA8E;IAA9EA,SAA8E,GAAA,cAAA,KAAA,KAAA,CAAA,GAAlE,EAAkE,GAAA,cAAA;IAAA,qBAAA,GAAA,IAAA,CAA9DC,gBAA8D;IAA9DA,gBAA8D,GAAA,qBAAA,KAAA,KAAA,CAAA,GAA3CX,IAA2C,GAAA,qBAAA;IAArCY,IAAqC,GAAA,IAAA,CAArCA,IAAqC;IAA/BC,QAA+B,GAAA,IAAA,CAA/BA,QAA+B;IAAlBC,IAAkB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,UAAA,CAAA,CAAA;EAC1G,IAAMC,UAAU,GAAGF,QAAQ,KAAKP,cAAhC;EACA,IAAMU,WAAW,GAAGD,UAAU,GAAGH,IAAI,CAACK,aAALL,CAAmBR,QAAQ,CAACc,QAA5BN,CAAH,GAA2CA,IAAI,CAACK,aAALL,CAAmBR,QAAQ,CAACe,QAA5BP,CAAzE;EACA,IAAMQ,OAAO,GAAG,SAAVA,OAAU,CAAA,EAAM;IAClBT,gBAAgB,CAACI,UAAU,GAAGR,cAAH,GAAoBD,cAA/B,CAAhBK;EACH,CAFD;EAIA,OACI,KAAA,CAAA,aAAA,CAAC,OAAD,EAAA;IAAS,IAAI,EAAEK;EAAf,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA,QAAA,CAAA;IACI,YAAA,EAAYA,WADhB;IAEI,aAAA,EAAY,yBAFhB;IAGI,SAAS,EAAEjB,UAAU,CAAC,0BAAD,EAA6BW,SAA7B,CAHzB;IAII,IAAI,EAAC,QAJT;IAKI,OAAO,EAAEU;EALb,CAAA,EAMQN,IANR,CAAA,EAQKC,UAAU,GACP,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;IAAc,KAAK,EAAEP,SAArB;IAAgC,KAAK,EAAE,EAAvC;IAA2C,MAAM,EAAE;EAAnD,CAAA,CADO,GAGP,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAA;IAAsB,KAAK,EAAEA,SAA7B;IAAwC,KAAK,EAAE,EAA/C;IAAmD,MAAM,EAAE;EAA3D,CAAA,CAXR,CADJ,CADJ;AAkBH,CAzBD;AA2BA,eAAeV,UAAU,CAACW,oBAAD,CAAzB","sourcesContent":["// @flow\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport classNames from 'classnames';\nimport noop from 'lodash/noop';\n\nimport Button from '../../../components/button';\nimport IconGridViewInverted from '../../../icons/general/IconGridViewInverted';\nimport IconListView from '../../../icons/general/IconListView';\nimport messages from '../messages';\nimport Tooltip from '../Tooltip';\nimport type { ViewMode } from '../flowTypes';\nimport { VIEW_MODE_GRID, VIEW_MODE_LIST } from '../../../constants';\nimport { bdlGray50 } from '../../../styles/variables';\nimport './ViewModeChangeButton.scss';\n\ntype Props = {\n    className?: string,\n    onViewModeChange?: (viewMode: ViewMode) => void,\n    viewMode: ViewMode,\n} & InjectIntlProvidedProps;\n\nconst ViewModeChangeButton = ({ className = '', onViewModeChange = noop, intl, viewMode, ...rest }: Props) => {\n    const isGridView = viewMode === VIEW_MODE_GRID;\n    const viewMessage = isGridView ? intl.formatMessage(messages.listView) : intl.formatMessage(messages.gridView);\n    const onClick = () => {\n        onViewModeChange(isGridView ? VIEW_MODE_LIST : VIEW_MODE_GRID);\n    };\n\n    return (\n        <Tooltip text={viewMessage}>\n            <Button\n                aria-label={viewMessage}\n                data-testid=\"view-mode-change-button\"\n                className={classNames('bdl-ViewModeChangeButton', className)}\n                type=\"button\"\n                onClick={onClick}\n                {...rest}\n            >\n                {isGridView ? (\n                    <IconListView color={bdlGray50} width={17} height={17} />\n                ) : (\n                    <IconGridViewInverted color={bdlGray50} width={17} height={17} />\n                )}\n            </Button>\n        </Tooltip>\n    );\n};\n\nexport default injectIntl(ViewModeChangeButton);\n"]},"metadata":{},"sourceType":"module"}