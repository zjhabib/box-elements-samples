{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Helper for the box versions API\n * @author Box\n */\nimport getProp from 'lodash/get';\nimport { FILE_VERSIONS_FIELDS_TO_FETCH } from '../utils/fields';\nimport OffsetBasedAPI from './OffsetBasedAPI';\nimport { DEFAULT_FETCH_END, DEFAULT_FETCH_START, ERROR_CODE_DELETE_VERSION, ERROR_CODE_FETCH_VERSION, ERROR_CODE_FETCH_VERSIONS, ERROR_CODE_PROMOTE_VERSION, ERROR_CODE_RESTORE_VERSION, PERMISSION_CAN_DELETE, PERMISSION_CAN_UPLOAD } from '../constants';\nvar Versions = /*#__PURE__*/\nfunction (_OffsetBasedAPI) {\n  _inherits(Versions, _OffsetBasedAPI);\n  function Versions() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Versions);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Versions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"successHandler\", function (data) {\n      if (_this.isDestroyed() || typeof _this.successCallback !== 'function') {\n        return;\n      }\n      _this.successCallback(data);\n    });\n    return _this;\n  }\n  _createClass(Versions, [{\n    key: \"getUrl\",\n    /**\n     * API URL for file versions\n     *\n     * @param {string} id - a box file id\n     * @return {string} base url for file versions\n     */\n    value: function getUrl(id) {\n      if (!id) {\n        throw new Error('Missing file id!');\n      }\n      return \"\".concat(this.getBaseApiUrl(), \"/files/\").concat(id, \"/versions\");\n    }\n    /**\n     * API URL for version info endpoint\n     *\n     * @param {string} id - a box file id\n     * @param {string} versionId - a box file version id\n     * @return {string} url for version info\n     */\n  }, {\n    key: \"getVersionUrl\",\n    value: function getVersionUrl(id, versionId) {\n      if (!versionId) {\n        throw new Error('Missing version id!');\n      }\n      return \"\".concat(this.getUrl(id), \"/\").concat(versionId);\n    }\n    /**\n     * Returns the versions api response data\n     * @param {Object} data the api response data\n     */\n  }, {\n    key: \"addPermissions\",\n    /**\n     * Helper to add associated permissions from the file to the version objects\n     *\n     * @param {FileVersions} versions - API returned file versions for this file\n     * @param {BoxItem} file - The parent file object\n     * @return {FileVersions} modified versions array including associated file permissions\n     */\n    value: function addPermissions(versions, file) {\n      if (!versions) {\n        return versions;\n      } // Versions defer to the parent file for upload (promote) permissions\n\n      var entries = versions.entries,\n        total_count = versions.total_count;\n      var can_upload = getProp(file, ['permissions', PERMISSION_CAN_UPLOAD], false);\n      return {\n        entries: entries.map(function (_ref) {\n          var permissions = _ref.permissions,\n            version = _objectWithoutProperties(_ref, [\"permissions\"]);\n          return _objectSpread({}, version, {\n            permissions: _objectSpread({\n              can_upload: can_upload\n            }, permissions)\n          });\n        }),\n        total_count: total_count\n      };\n    }\n    /**\n     * API for deleting a version of a file\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n  }, {\n    key: \"deleteVersion\",\n    value: function deleteVersion(_ref2) {\n      var errorCallback = _ref2.errorCallback,\n        fileId = _ref2.fileId,\n        permissions = _ref2.permissions,\n        successCallback = _ref2.successCallback,\n        versionId = _ref2.versionId;\n      this.errorCode = ERROR_CODE_DELETE_VERSION;\n      try {\n        this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, fileId);\n      } catch (e) {\n        errorCallback(e, this.errorCode);\n        return;\n      }\n      this.delete({\n        id: fileId,\n        url: this.getVersionUrl(fileId, versionId),\n        successCallback: successCallback,\n        errorCallback: errorCallback\n      });\n    }\n    /**\n     * API for fetching versions on a file\n     *\n     * @param {string} fileId - a box file id\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {number} offset - the offset of the starting version index\n     * @param {number} limit - the max number of versions to fetch\n     * @param {Array} fields - the fields to fetch\n     * @param {boolean} shouldFetchAll - true if all versions should be fetched\n     * @returns {void}\n     */\n  }, {\n    key: \"getVersions\",\n    value: function getVersions(fileId, successCallback, errorCallback) {\n      var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_FETCH_START;\n      var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_FETCH_END;\n      var fields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : FILE_VERSIONS_FIELDS_TO_FETCH;\n      var shouldFetchAll = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n      this.errorCode = ERROR_CODE_FETCH_VERSIONS;\n      this.offsetGet(fileId, successCallback, errorCallback, offset, limit, fields, shouldFetchAll);\n    }\n    /**\n     * API for fetching a certain version for a file\n     *\n     * @param {string} fileId - a box file id\n     * @param {string} fileVersionId - a box file version id\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @returns {void}\n     */\n  }, {\n    key: \"getVersion\",\n    value: function getVersion(fileId, fileVersionId, successCallback, errorCallback) {\n      this.errorCode = ERROR_CODE_FETCH_VERSION;\n      this.get({\n        id: fileId,\n        successCallback: successCallback,\n        errorCallback: errorCallback,\n        url: this.getVersionUrl(fileId, fileVersionId),\n        requestData: {\n          params: {\n            fields: FILE_VERSIONS_FIELDS_TO_FETCH.toString()\n          }\n        }\n      });\n    }\n    /**\n     * Decorates the current version and adds it to an existing FileVersions object\n     *\n     * @param {BoxItemVersion} currentVersion - a box version\n     * @param {FileVersions} versions - versions response\n     * @param {BoxItem} file - a box file\n     * @returns {FileVersions} - a FileVersions object containing the decorated current version\n     */\n  }, {\n    key: \"addCurrentVersion\",\n    value: function addCurrentVersion(currentVersion, versions, file) {\n      if (!currentVersion) {\n        return versions || {\n          entries: [],\n          total_count: 0\n        };\n      }\n      if (!versions) {\n        return {\n          entries: [currentVersion],\n          total_count: 1\n        };\n      }\n      var promotedFromId = getProp(file, 'restored_from.id');\n      var promotedVersion = versions.entries.find(function (version) {\n        return version.id === promotedFromId;\n      });\n      if (promotedVersion) {\n        currentVersion.version_promoted = promotedVersion.version_number;\n      }\n      return {\n        entries: [].concat(_toConsumableArray(versions.entries), [currentVersion]),\n        total_count: versions.total_count + 1\n      };\n    }\n    /**\n     * API for promoting a version of a file to current\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n  }, {\n    key: \"promoteVersion\",\n    value: function promoteVersion(_ref3) {\n      var errorCallback = _ref3.errorCallback,\n        fileId = _ref3.fileId,\n        permissions = _ref3.permissions,\n        successCallback = _ref3.successCallback,\n        versionId = _ref3.versionId;\n      this.errorCode = ERROR_CODE_PROMOTE_VERSION;\n      try {\n        this.checkApiCallValidity(PERMISSION_CAN_UPLOAD, permissions, fileId);\n      } catch (e) {\n        errorCallback(e, this.errorCode);\n        return;\n      }\n      this.post({\n        id: fileId,\n        data: {\n          data: {\n            id: versionId,\n            type: 'file_version'\n          }\n        },\n        url: this.getVersionUrl(fileId, 'current'),\n        successCallback: successCallback,\n        errorCallback: errorCallback\n      });\n    }\n    /**\n     * API for restoring a deleted version of a file\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n  }, {\n    key: \"restoreVersion\",\n    value: function restoreVersion(_ref4) {\n      var errorCallback = _ref4.errorCallback,\n        fileId = _ref4.fileId,\n        permissions = _ref4.permissions,\n        successCallback = _ref4.successCallback,\n        versionId = _ref4.versionId;\n      this.errorCode = ERROR_CODE_RESTORE_VERSION;\n      try {\n        this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, fileId);\n      } catch (e) {\n        errorCallback(e, this.errorCode);\n        return;\n      }\n      this.put({\n        id: fileId,\n        data: {\n          data: {\n            trashed_at: null\n          }\n        },\n        url: this.getVersionUrl(fileId, versionId),\n        successCallback: successCallback,\n        errorCallback: errorCallback\n      });\n    }\n  }]);\n  return Versions;\n}(OffsetBasedAPI);\nexport default Versions;","map":{"version":3,"sources":["../../src/api/Versions.js"],"names":["getProp","FILE_VERSIONS_FIELDS_TO_FETCH","OffsetBasedAPI","DEFAULT_FETCH_END","DEFAULT_FETCH_START","ERROR_CODE_DELETE_VERSION","ERROR_CODE_FETCH_VERSION","ERROR_CODE_FETCH_VERSIONS","ERROR_CODE_PROMOTE_VERSION","ERROR_CODE_RESTORE_VERSION","PERMISSION_CAN_DELETE","PERMISSION_CAN_UPLOAD","Versions","id","Error","getBaseApiUrl","versionId","getUrl","data","isDestroyed","successCallback","versions","file","entries","total_count","can_upload","map","permissions","version","errorCallback","fileId","errorCode","checkApiCallValidity","e","delete","url","getVersionUrl","offset","limit","fields","shouldFetchAll","offsetGet","fileVersionId","get","requestData","params","toString","currentVersion","promotedFromId","promotedVersion","find","version_promoted","version_number","post","type","put","trashed_at"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the box versions API\n * @author Box\n */\n\nimport getProp from 'lodash/get';\nimport { FILE_VERSIONS_FIELDS_TO_FETCH } from '../utils/fields';\nimport OffsetBasedAPI from './OffsetBasedAPI';\nimport {\n    DEFAULT_FETCH_END,\n    DEFAULT_FETCH_START,\n    ERROR_CODE_DELETE_VERSION,\n    ERROR_CODE_FETCH_VERSION,\n    ERROR_CODE_FETCH_VERSIONS,\n    ERROR_CODE_PROMOTE_VERSION,\n    ERROR_CODE_RESTORE_VERSION,\n    PERMISSION_CAN_DELETE,\n    PERMISSION_CAN_UPLOAD,\n} from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\nimport type { BoxItem, FileVersions, BoxItemVersionPermission, BoxItemVersion } from '../common/types/core';\n\nclass Versions extends OffsetBasedAPI {\n    /**\n     * API URL for file versions\n     *\n     * @param {string} id - a box file id\n     * @return {string} base url for file versions\n     */\n    getUrl(id: string): string {\n        if (!id) {\n            throw new Error('Missing file id!');\n        }\n\n        return `${this.getBaseApiUrl()}/files/${id}/versions`;\n    }\n\n    /**\n     * API URL for version info endpoint\n     *\n     * @param {string} id - a box file id\n     * @param {string} versionId - a box file version id\n     * @return {string} url for version info\n     */\n    getVersionUrl(id: string, versionId: string): string {\n        if (!versionId) {\n            throw new Error('Missing version id!');\n        }\n\n        return `${this.getUrl(id)}/${versionId}`;\n    }\n\n    /**\n     * Returns the versions api response data\n     * @param {Object} data the api response data\n     */\n    successHandler = (data: FileVersions): void => {\n        if (this.isDestroyed() || typeof this.successCallback !== 'function') {\n            return;\n        }\n\n        this.successCallback(data);\n    };\n\n    /**\n     * Helper to add associated permissions from the file to the version objects\n     *\n     * @param {FileVersions} versions - API returned file versions for this file\n     * @param {BoxItem} file - The parent file object\n     * @return {FileVersions} modified versions array including associated file permissions\n     */\n    addPermissions(versions: ?FileVersions, file: BoxItem): ?FileVersions {\n        if (!versions) {\n            return versions;\n        }\n\n        // Versions defer to the parent file for upload (promote) permissions\n        const { entries, total_count } = versions;\n        const can_upload = getProp(file, ['permissions', PERMISSION_CAN_UPLOAD], false);\n\n        return {\n            entries: entries.map(({ permissions, ...version }) => ({\n                ...version,\n                permissions: { can_upload, ...permissions },\n            })),\n            total_count,\n        };\n    }\n\n    /**\n     * API for deleting a version of a file\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n    deleteVersion({\n        errorCallback,\n        fileId,\n        permissions,\n        successCallback,\n        versionId,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        permissions: BoxItemVersionPermission,\n        successCallback: null => any,\n        versionId: string,\n    }): void {\n        this.errorCode = ERROR_CODE_DELETE_VERSION;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.delete({\n            id: fileId,\n            url: this.getVersionUrl(fileId, versionId),\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for fetching versions on a file\n     *\n     * @param {string} fileId - a box file id\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {number} offset - the offset of the starting version index\n     * @param {number} limit - the max number of versions to fetch\n     * @param {Array} fields - the fields to fetch\n     * @param {boolean} shouldFetchAll - true if all versions should be fetched\n     * @returns {void}\n     */\n    getVersions(\n        fileId: string,\n        successCallback: FileVersions => any,\n        errorCallback: ElementsErrorCallback,\n        offset: number = DEFAULT_FETCH_START,\n        limit: number = DEFAULT_FETCH_END,\n        fields: Array<string> = FILE_VERSIONS_FIELDS_TO_FETCH,\n        shouldFetchAll: boolean = true,\n    ): void {\n        this.errorCode = ERROR_CODE_FETCH_VERSIONS;\n        this.offsetGet(fileId, successCallback, errorCallback, offset, limit, fields, shouldFetchAll);\n    }\n\n    /**\n     * API for fetching a certain version for a file\n     *\n     * @param {string} fileId - a box file id\n     * @param {string} fileVersionId - a box file version id\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @returns {void}\n     */\n    getVersion(\n        fileId: string,\n        fileVersionId: string,\n        successCallback: BoxItemVersion => void,\n        errorCallback: ElementsErrorCallback,\n    ): void {\n        this.errorCode = ERROR_CODE_FETCH_VERSION;\n\n        this.get({\n            id: fileId,\n            successCallback,\n            errorCallback,\n            url: this.getVersionUrl(fileId, fileVersionId),\n            requestData: {\n                params: {\n                    fields: FILE_VERSIONS_FIELDS_TO_FETCH.toString(),\n                },\n            },\n        });\n    }\n\n    /**\n     * Decorates the current version and adds it to an existing FileVersions object\n     *\n     * @param {BoxItemVersion} currentVersion - a box version\n     * @param {FileVersions} versions - versions response\n     * @param {BoxItem} file - a box file\n     * @returns {FileVersions} - a FileVersions object containing the decorated current version\n     */\n    addCurrentVersion(currentVersion: ?BoxItemVersion, versions: ?FileVersions, file: BoxItem): FileVersions {\n        if (!currentVersion) {\n            return versions || { entries: [], total_count: 0 };\n        }\n\n        if (!versions) {\n            return { entries: [currentVersion], total_count: 1 };\n        }\n\n        const promotedFromId = getProp(file, 'restored_from.id');\n        const promotedVersion = versions.entries.find(version => version.id === promotedFromId);\n\n        if (promotedVersion) {\n            currentVersion.version_promoted = promotedVersion.version_number;\n        }\n\n        return { entries: [...versions.entries, currentVersion], total_count: versions.total_count + 1 };\n    }\n\n    /**\n     * API for promoting a version of a file to current\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n    promoteVersion({\n        errorCallback,\n        fileId,\n        permissions,\n        successCallback,\n        versionId,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        permissions: BoxItemVersionPermission,\n        successCallback: BoxItemVersion => any,\n        versionId: string,\n    }): void {\n        this.errorCode = ERROR_CODE_PROMOTE_VERSION;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_UPLOAD, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.post({\n            id: fileId,\n            data: {\n                data: {\n                    id: versionId,\n                    type: 'file_version',\n                },\n            },\n            url: this.getVersionUrl(fileId, 'current'),\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for restoring a deleted version of a file\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n    restoreVersion({\n        errorCallback,\n        fileId,\n        permissions,\n        successCallback,\n        versionId,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        permissions: BoxItemVersionPermission,\n        successCallback: BoxItemVersion => any,\n        versionId: string,\n    }): void {\n        this.errorCode = ERROR_CODE_RESTORE_VERSION;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.put({\n            id: fileId,\n            data: {\n                data: {\n                    trashed_at: null,\n                },\n            },\n            url: this.getVersionUrl(fileId, versionId),\n            successCallback,\n            errorCallback,\n        });\n    }\n}\n\nexport default Versions;\n"]},"metadata":{},"sourceType":"module"}