{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Metadata Queries API Helper\n * @author Box\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport find from 'lodash/find';\nimport getProp from 'lodash/get';\nimport includes from 'lodash/includes';\nimport isArray from 'lodash/isArray';\nimport isNil from 'lodash/isNil';\nimport API from '../../api';\nimport { ITEM_TYPE_FILE, JSON_PATCH_OP_ADD, JSON_PATCH_OP_REMOVE, JSON_PATCH_OP_REPLACE, JSON_PATCH_OP_TEST, METADATA_FIELD_TYPE_ENUM, METADATA_FIELD_TYPE_MULTISELECT } from '../../common/constants';\nimport { FIELD_NAME, FIELD_METADATA } from '../../constants';\nvar SELECT_TYPES = [METADATA_FIELD_TYPE_ENUM, METADATA_FIELD_TYPE_MULTISELECT];\nvar MetadataQueryAPIHelper = function MetadataQueryAPIHelper(api) {\n  var _this = this;\n  _classCallCheck(this, MetadataQueryAPIHelper);\n  _defineProperty(this, \"createJSONPatchOperations\", function (field, oldValue, newValue) {\n    var operation = JSON_PATCH_OP_REPLACE;\n    if (isNil(oldValue) && newValue) {\n      operation = JSON_PATCH_OP_ADD;\n    }\n    if (oldValue && isNil(newValue)) {\n      operation = JSON_PATCH_OP_REMOVE;\n    }\n    var testOp = {\n      op: JSON_PATCH_OP_TEST,\n      path: \"/\".concat(field),\n      value: oldValue\n    };\n    var patchOp = {\n      op: operation,\n      path: \"/\".concat(field),\n      value: newValue\n    };\n    if (operation === JSON_PATCH_OP_REMOVE) {\n      delete patchOp.value;\n    }\n    return operation === JSON_PATCH_OP_ADD ? [patchOp] : [testOp, patchOp];\n  });\n  _defineProperty(this, \"getMetadataQueryFields\", function () {\n    /*\n        Example metadata query:\n        const query = {\n            from: 'enterprise_12345.myAwesomeTemplateKey',\n            fields: [\n                'name', // base representation field for an item (name, size, etag etc.)\n                'metadata.enterprise_12345.myAwesomeTemplateKey.field_1', // metadata instance field\n                'metadata.enterprise_12345.myAwesomeTemplateKey.field_2', // metadata instance field\n                'metadata.enterprise_12345.myAwesomeTemplateKey.field_3' // metadata instance field\n            ],\n            ancestor_folder_id: 0,\n        };\n         This function will return ['field_1', 'field_2', 'field_3']\n    */\n    var _this$metadataQuery = _this.metadataQuery,\n      _this$metadataQuery$f = _this$metadataQuery.fields,\n      fields = _this$metadataQuery$f === void 0 ? [] : _this$metadataQuery$f,\n      from = _this$metadataQuery.from;\n    return fields.filter(function (field) {\n      return field.includes(from);\n    }).map(function (field) {\n      return field.split('.').pop();\n    });\n  });\n  _defineProperty(this, \"flattenMetadata\", function (metadata) {\n    var templateFields = getProp(_this.metadataTemplate, 'fields', []);\n    var instance = getProp(metadata, \"\".concat(_this.templateScope, \".\").concat(_this.templateKey));\n    if (!instance) {\n      return {};\n    }\n    var queryFields = _this.getMetadataQueryFields();\n    var fields = queryFields.map(function (queryField) {\n      var templateField = find(templateFields, ['key', queryField]);\n      var type = getProp(templateField, 'type'); // get data type\n\n      var displayName = getProp(templateField, 'displayName', queryField); // get displayName, defaults to key\n\n      var field = {\n        key: \"\".concat(FIELD_METADATA, \".\").concat(_this.templateScope, \".\").concat(_this.templateKey, \".\").concat(queryField),\n        value: instance[queryField],\n        type: type,\n        displayName: displayName\n      };\n      if (includes(SELECT_TYPES, type)) {\n        // get \"options\" for enums or multiselects\n        field.options = getProp(templateField, 'options');\n      }\n      return field;\n    });\n    return {\n      enterprise: {\n        fields: fields,\n        id: instance.$id\n      }\n    };\n  });\n  _defineProperty(this, \"flattenResponseEntry\", function (metadataEntry) {\n    var metadata = metadataEntry.metadata;\n    return _objectSpread({}, metadataEntry, {\n      metadata: _this.flattenMetadata(metadata)\n    });\n  });\n  _defineProperty(this, \"filterMetdataQueryResponse\", function (response) {\n    var _response$entries = response.entries,\n      entries = _response$entries === void 0 ? [] : _response$entries,\n      next_marker = response.next_marker;\n    return {\n      entries: entries.filter(function (entry) {\n        return getProp(entry, 'type') === ITEM_TYPE_FILE;\n      }),\n      // return only file items\n      next_marker: next_marker\n    };\n  });\n  _defineProperty(this, \"getFlattenedDataWithTypes\", function (templateSchemaResponse) {\n    _this.metadataTemplate = getProp(templateSchemaResponse, 'data');\n    var _this$metadataQueryRe = _this.metadataQueryResponseData,\n      entries = _this$metadataQueryRe.entries,\n      next_marker = _this$metadataQueryRe.next_marker;\n    return {\n      items: entries.map(_this.flattenResponseEntry),\n      nextMarker: next_marker\n    };\n  });\n  _defineProperty(this, \"getTemplateSchemaInfo\", function (data) {\n    var entries = data.entries;\n    _this.metadataQueryResponseData = _this.filterMetdataQueryResponse(data);\n    if (!entries || entries.length === 0) {\n      // Don't make metadata API call to get template info\n      return Promise.resolve();\n    }\n    var metadata = getProp(entries, '[0].metadata');\n    _this.templateScope = Object.keys(metadata)[0];\n    var instance = metadata[_this.templateScope];\n    _this.templateKey = Object.keys(instance)[0];\n    return _this.api.getMetadataAPI(true).getSchemaByTemplateKey(_this.templateKey);\n  });\n  _defineProperty(this, \"queryMetadata\", function () {\n    return new Promise(function (resolve, reject) {\n      _this.api.getMetadataQueryAPI().queryMetadata(_this.metadataQuery, resolve, reject, {\n        forceFetch: true\n      });\n    });\n  });\n  _defineProperty(this, \"fetchMetadataQueryResults\", function (metadataQuery, successsCallback, errorCallback) {\n    _this.metadataQuery = _this.verifyQueryFields(metadataQuery);\n    return _this.queryMetadata().then(_this.getTemplateSchemaInfo).then(_this.getFlattenedDataWithTypes).then(successsCallback).catch(errorCallback);\n  });\n  _defineProperty(this, \"updateMetadata\", function (file, field, oldValue, newValue, successsCallback, errorCallback) {\n    var operations = _this.createJSONPatchOperations(field, oldValue, newValue);\n    return _this.api.getMetadataAPI(true).updateMetadata(file, _this.metadataTemplate, operations, successsCallback, errorCallback);\n  });\n  _defineProperty(this, \"verifyQueryFields\", function (metadataQuery) {\n    var clonedQuery = cloneDeep(metadataQuery);\n    var clonedFields = isArray(clonedQuery.fields) ? clonedQuery.fields : []; // Make sure the query fields array has \"name\" field which is necessary to display info.\n\n    if (!clonedFields.includes(FIELD_NAME)) {\n      clonedFields.push(FIELD_NAME);\n    }\n    clonedQuery.fields = clonedFields;\n    return clonedQuery;\n  });\n  this.api = api;\n};\nexport { MetadataQueryAPIHelper as default };","map":{"version":3,"sources":["../../../src/features/metadata-based-view/MetadataQueryAPIHelper.js"],"names":["cloneDeep","find","getProp","includes","isArray","isNil","API","ITEM_TYPE_FILE","JSON_PATCH_OP_ADD","JSON_PATCH_OP_REMOVE","JSON_PATCH_OP_REPLACE","JSON_PATCH_OP_TEST","METADATA_FIELD_TYPE_ENUM","METADATA_FIELD_TYPE_MULTISELECT","FIELD_NAME","FIELD_METADATA","SELECT_TYPES","MetadataQueryAPIHelper","api","field","oldValue","newValue","operation","testOp","op","path","value","patchOp","fields","from","metadataQuery","filter","map","split","pop","metadata","templateFields","metadataTemplate","instance","templateScope","templateKey","queryFields","getMetadataQueryFields","queryField","templateField","type","displayName","key","options","enterprise","id","$id","metadataEntry","flattenMetadata","response","entries","next_marker","entry","templateSchemaResponse","metadataQueryResponseData","items","flattenResponseEntry","nextMarker","data","filterMetdataQueryResponse","length","Promise","resolve","Object","keys","getMetadataAPI","getSchemaByTemplateKey","reject","getMetadataQueryAPI","queryMetadata","forceFetch","successsCallback","errorCallback","verifyQueryFields","then","getTemplateSchemaInfo","getFlattenedDataWithTypes","catch","file","operations","createJSONPatchOperations","updateMetadata","clonedQuery","clonedFields","push"],"mappings":"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","sourcesContent":["/**\n * @flow strict\n * @file Metadata Queries API Helper\n * @author Box\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport find from 'lodash/find';\nimport getProp from 'lodash/get';\nimport includes from 'lodash/includes';\nimport isArray from 'lodash/isArray';\nimport isNil from 'lodash/isNil';\nimport API from '../../api';\n\nimport {\n    ITEM_TYPE_FILE,\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n} from '../../common/constants';\nimport { FIELD_NAME, FIELD_METADATA } from '../../constants';\n\nimport type { MetadataQuery as MetadataQueryType, MetadataQueryResponseData } from '../../common/types/metadataQueries';\nimport type {\n    MetadataTemplateSchemaResponse,\n    MetadataTemplate,\n    MetadataFieldValue,\n    MetadataType,\n    MetadataQueryInstanceTypeField,\n} from '../../common/types/metadata';\nimport type { ElementsXhrError, JSONPatchOperations } from '../../common/types/api';\nimport type { Collection, BoxItem } from '../../common/types/core';\n\ntype SuccessCallback = (metadataQueryCollection: Collection) => void;\ntype ErrorCallback = (e: ElementsXhrError) => void;\n\nconst SELECT_TYPES: Array<typeof METADATA_FIELD_TYPE_ENUM | typeof METADATA_FIELD_TYPE_MULTISELECT> = [\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n];\n\nexport default class MetadataQueryAPIHelper {\n    api: API;\n\n    metadataQueryResponseData: MetadataQueryResponseData;\n\n    metadataTemplate: MetadataTemplate;\n\n    templateKey: string;\n\n    templateScope: string;\n\n    metadataQuery: MetadataQueryType;\n\n    constructor(api: API) {\n        this.api = api;\n    }\n\n    createJSONPatchOperations = (\n        field: string,\n        oldValue: ?MetadataFieldValue,\n        newValue: ?MetadataFieldValue,\n    ): JSONPatchOperations => {\n        let operation = JSON_PATCH_OP_REPLACE;\n\n        if (isNil(oldValue) && newValue) {\n            operation = JSON_PATCH_OP_ADD;\n        }\n\n        if (oldValue && isNil(newValue)) {\n            operation = JSON_PATCH_OP_REMOVE;\n        }\n\n        const testOp = {\n            op: JSON_PATCH_OP_TEST,\n            path: `/${field}`,\n            value: oldValue,\n        };\n        const patchOp = {\n            op: operation,\n            path: `/${field}`,\n            value: newValue,\n        };\n\n        if (operation === JSON_PATCH_OP_REMOVE) {\n            delete patchOp.value;\n        }\n\n        return operation === JSON_PATCH_OP_ADD ? [patchOp] : [testOp, patchOp];\n    };\n\n    getMetadataQueryFields = (): string[] => {\n        /*\n            Example metadata query:\n            const query = {\n                from: 'enterprise_12345.myAwesomeTemplateKey',\n                fields: [\n                    'name', // base representation field for an item (name, size, etag etc.)\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_1', // metadata instance field\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_2', // metadata instance field\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_3' // metadata instance field\n                ],\n                ancestor_folder_id: 0,\n            };\n\n            This function will return ['field_1', 'field_2', 'field_3']\n        */\n        const { fields = [], from } = this.metadataQuery;\n        return fields.filter(field => field.includes(from)).map(field => field.split('.').pop());\n    };\n\n    flattenMetadata = (metadata?: MetadataType): MetadataType => {\n        const templateFields = getProp(this.metadataTemplate, 'fields', []);\n        const instance = getProp(metadata, `${this.templateScope}.${this.templateKey}`);\n\n        if (!instance) {\n            return {};\n        }\n\n        const queryFields = this.getMetadataQueryFields();\n\n        const fields = queryFields.map((queryField: string) => {\n            const templateField = find(templateFields, ['key', queryField]);\n            const type = getProp(templateField, 'type'); // get data type\n            const displayName = getProp(templateField, 'displayName', queryField); // get displayName, defaults to key\n\n            const field: MetadataQueryInstanceTypeField = {\n                key: `${FIELD_METADATA}.${this.templateScope}.${this.templateKey}.${queryField}`,\n                value: instance[queryField],\n                type,\n                displayName,\n            };\n\n            if (includes(SELECT_TYPES, type)) {\n                // get \"options\" for enums or multiselects\n                field.options = getProp(templateField, 'options');\n            }\n\n            return field;\n        });\n\n        return {\n            enterprise: {\n                fields,\n                id: instance.$id,\n            },\n        };\n    };\n\n    flattenResponseEntry = (metadataEntry: BoxItem): BoxItem => {\n        const { metadata } = metadataEntry;\n        return {\n            ...metadataEntry,\n            metadata: this.flattenMetadata(metadata),\n        };\n    };\n\n    filterMetdataQueryResponse = (response: MetadataQueryResponseData): MetadataQueryResponseData => {\n        const { entries = [], next_marker } = response;\n        return {\n            entries: entries.filter(entry => getProp(entry, 'type') === ITEM_TYPE_FILE), // return only file items\n            next_marker,\n        };\n    };\n\n    getFlattenedDataWithTypes = (templateSchemaResponse?: MetadataTemplateSchemaResponse): Collection => {\n        this.metadataTemplate = getProp(templateSchemaResponse, 'data');\n        const { entries, next_marker }: MetadataQueryResponseData = this.metadataQueryResponseData;\n        return {\n            items: entries.map<BoxItem>(this.flattenResponseEntry),\n            nextMarker: next_marker,\n        };\n    };\n\n    getTemplateSchemaInfo = (data: MetadataQueryResponseData): Promise<MetadataTemplateSchemaResponse | void> => {\n        const { entries } = data;\n        this.metadataQueryResponseData = this.filterMetdataQueryResponse(data);\n        if (!entries || entries.length === 0) {\n            // Don't make metadata API call to get template info\n            return Promise.resolve();\n        }\n\n        const metadata = getProp(entries, '[0].metadata');\n        this.templateScope = Object.keys(metadata)[0];\n        const instance = metadata[this.templateScope];\n        this.templateKey = Object.keys(instance)[0];\n\n        return this.api.getMetadataAPI(true).getSchemaByTemplateKey(this.templateKey);\n    };\n\n    queryMetadata = (): Promise<MetadataQueryResponseData> => {\n        return new Promise((resolve, reject) => {\n            this.api.getMetadataQueryAPI().queryMetadata(this.metadataQuery, resolve, reject, { forceFetch: true });\n        });\n    };\n\n    fetchMetadataQueryResults = (\n        metadataQuery: MetadataQueryType,\n        successsCallback: SuccessCallback,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        this.metadataQuery = this.verifyQueryFields(metadataQuery);\n        return this.queryMetadata()\n            .then(this.getTemplateSchemaInfo)\n            .then(this.getFlattenedDataWithTypes)\n            .then(successsCallback)\n            .catch(errorCallback);\n    };\n\n    updateMetadata = (\n        file: BoxItem,\n        field: string,\n        oldValue: ?MetadataFieldValue,\n        newValue: ?MetadataFieldValue,\n        successsCallback: void => void,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        const operations = this.createJSONPatchOperations(field, oldValue, newValue);\n        return this.api\n            .getMetadataAPI(true)\n            .updateMetadata(file, this.metadataTemplate, operations, successsCallback, errorCallback);\n    };\n\n    /**\n     * Verify that the metadata query has required fields and update it if necessary\n     * For a file item, default fields included in the response are \"type\", \"id\", \"etag\"\n     *\n     * @param {MetadataQueryType} metadataQuery metadata query object\n     * @return {MetadataQueryType} updated metadata query object with required fields\n     */\n    verifyQueryFields = (metadataQuery: MetadataQueryType): MetadataQueryType => {\n        const clonedQuery = cloneDeep(metadataQuery);\n        const clonedFields = isArray(clonedQuery.fields) ? clonedQuery.fields : [];\n\n        // Make sure the query fields array has \"name\" field which is necessary to display info.\n        if (!clonedFields.includes(FIELD_NAME)) {\n            clonedFields.push(FIELD_NAME);\n        }\n        clonedQuery.fields = clonedFields;\n\n        return clonedQuery;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}