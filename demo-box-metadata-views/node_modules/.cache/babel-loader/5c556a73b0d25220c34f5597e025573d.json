{"ast":null,"code":"import * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport Label from '../../components/label/Label';\nimport SingleSelectField from '../../components/select-field/SingleSelectField';\nimport messages from './messages';\nimport './EnumMetadataField.scss';\nvar EnumMetadataField = function EnumMetadataField(_ref) {\n  var blurExceptionClassNames = _ref.blurExceptionClassNames,\n    dataKey = _ref.dataKey,\n    dataValue = _ref.dataValue,\n    displayName = _ref.displayName,\n    description = _ref.description,\n    intl = _ref.intl,\n    _onChange = _ref.onChange,\n    onRemove = _ref.onRemove,\n    _ref$options = _ref.options,\n    options = _ref$options === void 0 ? [] : _ref$options;\n  var selectOptions = options.map(function (option) {\n    return {\n      displayText: option.key,\n      value: option.key,\n      isSelectable: true\n    };\n  });\n  var defaultValue = intl.formatMessage(messages.metadataFieldSelectValue);\n  selectOptions.unshift({\n    displayText: defaultValue,\n    value: defaultValue,\n    isSelectable: false\n  });\n  return React.createElement(\"div\", {\n    className: \"bdl-EnumMetadataField\"\n  }, React.createElement(Label, {\n    text: displayName\n  }, !!description && React.createElement(\"i\", {\n    className: \"bdl-EnumMetadataField-desc\"\n  }, description), React.createElement(SingleSelectField, {\n    blurExceptionClassNames: blurExceptionClassNames,\n    isEscapedWithReference: true,\n    isScrollable: true,\n    onChange: function onChange(option) {\n      if (option.isSelectable) {\n        _onChange(dataKey, option.value);\n      } else if (onRemove) {\n        onRemove(dataKey);\n      }\n    },\n    options: selectOptions,\n    selectedValue:\n    // Conditional to make flow happy, dataValue should never be an array\n    Array.isArray(dataValue) ? dataValue.join(', ') : dataValue || defaultValue\n  })));\n};\nexport { EnumMetadataField as EnumMetadataFieldBase };\nexport default injectIntl(EnumMetadataField);","map":{"version":3,"sources":["../../../src/features/metadata-instance-fields/EnumMetadataField.js"],"names":["React","injectIntl","Label","SingleSelectField","messages","EnumMetadataField","blurExceptionClassNames","dataKey","dataValue","displayName","description","intl","onChange","onRemove","options","selectOptions","map","displayText","option","key","value","isSelectable","defaultValue","formatMessage","metadataFieldSelectValue","unshift","Array","isArray","join","EnumMetadataFieldBase"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,iBAAP,MAA8B,iDAA9B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,0BAAP;AAoBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EAUb;EAAA,IATTC,uBASS,GAAA,IAAA,CATTA,uBASS;IARTC,OAQS,GAAA,IAAA,CARTA,OAQS;IAPTC,SAOS,GAAA,IAAA,CAPTA,SAOS;IANTC,WAMS,GAAA,IAAA,CANTA,WAMS;IALTC,WAKS,GAAA,IAAA,CALTA,WAKS;IAJTC,IAIS,GAAA,IAAA,CAJTA,IAIS;IAHTC,SAGS,GAAA,IAAA,CAHTA,QAGS;IAFTC,QAES,GAAA,IAAA,CAFTA,QAES;IAAA,YAAA,GAAA,IAAA,CADTC,OACS;IADTA,OACS,GAAA,YAAA,KAAA,KAAA,CAAA,GADC,EACD,GAAA,YAAA;EACT,IAAMC,aAAa,GAAG,OAAO,CAACC,GAAR,CAAY,UAAA,MAAM,EAAA;IAAA,OAAK;MACzCC,WAAW,EAAEC,MAAM,CAACC,GADqB;MAEzCC,KAAK,EAAEF,MAAM,CAACC,GAF2B;MAGzCE,YAAY,EAAE;IAH2B,CAAL;EAAA,CAAlB,CAAtB;EAMA,IAAMC,YAAY,GAAGX,IAAI,CAACY,aAALZ,CAAmBP,QAAQ,CAACoB,wBAA5Bb,CAArB;EAEAI,aAAa,CAACU,OAAdV,CAAsB;IAClBE,WAAW,EAAEK,YADK;IAElBF,KAAK,EAAEE,YAFW;IAGlBD,YAAY,EAAE;EAHI,CAAtBN,CAAAA;EAMA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA;IAAO,IAAI,EAAEN;EAAb,CAAA,EACK,CAAC,CAACC,WAAF,IAAiB,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;IAAG,SAAS,EAAC;EAAb,CAAA,EAA2CA,WAA3C,CADtB,EAEI,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA;IACI,uBAAuB,EAAEJ,uBAD7B;IAEI,sBAAsB,EAAA,IAF1B;IAGI,YAAY,EAAA,IAHhB;IAII,QAAQ,EAAE,SAAA,QAAA,CAACY,MAAD,EAAoB;MAC1B,IAAIA,MAAM,CAACG,YAAX,EAAyB;QACrBT,SAAQ,CAACL,OAAD,EAAUW,MAAM,CAACE,KAAjB,CAARR;MACH,CAFD,MAEO,IAAIC,QAAJ,EAAc;QACjBA,QAAQ,CAACN,OAAD,CAARM;MACH;IACJ,CAVL;IAWI,OAAO,EAAEE,aAXb;IAYI,aAAa;IACT;IACAW,KAAK,CAACC,OAAND,CAAclB,SAAdkB,CAAAA,GAA2BlB,SAAS,CAACoB,IAAVpB,CAAe,IAAfA,CAA3BkB,GAAkDlB,SAAS,IAAIc;EAdvE,CAAA,CAFJ,CADJ,CADJ;AAwBH,CAjDD;AAmDA,SAASjB,iBAAiB,IAAIwB,qBAA9B;AACA,eAAe5B,UAAU,CAACI,iBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport Label from '../../components/label/Label';\nimport SingleSelectField from '../../components/select-field/SingleSelectField';\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataTemplateFieldOption } from '../../common/types/metadata';\nimport './EnumMetadataField.scss';\n\ntype Option = {\n    displayText: string,\n    isSelectable: boolean,\n    value: string,\n};\n\ntype Props = {\n    blurExceptionClassNames?: Array<string>,\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    intl: any,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    options?: Array<MetadataTemplateFieldOption>,\n};\n\nconst EnumMetadataField = ({\n    blurExceptionClassNames,\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    intl,\n    onChange,\n    onRemove,\n    options = [],\n}: Props) => {\n    const selectOptions = options.map(option => ({\n        displayText: option.key,\n        value: option.key,\n        isSelectable: true,\n    }));\n\n    const defaultValue = intl.formatMessage(messages.metadataFieldSelectValue);\n\n    selectOptions.unshift({\n        displayText: defaultValue,\n        value: defaultValue,\n        isSelectable: false,\n    });\n\n    return (\n        <div className=\"bdl-EnumMetadataField\">\n            <Label text={displayName}>\n                {!!description && <i className=\"bdl-EnumMetadataField-desc\">{description}</i>}\n                <SingleSelectField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    isEscapedWithReference\n                    isScrollable\n                    onChange={(option: Option) => {\n                        if (option.isSelectable) {\n                            onChange(dataKey, option.value);\n                        } else if (onRemove) {\n                            onRemove(dataKey);\n                        }\n                    }}\n                    options={selectOptions}\n                    selectedValue={\n                        // Conditional to make flow happy, dataValue should never be an array\n                        Array.isArray(dataValue) ? dataValue.join(', ') : dataValue || defaultValue\n                    }\n                />\n            </Label>\n        </div>\n    );\n};\n\nexport { EnumMetadataField as EnumMetadataFieldBase };\nexport default injectIntl(EnumMetadataField);\n"]},"metadata":{},"sourceType":"module"}