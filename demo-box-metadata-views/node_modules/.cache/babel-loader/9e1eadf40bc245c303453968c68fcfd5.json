{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport getProp from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport appRestrictionsMessageMap from './appRestrictionsMessageMap';\nimport downloadRestrictionsMessageMap from './downloadRestrictionsMessageMap';\nimport messages from './messages';\nimport { ACCESS_POLICY_RESTRICTION, DOWNLOAD_CONTROL, LIST_ACCESS_LEVEL, SHARED_LINK_ACCESS_LEVEL } from '../constants';\nvar SHARED_LINK = ACCESS_POLICY_RESTRICTION.SHARED_LINK,\n  DOWNLOAD = ACCESS_POLICY_RESTRICTION.DOWNLOAD,\n  EXTERNAL_COLLAB = ACCESS_POLICY_RESTRICTION.EXTERNAL_COLLAB,\n  APP = ACCESS_POLICY_RESTRICTION.APP;\nvar DESKTOP = DOWNLOAD_CONTROL.DESKTOP,\n  MOBILE = DOWNLOAD_CONTROL.MOBILE,\n  WEB = DOWNLOAD_CONTROL.WEB;\nvar BLOCK = LIST_ACCESS_LEVEL.BLOCK,\n  WHITELIST = LIST_ACCESS_LEVEL.WHITELIST,\n  BLACKLIST = LIST_ACCESS_LEVEL.BLACKLIST;\nvar COLLAB_ONLY = SHARED_LINK_ACCESS_LEVEL.COLLAB_ONLY,\n  COLLAB_AND_COMPANY_ONLY = SHARED_LINK_ACCESS_LEVEL.COLLAB_AND_COMPANY_ONLY,\n  PUBLIC = SHARED_LINK_ACCESS_LEVEL.PUBLIC;\nvar getShortSecurityControlsMessage = function getShortSecurityControlsMessage(controls) {\n  var sharedLink = controls.sharedLink,\n    download = controls.download,\n    externalCollab = controls.externalCollab,\n    app = controls.app; // Shared link and external collab restrictions are grouped\n  // together as generic \"sharing\" restrictions\n\n  var sharing = sharedLink && sharedLink.accessLevel !== PUBLIC || externalCollab;\n  if (sharing && download && app) {\n    return {\n      message: messages.shortAllRestrictions\n    };\n  }\n  if (sharing && download) {\n    return {\n      message: messages.shortSharingDownload\n    };\n  }\n  if (sharing && app) {\n    return {\n      message: messages.shortSharingApp\n    };\n  }\n  if (download && app) {\n    return {\n      message: messages.shortDownloadApp\n    };\n  }\n  if (sharing) {\n    return {\n      message: messages.shortSharing\n    };\n  }\n  if (download) {\n    return {\n      message: messages.shortDownload\n    };\n  }\n  if (app) {\n    return {\n      message: messages.shortApp\n    };\n  }\n  return null;\n};\nvar getSharedLinkMessages = function getSharedLinkMessages(controls) {\n  var items = [];\n  var accessLevel = getProp(controls, \"\".concat(SHARED_LINK, \".accessLevel\"));\n  switch (accessLevel) {\n    case COLLAB_ONLY:\n      items.push({\n        message: messages.sharingCollabOnly\n      });\n      break;\n    case COLLAB_AND_COMPANY_ONLY:\n      items.push({\n        message: messages.sharingCollabAndCompanyOnly\n      });\n      break;\n    default:\n      // no-op\n      break;\n  }\n  return items;\n};\nvar getExternalCollabMessages = function getExternalCollabMessages(controls) {\n  var items = [];\n  var accessLevel = getProp(controls, \"\".concat(EXTERNAL_COLLAB, \".accessLevel\"));\n  switch (accessLevel) {\n    case BLOCK:\n      items.push({\n        message: messages.externalCollabBlock\n      });\n      break;\n    case WHITELIST:\n    case BLACKLIST:\n      items.push({\n        message: messages.externalCollabDomainList\n      });\n      break;\n    default:\n      // no-op\n      break;\n  }\n  return items;\n};\nvar getAppDownloadMessages = function getAppDownloadMessages(controls, maxAppCount) {\n  var items = [];\n  var accessLevel = getProp(controls, \"\".concat(APP, \".accessLevel\"));\n  switch (accessLevel) {\n    case BLOCK:\n      items.push({\n        message: messages.appDownloadBlock\n      });\n      break;\n    case WHITELIST:\n    case BLACKLIST:\n      {\n        var apps = getProp(controls, \"\".concat(APP, \".apps\"), []);\n        maxAppCount = isNil(maxAppCount) ? apps.length : maxAppCount;\n        var appsToDisplay = apps.slice(0, maxAppCount);\n        var remainingAppCount = apps.slice(maxAppCount).length;\n        var appNames = appsToDisplay.map(function (_ref) {\n          var displayText = _ref.displayText;\n          return displayText;\n        }).join(', ');\n        if (remainingAppCount) {\n          var appsList = apps.map(function (_ref2) {\n            var displayText = _ref2.displayText;\n            return displayText;\n          }).join(', ');\n          items.push({\n            message: _objectSpread({}, appRestrictionsMessageMap[accessLevel].overflow, {\n              values: {\n                appNames: appNames,\n                remainingAppCount: remainingAppCount\n              }\n            }),\n            tooltipMessage: _objectSpread({}, messages.allAppNames, {\n              values: {\n                appsList: appsList\n              }\n            })\n          });\n        } else {\n          items.push({\n            message: _objectSpread({}, appRestrictionsMessageMap[accessLevel].default, {\n              values: {\n                appNames: appNames\n              }\n            })\n          });\n        }\n        break;\n      }\n    default:\n      // no-op\n      break;\n  }\n  return items;\n};\nvar getDownloadMessages = function getDownloadMessages(controls) {\n  var _downloadRestrictions;\n  var items = [];\n  var _getProp = getProp(controls, DOWNLOAD, {}),\n    web = _getProp.web,\n    mobile = _getProp.mobile,\n    desktop = _getProp.desktop;\n  var downloadRestrictions = (_downloadRestrictions = {}, _defineProperty(_downloadRestrictions, WEB, {\n    platform: WEB,\n    restrictions: web\n  }), _defineProperty(_downloadRestrictions, MOBILE, {\n    platform: MOBILE,\n    restrictions: mobile\n  }), _defineProperty(_downloadRestrictions, DESKTOP, {\n    platform: DESKTOP,\n    restrictions: desktop\n  }), _downloadRestrictions);\n  Object.keys(downloadRestrictions).forEach(function (platformKey) {\n    var _downloadRestrictions2 = downloadRestrictions[platformKey],\n      platform = _downloadRestrictions2.platform,\n      restrictions = _downloadRestrictions2.restrictions;\n    if (!restrictions) {\n      return;\n    }\n    var restrictExternalUsers = restrictions.restrictExternalUsers,\n      restrictManagedUsers = restrictions.restrictManagedUsers;\n    if (restrictManagedUsers && restrictExternalUsers) {\n      items.push({\n        message: downloadRestrictionsMessageMap[platform].externalRestricted[restrictManagedUsers]\n      });\n    } else if (restrictManagedUsers) {\n      items.push({\n        message: downloadRestrictionsMessageMap[platform].externalAllowed[restrictManagedUsers]\n      });\n    } else if (restrictExternalUsers) {\n      items.push({\n        message: downloadRestrictionsMessageMap[platform].externalRestricted.default\n      });\n    }\n  });\n  return items;\n};\nvar getFullSecurityControlsMessages = function getFullSecurityControlsMessages(controls, maxAppCount) {\n  var items = [].concat(_toConsumableArray(getSharedLinkMessages(controls)), _toConsumableArray(getExternalCollabMessages(controls)), _toConsumableArray(getDownloadMessages(controls)), _toConsumableArray(getAppDownloadMessages(controls, maxAppCount)));\n  return items;\n};\nexport { getShortSecurityControlsMessage, getFullSecurityControlsMessages };","map":{"version":3,"sources":["../../../../src/features/classification/security-controls/utils.js"],"names":["getProp","isNil","appRestrictionsMessageMap","downloadRestrictionsMessageMap","messages","ACCESS_POLICY_RESTRICTION","DOWNLOAD_CONTROL","LIST_ACCESS_LEVEL","SHARED_LINK_ACCESS_LEVEL","SHARED_LINK","DOWNLOAD","EXTERNAL_COLLAB","APP","DESKTOP","MOBILE","WEB","BLOCK","WHITELIST","BLACKLIST","COLLAB_ONLY","COLLAB_AND_COMPANY_ONLY","PUBLIC","getShortSecurityControlsMessage","controls","sharedLink","download","externalCollab","app","sharing","accessLevel","message","shortAllRestrictions","shortSharingDownload","shortSharingApp","shortDownloadApp","shortSharing","shortDownload","shortApp","getSharedLinkMessages","items","push","sharingCollabOnly","sharingCollabAndCompanyOnly","getExternalCollabMessages","externalCollabBlock","externalCollabDomainList","getAppDownloadMessages","maxAppCount","appDownloadBlock","apps","length","appsToDisplay","slice","remainingAppCount","appNames","map","displayText","join","appsList","overflow","values","tooltipMessage","allAppNames","default","getDownloadMessages","web","mobile","desktop","downloadRestrictions","platform","restrictions","Object","keys","forEach","platformKey","restrictExternalUsers","restrictManagedUsers","externalRestricted","externalAllowed","getFullSecurityControlsMessages"],"mappings":"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","sourcesContent":["// @flow\nimport getProp from 'lodash/get';\nimport isNil from 'lodash/isNil';\n\nimport type { Controls, MessageItem } from '../flowTypes';\n\nimport appRestrictionsMessageMap from './appRestrictionsMessageMap';\nimport downloadRestrictionsMessageMap from './downloadRestrictionsMessageMap';\nimport messages from './messages';\nimport { ACCESS_POLICY_RESTRICTION, DOWNLOAD_CONTROL, LIST_ACCESS_LEVEL, SHARED_LINK_ACCESS_LEVEL } from '../constants';\n\nconst { SHARED_LINK, DOWNLOAD, EXTERNAL_COLLAB, APP } = ACCESS_POLICY_RESTRICTION;\nconst { DESKTOP, MOBILE, WEB } = DOWNLOAD_CONTROL;\nconst { BLOCK, WHITELIST, BLACKLIST } = LIST_ACCESS_LEVEL;\nconst { COLLAB_ONLY, COLLAB_AND_COMPANY_ONLY, PUBLIC } = SHARED_LINK_ACCESS_LEVEL;\n\nconst getShortSecurityControlsMessage = (controls: Controls): ?MessageItem => {\n    const { sharedLink, download, externalCollab, app } = controls;\n    // Shared link and external collab restrictions are grouped\n    // together as generic \"sharing\" restrictions\n    const sharing = (sharedLink && sharedLink.accessLevel !== PUBLIC) || externalCollab;\n\n    if (sharing && download && app) {\n        return { message: messages.shortAllRestrictions };\n    }\n\n    if (sharing && download) {\n        return { message: messages.shortSharingDownload };\n    }\n\n    if (sharing && app) {\n        return { message: messages.shortSharingApp };\n    }\n\n    if (download && app) {\n        return { message: messages.shortDownloadApp };\n    }\n\n    if (sharing) {\n        return { message: messages.shortSharing };\n    }\n\n    if (download) {\n        return { message: messages.shortDownload };\n    }\n\n    if (app) {\n        return { message: messages.shortApp };\n    }\n\n    return null;\n};\n\nconst getSharedLinkMessages = (controls: Controls): Array<MessageItem> => {\n    const items = [];\n    const accessLevel = getProp(controls, `${SHARED_LINK}.accessLevel`);\n\n    switch (accessLevel) {\n        case COLLAB_ONLY:\n            items.push({ message: messages.sharingCollabOnly });\n            break;\n        case COLLAB_AND_COMPANY_ONLY:\n            items.push({ message: messages.sharingCollabAndCompanyOnly });\n            break;\n        default:\n            // no-op\n            break;\n    }\n    return items;\n};\n\nconst getExternalCollabMessages = (controls: Controls): Array<MessageItem> => {\n    const items = [];\n    const accessLevel = getProp(controls, `${EXTERNAL_COLLAB}.accessLevel`);\n\n    switch (accessLevel) {\n        case BLOCK:\n            items.push({ message: messages.externalCollabBlock });\n            break;\n        case WHITELIST:\n        case BLACKLIST:\n            items.push({ message: messages.externalCollabDomainList });\n            break;\n        default:\n            // no-op\n            break;\n    }\n    return items;\n};\n\nconst getAppDownloadMessages = (controls: Controls, maxAppCount?: number): Array<MessageItem> => {\n    const items = [];\n    const accessLevel = getProp(controls, `${APP}.accessLevel`);\n\n    switch (accessLevel) {\n        case BLOCK:\n            items.push({ message: messages.appDownloadBlock });\n            break;\n        case WHITELIST:\n        case BLACKLIST: {\n            const apps = getProp(controls, `${APP}.apps`, []);\n\n            maxAppCount = isNil(maxAppCount) ? apps.length : maxAppCount;\n            const appsToDisplay = apps.slice(0, maxAppCount);\n            const remainingAppCount = apps.slice(maxAppCount).length;\n            const appNames = appsToDisplay.map(({ displayText }) => displayText).join(', ');\n\n            if (remainingAppCount) {\n                const appsList = apps.map(({ displayText }) => displayText).join(', ');\n\n                items.push({\n                    message: {\n                        ...appRestrictionsMessageMap[accessLevel].overflow,\n                        values: { appNames, remainingAppCount },\n                    },\n                    tooltipMessage: {\n                        ...messages.allAppNames,\n                        values: { appsList },\n                    },\n                });\n            } else {\n                items.push({\n                    message: {\n                        ...appRestrictionsMessageMap[accessLevel].default,\n                        values: { appNames },\n                    },\n                });\n            }\n            break;\n        }\n        default:\n            // no-op\n            break;\n    }\n    return items;\n};\n\nconst getDownloadMessages = (controls: Controls): Array<MessageItem> => {\n    const items = [];\n    const { web, mobile, desktop } = getProp(controls, DOWNLOAD, {});\n\n    const downloadRestrictions = {\n        [WEB]: {\n            platform: WEB,\n            restrictions: web,\n        },\n        [MOBILE]: {\n            platform: MOBILE,\n            restrictions: mobile,\n        },\n        [DESKTOP]: {\n            platform: DESKTOP,\n            restrictions: desktop,\n        },\n    };\n\n    Object.keys(downloadRestrictions).forEach(platformKey => {\n        const { platform, restrictions } = downloadRestrictions[platformKey];\n\n        if (!restrictions) {\n            return;\n        }\n        const { restrictExternalUsers, restrictManagedUsers } = restrictions;\n\n        if (restrictManagedUsers && restrictExternalUsers) {\n            items.push({ message: downloadRestrictionsMessageMap[platform].externalRestricted[restrictManagedUsers] });\n        } else if (restrictManagedUsers) {\n            items.push({ message: downloadRestrictionsMessageMap[platform].externalAllowed[restrictManagedUsers] });\n        } else if (restrictExternalUsers) {\n            items.push({ message: downloadRestrictionsMessageMap[platform].externalRestricted.default });\n        }\n    });\n\n    return items;\n};\n\nconst getFullSecurityControlsMessages = (controls: Controls, maxAppCount?: number): Array<MessageItem> => {\n    const items = [\n        ...getSharedLinkMessages(controls),\n        ...getExternalCollabMessages(controls),\n        ...getDownloadMessages(controls),\n        ...getAppDownloadMessages(controls, maxAppCount),\n    ];\n    return items;\n};\n\nexport { getShortSecurityControlsMessage, getFullSecurityControlsMessages };\n"]},"metadata":{},"sourceType":"module"}