{"ast":null,"code":"import filesize from 'filesize';\nvar defaultDigitalUnits = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nvar bcp47TagToDigitalUnits = {\n  fi: ['t', 'kt', 'Mt', 'Gt', 'Tt', 'Pt', 'Et', 'Zt', 'Yt'],\n  fr: ['o', 'Ko', 'Mo', 'Go', 'To', 'Po', 'Eo', 'Zo', 'Yo'],\n  ru: ['Б', 'КБ', 'МБ', 'ГБ', 'ТБ', 'ПБ', 'ЭБ', 'ЗБ', 'ЙБ']\n};\n/**\n * Formats a file size from number of bytes to a human-readable, localized string.\n * @param {number} size Number of bytes\n * @param {string} [locale] Optional locale, defaults to 'en'\n * @returns {string} The size as a localized string\n */\n\nvar getFileSize = function getFileSize(size) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';\n  var settings = {\n    round: 1,\n    locale: locale\n  };\n  var localizedUnits = bcp47TagToDigitalUnits[locale];\n  if (localizedUnits) {\n    // map default units to localized units, ex. { B: Б, KB: КБ, ... }\n    settings.symbols = defaultDigitalUnits.reduce(function (symbols, unit, index) {\n      symbols[unit] = localizedUnits[index];\n      return symbols;\n    }, {});\n  }\n  return filesize(size, settings);\n};\nexport default getFileSize;","map":{"version":3,"sources":["../../src/utils/getFileSize.js"],"names":["filesize","defaultDigitalUnits","bcp47TagToDigitalUnits","fi","fr","ru","getFileSize","size","locale","settings","round","localizedUnits","symbols","reduce","unit","index"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,IAAMC,mBAAmB,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CAA5B;AACA,IAAMC,sBAAsB,GAAG;EAC3BC,EAAE,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CADuB;EAE3BC,EAAE,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CAFuB;EAG3BC,EAAE,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD;AAHuB,CAA/B;AAMA;;;;;;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAyB;EAAA,IAAlBC,MAAkB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAT,IAAS;EACzC,IAAMC,QAAQ,GAAG;IAAEC,KAAK,EAAE,CAAT;IAAYF,MAAM,EAANA;EAAZ,CAAjB;EAEA,IAAMG,cAAc,GAAGT,sBAAsB,CAACM,MAAD,CAA7C;EACA,IAAIG,cAAJ,EAAoB;IAChB;IACAF,QAAQ,CAACG,OAATH,GAAmB,mBAAmB,CAACI,MAApB,CAA2B,UAACD,OAAD,EAAUE,IAAV,EAAgBC,KAAhB,EAA0B;MACpEH,OAAO,CAACE,IAAD,CAAPF,GAAgBD,cAAc,CAACI,KAAD,CAA9BH;MACA,OAAOA,OAAP;IACH,CAHkB,EAGhB,CAAA,CAHgB,CAAnBH;EAIH;EAED,OAAOT,QAAQ,CAACO,IAAD,EAAOE,QAAP,CAAf;AACH,CAbD;AAeA,eAAeH,WAAf","sourcesContent":["import filesize from 'filesize';\n\nconst defaultDigitalUnits = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nconst bcp47TagToDigitalUnits = {\n    fi: ['t', 'kt', 'Mt', 'Gt', 'Tt', 'Pt', 'Et', 'Zt', 'Yt'],\n    fr: ['o', 'Ko', 'Mo', 'Go', 'To', 'Po', 'Eo', 'Zo', 'Yo'],\n    ru: ['Б', 'КБ', 'МБ', 'ГБ', 'ТБ', 'ПБ', 'ЭБ', 'ЗБ', 'ЙБ'],\n};\n\n/**\n * Formats a file size from number of bytes to a human-readable, localized string.\n * @param {number} size Number of bytes\n * @param {string} [locale] Optional locale, defaults to 'en'\n * @returns {string} The size as a localized string\n */\nconst getFileSize = (size, locale = 'en') => {\n    const settings = { round: 1, locale };\n\n    const localizedUnits = bcp47TagToDigitalUnits[locale];\n    if (localizedUnits) {\n        // map default units to localized units, ex. { B: Б, KB: КБ, ... }\n        settings.symbols = defaultDigitalUnits.reduce((symbols, unit, index) => {\n            symbols[unit] = localizedUnits[index];\n            return symbols;\n        }, {});\n    }\n\n    return filesize(size, settings);\n};\n\nexport default getFileSize;\n"]},"metadata":{},"sourceType":"module"}