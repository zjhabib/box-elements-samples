{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Content Preview Component\n * @author Box\n */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueid from 'lodash/uniqueId';\nimport throttle from 'lodash/throttle';\nimport cloneDeep from 'lodash/cloneDeep';\nimport omit from 'lodash/omit';\nimport getProp from 'lodash/get';\nimport flow from 'lodash/flow';\nimport noop from 'lodash/noop';\nimport setProp from 'lodash/set';\nimport Measure from 'react-measure';\nimport { withRouter } from 'react-router-dom';\nimport { decode } from '../../utils/keys';\nimport makeResponsive from '../common/makeResponsive';\nimport { withNavRouter } from '../common/nav-router';\nimport Internationalize from '../common/Internationalize';\nimport AsyncLoad from '../common/async-load';\nimport TokenService from '../../utils/TokenService';\nimport { isInputElement, focus } from '../../utils/dom';\nimport { getTypedFileId } from '../../utils/file';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport { PREVIEW_FIELDS_TO_FETCH } from '../../utils/fields';\nimport { mark } from '../../utils/performance';\nimport { withFeatureProvider } from '../common/feature-checking';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport ReloadNotification from './ReloadNotification';\nimport API from '../../api';\nimport PreviewHeader from './preview-header';\nimport PreviewNavigation from './PreviewNavigation';\nimport PreviewLoading from './PreviewLoading';\nimport { withAnnotations, WithAnnotationsProps, withAnnotatorContext, WithAnnotatorContextProps } from '../common/annotator-context';\nimport { DEFAULT_HOSTNAME_API, DEFAULT_HOSTNAME_APP, DEFAULT_HOSTNAME_STATIC, DEFAULT_PREVIEW_VERSION, DEFAULT_LOCALE, DEFAULT_PATH_STATIC_PREVIEW, CLIENT_NAME_CONTENT_PREVIEW, ORIGIN_PREVIEW, ORIGIN_CONTENT_PREVIEW, ERROR_CODE_UNKNOWN } from '../../constants';\nimport '../common/fonts.scss';\nimport '../common/base.scss';\nimport './ContentPreview.scss';\nvar startAtTypes = {\n  page: 'pages'\n};\nvar InvalidIdError = new Error('Invalid id for Preview!');\nvar PREVIEW_LOAD_METRIC_EVENT = 'load';\nvar MARK_NAME_JS_READY = \"\".concat(ORIGIN_CONTENT_PREVIEW, \"_\").concat(EVENT_JS_READY);\nmark(MARK_NAME_JS_READY);\nvar LoadableSidebar = AsyncLoad({\n  loader: function loader() {\n    return import( /* webpackMode: \"lazy\", webpackChunkName: \"content-sidebar\" */\n    '../content-sidebar');\n  }\n});\nvar ContentPreview = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ContentPreview, _React$PureComponent);\n\n  // Defines a generic type for ContentSidebar, since an import would interfere with code splitting\n\n  /**\n   * [constructor]\n   *\n   * @return {ContentPreview}\n   */\n  function ContentPreview(props) {\n    var _this;\n    _classCallCheck(this, ContentPreview);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContentPreview).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"contentSidebar\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"initialState\", {\n      canPrint: false,\n      error: undefined,\n      isReloadNotificationVisible: false,\n      isThumbnailSidebarOpen: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPreviewError\", function (_ref) {\n      var error = _ref.error,\n        rest = _objectWithoutProperties(_ref, [\"error\"]);\n      var _error$code = error.code,\n        code = _error$code === void 0 ? ERROR_CODE_UNKNOWN : _error$code;\n      var onError = _this.props.onError; // In case of error, there should be no thumbnail sidebar to account for\n\n      _this.setState({\n        isThumbnailSidebarOpen: false\n      });\n      onError(error, code, _objectSpread({}, rest, {\n        error: error\n      }), ORIGIN_PREVIEW);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPreviewMetric\", function (previewMetrics) {\n      var logger = _this.props.logger;\n      var event_name = previewMetrics.event_name;\n      var metrics = _objectSpread({}, previewMetrics); // We need to add in the total file fetch time to the file_info_time and value (total)\n      // as preview does not do the files call\n\n      if (event_name === PREVIEW_LOAD_METRIC_EVENT) {\n        var totalFetchFileTime = _this.getTotalFileFetchTime();\n        var totalTime = (previewMetrics.value || 0) + totalFetchFileTime; // If an unnatural load time occurs or is invalid, don't log a load event\n\n        if (!totalTime) {\n          return;\n        }\n        metrics = _objectSpread({}, previewMetrics, {\n          file_info_time: totalFetchFileTime,\n          value: totalTime\n        });\n      }\n      logger.onPreviewMetric(metrics);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onPreviewLoad\", function (data) {\n      var _this$props = _this.props,\n        onLoad = _this$props.onLoad,\n        collection = _this$props.collection;\n      var currentIndex = _this.getFileIndex();\n      var filesToPrefetch = collection.slice(currentIndex + 1, currentIndex + 5);\n      var previewTimeMetrics = getProp(data, 'metrics.time');\n      var loadData = data;\n      if (previewTimeMetrics) {\n        var totalPreviewMetrics = _this.addFetchFileTimeToPreviewMetrics(previewTimeMetrics);\n        loadData = _objectSpread({}, loadData, {\n          metrics: _objectSpread({}, loadData.metrics, {\n            time: totalPreviewMetrics\n          })\n        });\n      }\n      onLoad(loadData);\n      _this.focusPreview();\n      if (_this.preview && filesToPrefetch.length) {\n        _this.prefetch(filesToPrefetch);\n      }\n      _this.handleCanPrint();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"loadPreview\", /*#__PURE__*/\n    _asyncToGenerator( /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props2, _this$props2$annotato, activeAnnotationId, enableThumbnailsSidebar, fileOptions, onAnnotatorEvent, onAnnotator, showAnnotationsControls, tokenOrTokenFunction, rest, _this$state, file, selectedVersion, startAt, fileId, fileOpts, token, previewOptions, Preview;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props2 = _this.props, _this$props2$annotato = _this$props2.annotatorState;\n              _this$props2$annotato = _this$props2$annotato === void 0 ? {} : _this$props2$annotato;\n              activeAnnotationId = _this$props2$annotato.activeAnnotationId, enableThumbnailsSidebar = _this$props2.enableThumbnailsSidebar, fileOptions = _this$props2.fileOptions, onAnnotatorEvent = _this$props2.onAnnotatorEvent, onAnnotator = _this$props2.onAnnotator, showAnnotationsControls = _this$props2.showAnnotationsControls, tokenOrTokenFunction = _this$props2.token, rest = _objectWithoutProperties(_this$props2, [\"annotatorState\", \"enableThumbnailsSidebar\", \"fileOptions\", \"onAnnotatorEvent\", \"onAnnotator\", \"showAnnotationsControls\", \"token\"]);\n              _this$state = _this.state, file = _this$state.file, selectedVersion = _this$state.selectedVersion, startAt = _this$state.startAt;\n              if (!(!_this.isPreviewLibraryLoaded() || !file || !tokenOrTokenFunction)) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 6:\n              fileId = _this.getFileId(file);\n              if (!(fileId !== _this.state.currentFileId)) {\n                _context.next = 9;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 9:\n              fileOpts = _objectSpread({}, fileOptions);\n              token = function token(typedId) {\n                return TokenService.getReadTokens(typedId, tokenOrTokenFunction);\n              };\n              if (selectedVersion) {\n                setProp(fileOpts, [fileId, 'fileVersionId'], selectedVersion.id);\n                setProp(fileOpts, [fileId, 'currentFileVersionId'], getProp(file, 'file_version.id'));\n              }\n              if (activeAnnotationId) {\n                setProp(fileOpts, [fileId, 'annotations', 'activeId'], activeAnnotationId);\n              }\n              if (startAt) {\n                setProp(fileOpts, [fileId, 'startAt'], startAt);\n              }\n              previewOptions = {\n                container: \"#\".concat(_this.id, \" .bcpr-content\"),\n                enableThumbnailsSidebar: enableThumbnailsSidebar,\n                fileOptions: fileOpts,\n                header: 'none',\n                headerElement: \"#\".concat(_this.id, \" .bcpr-PreviewHeader\"),\n                showAnnotations: _this.canViewAnnotations(),\n                showAnnotationsControls: showAnnotationsControls,\n                showDownload: _this.canDownload(),\n                skipServerUpdate: true,\n                useHotkeys: false\n              };\n              Preview = global.Box.Preview;\n              _this.preview = new Preview();\n              _this.preview.addListener('load', _this.onPreviewLoad);\n              _this.preview.addListener('preview_error', _this.onPreviewError);\n              _this.preview.addListener('preview_metric', _this.onPreviewMetric);\n              _this.preview.addListener('thumbnailsOpen', function () {\n                return _this.setState({\n                  isThumbnailSidebarOpen: true\n                });\n              });\n              _this.preview.addListener('thumbnailsClose', function () {\n                return _this.setState({\n                  isThumbnailSidebarOpen: false\n                });\n              });\n              if (showAnnotationsControls) {\n                _this.preview.addListener('annotator_create', onAnnotator);\n              }\n              _this.preview.updateFileCache([file]);\n              _this.preview.show(file.id, token, _objectSpread({}, previewOptions, {}, omit(rest, Object.keys(previewOptions))));\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n    _defineProperty(_assertThisInitialized(_this), \"loadFileFromStage\", function () {\n      if (_this.stagedFile) {\n        _this.setState(_objectSpread({}, _this.initialState, {\n          file: _this.stagedFile\n        }), function () {\n          _this.stagedFile = undefined;\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"closeReloadNotification\", function () {\n      _this.setState({\n        isReloadNotificationVisible: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function () {\n      if (_this.preview && _this.preview.getCurrentViewer()) {\n        _this.preview.resize();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"fetchFileSuccessCallback\", function (file) {\n      _this.fetchFileEndTime = performance.now();\n      var currentFile = _this.state.file;\n      var isExistingFile = currentFile ? currentFile.id === file.id : false;\n      var isWatermarked = getProp(file, 'watermark_info.is_watermarked', false); // If the file is watermarked or if its a new file, then update the state\n      // In this case preview should reload without prompting the user\n\n      if (isWatermarked || !isExistingFile) {\n        _this.setState(_objectSpread({}, _this.initialState, {\n          file: file\n        })); // $FlowFixMe file version and sha1 should exist at this point\n      } else if (currentFile.file_version.sha1 !== file.file_version.sha1) {\n        // If we are already prevewing the file that got updated then show the\n        // user a notification to reload the file only if its sha1 changed\n        _this.stagedFile = file;\n        _this.setState(_objectSpread({}, _this.initialState, {\n          isReloadNotificationVisible: true\n        }));\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"fetchFileErrorCallback\", function (fileError, code) {\n      var onError = _this.props.onError;\n      var errorCode = fileError.code || code;\n      var error = {\n        code: errorCode,\n        message: fileError.message\n      };\n      _this.setState({\n        error: error,\n        file: undefined\n      });\n      onError(fileError, errorCode, {\n        error: fileError\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPreview\", function () {\n      var file = _this.state.file;\n      if (!_this.preview || !file) {\n        return null;\n      }\n      return _this.preview;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getViewer\", function () {\n      var preview = _this.getPreview();\n      var viewer = preview ? preview.getCurrentViewer() : null;\n      return viewer && viewer.isLoaded() && !viewer.isDestroyed() ? viewer : null;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"navigateLeft\", function () {\n      var currentIndex = _this.getFileIndex();\n      var newIndex = currentIndex === 0 ? 0 : currentIndex - 1;\n      if (newIndex !== currentIndex) {\n        _this.navigateToIndex(newIndex);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"navigateRight\", function () {\n      var collection = _this.props.collection;\n      var currentIndex = _this.getFileIndex();\n      var newIndex = currentIndex === collection.length - 1 ? collection.length - 1 : currentIndex + 1;\n      if (newIndex !== currentIndex) {\n        _this.navigateToIndex(newIndex);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"download\", function () {\n      var onDownload = _this.props.onDownload;\n      var file = _this.state.file;\n      if (_this.preview) {\n        _this.preview.download();\n        onDownload(cloneDeep(file));\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"print\", function () {\n      if (_this.preview) {\n        _this.preview.print();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onMouseMove\", throttle(function () {\n      var viewer = _this.getViewer();\n      var isPreviewing = !!viewer;\n      var CLASS_NAVIGATION_VISIBILITY = 'bcpr-nav-is-visible';\n      clearTimeout(_this.mouseMoveTimeoutID);\n      if (!_this.previewContainer) {\n        return;\n      } // Always assume that navigation arrows will be hidden\n\n      _this.previewContainer.classList.remove(CLASS_NAVIGATION_VISIBILITY); // Only show it if either we aren't previewing or if we are then the viewer\n      // is not blocking the show. If we are previewing then the viewer may choose\n      // to not allow navigation arrows. This is mostly useful for videos since the\n      // navigation arrows may interfere with the settings menu inside video player.\n\n      if (_this.previewContainer && (!isPreviewing || viewer.allowNavigationArrows())) {\n        _this.previewContainer.classList.add(CLASS_NAVIGATION_VISIBILITY);\n      }\n      _this.mouseMoveTimeoutID = setTimeout(function () {\n        if (_this.previewContainer) {\n          _this.previewContainer.classList.remove(CLASS_NAVIGATION_VISIBILITY);\n        }\n      }, 1500);\n    }, 1000));\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (event) {\n      var useHotkeys = _this.props.useHotkeys;\n      if (!useHotkeys) {\n        return;\n      }\n      var consumed = false;\n      var key = decode(event);\n      var viewer = _this.getViewer(); // If focus was on an input or if the viewer doesn't exist\n      // then don't bother doing anything further\n\n      if (!key || !viewer || isInputElement(event.target)) {\n        return;\n      }\n      if (typeof viewer.onKeydown === 'function') {\n        consumed = !!viewer.onKeydown(key, event.nativeEvent);\n      }\n      if (!consumed) {\n        switch (key) {\n          case 'ArrowLeft':\n            _this.navigateLeft();\n            consumed = true;\n            break;\n          case 'ArrowRight':\n            _this.navigateRight();\n            consumed = true;\n            break;\n          default: // no-op\n        }\n      }\n\n      if (consumed) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onVersionChange\", function (version) {\n      var additionalVersionInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var onVersionChange = _this.props.onVersionChange;\n      _this.updateVersionToCurrent = additionalVersionInfo.updateVersionToCurrent;\n      onVersionChange(version, additionalVersionInfo);\n      _this.setState({\n        selectedVersion: version\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleAnnotationSelect\", function (_ref3) {\n      var file_version = _ref3.file_version,\n        id = _ref3.id,\n        target = _ref3.target;\n      var _target$location = target.location,\n        location = _target$location === void 0 ? {} : _target$location;\n      var _this$state2 = _this.state,\n        file = _this$state2.file,\n        selectedVersion = _this$state2.selectedVersion;\n      var annotationFileVersionId = getProp(file_version, 'id');\n      var currentFileVersionId = getProp(file, 'file_version.id');\n      var currentPreviewFileVersionId = getProp(selectedVersion, 'id', currentFileVersionId);\n      var unit = startAtTypes[location.type];\n      var viewer = _this.getViewer();\n      if (unit && annotationFileVersionId && annotationFileVersionId !== currentPreviewFileVersionId) {\n        _this.setState({\n          startAt: {\n            unit: unit,\n            value: location.value\n          }\n        });\n      }\n      if (viewer) {\n        viewer.emit('scrolltoannotation', {\n          id: id,\n          target: target\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"containerRef\", function (container) {\n      _this.previewContainer = container;\n    });\n    var apiHost = props.apiHost,\n      cache = props.cache,\n      _fileId = props.fileId,\n      language = props.language,\n      requestInterceptor = props.requestInterceptor,\n      responseInterceptor = props.responseInterceptor,\n      sharedLink = props.sharedLink,\n      sharedLinkPassword = props.sharedLinkPassword,\n      _token = props.token;\n    _this.id = uniqueid('bcpr_');\n    _this.api = new API({\n      apiHost: apiHost,\n      cache: cache,\n      clientName: CLIENT_NAME_CONTENT_PREVIEW,\n      language: language,\n      requestInterceptor: requestInterceptor,\n      responseInterceptor: responseInterceptor,\n      sharedLink: sharedLink,\n      sharedLinkPassword: sharedLinkPassword,\n      token: _token\n    });\n    _this.state = _objectSpread({}, _this.initialState, {\n      currentFileId: _fileId,\n      // eslint-disable-next-line react/no-unused-state\n      prevFileIdProp: _fileId\n    });\n    var _logger = props.logger;\n    _logger.onReadyMetric({\n      endMarkName: MARK_NAME_JS_READY\n    });\n    return _this;\n  }\n  /**\n   * Cleanup\n   *\n   * @return {void}\n   */\n\n  _createClass(ContentPreview, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Don't destroy the cache while unmounting\n      this.api.destroy(false);\n      this.destroyPreview();\n    }\n    /**\n     * Cleans up the preview instance\n     */\n  }, {\n    key: \"destroyPreview\",\n    value: function destroyPreview() {\n      var shouldReset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var onPreviewDestroy = this.props.onPreviewDestroy;\n      if (this.preview) {\n        this.preview.destroy();\n        this.preview.removeAllListeners();\n        this.preview = undefined;\n        onPreviewDestroy(shouldReset);\n      }\n    }\n    /**\n     * Destroys api instances with caches\n     *\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.api.destroy(true);\n    }\n    /**\n     * Once the component mounts, load Preview assets and fetch file info.\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadStylesheet();\n      this.loadScript();\n      this.fetchFile(this.state.currentFileId);\n      this.focusPreview();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    /**\n     * After component updates, load Preview if appropriate.\n     *\n     * @return {void}\n     */\n    value: function componentDidUpdate(prevProps, prevState) {\n      var token = this.props.token;\n      var prevToken = prevProps.token;\n      var currentFileId = this.state.currentFileId;\n      var hasFileIdChanged = prevState.currentFileId !== currentFileId;\n      var hasTokenChanged = prevToken !== token;\n      if (hasFileIdChanged) {\n        this.destroyPreview();\n        this.setState({\n          selectedVersion: undefined\n        });\n        this.fetchFile(currentFileId);\n      } else if (this.shouldLoadPreview(prevState)) {\n        this.destroyPreview(false);\n        this.loadPreview();\n      } else if (hasTokenChanged) {\n        this.updatePreviewToken();\n      }\n    }\n    /**\n     * Updates the access token used by preview library\n     *\n     * @param {boolean} shouldReload - true if preview should be reloaded\n     */\n  }, {\n    key: \"updatePreviewToken\",\n    value: function updatePreviewToken() {\n      var shouldReload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.preview) {\n        this.preview.updateToken(this.props.token, shouldReload);\n      }\n    }\n    /**\n     * Returns whether or not preview should be loaded.\n     *\n     * @param {State} prevState - Previous state\n     * @return {boolean}\n     */\n  }, {\n    key: \"shouldLoadPreview\",\n    value: function shouldLoadPreview(prevState) {\n      var _this$state3 = this.state,\n        file = _this$state3.file,\n        selectedVersion = _this$state3.selectedVersion;\n      var prevFile = prevState.file,\n        prevSelectedVersion = prevState.selectedVersion;\n      var prevSelectedVersionId = getProp(prevSelectedVersion, 'id');\n      var selectedVersionId = getProp(selectedVersion, 'id');\n      var prevFileVersionId = getProp(prevFile, 'file_version.id');\n      var fileVersionId = getProp(file, 'file_version.id');\n      var loadPreview = false;\n      if (selectedVersionId !== prevSelectedVersionId) {\n        var isPreviousCurrent = fileVersionId === prevSelectedVersionId || !prevSelectedVersionId;\n        var isSelectedCurrent = fileVersionId === selectedVersionId || !selectedVersionId; // Load preview if the user has selected a non-current version of the file\n\n        loadPreview = !isPreviousCurrent || !isSelectedCurrent;\n      } else if (fileVersionId && prevFileVersionId) {\n        // Load preview if the file's current version ID has changed\n        loadPreview = fileVersionId !== prevFileVersionId;\n      } else {\n        // Load preview if file object has newly been populated in state\n        loadPreview = !prevFile && !!file;\n      }\n      return loadPreview;\n    }\n    /**\n     * Returns preview asset urls\n     *\n     * @return {string} base url\n     */\n  }, {\n    key: \"getBasePath\",\n    value: function getBasePath(asset) {\n      var _this$props3 = this.props,\n        staticHost = _this$props3.staticHost,\n        staticPath = _this$props3.staticPath,\n        language = _this$props3.language,\n        previewLibraryVersion = _this$props3.previewLibraryVersion;\n      var path = \"\".concat(staticPath, \"/\").concat(previewLibraryVersion, \"/\").concat(language, \"/\").concat(asset);\n      var suffix = staticHost.endsWith('/') ? path : \"/\".concat(path);\n      return \"\".concat(staticHost).concat(suffix);\n    }\n    /**\n     * Determines if preview assets are loaded\n     *\n     * @return {boolean} true if preview is loaded\n     */\n  }, {\n    key: \"isPreviewLibraryLoaded\",\n    value: function isPreviewLibraryLoaded() {\n      return !!global.Box && !!global.Box.Preview;\n    }\n    /**\n     * Loads external css by appending a <link> element\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"loadStylesheet\",\n    value: function loadStylesheet() {\n      var _document = document,\n        head = _document.head;\n      var url = this.getBasePath('preview.css');\n      if (!head || head.querySelector(\"link[rel=\\\"stylesheet\\\"][href=\\\"\".concat(url, \"\\\"]\"))) {\n        return;\n      }\n      var link = document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = url;\n      head.appendChild(link);\n    }\n    /**\n     * Loads external script by appending a <script> element\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"loadScript\",\n    value: function loadScript() {\n      var _document2 = document,\n        head = _document2.head;\n      var url = this.getBasePath('preview.js');\n      if (!head || this.isPreviewLibraryLoaded()) {\n        return;\n      }\n      var previewScript = head.querySelector(\"script[src=\\\"\".concat(url, \"\\\"]\"));\n      if (previewScript) {\n        return;\n      }\n      var script = document.createElement('script');\n      script.src = url;\n      script.addEventListener('load', this.loadPreview);\n      head.appendChild(script);\n    }\n    /**\n     * Focuses the preview on load.\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"focusPreview\",\n    value: function focusPreview() {\n      var _this$props4 = this.props,\n        autoFocus = _this$props4.autoFocus,\n        getInnerRef = _this$props4.getInnerRef;\n      if (autoFocus && !isInputElement(document.activeElement)) {\n        focus(getInnerRef());\n      }\n    }\n    /**\n     * Updates preview cache and prefetches a file\n     *\n     * @param {BoxItem} file - file to prefetch\n     * @return {void}\n     */\n  }, {\n    key: \"updatePreviewCacheAndPrefetch\",\n    value: function updatePreviewCacheAndPrefetch(file, token) {\n      if (!this.preview || !file || !file.id) {\n        return;\n      }\n      this.preview.updateFileCache([file]);\n      this.preview.prefetch({\n        fileId: file.id,\n        token: token\n      });\n    }\n    /**\n     * Gets the file id\n     *\n     * @param {string|BoxItem} file - box file or file id\n     * @return {string} file id\n     */\n  }, {\n    key: \"getFileId\",\n    value: function getFileId(file) {\n      if (typeof file === 'string') {\n        return file;\n      }\n      if (_typeof(file) === 'object' && !!file.id) {\n        return file.id;\n      }\n      throw InvalidIdError;\n    }\n    /**\n     * Prefetches the next few preview files if any\n     *\n     * @param {Array<string|BoxItem>} files - files to prefetch\n     * @return {void}\n     */\n  }, {\n    key: \"prefetch\",\n    value: function () {\n      var _prefetch = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(files) {\n        var _this2 = this;\n        var token, typedIds;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                token = this.props.token;\n                typedIds = files.map(function (file) {\n                  return getTypedFileId(_this2.getFileId(file));\n                });\n                _context2.next = 4;\n                return TokenService.cacheTokens(typedIds, token);\n              case 4:\n                files.forEach(function (file) {\n                  var fileId = _this2.getFileId(file);\n                  _this2.fetchFile(fileId, noop, noop, {\n                    refreshCache: false\n                  });\n                });\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function prefetch(_x) {\n        return _prefetch.apply(this, arguments);\n      }\n      return prefetch;\n    }()\n    /**\n     * Calculates the total file fetch time\n     *\n     * @return {number} the total fetch time\n     */\n  }, {\n    key: \"getTotalFileFetchTime\",\n    value: function getTotalFileFetchTime() {\n      if (!this.fetchFileStartTime || !this.fetchFileEndTime) {\n        return 0;\n      }\n      return Math.round(this.fetchFileEndTime - this.fetchFileStartTime);\n    }\n    /**\n     * Handler for 'preview_error' preview event\n     *\n     * @param {PreviewLibraryError} previewError - the error data emitted from preview\n     * @return {void}\n     */\n  }, {\n    key: \"addFetchFileTimeToPreviewMetrics\",\n    /**\n     * Adds in the file fetch time to the preview metrics\n     *\n     * @param {Object} previewTimeMetrics - the preview time metrics\n     * @return {Object} the preview time metrics merged with the files call time\n     */\n    value: function addFetchFileTimeToPreviewMetrics(previewTimeMetrics) {\n      var totalFetchFileTime = this.getTotalFileFetchTime();\n      var rendering = previewTimeMetrics.rendering,\n        conversion = previewTimeMetrics.conversion,\n        preload = previewTimeMetrics.preload; // We need to add in the total file fetch time to the rendering and total as preview\n      // does not do the files call. In the case the file is in the process of\n      // being converted, we need to add to conversion instead of the render\n\n      var totalConversion = conversion;\n      var totalRendering = rendering;\n      var totalPreload = preload;\n      if (conversion) {\n        totalConversion += totalFetchFileTime;\n      } else {\n        totalRendering += totalFetchFileTime;\n      }\n      if (totalPreload) {\n        // Preload is optional, depending on file type\n        totalPreload += totalFetchFileTime;\n      }\n      var previewMetrics = {\n        conversion: totalConversion,\n        rendering: totalRendering,\n        total: totalRendering + totalConversion,\n        preload: totalPreload\n      };\n      return previewMetrics;\n    }\n    /**\n     * onLoad function for preview\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"canDownload\",\n    /**\n     * Returns whether file can be downloaded based on file properties, permissions, and user-defined options.\n     *\n     * @return {boolean}\n     */\n    value: function canDownload() {\n      var canDownload = this.props.canDownload;\n      var file = this.state.file;\n      var isFileDownloadable = getProp(file, 'permissions.can_download', false) && getProp(file, 'is_download_available', false);\n      return isFileDownloadable && !!canDownload;\n    }\n    /**\n     * Returns whether file can be annotated based on permissions\n     *\n     * @return {boolean}\n     */\n  }, {\n    key: \"canAnnotate\",\n    value: function canAnnotate() {\n      var showAnnotations = this.props.showAnnotations;\n      var file = this.state.file;\n      var isFileAnnotatable = getProp(file, 'permissions.can_annotate', false);\n      return !!showAnnotations && isFileAnnotatable;\n    }\n    /**\n     * Returns whether a preview should render annotations based on permissions\n     *\n     * @return {boolean}\n     */\n  }, {\n    key: \"canViewAnnotations\",\n    value: function canViewAnnotations() {\n      var showAnnotations = this.props.showAnnotations;\n      var file = this.state.file;\n      var hasViewAllPermissions = getProp(file, 'permissions.can_view_annotations_all', false);\n      var hasViewSelfPermissions = getProp(file, 'permissions.can_view_annotations_self', false);\n      return !!showAnnotations && (this.canAnnotate() || hasViewAllPermissions || hasViewSelfPermissions);\n    }\n  }, {\n    key: \"handleCanPrint\",\n    value: function handleCanPrint() {\n      var preview = this.getPreview();\n      this.setState({\n        canPrint: !!preview && (!preview.canPrint || preview.canPrint())\n      });\n    }\n    /**\n     * Loads preview in the component using the preview library.\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"fetchFile\",\n    /**\n     * Fetches a file\n     *\n     * @param {string} id file id\n     * @param {Function|void} [successCallback] - Callback after file is fetched\n     * @param {Function|void} [errorCallback] - Callback after error\n     * @param {Object|void} [fetchOptions] - Fetch options\n     * @return {void}\n     */\n    value: function fetchFile(id, successCallback, errorCallback) {\n      var fetchOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      if (!id) {\n        return;\n      }\n      this.fetchFileStartTime = performance.now();\n      this.fetchFileEndTime = null;\n      this.api.getFileAPI().getFile(id, successCallback || this.fetchFileSuccessCallback, errorCallback || this.fetchFileErrorCallback, _objectSpread({}, fetchOptions, {\n        fields: PREVIEW_FIELDS_TO_FETCH\n      }));\n    }\n    /**\n     * Returns the preview instance\n     *\n     * @return {Preview} current instance of preview\n     */\n  }, {\n    key: \"getFileIndex\",\n    /**\n     * Finds the index of current file inside the collection\n     *\n     * @return {number} -1 if not indexed\n     */\n    value: function getFileIndex() {\n      var currentFileId = this.state.currentFileId;\n      var collection = this.props.collection;\n      if (!currentFileId || collection.length < 2) {\n        return -1;\n      }\n      return collection.findIndex(function (item) {\n        if (typeof item === 'string') {\n          return item === currentFileId;\n        }\n        return item.id === currentFileId;\n      });\n    }\n    /**\n     * Shows a preview of a file at the specified index in the current collection.\n     *\n     * @public\n     * @param {number} index - Index of file to preview\n     * @return {void}\n     */\n  }, {\n    key: \"navigateToIndex\",\n    value: function navigateToIndex(index) {\n      var _this$props5 = this.props,\n        collection = _this$props5.collection,\n        onNavigate = _this$props5.onNavigate;\n      var length = collection.length;\n      if (length < 2 || index < 0 || index > length - 1) {\n        return;\n      }\n      var fileOrId = collection[index];\n      var fileId = _typeof(fileOrId) === 'object' ? fileOrId.id || '' : fileOrId;\n      this.setState({\n        currentFileId: fileId\n      }, function () {\n        // Execute navigation callback\n        onNavigate(fileId);\n      });\n    }\n    /**\n     * Shows a preview of the previous file.\n     *\n     * @public\n     * @return {void}\n     */\n  }, {\n    key: \"refreshSidebar\",\n    /**\n     * Refreshes the content sidebar panel\n     *\n     * @return {void}\n     */\n    value: function refreshSidebar() {\n      var contentSidebar = this.contentSidebar.current;\n      if (contentSidebar) {\n        contentSidebar.refresh();\n      }\n    }\n    /**\n     * Renders the file preview\n     *\n     * @inheritdoc\n     * @return {Element}\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        apiHost = _this$props6.apiHost,\n        collection = _this$props6.collection,\n        token = _this$props6.token,\n        language = _this$props6.language,\n        messages = _this$props6.messages,\n        className = _this$props6.className,\n        contentSidebarProps = _this$props6.contentSidebarProps,\n        contentOpenWithProps = _this$props6.contentOpenWithProps,\n        hasHeader = _this$props6.hasHeader,\n        history = _this$props6.history,\n        isLarge = _this$props6.isLarge,\n        isVeryLarge = _this$props6.isVeryLarge,\n        logoUrl = _this$props6.logoUrl,\n        onClose = _this$props6.onClose,\n        measureRef = _this$props6.measureRef,\n        sharedLink = _this$props6.sharedLink,\n        sharedLinkPassword = _this$props6.sharedLinkPassword,\n        requestInterceptor = _this$props6.requestInterceptor,\n        responseInterceptor = _this$props6.responseInterceptor;\n      var _this$state4 = this.state,\n        canPrint = _this$state4.canPrint,\n        error = _this$state4.error,\n        file = _this$state4.file,\n        isReloadNotificationVisible = _this$state4.isReloadNotificationVisible,\n        currentFileId = _this$state4.currentFileId,\n        isThumbnailSidebarOpen = _this$state4.isThumbnailSidebarOpen,\n        selectedVersion = _this$state4.selectedVersion;\n      var styleClassName = classNames('be bcpr', {\n        'bcpr-thumbnails-open': isThumbnailSidebarOpen\n      }, className);\n      if (!currentFileId) {\n        return null;\n      }\n      var errorCode = getProp(error, 'code');\n      var currentVersionId = getProp(file, 'file_version.id');\n      var selectedVersionId = getProp(selectedVersion, 'id', currentVersionId);\n      var onHeaderClose = currentVersionId === selectedVersionId ? onClose : this.updateVersionToCurrent;\n      /* eslint-disable jsx-a11y/no-static-element-interactions */\n\n      /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n\n      return React.createElement(Internationalize, {\n        language: language,\n        messages: messages\n      }, React.createElement(\"div\", {\n        id: this.id,\n        className: styleClassName,\n        ref: measureRef,\n        onKeyDown: this.onKeyDown,\n        tabIndex: 0\n      }, hasHeader && React.createElement(PreviewHeader, {\n        file: file,\n        logoUrl: logoUrl,\n        token: token,\n        onClose: onHeaderClose,\n        onPrint: this.print,\n        canDownload: this.canDownload(),\n        canPrint: canPrint,\n        onDownload: this.download,\n        contentOpenWithProps: contentOpenWithProps,\n        canAnnotate: this.canAnnotate(),\n        selectedVersion: selectedVersion\n      }), React.createElement(\"div\", {\n        className: \"bcpr-body\"\n      }, React.createElement(\"div\", {\n        className: \"bcpr-container\",\n        onMouseMove: this.onMouseMove,\n        ref: this.containerRef\n      }, file ? React.createElement(Measure, {\n        bounds: true,\n        onResize: this.onResize\n      }, function (_ref4) {\n        var previewRef = _ref4.measureRef;\n        return React.createElement(\"div\", {\n          ref: previewRef,\n          className: \"bcpr-content\"\n        });\n      }) : React.createElement(\"div\", {\n        className: \"bcpr-loading-wrapper\"\n      }, React.createElement(PreviewLoading, {\n        errorCode: errorCode,\n        isLoading: !errorCode,\n        loadingIndicatorProps: {\n          size: 'large'\n        }\n      })), React.createElement(PreviewNavigation, {\n        collection: collection,\n        currentIndex: this.getFileIndex(),\n        onNavigateLeft: this.navigateLeft,\n        onNavigateRight: this.navigateRight\n      })), file && React.createElement(LoadableSidebar, _extends({}, contentSidebarProps, {\n        apiHost: apiHost,\n        token: token,\n        cache: this.api.getCache(),\n        fileId: currentFileId,\n        getPreview: this.getPreview,\n        getViewer: this.getViewer,\n        history: history,\n        isDefaultOpen: isLarge || isVeryLarge,\n        language: language,\n        ref: this.contentSidebar,\n        sharedLink: sharedLink,\n        sharedLinkPassword: sharedLinkPassword,\n        requestInterceptor: requestInterceptor,\n        responseInterceptor: responseInterceptor,\n        onAnnotationSelect: this.handleAnnotationSelect,\n        onVersionChange: this.onVersionChange\n      }))), isReloadNotificationVisible && React.createElement(ReloadNotification, {\n        onClose: this.closeReloadNotification,\n        onClick: this.loadFileFromStage\n      })));\n      /* eslint-enable jsx-a11y/no-static-element-interactions */\n\n      /* eslint-enable jsx-a11y/no-noninteractive-tabindex */\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var fileId = props.fileId;\n      if (fileId !== state.prevFileIdProp) {\n        return {\n          currentFileId: fileId,\n          prevFileIdProp: fileId\n        };\n      }\n      return null;\n    }\n  }]);\n  return ContentPreview;\n}(React.PureComponent);\n_defineProperty(ContentPreview, \"defaultProps\", {\n  apiHost: DEFAULT_HOSTNAME_API,\n  appHost: DEFAULT_HOSTNAME_APP,\n  autoFocus: false,\n  canDownload: true,\n  className: '',\n  collection: [],\n  contentOpenWithProps: {},\n  contentSidebarProps: {},\n  enableThumbnailsSidebar: false,\n  hasHeader: false,\n  language: DEFAULT_LOCALE,\n  onAnnotator: noop,\n  onAnnotatorEvent: noop,\n  onDownload: noop,\n  onError: noop,\n  onLoad: noop,\n  onNavigate: noop,\n  onPreviewDestroy: noop,\n  onVersionChange: noop,\n  previewLibraryVersion: DEFAULT_PREVIEW_VERSION,\n  showAnnotations: false,\n  staticHost: DEFAULT_HOSTNAME_STATIC,\n  staticPath: DEFAULT_PATH_STATIC_PREVIEW,\n  useHotkeys: true\n});\nexport { ContentPreview as ContentPreviewComponent };\nexport default flow([makeResponsive, withAnnotatorContext, withAnnotations, withRouter, withNavRouter, withFeatureProvider, withLogger(ORIGIN_CONTENT_PREVIEW), withErrorBoundary(ORIGIN_CONTENT_PREVIEW)])(ContentPreview);","map":{"version":3,"sources":["../../../src/elements/content-preview/ContentPreview.js"],"names":["React","classNames","uniqueid","throttle","cloneDeep","omit","getProp","flow","noop","setProp","Measure","withRouter","decode","makeResponsive","withNavRouter","Internationalize","AsyncLoad","TokenService","isInputElement","focus","getTypedFileId","withErrorBoundary","withLogger","PREVIEW_FIELDS_TO_FETCH","mark","withFeatureProvider","EVENT_JS_READY","ReloadNotification","API","PreviewHeader","PreviewNavigation","PreviewLoading","withAnnotations","WithAnnotationsProps","withAnnotatorContext","WithAnnotatorContextProps","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_APP","DEFAULT_HOSTNAME_STATIC","DEFAULT_PREVIEW_VERSION","DEFAULT_LOCALE","DEFAULT_PATH_STATIC_PREVIEW","CLIENT_NAME_CONTENT_PREVIEW","ORIGIN_PREVIEW","ORIGIN_CONTENT_PREVIEW","ERROR_CODE_UNKNOWN","startAtTypes","page","InvalidIdError","Error","PREVIEW_LOAD_METRIC_EVENT","MARK_NAME_JS_READY","LoadableSidebar","loader","ContentPreview","PureComponent","createRef","canPrint","error","undefined","isReloadNotificationVisible","isThumbnailSidebarOpen","apiHost","appHost","autoFocus","canDownload","className","collection","contentOpenWithProps","contentSidebarProps","enableThumbnailsSidebar","hasHeader","language","onAnnotator","onAnnotatorEvent","onDownload","onError","onLoad","onNavigate","onPreviewDestroy","onVersionChange","previewLibraryVersion","showAnnotations","staticHost","staticPath","useHotkeys","props","cache","fileId","requestInterceptor","responseInterceptor","sharedLink","sharedLinkPassword","token","id","api","clientName","state","initialState","currentFileId","prevFileIdProp","logger","onReadyMetric","endMarkName","destroy","destroyPreview","shouldReset","preview","removeAllListeners","loadStylesheet","loadScript","fetchFile","focusPreview","prevProps","prevState","prevToken","hasFileIdChanged","hasTokenChanged","setState","selectedVersion","shouldLoadPreview","loadPreview","updatePreviewToken","shouldReload","updateToken","file","prevFile","prevSelectedVersion","prevSelectedVersionId","selectedVersionId","prevFileVersionId","fileVersionId","isPreviousCurrent","isSelectedCurrent","asset","path","suffix","endsWith","global","Box","Preview","head","document","url","getBasePath","querySelector","link","createElement","rel","type","href","appendChild","isPreviewLibraryLoaded","previewScript","script","src","addEventListener","getInnerRef","activeElement","updateFileCache","prefetch","files","typedIds","map","getFileId","cacheTokens","forEach","refreshCache","fetchFileStartTime","fetchFileEndTime","Math","round","rest","code","previewMetrics","event_name","metrics","totalFetchFileTime","getTotalFileFetchTime","totalTime","value","file_info_time","onPreviewMetric","previewTimeMetrics","rendering","conversion","preload","totalConversion","totalRendering","totalPreload","total","data","currentIndex","getFileIndex","filesToPrefetch","slice","loadData","totalPreviewMetrics","addFetchFileTimeToPreviewMetrics","time","length","handleCanPrint","isFileDownloadable","isFileAnnotatable","hasViewAllPermissions","hasViewSelfPermissions","canAnnotate","getPreview","annotatorState","activeAnnotationId","fileOptions","showAnnotationsControls","tokenOrTokenFunction","startAt","fileOpts","getReadTokens","typedId","previewOptions","container","header","headerElement","canViewAnnotations","showDownload","skipServerUpdate","addListener","onPreviewLoad","onPreviewError","show","Object","keys","stagedFile","getCurrentViewer","resize","performance","now","currentFile","isExistingFile","isWatermarked","file_version","sha1","fileError","errorCode","message","successCallback","errorCallback","fetchOptions","getFileAPI","getFile","fetchFileSuccessCallback","fetchFileErrorCallback","fields","viewer","isLoaded","isDestroyed","findIndex","item","index","fileOrId","newIndex","navigateToIndex","download","print","getViewer","isPreviewing","CLASS_NAVIGATION_VISIBILITY","clearTimeout","mouseMoveTimeoutID","previewContainer","classList","remove","allowNavigationArrows","add","setTimeout","event","consumed","key","target","onKeydown","nativeEvent","navigateLeft","navigateRight","preventDefault","stopPropagation","version","additionalVersionInfo","updateVersionToCurrent","location","annotationFileVersionId","currentFileVersionId","currentPreviewFileVersionId","unit","emit","current","contentSidebar","refresh","messages","history","isLarge","isVeryLarge","logoUrl","onClose","measureRef","styleClassName","currentVersionId","onHeaderClose","onKeyDown","onMouseMove","containerRef","onResize","previewRef","size","getCache","handleAnnotationSelect","closeReloadNotification","loadFileFromStage","ContentPreviewComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Content Preview Component\n * @author Box\n */\n\nimport 'regenerator-runtime/runtime';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueid from 'lodash/uniqueId';\nimport throttle from 'lodash/throttle';\nimport cloneDeep from 'lodash/cloneDeep';\nimport omit from 'lodash/omit';\nimport getProp from 'lodash/get';\nimport flow from 'lodash/flow';\nimport noop from 'lodash/noop';\nimport setProp from 'lodash/set';\nimport Measure from 'react-measure';\nimport { withRouter } from 'react-router-dom';\nimport type { ContextRouter } from 'react-router-dom';\nimport { decode } from '../../utils/keys';\nimport makeResponsive from '../common/makeResponsive';\nimport { withNavRouter } from '../common/nav-router';\nimport Internationalize from '../common/Internationalize';\nimport AsyncLoad from '../common/async-load';\nimport TokenService from '../../utils/TokenService';\nimport { isInputElement, focus } from '../../utils/dom';\nimport { getTypedFileId } from '../../utils/file';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport { PREVIEW_FIELDS_TO_FETCH } from '../../utils/fields';\nimport { mark } from '../../utils/performance';\nimport { withFeatureProvider } from '../common/feature-checking';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport ReloadNotification from './ReloadNotification';\nimport API from '../../api';\nimport PreviewHeader from './preview-header';\nimport PreviewNavigation from './PreviewNavigation';\nimport PreviewLoading from './PreviewLoading';\nimport {\n    withAnnotations,\n    WithAnnotationsProps,\n    withAnnotatorContext,\n    WithAnnotatorContextProps,\n} from '../common/annotator-context';\nimport {\n    DEFAULT_HOSTNAME_API,\n    DEFAULT_HOSTNAME_APP,\n    DEFAULT_HOSTNAME_STATIC,\n    DEFAULT_PREVIEW_VERSION,\n    DEFAULT_LOCALE,\n    DEFAULT_PATH_STATIC_PREVIEW,\n    CLIENT_NAME_CONTENT_PREVIEW,\n    ORIGIN_PREVIEW,\n    ORIGIN_CONTENT_PREVIEW,\n    ERROR_CODE_UNKNOWN,\n} from '../../constants';\nimport type { Annotation } from '../../common/types/feed';\nimport type { ErrorType, AdditionalVersionInfo } from '../common/flowTypes';\nimport type { WithLoggerProps } from '../../common/types/logging';\nimport type { RequestOptions, ErrorContextProps, ElementsXhrError } from '../../common/types/api';\nimport type { StringMap, Token, BoxItem, BoxItemVersion } from '../../common/types/core';\nimport type { VersionChangeCallback } from '../content-sidebar/versions';\nimport type { FeatureConfig } from '../common/feature-checking';\nimport type APICache from '../../utils/Cache';\n\nimport '../common/fonts.scss';\nimport '../common/base.scss';\nimport './ContentPreview.scss';\n\ntype StartAt = {\n    unit: 'pages' | 'seconds',\n    value: number,\n};\n\ntype Props = {\n    apiHost: string,\n    appHost: string,\n    autoFocus: boolean,\n    boxAnnotations?: Object,\n    cache?: APICache,\n    canDownload?: boolean,\n    className: string,\n    collection: Array<string | BoxItem>,\n    contentOpenWithProps: ContentOpenWithProps,\n    contentSidebarProps: ContentSidebarProps,\n    enableThumbnailsSidebar: boolean,\n    features?: FeatureConfig,\n    fileId?: string,\n    fileOptions?: Object,\n    getInnerRef: () => ?HTMLElement,\n    hasHeader?: boolean,\n    isLarge: boolean,\n    isVeryLarge?: boolean,\n    language: string,\n    logoUrl?: string,\n    measureRef: Function,\n    messages?: StringMap,\n    onAnnotator: Function,\n    onAnnotatorEvent: Function,\n    onClose?: Function,\n    onDownload: Function,\n    onLoad: Function,\n    onNavigate: Function,\n    onVersionChange: VersionChangeCallback,\n    previewLibraryVersion: string,\n    requestInterceptor?: Function,\n    responseInterceptor?: Function,\n    sharedLink?: string,\n    sharedLinkPassword?: string,\n    showAnnotations?: boolean,\n    showAnnotationsControls?: boolean,\n    staticHost: string,\n    staticPath: string,\n    token: Token,\n    useHotkeys: boolean,\n} & ErrorContextProps &\n    WithLoggerProps &\n    WithAnnotationsProps &\n    WithAnnotatorContextProps &\n    ContextRouter;\n\ntype State = {\n    canPrint?: boolean,\n    currentFileId?: string,\n    error?: ErrorType,\n    file?: BoxItem,\n    isReloadNotificationVisible: boolean,\n    isThumbnailSidebarOpen: boolean,\n    prevFileIdProp?: string, // the previous value of the \"fileId\" prop. Needed to implement getDerivedStateFromProps\n    selectedVersion?: BoxItemVersion,\n    startAt?: StartAt,\n};\n\n// Emitted by preview's 'load' event\ntype PreviewTimeMetrics = {\n    conversion: number,\n    preload?: number,\n    rendering: number,\n    total: number,\n};\n\n// Emitted by preview's 'preview_metric' event\ntype PreviewMetrics = {\n    browser_name: string,\n    client_version: string,\n    content_type: string, // Sum of all available load times.\n    convert_time: number,\n    download_response_time: number,\n    error?: Object,\n    event_name?: string,\n    extension: string,\n    file_id: string,\n    file_info_time: number,\n    file_version_id: string,\n    full_document_load_time: number,\n    locale: string,\n    logger_session_id: string,\n    rep_type: string,\n    timestamp: string,\n    value: number,\n};\n\ntype PreviewLibraryError = {\n    error: ErrorType,\n};\n\nconst startAtTypes = {\n    page: 'pages',\n};\nconst InvalidIdError = new Error('Invalid id for Preview!');\nconst PREVIEW_LOAD_METRIC_EVENT = 'load';\nconst MARK_NAME_JS_READY = `${ORIGIN_CONTENT_PREVIEW}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nconst LoadableSidebar = AsyncLoad({\n    loader: () => import(/* webpackMode: \"lazy\", webpackChunkName: \"content-sidebar\" */ '../content-sidebar'),\n});\n\nclass ContentPreview extends React.PureComponent<Props, State> {\n    id: string;\n\n    props: Props;\n\n    state: State;\n\n    preview: any;\n\n    api: API;\n\n    // Defines a generic type for ContentSidebar, since an import would interfere with code splitting\n    contentSidebar: { current: null | { refresh: Function } } = React.createRef();\n\n    previewContainer: ?HTMLDivElement;\n\n    mouseMoveTimeoutID: TimeoutID;\n\n    rootElement: HTMLElement;\n\n    stagedFile: ?BoxItem;\n\n    updateVersionToCurrent: ?() => void;\n\n    initialState: State = {\n        canPrint: false,\n        error: undefined,\n        isReloadNotificationVisible: false,\n        isThumbnailSidebarOpen: false,\n    };\n\n    static defaultProps = {\n        apiHost: DEFAULT_HOSTNAME_API,\n        appHost: DEFAULT_HOSTNAME_APP,\n        autoFocus: false,\n        canDownload: true,\n        className: '',\n        collection: [],\n        contentOpenWithProps: {},\n        contentSidebarProps: {},\n        enableThumbnailsSidebar: false,\n        hasHeader: false,\n        language: DEFAULT_LOCALE,\n        onAnnotator: noop,\n        onAnnotatorEvent: noop,\n        onDownload: noop,\n        onError: noop,\n        onLoad: noop,\n        onNavigate: noop,\n        onPreviewDestroy: noop,\n        onVersionChange: noop,\n        previewLibraryVersion: DEFAULT_PREVIEW_VERSION,\n        showAnnotations: false,\n        staticHost: DEFAULT_HOSTNAME_STATIC,\n        staticPath: DEFAULT_PATH_STATIC_PREVIEW,\n        useHotkeys: true,\n    };\n\n    /**\n     * @property {number}\n     */\n    fetchFileEndTime: ?number;\n\n    /**\n     * @property {number}\n     */\n    fetchFileStartTime: ?number;\n\n    /**\n     * [constructor]\n     *\n     * @return {ContentPreview}\n     */\n    constructor(props: Props) {\n        super(props);\n        const {\n            apiHost,\n            cache,\n            fileId,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            sharedLink,\n            sharedLinkPassword,\n            token,\n        } = props;\n\n        this.id = uniqueid('bcpr_');\n        this.api = new API({\n            apiHost,\n            cache,\n            clientName: CLIENT_NAME_CONTENT_PREVIEW,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            sharedLink,\n            sharedLinkPassword,\n            token,\n        });\n        this.state = {\n            ...this.initialState,\n            currentFileId: fileId,\n            // eslint-disable-next-line react/no-unused-state\n            prevFileIdProp: fileId,\n        };\n        const { logger } = props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    /**\n     * Cleanup\n     *\n     * @return {void}\n     */\n    componentWillUnmount(): void {\n        // Don't destroy the cache while unmounting\n        this.api.destroy(false);\n        this.destroyPreview();\n    }\n\n    /**\n     * Cleans up the preview instance\n     */\n    destroyPreview(shouldReset: boolean = true) {\n        const { onPreviewDestroy } = this.props;\n        if (this.preview) {\n            this.preview.destroy();\n            this.preview.removeAllListeners();\n            this.preview = undefined;\n\n            onPreviewDestroy(shouldReset);\n        }\n    }\n\n    /**\n     * Destroys api instances with caches\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Once the component mounts, load Preview assets and fetch file info.\n     *\n     * @return {void}\n     */\n    componentDidMount(): void {\n        this.loadStylesheet();\n        this.loadScript();\n\n        this.fetchFile(this.state.currentFileId);\n        this.focusPreview();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        const { fileId } = props;\n\n        if (fileId !== state.prevFileIdProp) {\n            return {\n                currentFileId: fileId,\n                prevFileIdProp: fileId,\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * After component updates, load Preview if appropriate.\n     *\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props, prevState: State): void {\n        const { token } = this.props;\n        const { token: prevToken } = prevProps;\n        const { currentFileId } = this.state;\n        const hasFileIdChanged = prevState.currentFileId !== currentFileId;\n        const hasTokenChanged = prevToken !== token;\n\n        if (hasFileIdChanged) {\n            this.destroyPreview();\n            this.setState({ selectedVersion: undefined });\n            this.fetchFile(currentFileId);\n        } else if (this.shouldLoadPreview(prevState)) {\n            this.destroyPreview(false);\n            this.loadPreview();\n        } else if (hasTokenChanged) {\n            this.updatePreviewToken();\n        }\n    }\n\n    /**\n     * Updates the access token used by preview library\n     *\n     * @param {boolean} shouldReload - true if preview should be reloaded\n     */\n    updatePreviewToken(shouldReload: boolean = false) {\n        if (this.preview) {\n            this.preview.updateToken(this.props.token, shouldReload);\n        }\n    }\n\n    /**\n     * Returns whether or not preview should be loaded.\n     *\n     * @param {State} prevState - Previous state\n     * @return {boolean}\n     */\n    shouldLoadPreview(prevState: State): boolean {\n        const { file, selectedVersion }: State = this.state;\n        const { file: prevFile, selectedVersion: prevSelectedVersion }: State = prevState;\n        const prevSelectedVersionId = getProp(prevSelectedVersion, 'id');\n        const selectedVersionId = getProp(selectedVersion, 'id');\n        const prevFileVersionId = getProp(prevFile, 'file_version.id');\n        const fileVersionId = getProp(file, 'file_version.id');\n        let loadPreview = false;\n\n        if (selectedVersionId !== prevSelectedVersionId) {\n            const isPreviousCurrent = fileVersionId === prevSelectedVersionId || !prevSelectedVersionId;\n            const isSelectedCurrent = fileVersionId === selectedVersionId || !selectedVersionId;\n\n            // Load preview if the user has selected a non-current version of the file\n            loadPreview = !isPreviousCurrent || !isSelectedCurrent;\n        } else if (fileVersionId && prevFileVersionId) {\n            // Load preview if the file's current version ID has changed\n            loadPreview = fileVersionId !== prevFileVersionId;\n        } else {\n            // Load preview if file object has newly been populated in state\n            loadPreview = !prevFile && !!file;\n        }\n\n        return loadPreview;\n    }\n\n    /**\n     * Returns preview asset urls\n     *\n     * @return {string} base url\n     */\n    getBasePath(asset: string): string {\n        const { staticHost, staticPath, language, previewLibraryVersion }: Props = this.props;\n        const path: string = `${staticPath}/${previewLibraryVersion}/${language}/${asset}`;\n        const suffix: string = staticHost.endsWith('/') ? path : `/${path}`;\n        return `${staticHost}${suffix}`;\n    }\n\n    /**\n     * Determines if preview assets are loaded\n     *\n     * @return {boolean} true if preview is loaded\n     */\n    isPreviewLibraryLoaded(): boolean {\n        return !!global.Box && !!global.Box.Preview;\n    }\n\n    /**\n     * Loads external css by appending a <link> element\n     *\n     * @return {void}\n     */\n    loadStylesheet(): void {\n        const { head } = document;\n        const url: string = this.getBasePath('preview.css');\n\n        if (!head || head.querySelector(`link[rel=\"stylesheet\"][href=\"${url}\"]`)) {\n            return;\n        }\n\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = url;\n        head.appendChild(link);\n    }\n\n    /**\n     * Loads external script by appending a <script> element\n     *\n     * @return {void}\n     */\n    loadScript(): void {\n        const { head } = document;\n        const url: string = this.getBasePath('preview.js');\n\n        if (!head || this.isPreviewLibraryLoaded()) {\n            return;\n        }\n\n        const previewScript = head.querySelector(`script[src=\"${url}\"]`);\n        if (previewScript) {\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = url;\n        script.addEventListener('load', this.loadPreview);\n        head.appendChild(script);\n    }\n\n    /**\n     * Focuses the preview on load.\n     *\n     * @return {void}\n     */\n    focusPreview() {\n        const { autoFocus, getInnerRef }: Props = this.props;\n        if (autoFocus && !isInputElement(document.activeElement)) {\n            focus(getInnerRef());\n        }\n    }\n\n    /**\n     * Updates preview cache and prefetches a file\n     *\n     * @param {BoxItem} file - file to prefetch\n     * @return {void}\n     */\n    updatePreviewCacheAndPrefetch(file: BoxItem, token: Token): void {\n        if (!this.preview || !file || !file.id) {\n            return;\n        }\n\n        this.preview.updateFileCache([file]);\n        this.preview.prefetch({ fileId: file.id, token });\n    }\n\n    /**\n     * Gets the file id\n     *\n     * @param {string|BoxItem} file - box file or file id\n     * @return {string} file id\n     */\n    getFileId(file?: string | BoxItem): string {\n        if (typeof file === 'string') {\n            return file;\n        }\n\n        if (typeof file === 'object' && !!file.id) {\n            return file.id;\n        }\n\n        throw InvalidIdError;\n    }\n\n    /**\n     * Prefetches the next few preview files if any\n     *\n     * @param {Array<string|BoxItem>} files - files to prefetch\n     * @return {void}\n     */\n    async prefetch(files: Array<string | BoxItem>): Promise<void> {\n        const { token }: Props = this.props;\n        const typedIds: string[] = files.map(file => getTypedFileId(this.getFileId(file)));\n        await TokenService.cacheTokens(typedIds, token);\n        files.forEach(file => {\n            const fileId = this.getFileId(file);\n            this.fetchFile(fileId, noop, noop, {\n                refreshCache: false,\n            });\n        });\n    }\n\n    /**\n     * Calculates the total file fetch time\n     *\n     * @return {number} the total fetch time\n     */\n    getTotalFileFetchTime(): number {\n        if (!this.fetchFileStartTime || !this.fetchFileEndTime) {\n            return 0;\n        }\n\n        return Math.round(this.fetchFileEndTime - this.fetchFileStartTime);\n    }\n\n    /**\n     * Handler for 'preview_error' preview event\n     *\n     * @param {PreviewLibraryError} previewError - the error data emitted from preview\n     * @return {void}\n     */\n    onPreviewError = ({ error, ...rest }: PreviewLibraryError): void => {\n        const { code = ERROR_CODE_UNKNOWN } = error;\n        const { onError } = this.props;\n\n        // In case of error, there should be no thumbnail sidebar to account for\n        this.setState({ isThumbnailSidebarOpen: false });\n\n        onError(\n            error,\n            code,\n            {\n                ...rest,\n                error,\n            },\n            ORIGIN_PREVIEW,\n        );\n    };\n\n    /**\n     * Event handler 'preview_metric' which also adds in the file fetch time if it's a load event\n     *\n     * @param {Object} previewMetrics - the object emitted by 'preview_metric'\n     * @return {void}\n     */\n    onPreviewMetric = (previewMetrics: PreviewMetrics): void => {\n        const { logger } = this.props;\n        const { event_name } = previewMetrics;\n        let metrics = {\n            ...previewMetrics,\n        };\n\n        // We need to add in the total file fetch time to the file_info_time and value (total)\n        // as preview does not do the files call\n        if (event_name === PREVIEW_LOAD_METRIC_EVENT) {\n            const totalFetchFileTime = this.getTotalFileFetchTime();\n            const totalTime = (previewMetrics.value || 0) + totalFetchFileTime;\n\n            // If an unnatural load time occurs or is invalid, don't log a load event\n            if (!totalTime) {\n                return;\n            }\n\n            metrics = {\n                ...previewMetrics,\n                file_info_time: totalFetchFileTime,\n                value: totalTime,\n            };\n        }\n\n        logger.onPreviewMetric(metrics);\n    };\n\n    /**\n     * Adds in the file fetch time to the preview metrics\n     *\n     * @param {Object} previewTimeMetrics - the preview time metrics\n     * @return {Object} the preview time metrics merged with the files call time\n     */\n    addFetchFileTimeToPreviewMetrics(previewTimeMetrics: PreviewTimeMetrics): PreviewTimeMetrics {\n        const totalFetchFileTime = this.getTotalFileFetchTime();\n        const { rendering, conversion, preload } = previewTimeMetrics;\n\n        // We need to add in the total file fetch time to the rendering and total as preview\n        // does not do the files call. In the case the file is in the process of\n        // being converted, we need to add to conversion instead of the render\n        let totalConversion = conversion;\n        let totalRendering = rendering;\n        let totalPreload = preload;\n        if (conversion) {\n            totalConversion += totalFetchFileTime;\n        } else {\n            totalRendering += totalFetchFileTime;\n        }\n\n        if (totalPreload) {\n            // Preload is optional, depending on file type\n            totalPreload += totalFetchFileTime;\n        }\n\n        const previewMetrics = {\n            conversion: totalConversion,\n            rendering: totalRendering,\n            total: totalRendering + totalConversion,\n            preload: totalPreload,\n        };\n\n        return previewMetrics;\n    }\n\n    /**\n     * onLoad function for preview\n     *\n     * @return {void}\n     */\n    onPreviewLoad = (data: Object): void => {\n        const { onLoad, collection }: Props = this.props;\n        const currentIndex = this.getFileIndex();\n        const filesToPrefetch = collection.slice(currentIndex + 1, currentIndex + 5);\n        const previewTimeMetrics = getProp(data, 'metrics.time');\n        let loadData = data;\n\n        if (previewTimeMetrics) {\n            const totalPreviewMetrics = this.addFetchFileTimeToPreviewMetrics(previewTimeMetrics);\n            loadData = {\n                ...loadData,\n                metrics: {\n                    ...loadData.metrics,\n                    time: totalPreviewMetrics,\n                },\n            };\n        }\n\n        onLoad(loadData);\n        this.focusPreview();\n        if (this.preview && filesToPrefetch.length) {\n            this.prefetch(filesToPrefetch);\n        }\n\n        this.handleCanPrint();\n    };\n\n    /**\n     * Returns whether file can be downloaded based on file properties, permissions, and user-defined options.\n     *\n     * @return {boolean}\n     */\n    canDownload(): boolean {\n        const { canDownload }: Props = this.props;\n        const { file }: State = this.state;\n        const isFileDownloadable =\n            getProp(file, 'permissions.can_download', false) && getProp(file, 'is_download_available', false);\n        return isFileDownloadable && !!canDownload;\n    }\n\n    /**\n     * Returns whether file can be annotated based on permissions\n     *\n     * @return {boolean}\n     */\n    canAnnotate(): boolean {\n        const { showAnnotations }: Props = this.props;\n        const { file }: State = this.state;\n        const isFileAnnotatable = getProp(file, 'permissions.can_annotate', false);\n        return !!showAnnotations && isFileAnnotatable;\n    }\n\n    /**\n     * Returns whether a preview should render annotations based on permissions\n     *\n     * @return {boolean}\n     */\n    canViewAnnotations(): boolean {\n        const { showAnnotations }: Props = this.props;\n        const { file }: State = this.state;\n        const hasViewAllPermissions = getProp(file, 'permissions.can_view_annotations_all', false);\n        const hasViewSelfPermissions = getProp(file, 'permissions.can_view_annotations_self', false);\n        return !!showAnnotations && (this.canAnnotate() || hasViewAllPermissions || hasViewSelfPermissions);\n    }\n\n    handleCanPrint() {\n        const preview = this.getPreview();\n        this.setState({ canPrint: !!preview && (!preview.canPrint || preview.canPrint()) });\n    }\n\n    /**\n     * Loads preview in the component using the preview library.\n     *\n     * @return {void}\n     */\n    loadPreview = async (): Promise<void> => {\n        const {\n            annotatorState: { activeAnnotationId } = {},\n            enableThumbnailsSidebar,\n            fileOptions,\n            onAnnotatorEvent,\n            onAnnotator,\n            showAnnotationsControls,\n            token: tokenOrTokenFunction,\n            ...rest\n        }: Props = this.props;\n        const { file, selectedVersion, startAt }: State = this.state;\n\n        if (!this.isPreviewLibraryLoaded() || !file || !tokenOrTokenFunction) {\n            return;\n        }\n\n        const fileId = this.getFileId(file);\n\n        if (fileId !== this.state.currentFileId) {\n            return;\n        }\n\n        const fileOpts = { ...fileOptions };\n        const token = typedId => TokenService.getReadTokens(typedId, tokenOrTokenFunction);\n\n        if (selectedVersion) {\n            setProp(fileOpts, [fileId, 'fileVersionId'], selectedVersion.id);\n            setProp(fileOpts, [fileId, 'currentFileVersionId'], getProp(file, 'file_version.id'));\n        }\n\n        if (activeAnnotationId) {\n            setProp(fileOpts, [fileId, 'annotations', 'activeId'], activeAnnotationId);\n        }\n\n        if (startAt) {\n            setProp(fileOpts, [fileId, 'startAt'], startAt);\n        }\n\n        const previewOptions = {\n            container: `#${this.id} .bcpr-content`,\n            enableThumbnailsSidebar,\n            fileOptions: fileOpts,\n            header: 'none',\n            headerElement: `#${this.id} .bcpr-PreviewHeader`,\n            showAnnotations: this.canViewAnnotations(),\n            showAnnotationsControls,\n            showDownload: this.canDownload(),\n            skipServerUpdate: true,\n            useHotkeys: false,\n        };\n        const { Preview } = global.Box;\n        this.preview = new Preview();\n        this.preview.addListener('load', this.onPreviewLoad);\n        this.preview.addListener('preview_error', this.onPreviewError);\n        this.preview.addListener('preview_metric', this.onPreviewMetric);\n        this.preview.addListener('thumbnailsOpen', () => this.setState({ isThumbnailSidebarOpen: true }));\n        this.preview.addListener('thumbnailsClose', () => this.setState({ isThumbnailSidebarOpen: false }));\n\n        if (showAnnotationsControls) {\n            this.preview.addListener('annotator_create', onAnnotator);\n        }\n\n        this.preview.updateFileCache([file]);\n        this.preview.show(file.id, token, {\n            ...previewOptions,\n            ...omit(rest, Object.keys(previewOptions)),\n        });\n    };\n\n    /**\n     * Updates preview file from temporary staged file.\n     *\n     * @return {void}\n     */\n    loadFileFromStage = () => {\n        if (this.stagedFile) {\n            this.setState({ ...this.initialState, file: this.stagedFile }, () => {\n                this.stagedFile = undefined;\n            });\n        }\n    };\n\n    /**\n     * Removes the reload notification\n     *\n     * @return {void}\n     */\n    closeReloadNotification = () => {\n        this.setState({ isReloadNotificationVisible: false });\n    };\n\n    /**\n     * Tells the preview to resize\n     *\n     * @return {void}\n     */\n    onResize = (): void => {\n        if (this.preview && this.preview.getCurrentViewer()) {\n            this.preview.resize();\n        }\n    };\n\n    /**\n     * File fetch success callback\n     *\n     * @param {Object} file - Box file\n     * @return {void}\n     */\n    fetchFileSuccessCallback = (file: BoxItem): void => {\n        this.fetchFileEndTime = performance.now();\n\n        const { file: currentFile }: State = this.state;\n        const isExistingFile = currentFile ? currentFile.id === file.id : false;\n        const isWatermarked = getProp(file, 'watermark_info.is_watermarked', false);\n\n        // If the file is watermarked or if its a new file, then update the state\n        // In this case preview should reload without prompting the user\n        if (isWatermarked || !isExistingFile) {\n            this.setState({ ...this.initialState, file });\n            // $FlowFixMe file version and sha1 should exist at this point\n        } else if (currentFile.file_version.sha1 !== file.file_version.sha1) {\n            // If we are already prevewing the file that got updated then show the\n            // user a notification to reload the file only if its sha1 changed\n            this.stagedFile = file;\n            this.setState({\n                ...this.initialState,\n                isReloadNotificationVisible: true,\n            });\n        }\n    };\n\n    /**\n     * File fetch error callback\n     *\n     * @return {void}\n     */\n    fetchFileErrorCallback = (fileError: ElementsXhrError, code: string): void => {\n        const { onError } = this.props;\n        const errorCode = fileError.code || code;\n        const error = {\n            code: errorCode,\n            message: fileError.message,\n        };\n        this.setState({ error, file: undefined });\n        onError(fileError, errorCode, {\n            error: fileError,\n        });\n    };\n\n    /**\n     * Fetches a file\n     *\n     * @param {string} id file id\n     * @param {Function|void} [successCallback] - Callback after file is fetched\n     * @param {Function|void} [errorCallback] - Callback after error\n     * @param {Object|void} [fetchOptions] - Fetch options\n     * @return {void}\n     */\n    fetchFile(\n        id: ?string,\n        successCallback?: Function,\n        errorCallback?: Function,\n        fetchOptions: RequestOptions = {},\n    ): void {\n        if (!id) {\n            return;\n        }\n\n        this.fetchFileStartTime = performance.now();\n        this.fetchFileEndTime = null;\n\n        this.api\n            .getFileAPI()\n            .getFile(\n                id,\n                successCallback || this.fetchFileSuccessCallback,\n                errorCallback || this.fetchFileErrorCallback,\n                {\n                    ...fetchOptions,\n                    fields: PREVIEW_FIELDS_TO_FETCH,\n                },\n            );\n    }\n\n    /**\n     * Returns the preview instance\n     *\n     * @return {Preview} current instance of preview\n     */\n    getPreview = (): any => {\n        const { file }: State = this.state;\n        if (!this.preview || !file) {\n            return null;\n        }\n\n        return this.preview;\n    };\n\n    /**\n     * Returns the viewer instance being used by preview.\n     * This will let child components access the viewers.\n     *\n     * @return {Viewer} current instance of the preview viewer\n     */\n    getViewer = (): any => {\n        const preview = this.getPreview();\n        const viewer = preview ? preview.getCurrentViewer() : null;\n        return viewer && viewer.isLoaded() && !viewer.isDestroyed() ? viewer : null;\n    };\n\n    /**\n     * Finds the index of current file inside the collection\n     *\n     * @return {number} -1 if not indexed\n     */\n    getFileIndex() {\n        const { currentFileId }: State = this.state;\n        const { collection }: Props = this.props;\n        if (!currentFileId || collection.length < 2) {\n            return -1;\n        }\n\n        return collection.findIndex(item => {\n            if (typeof item === 'string') {\n                return item === currentFileId;\n            }\n\n            return item.id === currentFileId;\n        });\n    }\n\n    /**\n     * Shows a preview of a file at the specified index in the current collection.\n     *\n     * @public\n     * @param {number} index - Index of file to preview\n     * @return {void}\n     */\n    navigateToIndex(index: number) {\n        const { collection, onNavigate }: Props = this.props;\n        const { length } = collection;\n        if (length < 2 || index < 0 || index > length - 1) {\n            return;\n        }\n\n        const fileOrId = collection[index];\n        const fileId = typeof fileOrId === 'object' ? fileOrId.id || '' : fileOrId;\n\n        this.setState(\n            {\n                currentFileId: fileId,\n            },\n            () => {\n                // Execute navigation callback\n                onNavigate(fileId);\n            },\n        );\n    }\n\n    /**\n     * Shows a preview of the previous file.\n     *\n     * @public\n     * @return {void}\n     */\n    navigateLeft = () => {\n        const currentIndex = this.getFileIndex();\n        const newIndex = currentIndex === 0 ? 0 : currentIndex - 1;\n        if (newIndex !== currentIndex) {\n            this.navigateToIndex(newIndex);\n        }\n    };\n\n    /**\n     * Shows a preview of the next file.\n     *\n     * @public\n     * @return {void}\n     */\n    navigateRight = () => {\n        const { collection }: Props = this.props;\n        const currentIndex = this.getFileIndex();\n        const newIndex = currentIndex === collection.length - 1 ? collection.length - 1 : currentIndex + 1;\n        if (newIndex !== currentIndex) {\n            this.navigateToIndex(newIndex);\n        }\n    };\n\n    /**\n     * Downloads file.\n     *\n     * @public\n     * @return {void}\n     */\n    download = () => {\n        const { onDownload }: Props = this.props;\n        const { file }: State = this.state;\n        if (this.preview) {\n            this.preview.download();\n            onDownload(cloneDeep(file));\n        }\n    };\n\n    /**\n     * Prints file.\n     *\n     * @public\n     * @return {void}\n     */\n    print = () => {\n        if (this.preview) {\n            this.preview.print();\n        }\n    };\n\n    /**\n     * Mouse move handler that is throttled and show\n     * the navigation arrows if applicable.\n     *\n     * @return {void}\n     */\n    onMouseMove = throttle(() => {\n        const viewer = this.getViewer();\n        const isPreviewing = !!viewer;\n        const CLASS_NAVIGATION_VISIBILITY = 'bcpr-nav-is-visible';\n\n        clearTimeout(this.mouseMoveTimeoutID);\n\n        if (!this.previewContainer) {\n            return;\n        }\n\n        // Always assume that navigation arrows will be hidden\n        this.previewContainer.classList.remove(CLASS_NAVIGATION_VISIBILITY);\n\n        // Only show it if either we aren't previewing or if we are then the viewer\n        // is not blocking the show. If we are previewing then the viewer may choose\n        // to not allow navigation arrows. This is mostly useful for videos since the\n        // navigation arrows may interfere with the settings menu inside video player.\n        if (this.previewContainer && (!isPreviewing || viewer.allowNavigationArrows())) {\n            this.previewContainer.classList.add(CLASS_NAVIGATION_VISIBILITY);\n        }\n\n        this.mouseMoveTimeoutID = setTimeout(() => {\n            if (this.previewContainer) {\n                this.previewContainer.classList.remove(CLASS_NAVIGATION_VISIBILITY);\n            }\n        }, 1500);\n    }, 1000);\n\n    /**\n     * Keyboard events\n     *\n     * @return {void}\n     */\n    onKeyDown = (event: SyntheticKeyboardEvent<HTMLElement>) => {\n        const { useHotkeys }: Props = this.props;\n        if (!useHotkeys) {\n            return;\n        }\n\n        let consumed = false;\n        const key = decode(event);\n        const viewer = this.getViewer();\n\n        // If focus was on an input or if the viewer doesn't exist\n        // then don't bother doing anything further\n        if (!key || !viewer || isInputElement(event.target)) {\n            return;\n        }\n\n        if (typeof viewer.onKeydown === 'function') {\n            consumed = !!viewer.onKeydown(key, event.nativeEvent);\n        }\n\n        if (!consumed) {\n            switch (key) {\n                case 'ArrowLeft':\n                    this.navigateLeft();\n                    consumed = true;\n                    break;\n                case 'ArrowRight':\n                    this.navigateRight();\n                    consumed = true;\n                    break;\n                default:\n                // no-op\n            }\n        }\n\n        if (consumed) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n\n    /**\n     * Handles version change events\n     *\n     * @param {string} [version] - The version that is now previewed\n     * @param {object} [additionalVersionInfo] - extra info about the version\n     */\n    onVersionChange = (version?: BoxItemVersion, additionalVersionInfo: AdditionalVersionInfo = {}): void => {\n        const { onVersionChange }: Props = this.props;\n        this.updateVersionToCurrent = additionalVersionInfo.updateVersionToCurrent;\n\n        onVersionChange(version, additionalVersionInfo);\n        this.setState({\n            selectedVersion: version,\n        });\n    };\n\n    handleAnnotationSelect = ({ file_version, id, target }: Annotation) => {\n        const { location = {} } = target;\n        const { file, selectedVersion } = this.state;\n        const annotationFileVersionId = getProp(file_version, 'id');\n        const currentFileVersionId = getProp(file, 'file_version.id');\n        const currentPreviewFileVersionId = getProp(selectedVersion, 'id', currentFileVersionId);\n        const unit = startAtTypes[location.type];\n        const viewer = this.getViewer();\n\n        if (unit && annotationFileVersionId && annotationFileVersionId !== currentPreviewFileVersionId) {\n            this.setState({\n                startAt: {\n                    unit,\n                    value: location.value,\n                },\n            });\n        }\n\n        if (viewer) {\n            viewer.emit('scrolltoannotation', { id, target });\n        }\n    };\n\n    /**\n     * Holds the reference the preview container\n     *\n     * @return {void}\n     */\n    containerRef = (container: ?HTMLDivElement) => {\n        this.previewContainer = container;\n    };\n\n    /**\n     * Refreshes the content sidebar panel\n     *\n     * @return {void}\n     */\n    refreshSidebar(): void {\n        const { current: contentSidebar } = this.contentSidebar;\n\n        if (contentSidebar) {\n            contentSidebar.refresh();\n        }\n    }\n\n    /**\n     * Renders the file preview\n     *\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const {\n            apiHost,\n            collection,\n            token,\n            language,\n            messages,\n            className,\n            contentSidebarProps,\n            contentOpenWithProps,\n            hasHeader,\n            history,\n            isLarge,\n            isVeryLarge,\n            logoUrl,\n            onClose,\n            measureRef,\n            sharedLink,\n            sharedLinkPassword,\n            requestInterceptor,\n            responseInterceptor,\n        }: Props = this.props;\n\n        const {\n            canPrint,\n            error,\n            file,\n            isReloadNotificationVisible,\n            currentFileId,\n            isThumbnailSidebarOpen,\n            selectedVersion,\n        }: State = this.state;\n\n        const styleClassName = classNames(\n            'be bcpr',\n            {\n                'bcpr-thumbnails-open': isThumbnailSidebarOpen,\n            },\n            className,\n        );\n\n        if (!currentFileId) {\n            return null;\n        }\n\n        const errorCode = getProp(error, 'code');\n        const currentVersionId = getProp(file, 'file_version.id');\n        const selectedVersionId = getProp(selectedVersion, 'id', currentVersionId);\n        const onHeaderClose = currentVersionId === selectedVersionId ? onClose : this.updateVersionToCurrent;\n\n        /* eslint-disable jsx-a11y/no-static-element-interactions */\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n        return (\n            <Internationalize language={language} messages={messages}>\n                <div id={this.id} className={styleClassName} ref={measureRef} onKeyDown={this.onKeyDown} tabIndex={0}>\n                    {hasHeader && (\n                        <PreviewHeader\n                            file={file}\n                            logoUrl={logoUrl}\n                            token={token}\n                            onClose={onHeaderClose}\n                            onPrint={this.print}\n                            canDownload={this.canDownload()}\n                            canPrint={canPrint}\n                            onDownload={this.download}\n                            contentOpenWithProps={contentOpenWithProps}\n                            canAnnotate={this.canAnnotate()}\n                            selectedVersion={selectedVersion}\n                        />\n                    )}\n                    <div className=\"bcpr-body\">\n                        <div className=\"bcpr-container\" onMouseMove={this.onMouseMove} ref={this.containerRef}>\n                            {file ? (\n                                <Measure bounds onResize={this.onResize}>\n                                    {({ measureRef: previewRef }) => <div ref={previewRef} className=\"bcpr-content\" />}\n                                </Measure>\n                            ) : (\n                                <div className=\"bcpr-loading-wrapper\">\n                                    <PreviewLoading\n                                        errorCode={errorCode}\n                                        isLoading={!errorCode}\n                                        loadingIndicatorProps={{\n                                            size: 'large',\n                                        }}\n                                    />\n                                </div>\n                            )}\n                            <PreviewNavigation\n                                collection={collection}\n                                currentIndex={this.getFileIndex()}\n                                onNavigateLeft={this.navigateLeft}\n                                onNavigateRight={this.navigateRight}\n                            />\n                        </div>\n                        {file && (\n                            <LoadableSidebar\n                                {...contentSidebarProps}\n                                apiHost={apiHost}\n                                token={token}\n                                cache={this.api.getCache()}\n                                fileId={currentFileId}\n                                getPreview={this.getPreview}\n                                getViewer={this.getViewer}\n                                history={history}\n                                isDefaultOpen={isLarge || isVeryLarge}\n                                language={language}\n                                ref={this.contentSidebar}\n                                sharedLink={sharedLink}\n                                sharedLinkPassword={sharedLinkPassword}\n                                requestInterceptor={requestInterceptor}\n                                responseInterceptor={responseInterceptor}\n                                onAnnotationSelect={this.handleAnnotationSelect}\n                                onVersionChange={this.onVersionChange}\n                            />\n                        )}\n                    </div>\n                    {isReloadNotificationVisible && (\n                        <ReloadNotification onClose={this.closeReloadNotification} onClick={this.loadFileFromStage} />\n                    )}\n                </div>\n            </Internationalize>\n        );\n        /* eslint-enable jsx-a11y/no-static-element-interactions */\n        /* eslint-enable jsx-a11y/no-noninteractive-tabindex */\n    }\n}\n\nexport type ContentPreviewProps = Props;\nexport { ContentPreview as ContentPreviewComponent };\nexport default flow([\n    makeResponsive,\n    withAnnotatorContext,\n    withAnnotations,\n    withRouter,\n    withNavRouter,\n    withFeatureProvider,\n    withLogger(ORIGIN_CONTENT_PREVIEW),\n    withErrorBoundary(ORIGIN_CONTENT_PREVIEW),\n])(ContentPreview);\n"]},"metadata":{},"sourceType":"module"}