{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { FormattedDate, FormattedMessage } from 'react-intl';\nimport { isValidDate } from '../../utils/datetime';\nimport Label from '../../components/label/Label';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport ClassifiedBadge from './ClassifiedBadge';\nimport SecurityControls from './security-controls';\nimport messages from './messages';\nimport './Classification.scss';\nvar STYLE_INLINE = 'inline';\nvar STYLE_TOOLTIP = 'tooltip';\nvar Classification = function Classification(_ref) {\n  var definition = _ref.definition,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    controls = _ref.controls,\n    controlsFormat = _ref.controlsFormat,\n    isLoadingControls = _ref.isLoadingControls,\n    maxAppCount = _ref.maxAppCount,\n    messageStyle = _ref.messageStyle,\n    modifiedAt = _ref.modifiedAt,\n    modifiedBy = _ref.modifiedBy,\n    name = _ref.name,\n    _ref$itemName = _ref.itemName,\n    itemName = _ref$itemName === void 0 ? '' : _ref$itemName,\n    color = _ref.color,\n    onClick = _ref.onClick;\n  var isClassified = !!name;\n  var hasDefinition = !!definition;\n  var hasModifiedAt = !!modifiedAt;\n  var hasModifiedBy = !!modifiedBy;\n  var hasSecurityControls = !!controls;\n  var isTooltipMessageEnabled = isClassified && hasDefinition && messageStyle === STYLE_TOOLTIP;\n  var isInlineMessageEnabled = isClassified && hasDefinition && messageStyle === STYLE_INLINE;\n  var isNotClassifiedMessageVisible = !isClassified && messageStyle === STYLE_INLINE;\n  var isControlsIndicatorEnabled = isClassified && isLoadingControls && messageStyle === STYLE_INLINE;\n  var isSecurityControlsEnabled = isClassified && !isLoadingControls && hasSecurityControls && messageStyle === STYLE_INLINE;\n  var modifiedDate = new Date(modifiedAt || 0);\n  var isModifiedMessageVisible = isClassified && hasModifiedAt && isValidDate(modifiedDate) && hasModifiedBy && messageStyle === STYLE_INLINE;\n  var formattedModifiedAt = isModifiedMessageVisible && React.createElement(FormattedDate, {\n    value: modifiedDate,\n    month: \"long\",\n    year: \"numeric\",\n    day: \"numeric\"\n  });\n  return React.createElement(\"article\", {\n    className: \"bdl-Classification \".concat(className)\n  }, isClassified && React.createElement(ClassifiedBadge, {\n    color: color,\n    name: name,\n    onClick: onClick,\n    tooltipText: isTooltipMessageEnabled ? definition : undefined\n  }), isInlineMessageEnabled && React.createElement(Label, {\n    text: React.createElement(FormattedMessage, messages.definition)\n  }, React.createElement(\"p\", {\n    className: \"bdl-Classification-definition\"\n  }, definition)), isNotClassifiedMessageVisible && React.createElement(\"span\", {\n    className: \"bdl-Classification-missingMessage\"\n  }, React.createElement(FormattedMessage, messages.missing)), isModifiedMessageVisible && React.createElement(Label, {\n    text: React.createElement(FormattedMessage, messages.modifiedByLabel)\n  }, React.createElement(\"p\", {\n    className: \"bdl-Classification-modifiedBy\",\n    \"data-testid\": \"classification-modifiedby\"\n  }, React.createElement(FormattedMessage, _extends({}, messages.modifiedBy, {\n    values: {\n      modifiedAt: formattedModifiedAt,\n      modifiedBy: modifiedBy\n    }\n  })))), isSecurityControlsEnabled && React.createElement(SecurityControls, {\n    classificationColor: color,\n    classificationName: name,\n    controls: controls,\n    controlsFormat: controlsFormat,\n    definition: definition,\n    itemName: itemName,\n    maxAppCount: maxAppCount,\n    shouldRenderLabel: true\n  }), isControlsIndicatorEnabled && React.createElement(LoadingIndicator, null));\n};\nexport { STYLE_INLINE, STYLE_TOOLTIP };\nexport default Classification;","map":{"version":3,"sources":["../../../src/features/classification/Classification.js"],"names":["React","FormattedDate","FormattedMessage","isValidDate","Label","LoadingIndicator","ClassifiedBadge","SecurityControls","messages","STYLE_INLINE","STYLE_TOOLTIP","Classification","definition","className","controls","controlsFormat","isLoadingControls","maxAppCount","messageStyle","modifiedAt","modifiedBy","name","itemName","color","onClick","isClassified","hasDefinition","hasModifiedAt","hasModifiedBy","hasSecurityControls","isTooltipMessageEnabled","isInlineMessageEnabled","isNotClassifiedMessageVisible","isControlsIndicatorEnabled","isSecurityControlsEnabled","modifiedDate","Date","isModifiedMessageVisible","formattedModifiedAt","undefined","missing","modifiedByLabel"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedDate, FormattedMessage } from 'react-intl';\n\nimport { isValidDate } from '../../utils/datetime';\nimport Label from '../../components/label/Label';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport ClassifiedBadge from './ClassifiedBadge';\nimport SecurityControls from './security-controls';\nimport messages from './messages';\nimport './Classification.scss';\n\nimport type { Controls, ControlsFormat } from './flowTypes';\n\nconst STYLE_INLINE: 'inline' = 'inline';\nconst STYLE_TOOLTIP: 'tooltip' = 'tooltip';\ntype Props = {\n    className?: string,\n    color?: string,\n    controls?: Controls,\n    controlsFormat?: ControlsFormat,\n    definition?: string,\n    isLoadingControls?: boolean,\n    itemName?: string,\n    maxAppCount?: number,\n    messageStyle?: typeof STYLE_INLINE | typeof STYLE_TOOLTIP,\n    modifiedAt?: string,\n    modifiedBy?: string,\n    name?: string,\n    onClick?: (event: SyntheticEvent<HTMLButtonElement>) => void,\n};\n\nconst Classification = ({\n    definition,\n    className = '',\n    controls,\n    controlsFormat,\n    isLoadingControls,\n    maxAppCount,\n    messageStyle,\n    modifiedAt,\n    modifiedBy,\n    name,\n    itemName = '',\n    color,\n    onClick,\n}: Props) => {\n    const isClassified = !!name;\n    const hasDefinition = !!definition;\n    const hasModifiedAt = !!modifiedAt;\n    const hasModifiedBy = !!modifiedBy;\n    const hasSecurityControls = !!controls;\n    const isTooltipMessageEnabled = isClassified && hasDefinition && messageStyle === STYLE_TOOLTIP;\n    const isInlineMessageEnabled = isClassified && hasDefinition && messageStyle === STYLE_INLINE;\n    const isNotClassifiedMessageVisible = !isClassified && messageStyle === STYLE_INLINE;\n    const isControlsIndicatorEnabled = isClassified && isLoadingControls && messageStyle === STYLE_INLINE;\n    const isSecurityControlsEnabled =\n        isClassified && !isLoadingControls && hasSecurityControls && messageStyle === STYLE_INLINE;\n    const modifiedDate = new Date(modifiedAt || 0);\n    const isModifiedMessageVisible =\n        isClassified && hasModifiedAt && isValidDate(modifiedDate) && hasModifiedBy && messageStyle === STYLE_INLINE;\n\n    const formattedModifiedAt = isModifiedMessageVisible && (\n        <FormattedDate value={modifiedDate} month=\"long\" year=\"numeric\" day=\"numeric\" />\n    );\n\n    return (\n        <article className={`bdl-Classification ${className}`}>\n            {isClassified && (\n                <ClassifiedBadge\n                    color={color}\n                    name={((name: any): string)}\n                    onClick={onClick}\n                    tooltipText={isTooltipMessageEnabled ? definition : undefined}\n                />\n            )}\n            {isInlineMessageEnabled && (\n                <Label text={<FormattedMessage {...messages.definition} />}>\n                    <p className=\"bdl-Classification-definition\">{definition}</p>\n                </Label>\n            )}\n            {isNotClassifiedMessageVisible && (\n                <span className=\"bdl-Classification-missingMessage\">\n                    <FormattedMessage {...messages.missing} />\n                </span>\n            )}\n            {isModifiedMessageVisible && (\n                <Label text={<FormattedMessage {...messages.modifiedByLabel} />}>\n                    <p className=\"bdl-Classification-modifiedBy\" data-testid=\"classification-modifiedby\">\n                        <FormattedMessage\n                            {...messages.modifiedBy}\n                            values={{ modifiedAt: formattedModifiedAt, modifiedBy }}\n                        />\n                    </p>\n                </Label>\n            )}\n\n            {isSecurityControlsEnabled && (\n                <SecurityControls\n                    classificationColor={color}\n                    classificationName={name}\n                    controls={controls}\n                    controlsFormat={controlsFormat}\n                    definition={definition}\n                    itemName={itemName}\n                    maxAppCount={maxAppCount}\n                    shouldRenderLabel\n                />\n            )}\n            {isControlsIndicatorEnabled && <LoadingIndicator />}\n        </article>\n    );\n};\n\nexport { STYLE_INLINE, STYLE_TOOLTIP };\nexport default Classification;\n"]},"metadata":{},"sourceType":"module"}