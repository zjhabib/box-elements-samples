{"ast":null,"code":"/**\n * \n * @file Overall uploads progress bar\n */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport ProgressBar from './ProgressBar';\nimport UploadsManagerItemAction from './UploadsManagerAction';\nimport { VIEW_UPLOAD_IN_PROGRESS, VIEW_UPLOAD_SUCCESS, VIEW_ERROR, VIEW_UPLOAD_EMPTY } from '../../constants';\nimport './OverallUploadsProgressBar.scss';\n/**\n * Get upload status\n *\n * @param {View} view\n * @return {FormattedMessage|string}\n */\n\nvar getUploadStatus = function getUploadStatus(view) {\n  switch (view) {\n    case VIEW_UPLOAD_IN_PROGRESS:\n      return React.createElement(FormattedMessage, messages.uploadsManagerUploadInProgress);\n    case VIEW_UPLOAD_SUCCESS:\n      return React.createElement(FormattedMessage, messages.uploadsManagerUploadComplete);\n    case VIEW_UPLOAD_EMPTY:\n      return React.createElement(FormattedMessage, messages.uploadsManagerUploadPrompt);\n    case VIEW_ERROR:\n      return React.createElement(FormattedMessage, messages.uploadsManagerUploadFailed);\n    default:\n      return '';\n  }\n};\n/**\n * Get overall upload progress percentage\n *\n * @param {string} view\n * @param {number} percent\n */\n\nvar getPercent = function getPercent(view, percent) {\n  switch (view) {\n    case VIEW_UPLOAD_SUCCESS:\n      return 100;\n    case VIEW_UPLOAD_EMPTY:\n    case VIEW_ERROR:\n      return 0;\n    default:\n      return percent;\n  }\n};\nvar OverallUploadsProgressBar = function OverallUploadsProgressBar(_ref) {\n  var percent = _ref.percent,\n    view = _ref.view,\n    onClick = _ref.onClick,\n    onKeyDown = _ref.onKeyDown,\n    onUploadsManagerActionClick = _ref.onUploadsManagerActionClick,\n    isDragging = _ref.isDragging,\n    isResumeVisible = _ref.isResumeVisible,\n    isVisible = _ref.isVisible,\n    isExpanded = _ref.isExpanded,\n    hasMultipleFailedUploads = _ref.hasMultipleFailedUploads;\n  // Show the upload prompt and set progress to 0 when the uploads manager\n  // is invisible or is having files dragged to it\n  var shouldShowPrompt = isDragging || !isVisible;\n  var status = shouldShowPrompt ? React.createElement(FormattedMessage, messages.uploadsManagerUploadPrompt) : getUploadStatus(view);\n  var updatedPercent = shouldShowPrompt ? 0 : getPercent(view, percent);\n  return React.createElement(\"div\", {\n    className: \"bcu-overall-progress-bar\",\n    \"data-resin-target\": isExpanded ? 'uploadcollapse' : 'uploadexpand',\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    role: \"button\",\n    tabIndex: isVisible ? '0' : '-1'\n  }, React.createElement(\"span\", {\n    className: \"bcu-upload-status\"\n  }, status), React.createElement(ProgressBar, {\n    percent: updatedPercent\n  }), isResumeVisible && React.createElement(UploadsManagerItemAction, {\n    hasMultipleFailedUploads: hasMultipleFailedUploads,\n    onClick: onUploadsManagerActionClick\n  }), React.createElement(\"span\", {\n    className: \"bcu-uploads-manager-toggle\"\n  }));\n};\nexport default OverallUploadsProgressBar;","map":{"version":3,"sources":["../../../src/elements/content-uploader/OverallUploadsProgressBar.js"],"names":["React","FormattedMessage","messages","ProgressBar","UploadsManagerItemAction","VIEW_UPLOAD_IN_PROGRESS","VIEW_UPLOAD_SUCCESS","VIEW_ERROR","VIEW_UPLOAD_EMPTY","getUploadStatus","view","uploadsManagerUploadInProgress","uploadsManagerUploadComplete","uploadsManagerUploadPrompt","uploadsManagerUploadFailed","getPercent","percent","OverallUploadsProgressBar","onClick","onKeyDown","onUploadsManagerActionClick","isDragging","isResumeVisible","isVisible","isExpanded","hasMultipleFailedUploads","shouldShowPrompt","status","updatedPercent"],"mappings":"AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,wBAAP,MAAqC,wBAArC;AACA,SAASC,uBAAT,EAAkCC,mBAAlC,EAAuDC,UAAvD,EAAmEC,iBAAnE,QAA4F,iBAA5F;AAGA,OAAO,kCAAP;AAEA;;;;;;;AAMA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAkB;EACtC,QAAQA,IAAR;IACI,KAAKL,uBAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBH,QAAQ,CAACS,8BAA/B,CAAP;IACJ,KAAKL,mBAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBJ,QAAQ,CAACU,4BAA/B,CAAP;IACJ,KAAKJ,iBAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBN,QAAQ,CAACW,0BAA/B,CAAP;IACJ,KAAKN,UAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBL,QAAQ,CAACY,0BAA/B,CAAP;IACJ;MACI,OAAO,EAAP;EAVR;AAYH,CAbD;AAeA;;;;;;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACL,IAAD,EAAeM,OAAf,EAA2C;EAC1D,QAAQN,IAAR;IACI,KAAKJ,mBAAL;MACI,OAAO,GAAP;IACJ,KAAKE,iBAAL;IACA,KAAKD,UAAL;MACI,OAAO,CAAP;IACJ;MACI,OAAOS,OAAP;EAPR;AASH,CAVD;AAyBA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAA,IAAA,EAWrB;EAAA,IAVTD,OAUS,GAAA,IAAA,CAVTA,OAUS;IATTN,IASS,GAAA,IAAA,CATTA,IASS;IARTQ,OAQS,GAAA,IAAA,CARTA,OAQS;IAPTC,SAOS,GAAA,IAAA,CAPTA,SAOS;IANTC,2BAMS,GAAA,IAAA,CANTA,2BAMS;IALTC,UAKS,GAAA,IAAA,CALTA,UAKS;IAJTC,eAIS,GAAA,IAAA,CAJTA,eAIS;IAHTC,SAGS,GAAA,IAAA,CAHTA,SAGS;IAFTC,UAES,GAAA,IAAA,CAFTA,UAES;IADTC,wBACS,GAAA,IAAA,CADTA,wBACS;EACT;EACA;EACA,IAAMC,gBAAgB,GAAGL,UAAU,IAAI,CAACE,SAAxC;EACA,IAAMI,MAAM,GAAGD,gBAAgB,GAC3B,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBxB,QAAQ,CAACW,0BAA/B,CAD2B,GAG3BJ,eAAe,CAACC,IAAD,CAHnB;EAKA,IAAMkB,cAAc,GAAGF,gBAAgB,GAAG,CAAH,GAAOX,UAAU,CAACL,IAAD,EAAOM,OAAP,CAAxD;EAEA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IACI,SAAS,EAAC,0BADd;IAEI,mBAAA,EAAmBQ,UAAU,GAAG,gBAAH,GAAsB,cAFvD;IAGI,OAAO,EAAEN,OAHb;IAII,SAAS,EAAEC,SAJf;IAKI,IAAI,EAAC,QALT;IAMI,QAAQ,EAAEI,SAAS,GAAG,GAAH,GAAS;EANhC,CAAA,EAQI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAC;EAAhB,CAAA,EAAqCI,MAArC,CARJ,EASI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IAAa,OAAO,EAAEC;EAAtB,CAAA,CATJ,EAUKN,eAAe,IACZ,KAAA,CAAA,aAAA,CAAC,wBAAD,EAAA;IACI,wBAAwB,EAAEG,wBAD9B;IAEI,OAAO,EAAEL;EAFb,CAAA,CAXR,EAgBI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAC;EAAhB,CAAA,CAhBJ,CADJ;AAoBH,CA1CD;AA4CA,eAAeH,yBAAf","sourcesContent":["/**\n * @flow\n * @file Overall uploads progress bar\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport ProgressBar from './ProgressBar';\nimport UploadsManagerItemAction from './UploadsManagerAction';\nimport { VIEW_UPLOAD_IN_PROGRESS, VIEW_UPLOAD_SUCCESS, VIEW_ERROR, VIEW_UPLOAD_EMPTY } from '../../constants';\nimport type { View } from '../../common/types/core';\n\nimport './OverallUploadsProgressBar.scss';\n\n/**\n * Get upload status\n *\n * @param {View} view\n * @return {FormattedMessage|string}\n */\nconst getUploadStatus = (view: string) => {\n    switch (view) {\n        case VIEW_UPLOAD_IN_PROGRESS:\n            return <FormattedMessage {...messages.uploadsManagerUploadInProgress} />;\n        case VIEW_UPLOAD_SUCCESS:\n            return <FormattedMessage {...messages.uploadsManagerUploadComplete} />;\n        case VIEW_UPLOAD_EMPTY:\n            return <FormattedMessage {...messages.uploadsManagerUploadPrompt} />;\n        case VIEW_ERROR:\n            return <FormattedMessage {...messages.uploadsManagerUploadFailed} />;\n        default:\n            return '';\n    }\n};\n\n/**\n * Get overall upload progress percentage\n *\n * @param {string} view\n * @param {number} percent\n */\nconst getPercent = (view: string, percent: number): number => {\n    switch (view) {\n        case VIEW_UPLOAD_SUCCESS:\n            return 100;\n        case VIEW_UPLOAD_EMPTY:\n        case VIEW_ERROR:\n            return 0;\n        default:\n            return percent;\n    }\n};\n\ntype Props = {\n    hasMultipleFailedUploads: boolean,\n    isDragging: boolean,\n    isExpanded: boolean,\n    isResumeVisible: boolean,\n    isVisible: boolean,\n    onClick: Function,\n    onKeyDown: Function,\n    onUploadsManagerActionClick: Function,\n    percent: number,\n    view: View,\n};\n\nconst OverallUploadsProgressBar = ({\n    percent,\n    view,\n    onClick,\n    onKeyDown,\n    onUploadsManagerActionClick,\n    isDragging,\n    isResumeVisible,\n    isVisible,\n    isExpanded,\n    hasMultipleFailedUploads,\n}: Props) => {\n    // Show the upload prompt and set progress to 0 when the uploads manager\n    // is invisible or is having files dragged to it\n    const shouldShowPrompt = isDragging || !isVisible;\n    const status = shouldShowPrompt ? (\n        <FormattedMessage {...messages.uploadsManagerUploadPrompt} />\n    ) : (\n        getUploadStatus(view)\n    );\n    const updatedPercent = shouldShowPrompt ? 0 : getPercent(view, percent);\n\n    return (\n        <div\n            className=\"bcu-overall-progress-bar\"\n            data-resin-target={isExpanded ? 'uploadcollapse' : 'uploadexpand'}\n            onClick={onClick}\n            onKeyDown={onKeyDown}\n            role=\"button\"\n            tabIndex={isVisible ? '0' : '-1'}\n        >\n            <span className=\"bcu-upload-status\">{status}</span>\n            <ProgressBar percent={updatedPercent} />\n            {isResumeVisible && (\n                <UploadsManagerItemAction\n                    hasMultipleFailedUploads={hasMultipleFailedUploads}\n                    onClick={onUploadsManagerActionClick}\n                />\n            )}\n            <span className=\"bcu-uploads-manager-toggle\" />\n        </div>\n    );\n};\n\nexport default OverallUploadsProgressBar;\n"]},"metadata":{},"sourceType":"module"}