{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Progress Bar component\n * @author Box\n */\nimport React, { PureComponent } from 'react';\nimport './ProgressBar.scss';\nvar ProgressBar = /*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ProgressBar, _PureComponent);\n\n  /**\n   * [constructor]\n   *\n   * @return {ProgressBar}\n   */\n  function ProgressBar(props) {\n    var _this;\n    _classCallCheck(this, ProgressBar);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProgressBar).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"startProgress\", function () {\n      var percent = _this.state.percent;\n      if (percent === 0) {\n        _this.interval = setInterval(_this.incrementProgress, 100);\n      } else if (percent === 100) {\n        // Timeout helps transition of hiding the bar to finish\n        _this.timeout = setTimeout(_this.resetProgress, 600);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"incrementProgress\", function () {\n      var percent = _this.state.percent;\n      _this.setState({\n        percent: percent + 2 / (percent || 1)\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"resetProgress\", function () {\n      _this.setState(ProgressBar.defaultProps);\n    });\n    var _percent = props.percent;\n    _this.state = {\n      percent: _percent\n    };\n    return _this;\n  }\n  /**\n   * Clears any timeouts and intervals\n   *\n   * @return {void}\n   */\n\n  _createClass(ProgressBar, [{\n    key: \"clearTimeoutAndInterval\",\n    value: function clearTimeoutAndInterval() {\n      clearInterval(this.interval);\n      clearTimeout(this.timeout);\n    }\n    /**\n     * Starts progress on mount\n     */\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startProgress();\n    }\n    /**\n     * Updates state from new props\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var percent = this.props.percent;\n      if (prevProps.percent !== percent) {\n        this.clearTimeoutAndInterval();\n        this.setState({\n          percent: percent\n        }, this.startProgress);\n      }\n    }\n    /**\n     * Clears time out\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearTimeoutAndInterval();\n    }\n    /**\n     * Increaments the progress or resets it\n     * depending upon the edge conditions.\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"render\",\n    /**\n     * Renders the progress bar\n     *\n     * @return {void}\n     */\n    value: function render() {\n      var percent = this.state.percent;\n      var containerStyle = {\n        opacity: percent > 0 && percent < 100 ? 1 : 0,\n        transitionDelay: percent > 0 && percent < 100 ? '0' : '0.4s'\n      };\n      return React.createElement(\"div\", {\n        className: \"be-progress-container\",\n        style: containerStyle\n      }, React.createElement(\"div\", {\n        className: \"be-progress\",\n        style: {\n          width: \"\".concat(percent, \"%\")\n        }\n      }));\n    }\n  }]);\n  return ProgressBar;\n}(PureComponent);\n_defineProperty(ProgressBar, \"defaultProps\", {\n  percent: 0\n});\nexport default ProgressBar;","map":{"version":3,"sources":["../../../../src/elements/common/progress-bar/ProgressBar.js"],"names":["React","PureComponent","ProgressBar","percent","props","state","clearInterval","interval","clearTimeout","timeout","startProgress","prevProps","clearTimeoutAndInterval","setState","setInterval","incrementProgress","setTimeout","resetProgress","defaultProps","containerStyle","opacity","transitionDelay","width"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Progress Bar component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport './ProgressBar.scss';\n\ntype Props = {\n    percent: number,\n};\n\ntype State = {\n    percent: number,\n};\n\nclass ProgressBar extends PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    timeout: TimeoutID;\n\n    interval: IntervalID;\n\n    static defaultProps = { percent: 0 };\n\n    /**\n     * [constructor]\n     *\n     * @return {ProgressBar}\n     */\n    constructor(props: Props) {\n        super(props);\n        const { percent }: State = props;\n        this.state = { percent };\n    }\n\n    /**\n     * Clears any timeouts and intervals\n     *\n     * @return {void}\n     */\n    clearTimeoutAndInterval() {\n        clearInterval(this.interval);\n        clearTimeout(this.timeout);\n    }\n\n    /**\n     * Starts progress on mount\n     */\n\n    componentDidMount() {\n        this.startProgress();\n    }\n\n    /**\n     * Updates state from new props\n     *\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        const { percent }: Props = this.props;\n\n        if (prevProps.percent !== percent) {\n            this.clearTimeoutAndInterval();\n            this.setState({ percent }, this.startProgress);\n        }\n    }\n\n    /**\n     * Clears time out\n     *\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.clearTimeoutAndInterval();\n    }\n\n    /**\n     * Increaments the progress or resets it\n     * depending upon the edge conditions.\n     *\n     * @return {void}\n     */\n    startProgress = () => {\n        const { percent }: State = this.state;\n        if (percent === 0) {\n            this.interval = setInterval(this.incrementProgress, 100);\n        } else if (percent === 100) {\n            // Timeout helps transition of hiding the bar to finish\n            this.timeout = setTimeout(this.resetProgress, 600);\n        }\n    };\n\n    /**\n     * Increaments the progress very slowly\n     *\n     * @return {void}\n     */\n    incrementProgress = () => {\n        const { percent } = this.state;\n        this.setState({\n            percent: percent + 2 / (percent || 1),\n        });\n    };\n\n    /**\n     * Resets the progress to 0\n     *\n     * @return {void}\n     */\n    resetProgress = () => {\n        this.setState(ProgressBar.defaultProps);\n    };\n\n    /**\n     * Renders the progress bar\n     *\n     * @return {void}\n     */\n    render() {\n        const { percent }: State = this.state;\n        const containerStyle = {\n            opacity: percent > 0 && percent < 100 ? 1 : 0,\n            transitionDelay: percent > 0 && percent < 100 ? '0' : '0.4s',\n        };\n        return (\n            <div className=\"be-progress-container\" style={containerStyle}>\n                <div className=\"be-progress\" style={{ width: `${percent}%` }} />\n            </div>\n        );\n    }\n}\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}