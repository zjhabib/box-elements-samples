{"ast":null,"code":"var _DURATION_TIMES, _ICON_RENDERER;\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport IconAlertCircle from '../../icons/general/IconAlertCircle';\nimport IconBell from '../../icons/general/IconBell';\nimport IconClose from '../../icons/general/IconClose';\nimport IconInfoThin from '../../icons/general/IconInfoThin';\nimport IconSync from '../../icons/general/IconSync';\nimport './Notification.scss'; // @NOTE: We can't import these constants from ./constant.js because `react-docgen`\n// can't handle imported variables appear in propTypes\n// see https://github.com/reactjs/react-docgen/issues/33\n\nvar DURATION_SHORT = 'short';\nvar DURATION_LONG = 'long';\nvar OVERFLOW_WRAP = 'wrap';\nexport var TYPE_DEFAULT = 'default';\nexport var TYPE_INFO = 'info';\nexport var TYPE_WARN = 'warn';\nexport var TYPE_ERROR = 'error';\nvar DURATION_TIMES = (_DURATION_TIMES = {}, _defineProperty(_DURATION_TIMES, DURATION_SHORT, 5000), _defineProperty(_DURATION_TIMES, DURATION_LONG, 10000), _DURATION_TIMES);\nvar ICON_RENDERER = (_ICON_RENDERER = {}, _defineProperty(_ICON_RENDERER, TYPE_DEFAULT, function () {\n  return React.createElement(IconBell, null);\n}), _defineProperty(_ICON_RENDERER, TYPE_ERROR, function () {\n  return React.createElement(IconAlertCircle, null);\n}), _defineProperty(_ICON_RENDERER, TYPE_INFO, function () {\n  return React.createElement(IconSync, null);\n}), _defineProperty(_ICON_RENDERER, TYPE_WARN, function () {\n  return React.createElement(IconInfoThin, null);\n}), _ICON_RENDERER);\nvar messages = defineMessages({\n  clearNotificationButtonText: {\n    \"id\": \"boxui.notification.clearNotification\",\n    \"defaultMessage\": \"Clear Notification\"\n  }\n});\nvar Notification = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Notification, _React$Component);\n  function Notification() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Notification);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Notification)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"onClose\", function (event) {\n      var onClose = _this.props.onClose;\n      if (_this.timeout) {\n        clearTimeout(_this.timeout);\n      }\n      if (onClose) {\n        onClose(event);\n      }\n    });\n    return _this;\n  }\n  _createClass(Notification, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n        duration = _this$props.duration,\n        onClose = _this$props.onClose;\n      this.timeout = duration && onClose ? setTimeout(onClose, DURATION_TIMES[duration]) : null;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      var children = this.props.children;\n      return typeof children === 'string' ? React.createElement(\"span\", null, children) : children;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var contents = this.getChildren();\n      var _this$props2 = this.props,\n        intl = _this$props2.intl,\n        type = _this$props2.type,\n        overflow = _this$props2.overflow;\n      var formatMessage = intl.formatMessage;\n      var classes = classNames('notification', type, overflow);\n      return React.createElement(\"div\", {\n        className: classes\n      }, React.cloneElement(ICON_RENDERER[type](), {\n        color: '#fff',\n        height: 20,\n        width: 20\n      }), contents, React.createElement(\"button\", {\n        \"aria-label\": formatMessage(messages.clearNotificationButtonText),\n        className: \"close-btn\",\n        onClick: this.onClose,\n        type: \"button\"\n      }, React.createElement(IconClose, {\n        color: \"#FFF\",\n        height: 18,\n        width: 18\n      })));\n    }\n  }]);\n  return Notification;\n}(React.Component);\n_defineProperty(Notification, \"defaultProps\", {\n  overflow: OVERFLOW_WRAP,\n  type: TYPE_DEFAULT\n});\nexport default injectIntl(Notification);","map":{"version":3,"sources":["../../../src/components/notification/Notification.js"],"names":["React","defineMessages","injectIntl","classNames","IconAlertCircle","IconBell","IconClose","IconInfoThin","IconSync","DURATION_SHORT","DURATION_LONG","OVERFLOW_WRAP","TYPE_DEFAULT","TYPE_INFO","TYPE_WARN","TYPE_ERROR","DURATION_TIMES","ICON_RENDERER","messages","clearNotificationButtonText","Notification","Component","overflow","type","duration","onClose","props","timeout","setTimeout","clearTimeout","event","children","contents","getChildren","intl","formatMessage","classes","cloneElement","color","height","width"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,YAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAIA,OAAO,qBAAP,C,CAEA;AACA;AACA;;AACA,IAAMC,cAAc,GAAG,OAAvB;AACA,IAAMC,aAAa,GAAG,MAAtB;AACA,IAAMC,aAAa,GAAG,MAAtB;AACA,OAAO,IAAMC,YAAY,GAAG,SAArB;AACP,OAAO,IAAMC,SAAS,GAAG,MAAlB;AACP,OAAO,IAAMC,SAAS,GAAG,MAAlB;AACP,OAAO,IAAMC,UAAU,GAAG,OAAnB;AAEP,IAAMC,cAAc,IAAA,eAAA,GAAA,CAAA,CAAA,EAAA,eAAA,CAAA,eAAA,EACfP,cADe,EACE,IADF,CAAA,EAAA,eAAA,CAAA,eAAA,EAEfC,aAFe,EAEC,KAFD,CAAA,EAAA,eAAA,CAApB;AAKA,IAAMO,aAAqC,IAAA,cAAA,GAAA,CAAA,CAAA,EAAA,eAAA,CAAA,cAAA,EACtCL,YADsC,EACvB,YAAA;EAAA,OAAM,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA,IAAA,CAAN;AAAA,CADuB,CAAA,EAAA,eAAA,CAAA,cAAA,EAEtCG,UAFsC,EAEzB,YAAA;EAAA,OAAM,KAAA,CAAA,aAAA,CAAC,eAAD,EAAA,IAAA,CAAN;AAAA,CAFyB,CAAA,EAAA,eAAA,CAAA,cAAA,EAGtCF,SAHsC,EAG1B,YAAA;EAAA,OAAM,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA,IAAA,CAAN;AAAA,CAH0B,CAAA,EAAA,eAAA,CAAA,cAAA,EAItCC,SAJsC,EAI1B,YAAA;EAAA,OAAM,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA,IAAA,CAAN;AAAA,CAJ0B,CAAA,EAAA,cAAA,CAA3C;AAOA,IAAMI,QAAQ,GAAGjB,cAAc,CAAC;EAC5BkB,2BAA2B,EAAA;IAAA,IAAA,EAAA,sCAAA;IAAA,gBAAA,EAAA;EAAA;AADC,CAAD,CAA/B;IAkCMC,Y;;;;;;;;;;;8DAWQ,UAAA,KAAK,EAAI;MAAA,IACPK,OADO,GACK,KAAA,CAAKC,KADV,CACPD,OADO;MAEf,IAAI,KAAA,CAAKE,OAAT,EAAkB;QACdE,YAAY,CAAC,KAAA,CAAKF,OAAN,CAAZE;MACH;MACD,IAAIJ,OAAJ,EAAa;QACTA,OAAO,CAACK,KAAD,CAAPL;MACH;IACJ,C;;;;;wCAbmB;MAAA,IAAA,WAAA,GACc,IAAA,CAAKC,KADnB;QACRF,QADQ,GAAA,WAAA,CACRA,QADQ;QACEC,OADF,GAAA,WAAA,CACEA,OADF;MAEhB,IAAA,CAAKE,OAAL,GAAeH,QAAQ,IAAIC,OAAZD,GAAsBI,UAAU,CAACH,OAAD,EAAUT,cAAc,CAACQ,QAAD,CAAxB,CAAhCA,GAAsE,IAArF;IACH;;;kCAYa;MAAA,IACFO,QADE,GACW,IAAA,CAAKL,KADhB,CACFK,QADE;MAEV,OAAO,OAAOA,QAAP,KAAoB,QAApB,GAA+B,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAOA,QAAP,CAA/B,GAAyDA,QAAhE;IACH;;;6BAIQ;MACL,IAAMC,QAAQ,GAAG,IAAA,CAAKC,WAAL,CAAA,CAAjB;MADK,IAAA,YAAA,GAE4B,IAAA,CAAKP,KAFjC;QAEGQ,IAFH,GAAA,YAAA,CAEGA,IAFH;QAESX,IAFT,GAAA,YAAA,CAESA,IAFT;QAEeD,QAFf,GAAA,YAAA,CAEeA,QAFf;MAAA,IAGGa,aAHH,GAGqBD,IAHrB,CAGGC,aAHH;MAIL,IAAMC,OAAO,GAAGjC,UAAU,CAAC,cAAD,EAAiBoB,IAAjB,EAAuBD,QAAvB,CAA1B;MAEA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;QAAK,SAAS,EAAEc;MAAhB,CAAA,EACK,KAAK,CAACC,YAAN,CAAmBpB,aAAa,CAACM,IAAD,CAAbN,CAAAA,CAAnB,EAA0C;QACvCqB,KAAK,EAAE,MADgC;QAEvCC,MAAM,EAAE,EAF+B;QAGvCC,KAAK,EAAE;MAHgC,CAA1C,CADL,EAMKR,QANL,EAOI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;QACI,YAAA,EAAYG,aAAa,CAACjB,QAAQ,CAACC,2BAAV,CAD7B;QAEI,SAAS,EAAC,WAFd;QAGI,OAAO,EAAE,IAAA,CAAKM,OAHlB;QAII,IAAI,EAAC;MAJT,CAAA,EAMI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;QAAW,KAAK,EAAC,MAAjB;QAAwB,MAAM,EAAE,EAAhC;QAAoC,KAAK,EAAE;MAA3C,CAAA,CANJ,CAPJ,CADJ;IAkBH;;;EApDsBzB,KAAK,CAACqB,S;gBAA3BD,Y,kBACoB;EAClBE,QAAQ,EAAEX,aADQ;EAElBY,IAAI,EAAEX;AAFY,C;AAsD1B,eAAeV,UAAU,CAACkB,YAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\n\nimport IconAlertCircle from '../../icons/general/IconAlertCircle';\nimport IconBell from '../../icons/general/IconBell';\nimport IconClose from '../../icons/general/IconClose';\nimport IconInfoThin from '../../icons/general/IconInfoThin';\nimport IconSync from '../../icons/general/IconSync';\n\nimport type { NotificationType } from '../../common/types/core';\n\nimport './Notification.scss';\n\n// @NOTE: We can't import these constants from ./constant.js because `react-docgen`\n// can't handle imported variables appear in propTypes\n// see https://github.com/reactjs/react-docgen/issues/33\nconst DURATION_SHORT = 'short';\nconst DURATION_LONG = 'long';\nconst OVERFLOW_WRAP = 'wrap';\nexport const TYPE_DEFAULT = 'default';\nexport const TYPE_INFO = 'info';\nexport const TYPE_WARN = 'warn';\nexport const TYPE_ERROR = 'error';\n\nconst DURATION_TIMES = {\n    [DURATION_SHORT]: 5000,\n    [DURATION_LONG]: 10000,\n};\n\nconst ICON_RENDERER: { [string]: Function } = {\n    [TYPE_DEFAULT]: () => <IconBell />,\n    [TYPE_ERROR]: () => <IconAlertCircle />,\n    [TYPE_INFO]: () => <IconSync />,\n    [TYPE_WARN]: () => <IconInfoThin />,\n};\n\nconst messages = defineMessages({\n    clearNotificationButtonText: {\n        defaultMessage: 'Clear Notification',\n        description: 'Button to clear notification',\n        id: 'boxui.notification.clearNotification',\n    },\n});\n\ntype Props = {\n    /**\n     * The contents of the `Notification`.\n     * - Notification text must be wrapped in a `<span />` tag.\n     * - Notification buttons must be the `<Button />` component.\n     */\n    children: React.Node,\n    /** Function that gets executed when close button is clicked or when duration expires. */\n    duration?: 'short' | 'long',\n    /** `duration`: When set, dictates how long the notification will exist before calling `onClose`.\n     *  If unset, the notification will not automatically call `onClose`.\n     * - `short`: 5s\n     * - `long`: 10s */\n    intl: Object,\n    onClose?: Function,\n    /**\n     * Determines notification colors\n     * - `default`: black\n     * - `info`: green\n     * - `warn`: yellow\n     * - `error`: red\n     */\n    overflow?: 'wrap' | 'ellipsis',\n    type: NotificationType,\n};\n\nclass Notification extends React.Component<Props> {\n    static defaultProps = {\n        overflow: OVERFLOW_WRAP,\n        type: TYPE_DEFAULT,\n    };\n\n    componentDidMount() {\n        const { duration, onClose } = this.props;\n        this.timeout = duration && onClose ? setTimeout(onClose, DURATION_TIMES[duration]) : null;\n    }\n\n    onClose = event => {\n        const { onClose } = this.props;\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        if (onClose) {\n            onClose(event);\n        }\n    };\n\n    getChildren() {\n        const { children } = this.props;\n        return typeof children === 'string' ? <span>{children}</span> : children;\n    }\n\n    timeout: TimeoutID | null;\n\n    render() {\n        const contents = this.getChildren();\n        const { intl, type, overflow } = this.props;\n        const { formatMessage } = intl;\n        const classes = classNames('notification', type, overflow);\n\n        return (\n            <div className={classes}>\n                {React.cloneElement(ICON_RENDERER[type](), {\n                    color: '#fff',\n                    height: 20,\n                    width: 20,\n                })}\n                {contents}\n                <button\n                    aria-label={formatMessage(messages.clearNotificationButtonText)}\n                    className=\"close-btn\"\n                    onClick={this.onClose}\n                    type=\"button\"\n                >\n                    <IconClose color=\"#FFF\" height={18} width={18} />\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(Notification);\n"]},"metadata":{},"sourceType":"module"}