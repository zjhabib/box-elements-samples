{"ast":null,"code":"/**\n * \n * @file Droppable area containing upload item list\n */\nimport React from 'react';\nimport makeDroppable from '../common/droppable';\nimport ItemList from './ItemList';\nimport UploadState from './UploadState';\nimport './DroppableContent.scss';\n\n/**\n * Definition for drag and drop behavior.\n */\nvar dropDefinition = {\n  /**\n   * Validates whether a file can be dropped or not.\n   */\n  dropValidator: function dropValidator(_ref, _ref2) {\n    var allowedTypes = _ref.allowedTypes;\n    var types = _ref2.types;\n    if (types instanceof Array) {\n      return Array.from(types).some(function (type) {\n        return allowedTypes.indexOf(type) > -1;\n      });\n    }\n    var allowedList = allowedTypes.filter(function (allowed) {\n      return types.contains(allowed);\n    });\n    return allowedList.length > 0;\n  },\n  /**\n   * Determines what happens after a file is dropped\n   */\n  onDrop: function onDrop(event, _ref3) {\n    var addDataTransferItemsToUploadQueue = _ref3.addDataTransferItemsToUploadQueue;\n    var dataTransfer = event.dataTransfer;\n    addDataTransferItemsToUploadQueue(dataTransfer);\n  }\n};\nvar DroppableContent = makeDroppable(dropDefinition)(function (_ref4) {\n  var canDrop = _ref4.canDrop,\n    isOver = _ref4.isOver,\n    isTouch = _ref4.isTouch,\n    view = _ref4.view,\n    items = _ref4.items,\n    addFiles = _ref4.addFiles,\n    onClick = _ref4.onClick,\n    isFolderUploadEnabled = _ref4.isFolderUploadEnabled;\n  var handleSelectFiles = function handleSelectFiles(_ref5) {\n    var files = _ref5.target.files;\n    return addFiles(files);\n  };\n  var hasItems = items.length > 0;\n  return React.createElement(\"div\", {\n    className: \"bcu-droppable-content\"\n  }, React.createElement(ItemList, {\n    items: items,\n    onClick: onClick,\n    view: view\n  }), React.createElement(UploadState, {\n    canDrop: canDrop,\n    hasItems: hasItems,\n    isFolderUploadEnabled: isFolderUploadEnabled,\n    isOver: isOver,\n    isTouch: isTouch,\n    onSelect: handleSelectFiles,\n    view: view\n  }));\n});\nexport default DroppableContent;","map":{"version":3,"sources":["../../../src/elements/content-uploader/DroppableContent.js"],"names":["React","makeDroppable","ItemList","UploadState","dropDefinition","dropValidator","allowedTypes","types","Array","from","some","indexOf","type","allowedList","filter","contains","allowed","length","onDrop","event","addDataTransferItemsToUploadQueue","dataTransfer","DroppableContent","canDrop","isOver","isTouch","view","items","addFiles","onClick","isFolderUploadEnabled","handleSelectFiles","target","files","hasItems"],"mappings":"AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAIA,OAAO,yBAAP;;AAcA;;;AAGA,IAAMC,cAAc,GAAG;EACnB;;;EAGAC,aAAa,EAAE,SAAA,aAAA,CAAA,IAAA,EAAA,KAAA,EAGV;IAAA,IAFCC,YAED,GAAA,IAAA,CAFCA,YAED;IAAA,IADCC,KACD,GAAA,KAAA,CADCA,KACD;IACD,IAAIA,KAAK,YAAYC,KAArB,EAA4B;MACxB,OAAO,KAAK,CAACC,IAAN,CAAWF,KAAX,CAAA,CAAkBG,IAAlB,CAAuB,UAAA,IAAI,EAAA;QAAA,OAAIJ,YAAY,CAACK,OAAbL,CAAqBM,IAArBN,CAAAA,GAA6B,CAAC,CAAlC;MAAA,CAA3B,CAAP;IACH;IAED,IAAMO,WAAW,GAAG,YAAY,CAACC,MAAb,CAAoB,UAAA,OAAO,EAAA;MAAA,OAAIP,KAAK,CAACQ,QAANR,CAAeS,OAAfT,CAAJ;IAAA,CAA3B,CAApB;IACA,OAAOM,WAAW,CAACI,MAAZJ,GAAqB,CAA5B;EACH,CAdkB;EAgBnB;;;EAGAK,MAAM,EAAE,SAAA,MAAA,CAACC,KAAD,EAAA,KAAA,EAAyD;IAAA,IAA/CC,iCAA+C,GAAA,KAAA,CAA/CA,iCAA+C;IAAA,IACrDC,YADqD,GACpCF,KADoC,CACrDE,YADqD;IAE7DD,iCAAiC,CAACC,YAAD,CAAjCD;EACH;AAtBkB,CAAvB;AAyBA,IAAME,gBAAgB,GAAG,aAAa,CAAClB,cAAD,CAAb,CACrB,UAAA,KAAA,EAAgG;EAAA,IAA7FmB,OAA6F,GAAA,KAAA,CAA7FA,OAA6F;IAApFC,MAAoF,GAAA,KAAA,CAApFA,MAAoF;IAA5EC,OAA4E,GAAA,KAAA,CAA5EA,OAA4E;IAAnEC,IAAmE,GAAA,KAAA,CAAnEA,IAAmE;IAA7DC,KAA6D,GAAA,KAAA,CAA7DA,KAA6D;IAAtDC,QAAsD,GAAA,KAAA,CAAtDA,QAAsD;IAA5CC,OAA4C,GAAA,KAAA,CAA5CA,OAA4C;IAAnCC,qBAAmC,GAAA,KAAA,CAAnCA,qBAAmC;EAC5F,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,KAAA,EAAA;IAAA,IAAaE,KAAb,GAAA,KAAA,CAAGD,MAAH,CAAaC,KAAb;IAAA,OAAgCL,QAAQ,CAACK,KAAD,CAAxC;EAAA,CAA1B;EACA,IAAMC,QAAQ,GAAGP,KAAK,CAACV,MAANU,GAAe,CAAhC;EAEA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;IAAU,KAAK,EAAEA,KAAjB;IAAwB,OAAO,EAAEE,OAAjC;IAA0C,IAAI,EAAEH;EAAhD,CAAA,CADJ,EAEI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACI,OAAO,EAAEH,OADb;IAEI,QAAQ,EAAEW,QAFd;IAGI,qBAAqB,EAAEJ,qBAH3B;IAII,MAAM,EAAEN,MAJZ;IAKI,OAAO,EAAEC,OALb;IAMI,QAAQ,EAAEM,iBANd;IAOI,IAAI,EAAEL;EAPV,CAAA,CAFJ,CADJ;AAcH,CAnBoB,CAAzB;AAsBA,eAAeJ,gBAAf","sourcesContent":["/**\n * @flow\n * @file Droppable area containing upload item list\n */\n\nimport React from 'react';\nimport makeDroppable from '../common/droppable';\nimport ItemList from './ItemList';\nimport UploadState from './UploadState';\nimport type { UploadItem } from '../../common/types/upload';\nimport type { View, DOMStringList } from '../../common/types/core';\n\nimport './DroppableContent.scss';\n\ntype Props = {\n    addDataTransferItemsToUploadQueue: Function,\n    addFiles: Function,\n    canDrop: boolean,\n    isFolderUploadEnabled: boolean,\n    isOver: boolean,\n    isTouch: boolean,\n    items: UploadItem[],\n    onClick: Function,\n    view: View,\n};\n\n/**\n * Definition for drag and drop behavior.\n */\nconst dropDefinition = {\n    /**\n     * Validates whether a file can be dropped or not.\n     */\n    dropValidator: (\n        { allowedTypes }: { allowedTypes: Array<string> },\n        { types }: { types: Array<string> | DOMStringList },\n    ) => {\n        if (types instanceof Array) {\n            return Array.from(types).some(type => allowedTypes.indexOf(type) > -1);\n        }\n\n        const allowedList = allowedTypes.filter(allowed => types.contains(allowed));\n        return allowedList.length > 0;\n    },\n\n    /**\n     * Determines what happens after a file is dropped\n     */\n    onDrop: (event, { addDataTransferItemsToUploadQueue }: Props) => {\n        const { dataTransfer } = event;\n        addDataTransferItemsToUploadQueue(dataTransfer);\n    },\n};\n\nconst DroppableContent = makeDroppable(dropDefinition)(\n    ({ canDrop, isOver, isTouch, view, items, addFiles, onClick, isFolderUploadEnabled }: Props) => {\n        const handleSelectFiles = ({ target: { files } }: any) => addFiles(files);\n        const hasItems = items.length > 0;\n\n        return (\n            <div className=\"bcu-droppable-content\">\n                <ItemList items={items} onClick={onClick} view={view} />\n                <UploadState\n                    canDrop={canDrop}\n                    hasItems={hasItems}\n                    isFolderUploadEnabled={isFolderUploadEnabled}\n                    isOver={isOver}\n                    isTouch={isTouch}\n                    onSelect={handleSelectFiles}\n                    view={view}\n                />\n            </div>\n        );\n    },\n);\n\nexport default DroppableContent;\n"]},"metadata":{},"sourceType":"module"}