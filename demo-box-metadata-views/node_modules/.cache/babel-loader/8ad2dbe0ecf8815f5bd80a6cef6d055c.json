{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport IconVerified from '../../icons/general/IconVerified';\nimport Label from '../label';\nimport LoadingIndicator from '../loading-indicator';\nimport Tooltip from '../tooltip';\nimport './TextInput.scss';\nvar TextInput = function TextInput(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    description = _ref.description,\n    error = _ref.error,\n    errorPosition = _ref.errorPosition,\n    hideLabel = _ref.hideLabel,\n    hideOptionalLabel = _ref.hideOptionalLabel,\n    inputRef = _ref.inputRef,\n    isLoading = _ref.isLoading,\n    isRequired = _ref.isRequired,\n    isValid = _ref.isValid,\n    label = _ref.label,\n    labelTooltip = _ref.labelTooltip,\n    rest = _objectWithoutProperties(_ref, [\"className\", \"description\", \"error\", \"errorPosition\", \"hideLabel\", \"hideOptionalLabel\", \"inputRef\", \"isLoading\", \"isRequired\", \"isValid\", \"label\", \"labelTooltip\"]);\n  var hasError = !!error;\n  var classes = classNames(className, 'text-input-container', {\n    'show-error': hasError\n  });\n  var descriptionID = React.useRef(uniqueId('description')).current;\n  var ariaAttrs = {\n    'aria-invalid': hasError,\n    'aria-required': isRequired,\n    'aria-describedby': description ? descriptionID : undefined\n  };\n  return React.createElement(\"div\", {\n    className: classes\n  }, React.createElement(Label, {\n    hideLabel: hideLabel,\n    showOptionalText: !hideOptionalLabel && !isRequired,\n    text: label,\n    tooltip: labelTooltip\n  }, !!description && React.createElement(\"div\", {\n    id: descriptionID,\n    className: \"text-input-description\"\n  }, description), React.createElement(Tooltip, {\n    isShown: hasError,\n    position: errorPosition || 'middle-right',\n    text: error || '',\n    theme: \"error\"\n  }, React.createElement(\"input\", _extends({\n    ref: inputRef,\n    required: isRequired\n  }, ariaAttrs, rest))), isLoading && !isValid && React.createElement(LoadingIndicator, {\n    className: \"text-input-loading\"\n  }), isValid && !isLoading && React.createElement(IconVerified, {\n    className: \"text-input-verified\"\n  })));\n};\nTextInput.displayName = 'TextInput';\nexport default TextInput;","map":{"version":3,"sources":["../../../src/components/text-input/TextInput.js"],"names":["React","classNames","uniqueId","IconVerified","Label","LoadingIndicator","Tooltip","TextInput","className","description","error","errorPosition","hideLabel","hideOptionalLabel","inputRef","isLoading","isRequired","isValid","label","labelTooltip","rest","hasError","classes","descriptionID","useRef","current","ariaAttrs","undefined","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAOC,YAAP,MAAyB,kCAAzB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,OAAP,MAAoB,YAApB;AAGA,OAAO,kBAAP;AAyBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAcL;EAAA,IAAA,cAAA,GAAA,IAAA,CAbTC,SAaS;IAbTA,SAaS,GAAA,cAAA,KAAA,KAAA,CAAA,GAbG,EAaH,GAAA,cAAA;IAZTC,WAYS,GAAA,IAAA,CAZTA,WAYS;IAXTC,KAWS,GAAA,IAAA,CAXTA,KAWS;IAVTC,aAUS,GAAA,IAAA,CAVTA,aAUS;IATTC,SASS,GAAA,IAAA,CATTA,SASS;IARTC,iBAQS,GAAA,IAAA,CARTA,iBAQS;IAPTC,QAOS,GAAA,IAAA,CAPTA,QAOS;IANTC,SAMS,GAAA,IAAA,CANTA,SAMS;IALTC,UAKS,GAAA,IAAA,CALTA,UAKS;IAJTC,OAIS,GAAA,IAAA,CAJTA,OAIS;IAHTC,KAGS,GAAA,IAAA,CAHTA,KAGS;IAFTC,YAES,GAAA,IAAA,CAFTA,YAES;IADNC,IACM,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,aAAA,EAAA,OAAA,EAAA,eAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,SAAA,EAAA,OAAA,EAAA,cAAA,CAAA,CAAA;EACT,IAAMC,QAAQ,GAAG,CAAC,CAACX,KAAnB;EACA,IAAMY,OAAO,GAAGrB,UAAU,CAACO,SAAD,EAAY,sBAAZ,EAAoC;IAC1D,YAAA,EAAca;EAD4C,CAApC,CAA1B;EAIA,IAAME,aAAa,GAAGvB,KAAK,CAACwB,MAANxB,CAAaE,QAAQ,CAAC,aAAD,CAArBF,CAAAA,CAAsCyB,OAA5D;EAEA,IAAMC,SAAS,GAAG;IACd,cAAA,EAAgBL,QADF;IAEd,eAAA,EAAiBL,UAFH;IAGd,kBAAA,EAAoBP,WAAW,GAAGc,aAAH,GAAmBI;EAHpC,CAAlB;EAMA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAEL;EAAhB,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA;IACI,SAAS,EAAEV,SADf;IAEI,gBAAgB,EAAE,CAACC,iBAAD,IAAsB,CAACG,UAF7C;IAGI,IAAI,EAAEE,KAHV;IAII,OAAO,EAAEC;EAJb,CAAA,EAMK,CAAC,CAACV,WAAF,IACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,EAAE,EAAEc,aAAT;IAAwB,SAAS,EAAC;EAAlC,CAAA,EACKd,WADL,CAPR,EAWI,KAAA,CAAA,aAAA,CAAC,OAAD,EAAA;IAAS,OAAO,EAAEY,QAAlB;IAA4B,QAAQ,EAAEV,aAAa,IAAI,cAAvD;IAAuE,IAAI,EAAED,KAAK,IAAI,EAAtF;IAA0F,KAAK,EAAC;EAAhG,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;IAAO,GAAG,EAAEI,QAAZ;IAAsB,QAAQ,EAAEE;EAAhC,CAAA,EAAgDU,SAAhD,EAA+DN,IAA/D,CAAA,CADJ,CAXJ,EAcKL,SAAS,IAAI,CAACE,OAAdF,IAAyB,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA;IAAkB,SAAS,EAAC;EAA5B,CAAA,CAd9B,EAeKE,OAAO,IAAI,CAACF,SAAZE,IAAyB,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;IAAc,SAAS,EAAC;EAAxB,CAAA,CAf9B,CADJ,CADJ;AAqBH,CAjDD;AAmDAV,SAAS,CAACqB,WAAVrB,GAAwB,WAAxBA;AAGA,eAAeA,SAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport IconVerified from '../../icons/general/IconVerified';\n\nimport Label from '../label';\nimport LoadingIndicator from '../loading-indicator';\nimport Tooltip from '../tooltip';\nimport type { Position } from '../tooltip';\n\nimport './TextInput.scss';\n\ntype Props = {\n    /** Add a class to the component */\n    className?: string,\n    description?: React.Node,\n    error?: React.Node,\n    /** Renders error tooltip at the specified position (positions are those from Tooltip) */\n    errorPosition?: Position,\n    /** Hides the label */\n    hideLabel?: boolean,\n    /** Hides (optional) text from the label */\n    hideOptionalLabel?: boolean,\n    inputRef?: Function, // @TODO: eventually rename to innerRef for consistancy across all form elements\n    /** Renders a loading indicator within the component when true */\n    isLoading?: boolean,\n    /** Makes the input value required */\n    isRequired?: boolean,\n    /** Renders a green verified checkmark within the component when true */\n    isValid?: boolean,\n    /** Label displayed for the text input */\n    label: React.Node,\n    labelTooltip?: React.Node,\n};\n\nconst TextInput = ({\n    className = '',\n    description,\n    error,\n    errorPosition,\n    hideLabel,\n    hideOptionalLabel,\n    inputRef,\n    isLoading,\n    isRequired,\n    isValid,\n    label,\n    labelTooltip,\n    ...rest\n}: Props) => {\n    const hasError = !!error;\n    const classes = classNames(className, 'text-input-container', {\n        'show-error': hasError,\n    });\n\n    const descriptionID = React.useRef(uniqueId('description')).current;\n\n    const ariaAttrs = {\n        'aria-invalid': hasError,\n        'aria-required': isRequired,\n        'aria-describedby': description ? descriptionID : undefined,\n    };\n\n    return (\n        <div className={classes}>\n            <Label\n                hideLabel={hideLabel}\n                showOptionalText={!hideOptionalLabel && !isRequired}\n                text={label}\n                tooltip={labelTooltip}\n            >\n                {!!description && (\n                    <div id={descriptionID} className=\"text-input-description\">\n                        {description}\n                    </div>\n                )}\n                <Tooltip isShown={hasError} position={errorPosition || 'middle-right'} text={error || ''} theme=\"error\">\n                    <input ref={inputRef} required={isRequired} {...ariaAttrs} {...rest} />\n                </Tooltip>\n                {isLoading && !isValid && <LoadingIndicator className=\"text-input-loading\" />}\n                {isValid && !isLoading && <IconVerified className=\"text-input-verified\" />}\n            </Label>\n        </div>\n    );\n};\n\nTextInput.displayName = 'TextInput';\n\nexport type TextInputProps = Props;\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}