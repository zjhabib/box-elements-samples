{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { DEFAULT_MAX_APP_COUNT, SECURITY_CONTROLS_FORMAT } from '../constants';\nimport { getShortSecurityControlsMessage, getFullSecurityControlsMessages } from './utils';\nimport messages from './messages';\nimport PlainButton from '../../../components/plain-button';\nimport Label from '../../../components/label/Label';\nimport SecurityControlsItem from './SecurityControlsItem';\nimport SecurityControlsModal from './SecurityControlsModal';\nimport './SecurityControls.scss';\nvar FULL = SECURITY_CONTROLS_FORMAT.FULL,\n  SHORT = SECURITY_CONTROLS_FORMAT.SHORT,\n  SHORT_WITH_BTN = SECURITY_CONTROLS_FORMAT.SHORT_WITH_BTN;\nvar SecurityControls = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SecurityControls, _React$Component);\n  function SecurityControls() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, SecurityControls);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SecurityControls)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isSecurityControlsModalOpen: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openModal\", function () {\n      return _this.setState({\n        isSecurityControlsModalOpen: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"closeModal\", function () {\n      return _this.setState({\n        isSecurityControlsModalOpen: false\n      });\n    });\n    return _this;\n  }\n  _createClass(SecurityControls, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        classificationColor = _this$props.classificationColor,\n        classificationName = _this$props.classificationName,\n        controls = _this$props.controls,\n        controlsFormat = _this$props.controlsFormat,\n        definition = _this$props.definition,\n        itemName = _this$props.itemName,\n        maxAppCount = _this$props.maxAppCount,\n        shouldRenderLabel = _this$props.shouldRenderLabel;\n      var items = [];\n      var modalItems;\n      if (controlsFormat === FULL) {\n        items = getFullSecurityControlsMessages(controls, maxAppCount);\n      } else {\n        var shortMessage = getShortSecurityControlsMessage(controls);\n        items = shortMessage ? [shortMessage] : [];\n        if (items.length && controlsFormat === SHORT_WITH_BTN) {\n          modalItems = getFullSecurityControlsMessages(controls, maxAppCount);\n        }\n      }\n      if (!items.length) {\n        return null;\n      }\n      var isSecurityControlsModalOpen = this.state.isSecurityControlsModalOpen;\n      var shouldShowSecurityControlsModal = controlsFormat === SHORT_WITH_BTN && !!itemName && !!classificationName && !!definition;\n      var itemsList = React.createElement(\"ul\", {\n        className: \"bdl-SecurityControls\"\n      }, items.map(function (_ref) {\n        var message = _ref.message,\n          tooltipMessage = _ref.tooltipMessage;\n        return React.createElement(SecurityControlsItem, {\n          key: message.id,\n          message: message,\n          tooltipMessage: tooltipMessage\n        });\n      }));\n      if (shouldRenderLabel) {\n        itemsList = React.createElement(Label, {\n          text: React.createElement(FormattedMessage, messages.securityControlsLabel)\n        }, itemsList);\n      }\n      return React.createElement(React.Fragment, null, itemsList, shouldShowSecurityControlsModal && React.createElement(React.Fragment, null, React.createElement(PlainButton, {\n        className: \"lnk\",\n        onClick: this.openModal,\n        type: \"button\"\n      }, React.createElement(FormattedMessage, messages.viewAll)), React.createElement(SecurityControlsModal, {\n        classificationColor: classificationColor,\n        classificationName: classificationName,\n        closeModal: this.closeModal,\n        definition: definition,\n        itemName: itemName,\n        isSecurityControlsModalOpen: isSecurityControlsModalOpen,\n        modalItems: modalItems\n      })));\n    }\n  }]);\n  return SecurityControls;\n}(React.Component);\n_defineProperty(SecurityControls, \"defaultProps\", {\n  classificationName: '',\n  definition: '',\n  itemName: '',\n  controls: {},\n  controlsFormat: SHORT,\n  maxAppCount: DEFAULT_MAX_APP_COUNT,\n  shouldRenderLabel: false\n});\nexport default SecurityControls;","map":{"version":3,"sources":["../../../../src/features/classification/security-controls/SecurityControls.js"],"names":["React","FormattedMessage","DEFAULT_MAX_APP_COUNT","SECURITY_CONTROLS_FORMAT","getShortSecurityControlsMessage","getFullSecurityControlsMessages","messages","PlainButton","Label","SecurityControlsItem","SecurityControlsModal","FULL","SHORT","SHORT_WITH_BTN","SecurityControls","Component","classificationName","definition","itemName","controls","controlsFormat","maxAppCount","shouldRenderLabel","isSecurityControlsModalOpen","setState","classificationColor","props","items","modalItems","shortMessage","length","state","shouldShowSecurityControlsModal","itemsList","map","message","tooltipMessage","id","securityControlsLabel","openModal","viewAll","closeModal"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { DEFAULT_MAX_APP_COUNT, SECURITY_CONTROLS_FORMAT } from '../constants';\nimport { getShortSecurityControlsMessage, getFullSecurityControlsMessages } from './utils';\nimport messages from './messages';\nimport PlainButton from '../../../components/plain-button';\nimport Label from '../../../components/label/Label';\nimport SecurityControlsItem from './SecurityControlsItem';\nimport SecurityControlsModal from './SecurityControlsModal';\nimport type { Controls, ControlsFormat } from '../flowTypes';\n\nimport './SecurityControls.scss';\n\nconst { FULL, SHORT, SHORT_WITH_BTN } = SECURITY_CONTROLS_FORMAT;\n\ntype Props = {\n    classificationColor?: string,\n    classificationName?: string,\n    controls: Controls,\n    controlsFormat: ControlsFormat,\n    definition?: string,\n    itemName?: string,\n    maxAppCount?: number,\n    shouldRenderLabel?: boolean,\n};\n\ntype State = {\n    isSecurityControlsModalOpen: boolean,\n};\n\nclass SecurityControls extends React.Component<Props, State> {\n    static defaultProps = {\n        classificationName: '',\n        definition: '',\n        itemName: '',\n        controls: {},\n        controlsFormat: SHORT,\n        maxAppCount: DEFAULT_MAX_APP_COUNT,\n        shouldRenderLabel: false,\n    };\n\n    state = {\n        isSecurityControlsModalOpen: false,\n    };\n\n    openModal = () => this.setState({ isSecurityControlsModalOpen: true });\n\n    closeModal = () => this.setState({ isSecurityControlsModalOpen: false });\n\n    render() {\n        const {\n            classificationColor,\n            classificationName,\n            controls,\n            controlsFormat,\n            definition,\n            itemName,\n            maxAppCount,\n            shouldRenderLabel,\n        } = this.props;\n\n        let items = [];\n        let modalItems;\n\n        if (controlsFormat === FULL) {\n            items = getFullSecurityControlsMessages(controls, maxAppCount);\n        } else {\n            const shortMessage = getShortSecurityControlsMessage(controls);\n            items = shortMessage ? [shortMessage] : [];\n\n            if (items.length && controlsFormat === SHORT_WITH_BTN) {\n                modalItems = getFullSecurityControlsMessages(controls, maxAppCount);\n            }\n        }\n\n        if (!items.length) {\n            return null;\n        }\n\n        const { isSecurityControlsModalOpen } = this.state;\n        const shouldShowSecurityControlsModal =\n            controlsFormat === SHORT_WITH_BTN && !!itemName && !!classificationName && !!definition;\n\n        let itemsList = (\n            <ul className=\"bdl-SecurityControls\">\n                {items.map(({ message, tooltipMessage }) => (\n                    <SecurityControlsItem key={message.id} message={message} tooltipMessage={tooltipMessage} />\n                ))}\n            </ul>\n        );\n\n        if (shouldRenderLabel) {\n            itemsList = <Label text={<FormattedMessage {...messages.securityControlsLabel} />}>{itemsList}</Label>;\n        }\n\n        return (\n            <>\n                {itemsList}\n                {shouldShowSecurityControlsModal && (\n                    <>\n                        <PlainButton className=\"lnk\" onClick={this.openModal} type=\"button\">\n                            <FormattedMessage {...messages.viewAll} />\n                        </PlainButton>\n                        <SecurityControlsModal\n                            classificationColor={classificationColor}\n                            classificationName={classificationName}\n                            closeModal={this.closeModal}\n                            definition={definition}\n                            itemName={itemName}\n                            isSecurityControlsModalOpen={isSecurityControlsModalOpen}\n                            modalItems={modalItems}\n                        />\n                    </>\n                )}\n            </>\n        );\n    }\n}\n\nexport type { Props as SecurityControlsProps };\nexport default SecurityControls;\n"]},"metadata":{},"sourceType":"module"}