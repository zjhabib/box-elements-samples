{"ast":null,"code":"var _statusMessageKeyMap, _typeKeyMap;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { TASK_NEW_APPROVED, TASK_NEW_REJECTED, TASK_NEW_COMPLETED, TASK_NEW_NOT_STARTED, TASK_NEW_IN_PROGRESS } from '../../../../constants';\nimport messages from './messages'; // $FlowFixMe LabelPill is in typescript\n\nimport LabelPill from '../../../../components/label-pill';\nvar statusMessageKeyMap = (_statusMessageKeyMap = {}, _defineProperty(_statusMessageKeyMap, TASK_NEW_APPROVED, messages.taskFeedApprovedUppercaseLabel), _defineProperty(_statusMessageKeyMap, TASK_NEW_COMPLETED, messages.taskFeedCompletedUppercaseLabel), _defineProperty(_statusMessageKeyMap, TASK_NEW_REJECTED, messages.taskFeedRejectedUppercaseLabel), _defineProperty(_statusMessageKeyMap, TASK_NEW_NOT_STARTED, messages.taskFeedInProgressUppercaseLabel), _defineProperty(_statusMessageKeyMap, TASK_NEW_IN_PROGRESS, messages.taskFeedInProgressUppercaseLabel), _statusMessageKeyMap);\nvar typeKeyMap = (_typeKeyMap = {}, _defineProperty(_typeKeyMap, TASK_NEW_APPROVED, 'success'), _defineProperty(_typeKeyMap, TASK_NEW_COMPLETED, 'success'), _defineProperty(_typeKeyMap, TASK_NEW_REJECTED, 'error'), _defineProperty(_typeKeyMap, TASK_NEW_NOT_STARTED, 'default'), _defineProperty(_typeKeyMap, TASK_NEW_IN_PROGRESS, 'default'), _typeKeyMap);\nvar Status = React.memo(function (_ref) {\n  var status = _ref.status;\n  return React.createElement(LabelPill.Pill, {\n    type: typeKeyMap[status]\n  }, React.createElement(LabelPill.Text, null, React.createElement(FormattedMessage, statusMessageKeyMap[status])));\n});\nexport default Status;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/TaskStatus.js"],"names":["React","FormattedMessage","TASK_NEW_APPROVED","TASK_NEW_REJECTED","TASK_NEW_COMPLETED","TASK_NEW_NOT_STARTED","TASK_NEW_IN_PROGRESS","messages","LabelPill","statusMessageKeyMap","taskFeedApprovedUppercaseLabel","taskFeedCompletedUppercaseLabel","taskFeedRejectedUppercaseLabel","taskFeedInProgressUppercaseLabel","typeKeyMap","Status","memo","status"],"mappings":";;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SACIC,iBADJ,EAEIC,iBAFJ,EAGIC,kBAHJ,EAIIC,oBAJJ,EAKIC,oBALJ,QAMO,uBANP;AAOA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AAOA,IAAMC,mBAAmB,IAAA,oBAAA,GAAA,CAAA,CAAA,EAAA,eAAA,CAAA,oBAAA,EACpBP,iBADoB,EACAK,QAAQ,CAACG,8BADT,CAAA,EAAA,eAAA,CAAA,oBAAA,EAEpBN,kBAFoB,EAECG,QAAQ,CAACI,+BAFV,CAAA,EAAA,eAAA,CAAA,oBAAA,EAGpBR,iBAHoB,EAGAI,QAAQ,CAACK,8BAHT,CAAA,EAAA,eAAA,CAAA,oBAAA,EAIpBP,oBAJoB,EAIGE,QAAQ,CAACM,gCAJZ,CAAA,EAAA,eAAA,CAAA,oBAAA,EAKpBP,oBALoB,EAKGC,QAAQ,CAACM,gCALZ,CAAA,EAAA,oBAAA,CAAzB;AAQA,IAAMC,UAAU,IAAA,WAAA,GAAA,CAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EACXZ,iBADW,EACS,SADT,CAAA,EAAA,eAAA,CAAA,WAAA,EAEXE,kBAFW,EAEU,SAFV,CAAA,EAAA,eAAA,CAAA,WAAA,EAGXD,iBAHW,EAGS,OAHT,CAAA,EAAA,eAAA,CAAA,WAAA,EAIXE,oBAJW,EAIY,SAJZ,CAAA,EAAA,eAAA,CAAA,WAAA,EAKXC,oBALW,EAKY,SALZ,CAAA,EAAA,WAAA,CAAhB;AAQA,IAAMS,MAAM,GAAG,KAAK,CAACC,IAAN,CAAkB,UAAA,IAAA,EAAA;EAAA,IAAGC,MAAH,GAAA,IAAA,CAAGA,MAAH;EAAA,OAC7B,KAAA,CAAA,aAAA,CAAC,SAAD,CAAW,IAAX,EAAA;IAAgB,IAAI,EAAEH,UAAU,CAACG,MAAD;EAAhC,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,SAAD,CAAW,IAAX,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBR,mBAAmB,CAACQ,MAAD,CAAzC,CADJ,CADJ,CAD6B;AAAA,CAAlB,CAAf;AAQA,eAAeF,MAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    TASK_NEW_APPROVED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_COMPLETED,\n    TASK_NEW_NOT_STARTED,\n    TASK_NEW_IN_PROGRESS,\n} from '../../../../constants';\nimport messages from './messages';\n// $FlowFixMe LabelPill is in typescript\nimport LabelPill from '../../../../components/label-pill';\nimport type { TaskStatus } from '../../../../common/types/tasks';\n\ntype Props = {|\n    status: TaskStatus,\n|};\n\nconst statusMessageKeyMap = {\n    [TASK_NEW_APPROVED]: messages.taskFeedApprovedUppercaseLabel,\n    [TASK_NEW_COMPLETED]: messages.taskFeedCompletedUppercaseLabel,\n    [TASK_NEW_REJECTED]: messages.taskFeedRejectedUppercaseLabel,\n    [TASK_NEW_NOT_STARTED]: messages.taskFeedInProgressUppercaseLabel,\n    [TASK_NEW_IN_PROGRESS]: messages.taskFeedInProgressUppercaseLabel,\n};\n\nconst typeKeyMap = {\n    [TASK_NEW_APPROVED]: 'success',\n    [TASK_NEW_COMPLETED]: 'success',\n    [TASK_NEW_REJECTED]: 'error',\n    [TASK_NEW_NOT_STARTED]: 'default',\n    [TASK_NEW_IN_PROGRESS]: 'default',\n};\n\nconst Status = React.memo<Props>(({ status }: Props) => (\n    <LabelPill.Pill type={typeKeyMap[status]}>\n        <LabelPill.Text>\n            <FormattedMessage {...statusMessageKeyMap[status]} />\n        </LabelPill.Text>\n    </LabelPill.Pill>\n));\n\nexport default Status;\n"]},"metadata":{},"sourceType":"module"}