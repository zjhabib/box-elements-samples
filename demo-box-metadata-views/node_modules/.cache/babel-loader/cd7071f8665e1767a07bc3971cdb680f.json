{"ast":null,"code":"import * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport IconPlusThin from '../../icons/general/IconPlusThin';\nimport IconMinusThin from '../../icons/general/IconMinusThin';\nimport PlainButton from '../plain-button/PlainButton';\nimport messages from '../../elements/common/messages';\nimport { bdlGray50 } from '../../styles/variables';\nimport './GridViewSlider.scss';\nvar GridViewSlider = function GridViewSlider(_ref) {\n  var columnCount = _ref.columnCount,\n    gridMaxColumns = _ref.gridMaxColumns,\n    gridMinColumns = _ref.gridMinColumns,\n    intl = _ref.intl,\n    maxColumnCount = _ref.maxColumnCount,\n    _onChange = _ref.onChange;\n  var RANGE_STEP = 1; // This math is necessary since the highest value of the slider should result in\n  // the lowest number of columns\n\n  var RANGE_MIN = gridMaxColumns - maxColumnCount + 1;\n  var RANGE_MAX = gridMaxColumns - gridMinColumns + 1;\n  var sliderValue = RANGE_MAX - columnCount + 1;\n  return gridMinColumns < maxColumnCount && React.createElement(\"div\", {\n    className: \"bdl-GridViewSlider\"\n  }, React.createElement(PlainButton, {\n    className: \"bdl-GridViewSlider-button\",\n    onClick: function onClick() {\n      _onChange(Math.max(RANGE_MIN, sliderValue - RANGE_STEP));\n    },\n    type: \"button\",\n    \"aria-label\": intl.formatMessage(messages.gridViewDecreaseColumnSize)\n  }, React.createElement(IconMinusThin, {\n    color: bdlGray50,\n    width: 14,\n    height: 14\n  })), React.createElement(\"input\", {\n    className: \"bdl-GridViewSlider-range\",\n    max: RANGE_MAX,\n    min: RANGE_MIN,\n    onChange: function onChange(event) {\n      _onChange(event.currentTarget.valueAsNumber);\n    },\n    step: RANGE_STEP,\n    type: \"range\",\n    value: sliderValue\n  }), React.createElement(PlainButton, {\n    className: \"bdl-GridViewSlider-button\",\n    onClick: function onClick() {\n      _onChange(Math.min(RANGE_MAX, sliderValue + RANGE_STEP));\n    },\n    type: \"button\",\n    \"aria-label\": intl.formatMessage(messages.gridViewIncreaseColumnSize)\n  }, React.createElement(IconPlusThin, {\n    color: bdlGray50,\n    width: 14,\n    height: 14\n  })));\n};\nexport default injectIntl(GridViewSlider);","map":{"version":3,"sources":["../../../src/components/grid-view/GridViewSlider.js"],"names":["React","injectIntl","IconPlusThin","IconMinusThin","PlainButton","messages","bdlGray50","GridViewSlider","columnCount","gridMaxColumns","gridMinColumns","intl","maxColumnCount","onChange","RANGE_STEP","RANGE_MIN","RANGE_MAX","sliderValue","Math","max","formatMessage","gridViewDecreaseColumnSize","event","currentTarget","valueAsNumber","min","gridViewIncreaseColumnSize"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAO,uBAAP;AAUA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAA4F;EAAA,IAAzFC,WAAyF,GAAA,IAAA,CAAzFA,WAAyF;IAA5EC,cAA4E,GAAA,IAAA,CAA5EA,cAA4E;IAA5DC,cAA4D,GAAA,IAAA,CAA5DA,cAA4D;IAA5CC,IAA4C,GAAA,IAAA,CAA5CA,IAA4C;IAAtCC,cAAsC,GAAA,IAAA,CAAtCA,cAAsC;IAAtBC,SAAsB,GAAA,IAAA,CAAtBA,QAAsB;EAC/G,IAAMC,UAAU,GAAG,CAAnB,CAD+G,CAG/G;EACA;;EACA,IAAMC,SAAS,GAAGN,cAAc,GAAGG,cAAjBH,GAAkC,CAApD;EACA,IAAMO,SAAS,GAAGP,cAAc,GAAGC,cAAjBD,GAAkC,CAApD;EACA,IAAMQ,WAAW,GAAGD,SAAS,GAAGR,WAAZQ,GAA0B,CAA9C;EAEA,OACIN,cAAc,GAAGE,cAAjBF,IACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACI,SAAS,EAAC,2BADd;IAEI,OAAO,EAAE,SAAA,OAAA,CAAA,EAAM;MACXG,SAAQ,CAACK,IAAI,CAACC,GAALD,CAASH,SAATG,EAAoBD,WAAW,GAAGH,UAAlCI,CAAD,CAARL;IACH,CAJL;IAKI,IAAI,EAAC,QALT;IAMI,YAAA,EAAYF,IAAI,CAACS,aAALT,CAAmBN,QAAQ,CAACgB,0BAA5BV;EANhB,CAAA,EAQI,KAAA,CAAA,aAAA,CAAC,aAAD,EAAA;IAAe,KAAK,EAAEL,SAAtB;IAAiC,KAAK,EAAE,EAAxC;IAA4C,MAAM,EAAE;EAApD,CAAA,CARJ,CADJ,EAWI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;IACI,SAAS,EAAC,0BADd;IAEI,GAAG,EAAEU,SAFT;IAGI,GAAG,EAAED,SAHT;IAII,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAK,EAAI;MACfF,SAAQ,CAACS,KAAK,CAACC,aAAND,CAAoBE,aAArB,CAARX;IACH,CANL;IAOI,IAAI,EAAEC,UAPV;IAQI,IAAI,EAAC,OART;IASI,KAAK,EAAEG;EATX,CAAA,CAXJ,EAsBI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACI,SAAS,EAAC,2BADd;IAEI,OAAO,EAAE,SAAA,OAAA,CAAA,EAAM;MACXJ,SAAQ,CAACK,IAAI,CAACO,GAALP,CAASF,SAATE,EAAoBD,WAAW,GAAGH,UAAlCI,CAAD,CAARL;IACH,CAJL;IAKI,IAAI,EAAC,QALT;IAMI,YAAA,EAAYF,IAAI,CAACS,aAALT,CAAmBN,QAAQ,CAACqB,0BAA5Bf;EANhB,CAAA,EAQI,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;IAAc,KAAK,EAAEL,SAArB;IAAgC,KAAK,EAAE,EAAvC;IAA2C,MAAM,EAAE;EAAnD,CAAA,CARJ,CAtBJ,CAFR;AAqCH,CA9CD;AAgDA,eAAeL,UAAU,CAACM,cAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport IconPlusThin from '../../icons/general/IconPlusThin';\nimport IconMinusThin from '../../icons/general/IconMinusThin';\nimport PlainButton from '../plain-button/PlainButton';\nimport messages from '../../elements/common/messages';\nimport { bdlGray50 } from '../../styles/variables';\nimport './GridViewSlider.scss';\n\ntype Props = {\n    columnCount: number,\n    gridMaxColumns: number,\n    gridMinColumns: number,\n    maxColumnCount: number,\n    onChange: (newSliderValue: number) => void,\n} & InjectIntlProvidedProps;\n\nconst GridViewSlider = ({ columnCount, gridMaxColumns, gridMinColumns, intl, maxColumnCount, onChange }: Props) => {\n    const RANGE_STEP = 1;\n\n    // This math is necessary since the highest value of the slider should result in\n    // the lowest number of columns\n    const RANGE_MIN = gridMaxColumns - maxColumnCount + 1;\n    const RANGE_MAX = gridMaxColumns - gridMinColumns + 1;\n    const sliderValue = RANGE_MAX - columnCount + 1;\n\n    return (\n        gridMinColumns < maxColumnCount && (\n            <div className=\"bdl-GridViewSlider\">\n                <PlainButton\n                    className=\"bdl-GridViewSlider-button\"\n                    onClick={() => {\n                        onChange(Math.max(RANGE_MIN, sliderValue - RANGE_STEP));\n                    }}\n                    type=\"button\"\n                    aria-label={intl.formatMessage(messages.gridViewDecreaseColumnSize)}\n                >\n                    <IconMinusThin color={bdlGray50} width={14} height={14} />\n                </PlainButton>\n                <input\n                    className=\"bdl-GridViewSlider-range\"\n                    max={RANGE_MAX}\n                    min={RANGE_MIN}\n                    onChange={event => {\n                        onChange(event.currentTarget.valueAsNumber);\n                    }}\n                    step={RANGE_STEP}\n                    type=\"range\"\n                    value={sliderValue}\n                />\n                <PlainButton\n                    className=\"bdl-GridViewSlider-button\"\n                    onClick={() => {\n                        onChange(Math.min(RANGE_MAX, sliderValue + RANGE_STEP));\n                    }}\n                    type=\"button\"\n                    aria-label={intl.formatMessage(messages.gridViewIncreaseColumnSize)}\n                >\n                    <IconPlusThin color={bdlGray50} width={14} height={14} />\n                </PlainButton>\n            </div>\n        )\n    );\n};\n\nexport default injectIntl(GridViewSlider);\n"]},"metadata":{},"sourceType":"module"}