{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\nvar CellSizeAndPositionManager = /*#__PURE__*/\nfunction () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n      cellSizeGetter = _ref.cellSizeGetter,\n      estimatedCellSize = _ref.estimatedCellSize;\n    _classCallCheck(this, CellSizeAndPositionManager);\n    _defineProperty(this, \"_cellSizeAndPositionData\", {});\n    _defineProperty(this, \"_lastMeasuredIndex\", -1);\n    _defineProperty(this, \"_lastBatchedIndex\", -1);\n    _defineProperty(this, \"_cellCount\", void 0);\n    _defineProperty(this, \"_cellSizeGetter\", void 0);\n    _defineProperty(this, \"_estimatedCellSize\", void 0);\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n  _createClass(CellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n        estimatedCellSize = _ref2.estimatedCellSize,\n        cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error(\"Requested index \".concat(index, \" is outside of range 0..\").concat(this._cellCount));\n      }\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n          if (size === undefined || isNaN(size)) {\n            throw Error(\"Invalid size returned for cell \".concat(i, \" of value \").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n        align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n        containerSize = _ref3.containerSize,\n        currentOffset = _ref3.currentOffset,\n        targetIndex = _ref3.targetIndex;\n      if (containerSize <= 0) {\n        return 0;\n      }\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n        case 'end':\n          idealOffset = minOffset;\n          break;\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n        offset = params.offset;\n      var totalSize = this.getTotalSize();\n      if (totalSize === 0) {\n        return {};\n      }\n      var maxOffset = offset + containerSize;\n      var start = this._findNearestCell(offset);\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: \"_binarySearch\",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_exponentialSearch\",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n  }, {\n    key: \"_findNearestCell\",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error(\"Invalid offset \".concat(offset, \" specified\"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n  return CellSizeAndPositionManager;\n}();\nexport { CellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";","map":{"version":3,"names":["_classCallCheck","_createClass","_defineProperty","CellSizeAndPositionManager","_ref","cellCount","cellSizeGetter","estimatedCellSize","_cellSizeGetter","_cellCount","_estimatedCellSize","key","value","areOffsetsAdjusted","configure","_ref2","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","_lastMeasuredIndex","getOffsetAdjustment","getSizeAndPositionOfCell","index","Error","concat","lastMeasuredCellSizeAndPosition","getSizeAndPositionOfLastMeasuredCell","offset","size","i","undefined","isNaN","_cellSizeAndPositionData","_lastBatchedIndex","getTotalSize","totalSizeOfMeasuredCells","numUnmeasuredCells","totalSizeOfUnmeasuredCells","getUpdatedOffsetForIndex","_ref3","_ref3$align","align","containerSize","currentOffset","targetIndex","datum","maxOffset","minOffset","idealOffset","Math","max","min","totalSize","getVisibleCellRange","params","start","_findNearestCell","stop","resetCell","_binarySearch","high","low","middle","floor","_exponentialSearch","interval","lastMeasuredIndex","default","bpfrpt_proptype_Alignment","bpfrpt_proptype_CellSizeGetter","bpfrpt_proptype_VisibleCellRange"],"sources":["/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/react-virtualized/dist/es/Grid/utils/CellSizeAndPositionManager.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\nvar CellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n\n    _classCallCheck(this, CellSizeAndPositionManager);\n\n    _defineProperty(this, \"_cellSizeAndPositionData\", {});\n\n    _defineProperty(this, \"_lastMeasuredIndex\", -1);\n\n    _defineProperty(this, \"_lastBatchedIndex\", -1);\n\n    _defineProperty(this, \"_cellCount\", void 0);\n\n    _defineProperty(this, \"_cellSizeGetter\", void 0);\n\n    _defineProperty(this, \"_estimatedCellSize\", void 0);\n\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  _createClass(CellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error(\"Requested index \".concat(index, \" is outside of range 0..\").concat(this._cellCount));\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (size === undefined || isNaN(size)) {\n            throw Error(\"Invalid size returned for cell \".concat(i, \" of value \").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: \"_binarySearch\",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_exponentialSearch\",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: \"_findNearestCell\",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error(\"Invalid offset \".concat(offset, \" specified\"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n\n  return CellSizeAndPositionManager;\n}();\n\nexport { CellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";"],"mappings":"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"},"metadata":{},"sourceType":"module"}