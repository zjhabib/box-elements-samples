{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { ContentState, EditorState, Modifier, SelectionState } from 'draft-js';\nimport DraftMentionDecorator from './DraftMentionDecorator'; // returns data for first mention in a string\n\nvar getMentionFromText = function getMentionFromText(text) {\n  // RegEx.exec() is stateful, so we create a new regex instance each time\n  var mentionRegex = /([@＠﹫])\\[([0-9]+):([^\\]]+)]/gi;\n  var matchArray = mentionRegex.exec(text);\n  if (!matchArray) {\n    return null;\n  }\n  var _matchArray = _slicedToArray(matchArray, 4),\n    fullMatch = _matchArray[0],\n    triggerSymbol = _matchArray[1],\n    id = _matchArray[2],\n    name = _matchArray[3];\n  var start = matchArray.index;\n  var end = start + fullMatch.length;\n  var data = {\n    id: id,\n    name: name,\n    content: \"\".concat(triggerSymbol).concat(name)\n  };\n  return {\n    start: start,\n    end: end,\n    data: data\n  };\n}; // creates draftjs state with mentions parsed into entities\n\nvar createMentionSelectorState = function createMentionSelectorState() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var contentState = ContentState.createFromText(message);\n  var contentBlock = contentState.getFirstBlock();\n  while (contentBlock != null) {\n    var text = contentBlock.getText();\n    var mention = text ? getMentionFromText(text) : null;\n    if (mention == null) {\n      contentBlock = contentState.getBlockAfter(contentBlock.getKey());\n    } else {\n      var data = mention.data,\n        start = mention.start,\n        end = mention.end;\n      contentState.createEntity('MENTION', 'IMMUTABLE', data);\n      var mentionEntityKey = contentState.getLastCreatedEntityKey();\n      var mentionRange = SelectionState.createEmpty(contentBlock.getKey()).merge({\n        anchorOffset: start,\n        focusOffset: end\n      });\n      contentState = Modifier.replaceText(contentState, mentionRange, data.content, null, mentionEntityKey);\n      contentBlock = contentState.getBlockForKey(contentBlock.getKey());\n    }\n  }\n  return EditorState.createWithContent(contentState, DraftMentionDecorator);\n};\nexport default createMentionSelectorState;","map":{"version":3,"sources":["../../../../src/components/form-elements/draft-js-mention-selector/createMentionSelectorState.js"],"names":["ContentState","EditorState","Modifier","SelectionState","DraftMentionDecorator","getMentionFromText","text","mentionRegex","matchArray","exec","fullMatch","triggerSymbol","id","name","start","index","end","length","data","content","createMentionSelectorState","message","contentState","createFromText","contentBlock","getFirstBlock","getText","mention","getBlockAfter","getKey","createEntity","mentionEntityKey","getLastCreatedEntityKey","mentionRange","createEmpty","merge","anchorOffset","focusOffset","replaceText","getBlockForKey","createWithContent"],"mappings":"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","sourcesContent":["// @flow\nimport { ContentState, EditorState, Modifier, SelectionState } from 'draft-js';\nimport DraftMentionDecorator from './DraftMentionDecorator';\n\n// returns data for first mention in a string\nconst getMentionFromText = (text: string) => {\n    // RegEx.exec() is stateful, so we create a new regex instance each time\n    const mentionRegex = /([@＠﹫])\\[([0-9]+):([^\\]]+)]/gi;\n    const matchArray = mentionRegex.exec(text);\n    if (!matchArray) {\n        return null;\n    }\n    const [fullMatch, triggerSymbol, id, name] = matchArray;\n    const start = matchArray.index;\n    const end = start + fullMatch.length;\n    const data = { id, name, content: `${triggerSymbol}${name}` };\n    return { start, end, data };\n};\n\n// creates draftjs state with mentions parsed into entities\nconst createMentionSelectorState = (message: string = '') => {\n    let contentState = ContentState.createFromText(message);\n    let contentBlock = contentState.getFirstBlock();\n\n    while (contentBlock != null) {\n        const text = contentBlock.getText();\n        const mention = text ? getMentionFromText(text) : null;\n        if (mention == null) {\n            contentBlock = contentState.getBlockAfter(contentBlock.getKey());\n        } else {\n            const { data, start, end } = mention;\n            contentState.createEntity('MENTION', 'IMMUTABLE', data);\n            const mentionEntityKey = contentState.getLastCreatedEntityKey();\n            const mentionRange = SelectionState.createEmpty(contentBlock.getKey()).merge({\n                anchorOffset: start,\n                focusOffset: end,\n            });\n            contentState = Modifier.replaceText(contentState, mentionRange, data.content, null, mentionEntityKey);\n            contentBlock = contentState.getBlockForKey(contentBlock.getKey());\n        }\n    }\n    return EditorState.createWithContent(contentState, DraftMentionDecorator);\n};\n\nexport default createMentionSelectorState;\n"]},"metadata":{},"sourceType":"module"}