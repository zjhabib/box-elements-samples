{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n/**\n * \n * @file Versions List component\n * @author Box\n */\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport VersionsItem from './VersionsItem';\nimport './VersionsList.scss';\nvar VersionsList = function VersionsList(_ref) {\n  var currentId = _ref.currentId,\n    versions = _ref.versions,\n    rest = _objectWithoutProperties(_ref, [\"currentId\", \"versions\"]);\n  return React.createElement(\"ul\", {\n    className: \"bcs-VersionsList\"\n  }, versions.map(function (version) {\n    return React.createElement(\"li\", {\n      className: \"bcs-VersionsList-item\",\n      key: version.id\n    }, React.createElement(Route, {\n      render: function render(_ref2) {\n        var match = _ref2.match;\n        return React.createElement(VersionsItem, _extends({\n          isCurrent: currentId === version.id,\n          isSelected: match.params.versionId === version.id,\n          version: version\n        }, rest));\n      }\n    }));\n  }));\n};\nexport default VersionsList;","map":{"version":3,"sources":["../../../../src/elements/content-sidebar/versions/VersionsList.js"],"names":["React","Route","VersionsItem","VersionsList","currentId","versions","rest","map","version","id","match","params","versionId"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAO,qBAAP;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAA;EAAA,IAAGC,SAAH,GAAA,IAAA,CAAGA,SAAH;IAAcC,QAAd,GAAA,IAAA,CAAcA,QAAd;IAA2BC,IAA3B,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,CAAA;EAAA,OACjB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAI,SAAS,EAAC;EAAd,CAAA,EACK,QAAQ,CAACC,GAAT,CAAa,UAAA,OAAO,EAAA;IAAA,OACjB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MAAI,SAAS,EAAC,uBAAd;MAAsC,GAAG,EAAEC,OAAO,CAACC;IAAnD,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA;MACI,MAAM,EAAE,SAAA,MAAA,CAAA,KAAA,EAAA;QAAA,IAAGC,KAAH,GAAA,KAAA,CAAGA,KAAH;QAAA,OACJ,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA,QAAA,CAAA;UACI,SAAS,EAAEN,SAAS,KAAKI,OAAO,CAACC,EADrC;UAEI,UAAU,EAAEC,KAAK,CAACC,MAAND,CAAaE,SAAbF,KAA2BF,OAAO,CAACC,EAFnD;UAGI,OAAO,EAAED;QAHb,CAAA,EAIQF,IAJR,CAAA,CADI;MAAA;IADZ,CAAA,CADJ,CADiB;EAAA,CAApB,CADL,CADiB;AAAA,CAArB;AAmBA,eAAeH,YAAf","sourcesContent":["/**\n * @flow\n * @file Versions List component\n * @author Box\n */\n\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport VersionsItem from './VersionsItem';\nimport type { BoxItemVersion } from '../../../common/types/core';\nimport './VersionsList.scss';\n\ntype Props = {\n    currentId?: string,\n    fileId: string,\n    versionCount: number,\n    versionLimit: number,\n    versions: Array<BoxItemVersion>,\n};\n\nconst VersionsList = ({ currentId, versions, ...rest }: Props) => (\n    <ul className=\"bcs-VersionsList\">\n        {versions.map(version => (\n            <li className=\"bcs-VersionsList-item\" key={version.id}>\n                <Route\n                    render={({ match }) => (\n                        <VersionsItem\n                            isCurrent={currentId === version.id}\n                            isSelected={match.params.versionId === version.id}\n                            version={version}\n                            {...rest}\n                        />\n                    )}\n                />\n            </li>\n        ))}\n    </ul>\n);\n\nexport default VersionsList;\n"]},"metadata":{},"sourceType":"module"}