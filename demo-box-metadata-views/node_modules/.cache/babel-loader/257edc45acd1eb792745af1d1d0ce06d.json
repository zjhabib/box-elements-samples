{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport noop from 'lodash/noop';\nimport Collapsible from '../../components/collapsible/Collapsible';\nimport Form from '../../components/form-elements/form/Form';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport Tooltip from '../../components/tooltip';\nimport IconMetadataColored from '../../icons/general/IconMetadataColored';\nimport IconAlertCircle from '../../icons/general/IconAlertCircle';\nimport IconEdit from '../../icons/general/IconEdit';\nimport { bdlWatermelonRed } from '../../styles/variables';\nimport { scrollIntoView } from '../../utils/dom';\nimport CascadePolicy from './CascadePolicy';\nimport TemplatedInstance from './TemplatedInstance';\nimport CustomInstance from './CustomInstance';\nimport MetadataInstanceConfirmDialog from './MetadataInstanceConfirmDialog';\nimport Footer from './Footer';\nimport messages from './messages';\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER } from '../metadata-instance-fields/constants';\nimport TEMPLATE_CUSTOM_PROPERTIES from './constants';\nimport { JSON_PATCH_OP_REMOVE, JSON_PATCH_OP_ADD, JSON_PATCH_OP_REPLACE, JSON_PATCH_OP_TEST } from '../../common/constants';\nimport { isValidValue } from '../metadata-instance-fields/validateMetadataField';\nimport { isHidden } from './metadataUtil';\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport './Instance.scss';\nvar createFieldKeyToTypeMap = function createFieldKeyToTypeMap() {\n  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return fields.reduce(function (prev, _ref) {\n    var key = _ref.key,\n      type = _ref.type;\n    prev[key] = type;\n    return prev;\n  }, {});\n};\nvar getValue = function getValue(data, key, type) {\n  var value = data[key];\n  switch (type) {\n    case FIELD_TYPE_FLOAT:\n      return parseFloat(value);\n    case FIELD_TYPE_INTEGER:\n      return parseInt(value, 10);\n    default:\n      return value;\n  }\n};\nvar Instance = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Instance, _React$PureComponent);\n  function Instance(props) {\n    var _this;\n    _classCallCheck(this, Instance);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Instance).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      var _this$props = _this.props,\n        id = _this$props.id,\n        onModification = _this$props.onModification;\n      _this.setState(_this.getState(_this.props)); // Callback to parent to tell that something is dirty\n\n      if (onModification) {\n        onModification(id, false);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onConfirmRemove\", function () {\n      _this.setState({\n        shouldConfirmRemove: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onConfirmCancel\", function () {\n      _this.setState({\n        shouldConfirmRemove: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onRemove\", function () {\n      if (!_this.isEditing()) {\n        return;\n      }\n      var _this$props2 = _this.props,\n        id = _this$props2.id,\n        onRemove = _this$props2.onRemove;\n      if (onRemove) {\n        onRemove(id);\n        _this.setState({\n          isBusy: true\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSave\", function () {\n      var _this$props3 = _this.props,\n        cascadePolicy = _this$props3.cascadePolicy,\n        originalData = _this$props3.data,\n        id = _this$props3.id,\n        isDirty = _this$props3.isDirty,\n        isCascadingPolicyApplicable = _this$props3.isCascadingPolicyApplicable,\n        onSave = _this$props3.onSave;\n      var _this$state = _this.state,\n        currentData = _this$state.data,\n        errors = _this$state.errors,\n        isCascadingEnabled = _this$state.isCascadingEnabled,\n        isCascadingOverwritten = _this$state.isCascadingOverwritten;\n      if (!_this.isEditing() || !isDirty || !onSave || Object.keys(errors).length) {\n        return;\n      }\n      _this.setState({\n        isBusy: true,\n        isEditing: false,\n        shouldShowCascadeOptions: false\n      });\n      onSave(id, _this.createJSONPatch(currentData, originalData), isCascadingPolicyApplicable ? {\n        canEdit: cascadePolicy ? cascadePolicy.canEdit : false,\n        id: cascadePolicy ? cascadePolicy.id : undefined,\n        isEnabled: isCascadingEnabled,\n        overwrite: isCascadingOverwritten\n      } : undefined, cloneDeep(currentData));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onFieldChange\", function (key, value, type) {\n      var _this$state2 = _this.state,\n        data = _this$state2.data,\n        errors = _this$state2.errors; // Don't do anything if data is the same or not in edit mode\n\n      if (!_this.isEditing() || isEqual(data[key], value)) {\n        return;\n      }\n      var isValid = isValidValue(type, value);\n      var finalErrors = _objectSpread({}, errors);\n      var finalData = cloneDeep(data);\n      finalData[key] = value;\n      if (isValid) {\n        delete finalErrors[key];\n      } else {\n        finalErrors[key] = React.createElement(FormattedMessage, messages.invalidInput);\n      }\n      _this.setState({\n        data: finalData,\n        errors: finalErrors\n      }, function () {\n        _this.setDirty(type);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onFieldRemove\", function (key) {\n      if (!_this.isEditing()) {\n        return;\n      }\n      var _this$state3 = _this.state,\n        data = _this$state3.data,\n        errors = _this$state3.errors;\n      var finalData = cloneDeep(data);\n      var finalErrors = _objectSpread({}, errors);\n      delete finalData[key];\n      delete finalErrors[key];\n      _this.setState({\n        data: finalData,\n        errors: finalErrors\n      }, _this.setDirty);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCascadeToggle\", function (value) {\n      var isCascadingPolicyApplicable = _this.props.isCascadingPolicyApplicable;\n      if (!isCascadingPolicyApplicable) {\n        return;\n      }\n      _this.setState({\n        isCascadingEnabled: value,\n        shouldShowCascadeOptions: value\n      }, _this.setDirty);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCascadeModeChange\", function (value) {\n      var isCascadingPolicyApplicable = _this.props.isCascadingPolicyApplicable;\n      if (!isCascadingPolicyApplicable) {\n        return;\n      }\n      _this.setState({\n        isCascadingOverwritten: value\n      }, _this.setDirty);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderDeleteMessage\", function (isFile, template) {\n      var message;\n      var isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n      if (isProperties) {\n        message = isFile ? 'fileMetadataRemoveCustomTemplateConfirm' : 'folderMetadataRemoveCustomTemplateConfirm';\n      } else {\n        message = isFile ? 'fileMetadataRemoveTemplateConfirm' : 'folderMetadataRemoveTemplateConfirm';\n      }\n      return React.createElement(FormattedMessage, _extends({}, messages[message], {\n        values: {\n          metadataName: template.displayName\n        }\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setDirty\", function (type) {\n      var _this$props4 = _this.props,\n        id = _this$props4.id,\n        isCascadingPolicyApplicable = _this$props4.isCascadingPolicyApplicable,\n        onModification = _this$props4.onModification;\n      var _this$state4 = _this.state,\n        data = _this$state4.data,\n        isCascadingEnabled = _this$state4.isCascadingEnabled,\n        isCascadingOverwritten = _this$state4.isCascadingOverwritten;\n      var hasDataChanged = !isEqual(data, _this.props.data);\n      var hasCascadingChanged = false;\n      if (isCascadingPolicyApplicable) {\n        // isCascadingOverwritten always starts out as false, so true signifies a change\n        hasCascadingChanged = isCascadingOverwritten || isCascadingEnabled !== _this.isCascadingEnabled(_this.props);\n      } // Callback to parent to tell that something is dirty\n\n      if (onModification) {\n        onModification(id, hasDataChanged || hasCascadingChanged, type);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"collapsibleRef\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"toggleIsEditing\", function () {\n      _this.setState(function (prevState) {\n        return {\n          isEditing: !prevState.isEditing\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderEditButton\", function () {\n      var isDirty = _this.props.isDirty;\n      var isBusy = _this.state.isBusy;\n      var canEdit = _this.canEdit();\n      var isEditing = _this.isEditing();\n      var editClassName = classNames('metadata-instance-editor-instance-edit', {\n        'metadata-instance-editor-instance-is-editing': isEditing\n      });\n      if (canEdit && !isDirty && !isBusy) {\n        return React.createElement(Tooltip, {\n          position: \"top-left\",\n          text: React.createElement(FormattedMessage, messages.metadataEditTooltip)\n        }, React.createElement(PlainButton, {\n          className: editClassName,\n          \"data-resin-target\": \"metadata-instanceedit\",\n          onClick: _this.toggleIsEditing,\n          type: \"button\"\n        }, React.createElement(IconEdit, null)));\n      }\n      return null;\n    });\n    _this.state = _this.getState(props);\n    _this.fieldKeyToTypeMap = createFieldKeyToTypeMap(props.template.fields);\n    return _this;\n  }\n  _createClass(Instance, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref2, prevState) {\n      var prevHasError = _ref2.hasError,\n        prevIsDirty = _ref2.isDirty;\n      var currentElement = this.collapsibleRef.current;\n      var _this$props5 = this.props,\n        hasError = _this$props5.hasError,\n        isDirty = _this$props5.isDirty;\n      var isEditing = prevState.isEditing;\n      if (currentElement && this.state.shouldConfirmRemove) {\n        scrollIntoView(currentElement, {\n          block: 'start',\n          behavior: 'smooth'\n        });\n      }\n      if (hasError && hasError !== prevHasError) {\n        // If hasError is true, which means an error occurred while\n        // doing a network operation and hence hide the busy indicator\n        // Saving also disables isEditing, so need to enable that back.\n        // isDirty remains as it was before.\n        this.setState({\n          isBusy: false,\n          isEditing: true\n        });\n      } else if (prevIsDirty && !isDirty) {\n        // If the form was dirty and now its not dirty\n        // we know a successful save may have happened.\n        // We don't modify isEditing here because we maintain the\n        // prior state for that. If we came here from a save\n        // success then save already disabled isEditing.\n        if (isEditing) {\n          // We are still editing so don't reset it\n          this.setState({\n            isBusy: false\n          });\n        } else {\n          // For a successfull save we reset cascading overwrite radio\n          this.setState({\n            isBusy: false,\n            isCascadingOverwritten: false\n          });\n        }\n      }\n    }\n    /**\n     * Undo any changes made\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"getState\",\n    /**\n     * Returns the state from props\n     *\n     * @return {Object} - react state\n     */\n    value: function getState(props) {\n      return {\n        data: cloneDeep(props.data),\n        errors: {},\n        isBusy: false,\n        isCascadingEnabled: this.isCascadingEnabled(props),\n        isCascadingOverwritten: false,\n        isEditing: false,\n        shouldConfirmRemove: false,\n        shouldShowCascadeOptions: false\n      };\n    }\n    /**\n     * Returns the card title with possible error mark\n     *\n     * @return {Object} - react title element\n     */\n  }, {\n    key: \"getTitle\",\n    value: function getTitle() {\n      var _this$props6 = this.props,\n        _this$props6$cascadeP = _this$props6.cascadePolicy,\n        cascadePolicy = _this$props6$cascadeP === void 0 ? {} : _this$props6$cascadeP,\n        hasError = _this$props6.hasError,\n        isCascadingPolicyApplicable = _this$props6.isCascadingPolicyApplicable,\n        template = _this$props6.template;\n      var isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n      var type = isCascadingPolicyApplicable && cascadePolicy.id ? 'cascade' : 'default';\n      return React.createElement(\"span\", {\n        className: \"metadata-instance-editor-instance-title\"\n      }, React.createElement(IconMetadataColored, {\n        type: type\n      }), React.createElement(\"span\", {\n        className: classNames('metadata-instance-editor-instance-title-text', {\n          'metadata-instance-editor-instance-has-error': hasError\n        })\n      }, isProperties ? React.createElement(FormattedMessage, messages.customTitle) : template.displayName), hasError && React.createElement(IconAlertCircle, {\n        color: bdlWatermelonRed\n      }));\n    }\n    /**\n     * Render the correct delete message to show based on custom metadata and file/folder metadata\n     */\n  }, {\n    key: \"getConfirmationMessage\",\n    /**\n     * Get the delete confirmation message base on the template key\n     */\n    value: function getConfirmationMessage() {\n      var _this$props7 = this.props,\n        template = _this$props7.template,\n        isCascadingPolicyApplicable = _this$props7.isCascadingPolicyApplicable;\n      var isFile = !isCascadingPolicyApplicable;\n      return this.renderDeleteMessage(isFile, template);\n    }\n    /**\n     * Evaluates if the metadata was changed or cascading policy\n     * altered or enabled.\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"isCascadingEnabled\",\n    /**\n     * Determines if cascading policy is enabled based on\n     * whether it has an id or not.\n     *\n     * @param {Object} props - component props\n     * @return {boolean} true if cascading policy is enabled\n     */\n    value: function isCascadingEnabled(props) {\n      if (props.cascadePolicy) {\n        return !!props.cascadePolicy.id;\n      }\n      return false;\n    }\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: \"createJSONPatch\",\n    /**\n     * Creates JSON Patch operations from the passed in\n     * data while comparing it to the original data from props.\n     *\n     * Only diffs at the root level and primitives.\n     *\n     * @param {*} currentData - the latest changes by the user\n     * @param {*} originalData - the original values\n     * @return {Array} - JSON patch operations\n     */\n    value: function createJSONPatch(currentData, originalData) {\n      var _this2 = this;\n      var ops = [];\n      var data = cloneDeep(currentData); // clone the data for mutation\n      // Iterate over the original data and find keys that have changed.\n      // Also remove them from the data object to only leave new keys.\n\n      Object.keys(originalData).forEach(function (key) {\n        var type = _this2.fieldKeyToTypeMap[key];\n        var originalValue = getValue(originalData, key, type);\n        var path = \"/\".concat(key);\n        if (Object.prototype.hasOwnProperty.call(data, key)) {\n          var value = getValue(data, key, type); // Only register changed data\n\n          if (!isEqual(value, originalValue)) {\n            // Add a test OP for each replaces\n            ops.push({\n              op: JSON_PATCH_OP_TEST,\n              path: path,\n              value: originalValue\n            });\n            ops.push({\n              op: JSON_PATCH_OP_REPLACE,\n              path: path,\n              value: value\n            });\n          }\n        } else {\n          // Key was removed\n          // Add a test OP for removes\n          ops.push({\n            op: JSON_PATCH_OP_TEST,\n            path: path,\n            value: originalValue\n          });\n          ops.push({\n            op: JSON_PATCH_OP_REMOVE,\n            path: path\n          });\n        }\n        delete data[key];\n      }); // Iterate over the remaining keys that are new.\n\n      Object.keys(data).forEach(function (key) {\n        var type = _this2.fieldKeyToTypeMap[key];\n        var value = getValue(data, key, type);\n        ops.push({\n          op: JSON_PATCH_OP_ADD,\n          path: \"/\".concat(key),\n          value: value\n        });\n      });\n      return ops;\n    }\n    /**\n     * Utility function to determine if instance is editable\n     *\n     * @return {boolean} true if editable\n     */\n  }, {\n    key: \"canEdit\",\n    value: function canEdit() {\n      var _this$props8 = this.props,\n        canEdit = _this$props8.canEdit,\n        onModification = _this$props8.onModification,\n        onRemove = _this$props8.onRemove,\n        onSave = _this$props8.onSave;\n      return canEdit && typeof onRemove === 'function' && typeof onSave === 'function' && typeof onModification === 'function';\n    }\n    /**\n     * Utility function to determine if instance is in edit mode\n     *\n     * @return {boolean} true if editing\n     */\n  }, {\n    key: \"isEditing\",\n    value: function isEditing() {\n      var isEditing = this.state.isEditing;\n      return this.canEdit() && isEditing;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n        _this$props9$cascadeP = _this$props9.cascadePolicy,\n        cascadePolicy = _this$props9$cascadeP === void 0 ? {} : _this$props9$cascadeP,\n        isDirty = _this$props9.isDirty,\n        isCascadingPolicyApplicable = _this$props9.isCascadingPolicyApplicable,\n        isOpen = _this$props9.isOpen,\n        template = _this$props9.template;\n      var _template$fields = template.fields,\n        fields = _template$fields === void 0 ? [] : _template$fields;\n      var _this$state5 = this.state,\n        data = _this$state5.data,\n        errors = _this$state5.errors,\n        isBusy = _this$state5.isBusy,\n        isCascadingEnabled = _this$state5.isCascadingEnabled,\n        shouldConfirmRemove = _this$state5.shouldConfirmRemove,\n        shouldShowCascadeOptions = _this$state5.shouldShowCascadeOptions,\n        isCascadingOverwritten = _this$state5.isCascadingOverwritten;\n      var isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n      var isEditing = this.isEditing();\n      if (!template || isHidden(template)) {\n        return null;\n      } // Animate short and tall cards at consistent speeds.\n\n      var animationDuration = (fields.length + 1) * 50;\n      return React.createElement(\"div\", {\n        ref: this.collapsibleRef\n      }, React.createElement(Collapsible, {\n        animationDuration: animationDuration,\n        buttonProps: _defineProperty({}, RESIN_TAG_TARGET, 'metadata-card'),\n        hasStickyHeader: true,\n        headerActionItems: this.renderEditButton(),\n        isBordered: true,\n        isOpen: isOpen,\n        title: this.getTitle()\n      }, shouldConfirmRemove && React.createElement(LoadingIndicatorWrapper, {\n        isLoading: isBusy\n      }, React.createElement(MetadataInstanceConfirmDialog, {\n        confirmationMessage: this.getConfirmationMessage(),\n        onCancel: this.onConfirmCancel,\n        onConfirm: this.onRemove\n      })), !shouldConfirmRemove && React.createElement(LoadingIndicatorWrapper, {\n        isLoading: isBusy\n      }, React.createElement(Form, {\n        onValidSubmit: isDirty ? this.onSave : noop\n      }, React.createElement(\"div\", {\n        className: \"metadata-instance-editor-instance\"\n      }, isCascadingPolicyApplicable && React.createElement(CascadePolicy, {\n        canEdit: isEditing && !!cascadePolicy.canEdit,\n        isCascadingEnabled: isCascadingEnabled,\n        isCascadingOverwritten: isCascadingOverwritten,\n        isCustomMetadata: isProperties,\n        onCascadeModeChange: this.onCascadeModeChange,\n        onCascadeToggle: this.onCascadeToggle,\n        shouldShowCascadeOptions: shouldShowCascadeOptions\n      }), isProperties ? React.createElement(CustomInstance, {\n        canEdit: isEditing,\n        data: data,\n        onFieldChange: this.onFieldChange,\n        onFieldRemove: this.onFieldRemove\n      }) : React.createElement(TemplatedInstance, {\n        canEdit: isEditing,\n        data: data,\n        errors: errors,\n        onFieldChange: this.onFieldChange,\n        onFieldRemove: this.onFieldRemove,\n        template: template\n      })), isEditing && React.createElement(Footer, {\n        onCancel: this.onCancel,\n        onRemove: this.onConfirmRemove,\n        showSave: isDirty\n      })))));\n    }\n  }]);\n  return Instance;\n}(React.PureComponent);\n_defineProperty(Instance, \"defaultProps\", {\n  data: {},\n  isDirty: false\n});\nexport default Instance;","map":{"version":3,"sources":["../../../src/features/metadata-instance-editor/Instance.js"],"names":["React","FormattedMessage","classNames","isEqual","cloneDeep","noop","Collapsible","Form","LoadingIndicatorWrapper","PlainButton","Tooltip","IconMetadataColored","IconAlertCircle","IconEdit","bdlWatermelonRed","scrollIntoView","CascadePolicy","TemplatedInstance","CustomInstance","MetadataInstanceConfirmDialog","Footer","messages","FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","TEMPLATE_CUSTOM_PROPERTIES","JSON_PATCH_OP_REMOVE","JSON_PATCH_OP_ADD","JSON_PATCH_OP_REPLACE","JSON_PATCH_OP_TEST","isValidValue","isHidden","RESIN_TAG_TARGET","createFieldKeyToTypeMap","fields","reduce","prev","key","type","getValue","data","value","parseFloat","parseInt","Instance","PureComponent","isDirty","props","state","getState","fieldKeyToTypeMap","template","hasError","prevHasError","prevIsDirty","prevState","currentElement","collapsibleRef","current","isEditing","shouldConfirmRemove","block","behavior","setState","isBusy","isCascadingOverwritten","id","onModification","onRemove","cascadePolicy","originalData","isCascadingPolicyApplicable","onSave","currentData","errors","isCascadingEnabled","Object","keys","length","shouldShowCascadeOptions","createJSONPatch","canEdit","undefined","isEnabled","overwrite","isValid","finalErrors","finalData","invalidInput","setDirty","isProperties","templateKey","customTitle","displayName","isFile","message","metadataName","renderDeleteMessage","hasDataChanged","hasCascadingChanged","createRef","ops","forEach","originalValue","path","prototype","hasOwnProperty","call","push","op","editClassName","metadataEditTooltip","toggleIsEditing","isOpen","animationDuration","renderEditButton","getTitle","getConfirmationMessage","onConfirmCancel","onCascadeModeChange","onCascadeToggle","onFieldChange","onFieldRemove","onCancel","onConfirmRemove"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport noop from 'lodash/noop';\n\nimport Collapsible from '../../components/collapsible/Collapsible';\nimport Form from '../../components/form-elements/form/Form';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport Tooltip from '../../components/tooltip';\nimport IconMetadataColored from '../../icons/general/IconMetadataColored';\nimport IconAlertCircle from '../../icons/general/IconAlertCircle';\nimport IconEdit from '../../icons/general/IconEdit';\nimport { bdlWatermelonRed } from '../../styles/variables';\nimport { scrollIntoView } from '../../utils/dom';\n\nimport CascadePolicy from './CascadePolicy';\nimport TemplatedInstance from './TemplatedInstance';\nimport CustomInstance from './CustomInstance';\nimport MetadataInstanceConfirmDialog from './MetadataInstanceConfirmDialog';\nimport Footer from './Footer';\nimport messages from './messages';\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER } from '../metadata-instance-fields/constants';\nimport TEMPLATE_CUSTOM_PROPERTIES from './constants';\nimport {\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n} from '../../common/constants';\nimport { isValidValue } from '../metadata-instance-fields/validateMetadataField';\nimport { isHidden } from './metadataUtil';\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport type {\n    MetadataFields,\n    MetadataTemplate,\n    MetadataCascadePolicy,\n    MetadataCascadingPolicyData,\n    MetadataTemplateField,\n    MetadataFieldValue,\n} from '../../common/types/metadata';\nimport type { JSONPatchOperations } from '../../common/types/api';\nimport './Instance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    cascadePolicy?: MetadataCascadePolicy, // eslint-disable-line\n    data: MetadataFields,\n    hasError: boolean,\n    id: string,\n    isCascadingPolicyApplicable?: boolean,\n    isDirty: boolean,\n    isOpen: boolean,\n    onModification?: (id: string, isDirty: boolean, type?: string) => void,\n    onRemove?: (id: string) => void,\n    onSave?: (\n        id: string,\n        data: JSONPatchOperations,\n        cascadingPolicy?: MetadataCascadingPolicyData,\n        rawData: Object,\n    ) => void,\n    template: MetadataTemplate,\n};\n\ntype State = {\n    data: Object,\n    errors: { [string]: React.Node },\n    isBusy: boolean,\n    isCascadingEnabled: boolean,\n    isCascadingOverwritten: boolean,\n    isEditing: boolean,\n    shouldConfirmRemove: boolean,\n    shouldShowCascadeOptions: boolean,\n};\n\nconst createFieldKeyToTypeMap = (fields?: Array<MetadataTemplateField> = []) =>\n    fields.reduce((prev, { key, type }) => {\n        prev[key] = type;\n        return prev;\n    }, {});\n\nconst getValue = (data: Object, key: string, type: string) => {\n    const value = data[key];\n\n    switch (type) {\n        case FIELD_TYPE_FLOAT:\n            return parseFloat(value);\n\n        case FIELD_TYPE_INTEGER:\n            return parseInt(value, 10);\n\n        default:\n            return value;\n    }\n};\n\nclass Instance extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        data: {},\n        isDirty: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getState(props);\n        this.fieldKeyToTypeMap = createFieldKeyToTypeMap(props.template.fields);\n    }\n\n    componentDidUpdate({ hasError: prevHasError, isDirty: prevIsDirty }: Props, prevState: State): void {\n        const currentElement = this.collapsibleRef.current;\n        const { hasError, isDirty }: Props = this.props;\n        const { isEditing }: State = prevState;\n\n        if (currentElement && this.state.shouldConfirmRemove) {\n            scrollIntoView(currentElement, {\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n\n        if (hasError && hasError !== prevHasError) {\n            // If hasError is true, which means an error occurred while\n            // doing a network operation and hence hide the busy indicator\n            // Saving also disables isEditing, so need to enable that back.\n            // isDirty remains as it was before.\n            this.setState({ isBusy: false, isEditing: true });\n        } else if (prevIsDirty && !isDirty) {\n            // If the form was dirty and now its not dirty\n            // we know a successful save may have happened.\n            // We don't modify isEditing here because we maintain the\n            // prior state for that. If we came here from a save\n            // success then save already disabled isEditing.\n            if (isEditing) {\n                // We are still editing so don't reset it\n                this.setState({ isBusy: false });\n            } else {\n                // For a successfull save we reset cascading overwrite radio\n                this.setState({ isBusy: false, isCascadingOverwritten: false });\n            }\n        }\n    }\n\n    /**\n     * Undo any changes made\n     *\n     * @return {void}\n     */\n    onCancel = (): void => {\n        const { id, onModification }: Props = this.props;\n        this.setState(this.getState(this.props));\n\n        // Callback to parent to tell that something is dirty\n        if (onModification) {\n            onModification(id, false);\n        }\n    };\n\n    /**\n     * Allows a user to confirm metadata instance removal\n     *\n     * @return {void}\n     */\n    onConfirmRemove = (): void => {\n        this.setState({ shouldConfirmRemove: true });\n    };\n\n    /**\n     * Cancel the remove instance attempt\n     *\n     * @return {void}\n     */\n    onConfirmCancel = (): void => {\n        this.setState({ shouldConfirmRemove: false });\n    };\n\n    /**\n     * Removes an instance\n     *\n     * @return {void}\n     */\n    onRemove = (): void => {\n        if (!this.isEditing()) {\n            return;\n        }\n\n        const { id, onRemove }: Props = this.props;\n        if (onRemove) {\n            onRemove(id);\n            this.setState({ isBusy: true });\n        }\n    };\n\n    /**\n     * Saves instance data\n     *\n     * @return {void}\n     */\n    onSave = (): void => {\n        const {\n            cascadePolicy,\n            data: originalData,\n            id,\n            isDirty,\n            isCascadingPolicyApplicable,\n            onSave,\n        }: Props = this.props;\n        const { data: currentData, errors, isCascadingEnabled, isCascadingOverwritten }: State = this.state;\n\n        if (!this.isEditing() || !isDirty || !onSave || Object.keys(errors).length) {\n            return;\n        }\n\n        this.setState({\n            isBusy: true,\n            isEditing: false,\n            shouldShowCascadeOptions: false,\n        });\n        onSave(\n            id,\n            this.createJSONPatch(currentData, originalData),\n            isCascadingPolicyApplicable\n                ? {\n                      canEdit: cascadePolicy ? cascadePolicy.canEdit : false,\n                      id: cascadePolicy ? cascadePolicy.id : undefined,\n                      isEnabled: isCascadingEnabled,\n                      overwrite: isCascadingOverwritten,\n                  }\n                : undefined,\n            cloneDeep(currentData),\n        );\n    };\n\n    /**\n     * Updates a key value in the instance data\n     *\n     * @param {string} key - key to update\n     * @param {FieldValue} value - value to update\n     * @param {string} type - type of field\n     * @return {void}\n     */\n    onFieldChange = (key: string, value: MetadataFieldValue, type: string): void => {\n        const { data, errors }: State = this.state;\n\n        // Don't do anything if data is the same or not in edit mode\n        if (!this.isEditing() || isEqual(data[key], value)) {\n            return;\n        }\n\n        const isValid = isValidValue(type, value);\n        const finalErrors = { ...errors };\n        const finalData = cloneDeep(data);\n        finalData[key] = value;\n\n        if (isValid) {\n            delete finalErrors[key];\n        } else {\n            finalErrors[key] = <FormattedMessage {...messages.invalidInput} />;\n        }\n\n        this.setState({ data: finalData, errors: finalErrors }, () => {\n            this.setDirty(type);\n        });\n    };\n\n    /**\n     * Removes a key from instance data\n     *\n     * @param {string} key - key to remove\n     * @return {void}\n     */\n    onFieldRemove = (key: string): void => {\n        if (!this.isEditing()) {\n            return;\n        }\n\n        const { data, errors }: State = this.state;\n        const finalData = cloneDeep(data);\n        const finalErrors = { ...errors };\n        delete finalData[key];\n        delete finalErrors[key];\n        this.setState({ data: finalData, errors: finalErrors }, this.setDirty);\n    };\n\n    /**\n     * Toggle cascading policy\n     *\n     * @param {boolean} value - true when turned on\n     * @return {void}\n     */\n    onCascadeToggle = (value: boolean) => {\n        const { isCascadingPolicyApplicable }: Props = this.props;\n        if (!isCascadingPolicyApplicable) {\n            return;\n        }\n\n        this.setState(\n            {\n                isCascadingEnabled: value,\n                shouldShowCascadeOptions: value,\n            },\n            this.setDirty,\n        );\n    };\n\n    /**\n     * Changes the cascade mode.\n     * isCascadingOverwritten is slways false to start off.\n     *\n     * @param {boolean} value - true when overwrite policy is chosen\n     * @return {void}\n     */\n    onCascadeModeChange = (value: boolean): void => {\n        const { isCascadingPolicyApplicable }: Props = this.props;\n        if (!isCascadingPolicyApplicable) {\n            return;\n        }\n\n        this.setState(\n            {\n                isCascadingOverwritten: value,\n            },\n            this.setDirty,\n        );\n    };\n\n    /**\n     * Returns the state from props\n     *\n     * @return {Object} - react state\n     */\n    getState(props: Props): State {\n        return {\n            data: cloneDeep(props.data),\n            errors: {},\n            isBusy: false,\n            isCascadingEnabled: this.isCascadingEnabled(props),\n            isCascadingOverwritten: false,\n            isEditing: false,\n            shouldConfirmRemove: false,\n            shouldShowCascadeOptions: false,\n        };\n    }\n\n    /**\n     * Returns the card title with possible error mark\n     *\n     * @return {Object} - react title element\n     */\n    getTitle(): React.Node {\n        const { cascadePolicy = {}, hasError, isCascadingPolicyApplicable, template }: Props = this.props;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n\n        const type = isCascadingPolicyApplicable && cascadePolicy.id ? 'cascade' : 'default';\n\n        return (\n            <span className=\"metadata-instance-editor-instance-title\">\n                <IconMetadataColored type={type} />\n                <span\n                    className={classNames('metadata-instance-editor-instance-title-text', {\n                        'metadata-instance-editor-instance-has-error': hasError,\n                    })}\n                >\n                    {isProperties ? <FormattedMessage {...messages.customTitle} /> : template.displayName}\n                </span>\n                {hasError && <IconAlertCircle color={bdlWatermelonRed} />}\n            </span>\n        );\n    }\n\n    /**\n     * Render the correct delete message to show based on custom metadata and file/folder metadata\n     */\n    renderDeleteMessage = (isFile: boolean, template: Object) => {\n        let message;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n\n        if (isProperties) {\n            message = isFile ? 'fileMetadataRemoveCustomTemplateConfirm' : 'folderMetadataRemoveCustomTemplateConfirm';\n        } else {\n            message = isFile ? 'fileMetadataRemoveTemplateConfirm' : 'folderMetadataRemoveTemplateConfirm';\n        }\n\n        return (\n            <FormattedMessage\n                {...messages[message]}\n                values={{\n                    metadataName: template.displayName,\n                }}\n            />\n        );\n    };\n\n    /**\n     * Get the delete confirmation message base on the template key\n     */\n    getConfirmationMessage(): React.Node {\n        const { template, isCascadingPolicyApplicable }: Props = this.props;\n        const isFile = !isCascadingPolicyApplicable;\n        return this.renderDeleteMessage(isFile, template);\n    }\n\n    /**\n     * Evaluates if the metadata was changed or cascading policy\n     * altered or enabled.\n     *\n     * @return {void}\n     */\n    setDirty = (type?: string): void => {\n        const { id, isCascadingPolicyApplicable, onModification }: Props = this.props;\n        const { data, isCascadingEnabled, isCascadingOverwritten } = this.state;\n        const hasDataChanged = !isEqual(data, this.props.data);\n        let hasCascadingChanged = false;\n\n        if (isCascadingPolicyApplicable) {\n            // isCascadingOverwritten always starts out as false, so true signifies a change\n            hasCascadingChanged = isCascadingOverwritten || isCascadingEnabled !== this.isCascadingEnabled(this.props);\n        }\n\n        // Callback to parent to tell that something is dirty\n        if (onModification) {\n            onModification(id, hasDataChanged || hasCascadingChanged, type);\n        }\n    };\n\n    collapsibleRef: {\n        current: null | HTMLDivElement,\n    } = React.createRef();\n\n    fieldKeyToTypeMap: Object;\n\n    /**\n     * Determines if cascading policy is enabled based on\n     * whether it has an id or not.\n     *\n     * @param {Object} props - component props\n     * @return {boolean} true if cascading policy is enabled\n     */\n    isCascadingEnabled(props: Props) {\n        if (props.cascadePolicy) {\n            return !!props.cascadePolicy.id;\n        }\n        return false;\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Creates JSON Patch operations from the passed in\n     * data while comparing it to the original data from props.\n     *\n     * Only diffs at the root level and primitives.\n     *\n     * @param {*} currentData - the latest changes by the user\n     * @param {*} originalData - the original values\n     * @return {Array} - JSON patch operations\n     */\n    createJSONPatch(currentData: Object, originalData: Object): JSONPatchOperations {\n        const ops = [];\n        const data = cloneDeep(currentData); // clone the data for mutation\n\n        // Iterate over the original data and find keys that have changed.\n        // Also remove them from the data object to only leave new keys.\n        Object.keys(originalData).forEach(key => {\n            const type = this.fieldKeyToTypeMap[key];\n            const originalValue = getValue(originalData, key, type);\n            const path = `/${key}`;\n\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                const value = getValue(data, key, type);\n\n                // Only register changed data\n                if (!isEqual(value, originalValue)) {\n                    // Add a test OP for each replaces\n                    ops.push({\n                        op: JSON_PATCH_OP_TEST,\n                        path,\n                        value: originalValue,\n                    });\n                    ops.push({\n                        op: JSON_PATCH_OP_REPLACE,\n                        path,\n                        value,\n                    });\n                }\n            } else {\n                // Key was removed\n                // Add a test OP for removes\n                ops.push({\n                    op: JSON_PATCH_OP_TEST,\n                    path,\n                    value: originalValue,\n                });\n                ops.push({ op: JSON_PATCH_OP_REMOVE, path });\n            }\n            delete data[key];\n        });\n\n        // Iterate over the remaining keys that are new.\n        Object.keys(data).forEach(key => {\n            const type = this.fieldKeyToTypeMap[key];\n            const value = getValue(data, key, type);\n\n            ops.push({\n                op: JSON_PATCH_OP_ADD,\n                path: `/${key}`,\n                value,\n            });\n        });\n\n        return ops;\n    }\n\n    /**\n     * Utility function to determine if instance is editable\n     *\n     * @return {boolean} true if editable\n     */\n    canEdit(): boolean {\n        const { canEdit, onModification, onRemove, onSave }: Props = this.props;\n        return (\n            canEdit &&\n            typeof onRemove === 'function' &&\n            typeof onSave === 'function' &&\n            typeof onModification === 'function'\n        );\n    }\n\n    /**\n     * Utility function to determine if instance is in edit mode\n     *\n     * @return {boolean} true if editing\n     */\n    isEditing(): boolean {\n        const { isEditing }: State = this.state;\n        return this.canEdit() && isEditing;\n    }\n\n    renderEditButton = () => {\n        const { isDirty }: Props = this.props;\n        const { isBusy }: State = this.state;\n        const canEdit = this.canEdit();\n        const isEditing = this.isEditing();\n        const editClassName = classNames('metadata-instance-editor-instance-edit', {\n            'metadata-instance-editor-instance-is-editing': isEditing,\n        });\n\n        if (canEdit && !isDirty && !isBusy) {\n            return (\n                <Tooltip position=\"top-left\" text={<FormattedMessage {...messages.metadataEditTooltip} />}>\n                    <PlainButton\n                        className={editClassName}\n                        data-resin-target=\"metadata-instanceedit\"\n                        onClick={this.toggleIsEditing}\n                        type=\"button\"\n                    >\n                        <IconEdit />\n                    </PlainButton>\n                </Tooltip>\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const { cascadePolicy = {}, isDirty, isCascadingPolicyApplicable, isOpen, template }: Props = this.props;\n        const { fields = [] } = template;\n        const {\n            data,\n            errors,\n            isBusy,\n            isCascadingEnabled,\n            shouldConfirmRemove,\n            shouldShowCascadeOptions,\n            isCascadingOverwritten,\n        }: State = this.state;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n        const isEditing = this.isEditing();\n\n        if (!template || isHidden(template)) {\n            return null;\n        }\n\n        // Animate short and tall cards at consistent speeds.\n        const animationDuration = (fields.length + 1) * 50;\n\n        return (\n            <div ref={this.collapsibleRef}>\n                <Collapsible\n                    animationDuration={animationDuration}\n                    buttonProps={{\n                        [RESIN_TAG_TARGET]: 'metadata-card',\n                    }}\n                    hasStickyHeader\n                    headerActionItems={this.renderEditButton()}\n                    isBordered\n                    isOpen={isOpen}\n                    title={this.getTitle()}\n                >\n                    {shouldConfirmRemove && (\n                        <LoadingIndicatorWrapper isLoading={isBusy}>\n                            <MetadataInstanceConfirmDialog\n                                confirmationMessage={this.getConfirmationMessage()}\n                                onCancel={this.onConfirmCancel}\n                                onConfirm={this.onRemove}\n                            />\n                        </LoadingIndicatorWrapper>\n                    )}\n                    {!shouldConfirmRemove && (\n                        <LoadingIndicatorWrapper isLoading={isBusy}>\n                            <Form onValidSubmit={isDirty ? this.onSave : noop}>\n                                <div className=\"metadata-instance-editor-instance\">\n                                    {isCascadingPolicyApplicable && (\n                                        <CascadePolicy\n                                            canEdit={isEditing && !!cascadePolicy.canEdit}\n                                            isCascadingEnabled={isCascadingEnabled}\n                                            isCascadingOverwritten={isCascadingOverwritten}\n                                            isCustomMetadata={isProperties}\n                                            onCascadeModeChange={this.onCascadeModeChange}\n                                            onCascadeToggle={this.onCascadeToggle}\n                                            shouldShowCascadeOptions={shouldShowCascadeOptions}\n                                        />\n                                    )}\n                                    {isProperties ? (\n                                        <CustomInstance\n                                            canEdit={isEditing}\n                                            data={data}\n                                            onFieldChange={this.onFieldChange}\n                                            onFieldRemove={this.onFieldRemove}\n                                        />\n                                    ) : (\n                                        <TemplatedInstance\n                                            canEdit={isEditing}\n                                            data={data}\n                                            errors={errors}\n                                            onFieldChange={this.onFieldChange}\n                                            onFieldRemove={this.onFieldRemove}\n                                            template={template}\n                                        />\n                                    )}\n                                </div>\n                                {isEditing && (\n                                    <Footer\n                                        onCancel={this.onCancel}\n                                        onRemove={this.onConfirmRemove}\n                                        showSave={isDirty}\n                                    />\n                                )}\n                            </Form>\n                        </LoadingIndicatorWrapper>\n                    )}\n                </Collapsible>\n            </div>\n        );\n    }\n}\n\nexport default Instance;\n"]},"metadata":{},"sourceType":"module"}