{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport * as React from 'react';\nimport TetherComponent from 'react-tether';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteConfirmation from '../common/delete-confirmation';\nimport IconTrash from '../../../../icons/general/IconTrash';\nimport Media from '../../../../components/media';\nimport messages from './messages';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport { bdlGray } from '../../../../styles/variables';\nimport { MenuItem } from '../../../../components/menu';\nvar AnnotationActivityMenu = function AnnotationActivityMenu(_ref) {\n  var canDelete = _ref.canDelete,\n    id = _ref.id,\n    onDeleteConfirm = _ref.onDeleteConfirm;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isConfirmingDelete = _React$useState2[0],\n    setIsConfirmingDelete = _React$useState2[1];\n  var handleDeleteCancel = function handleDeleteCancel() {\n    setIsConfirmingDelete(false);\n  };\n  var handleDeleteClick = function handleDeleteClick() {\n    setIsConfirmingDelete(true);\n  };\n  var handleDeleteConfirm = function handleDeleteConfirm() {\n    setIsConfirmingDelete(false);\n    onDeleteConfirm();\n  };\n  var tetherProps = {\n    attachment: 'top right',\n    className: 'bcs-AnnotationActivity-deleteConfirmationModal',\n    constraints: [{\n      to: 'scrollParent',\n      attachment: 'together'\n    }],\n    targetAttachment: 'bottom right'\n  };\n  return React.createElement(TetherComponent, tetherProps, canDelete && React.createElement(Media.Menu, {\n    isDisabled: isConfirmingDelete,\n    \"data-testid\": \"annotation-activity-actions-menu\",\n    menuProps: {\n      'data-resin-component': 'preview',\n      'data-resin-feature': 'annotations'\n    }\n  }, React.createElement(MenuItem, {\n    \"data-resin-itemid\": id,\n    \"data-resin-target\": ACTIVITY_TARGETS.ANNOTATION_OPTIONS_DELETE,\n    \"data-testid\": \"delete-annotation-activity\",\n    onClick: handleDeleteClick\n  }, React.createElement(IconTrash, {\n    color: bdlGray\n  }), React.createElement(FormattedMessage, messages.annotationActivityDeleteMenuItem))), isConfirmingDelete && React.createElement(DeleteConfirmation, {\n    \"data-resin-component\": ACTIVITY_TARGETS.ANNOTATION_OPTIONS,\n    isOpen: isConfirmingDelete,\n    message: messages.annotationActivityDeletePrompt,\n    onDeleteCancel: handleDeleteCancel,\n    onDeleteConfirm: handleDeleteConfirm\n  }));\n};\nexport default AnnotationActivityMenu;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/annotations/AnnotationActivityMenu.js"],"names":["React","TetherComponent","FormattedMessage","DeleteConfirmation","IconTrash","Media","messages","ACTIVITY_TARGETS","bdlGray","MenuItem","AnnotationActivityMenu","canDelete","id","onDeleteConfirm","isConfirmingDelete","setIsConfirmingDelete","useState","handleDeleteCancel","handleDeleteClick","handleDeleteConfirm","tetherProps","attachment","className","constraints","to","targetAttachment","ANNOTATION_OPTIONS_DELETE","annotationActivityDeleteMenuItem","ANNOTATION_OPTIONS","annotationActivityDeletePrompt"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AAQA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,IAAA,EAAqE;EAAA,IAAlEC,SAAkE,GAAA,IAAA,CAAlEA,SAAkE;IAAvDC,EAAuD,GAAA,IAAA,CAAvDA,EAAuD;IAAnDC,eAAmD,GAAA,IAAA,CAAnDA,eAAmD;EAAA,IAAA,eAAA,GAC5Cb,KAAK,CAACgB,QAANhB,CAAe,KAAfA,CAD4C;IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;IACzFc,kBADyF,GAAA,gBAAA,CAAA,CAAA,CAAA;IACrEC,qBADqE,GAAA,gBAAA,CAAA,CAAA,CAAA;EAGhG,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,EAAY;IACnCF,qBAAqB,CAAC,KAAD,CAArBA;EACH,CAFD;EAIA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,EAAM;IAC5BH,qBAAqB,CAAC,IAAD,CAArBA;EACH,CAFD;EAIA,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,EAAM;IAC9BJ,qBAAqB,CAAC,KAAD,CAArBA;IACAF,eAAe,CAAA,CAAA;EAClB,CAHD;EAKA,IAAMO,WAAW,GAAG;IAChBC,UAAU,EAAE,WADI;IAEhBC,SAAS,EAAE,gDAFK;IAGhBC,WAAW,EAAE,CAAC;MAAEC,EAAE,EAAE,cAAN;MAAsBH,UAAU,EAAE;IAAlC,CAAD,CAHG;IAIhBI,gBAAgB,EAAE;EAJF,CAApB;EAOA,OACI,KAAA,CAAA,aAAA,CAAC,eAAD,EAAqBL,WAArB,EACKT,SAAS,IACN,KAAA,CAAA,aAAA,CAAC,KAAD,CAAO,IAAP,EAAA;IACI,UAAU,EAAEG,kBADhB;IAEI,aAAA,EAAY,kCAFhB;IAGI,SAAS,EAAE;MACP,sBAAA,EAAwB,SADjB;MAEP,oBAAA,EAAsB;IAFf;EAHf,CAAA,EAQI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;IACI,mBAAA,EAAmBF,EADvB;IAEI,mBAAA,EAAmBL,gBAAgB,CAACmB,yBAFxC;IAGI,aAAA,EAAY,4BAHhB;IAII,OAAO,EAAER;EAJb,CAAA,EAMI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;IAAW,KAAK,EAAEV;EAAlB,CAAA,CANJ,EAOI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBF,QAAQ,CAACqB,gCAA/B,CAPJ,CARJ,CAFR,EAqBKb,kBAAkB,IACf,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAA;IACI,sBAAA,EAAsBP,gBAAgB,CAACqB,kBAD3C;IAEI,MAAM,EAAEd,kBAFZ;IAGI,OAAO,EAAER,QAAQ,CAACuB,8BAHtB;IAII,cAAc,EAAEZ,kBAJpB;IAKI,eAAe,EAAEE;EALrB,CAAA,CAtBR,CADJ;AAiCH,CAxDD;AA0DA,eAAeT,sBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport TetherComponent from 'react-tether';\nimport { FormattedMessage } from 'react-intl';\nimport DeleteConfirmation from '../common/delete-confirmation';\nimport IconTrash from '../../../../icons/general/IconTrash';\nimport Media from '../../../../components/media';\nimport messages from './messages';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport { bdlGray } from '../../../../styles/variables';\nimport { MenuItem } from '../../../../components/menu';\n\ntype AnnotationActivityMenuProps = {\n    canDelete?: boolean,\n    id: string,\n    onDeleteConfirm: () => void,\n};\n\nconst AnnotationActivityMenu = ({ canDelete, id, onDeleteConfirm }: AnnotationActivityMenuProps) => {\n    const [isConfirmingDelete, setIsConfirmingDelete] = React.useState(false);\n\n    const handleDeleteCancel = (): void => {\n        setIsConfirmingDelete(false);\n    };\n\n    const handleDeleteClick = () => {\n        setIsConfirmingDelete(true);\n    };\n\n    const handleDeleteConfirm = () => {\n        setIsConfirmingDelete(false);\n        onDeleteConfirm();\n    };\n\n    const tetherProps = {\n        attachment: 'top right',\n        className: 'bcs-AnnotationActivity-deleteConfirmationModal',\n        constraints: [{ to: 'scrollParent', attachment: 'together' }],\n        targetAttachment: 'bottom right',\n    };\n\n    return (\n        <TetherComponent {...tetherProps}>\n            {canDelete && (\n                <Media.Menu\n                    isDisabled={isConfirmingDelete}\n                    data-testid=\"annotation-activity-actions-menu\"\n                    menuProps={{\n                        'data-resin-component': 'preview',\n                        'data-resin-feature': 'annotations',\n                    }}\n                >\n                    <MenuItem\n                        data-resin-itemid={id}\n                        data-resin-target={ACTIVITY_TARGETS.ANNOTATION_OPTIONS_DELETE}\n                        data-testid=\"delete-annotation-activity\"\n                        onClick={handleDeleteClick}\n                    >\n                        <IconTrash color={bdlGray} />\n                        <FormattedMessage {...messages.annotationActivityDeleteMenuItem} />\n                    </MenuItem>\n                </Media.Menu>\n            )}\n            {isConfirmingDelete && (\n                <DeleteConfirmation\n                    data-resin-component={ACTIVITY_TARGETS.ANNOTATION_OPTIONS}\n                    isOpen={isConfirmingDelete}\n                    message={messages.annotationActivityDeletePrompt}\n                    onDeleteCancel={handleDeleteCancel}\n                    onDeleteConfirm={handleDeleteConfirm}\n                />\n            )}\n        </TetherComponent>\n    );\n};\n\nexport default AnnotationActivityMenu;\n"]},"metadata":{},"sourceType":"module"}