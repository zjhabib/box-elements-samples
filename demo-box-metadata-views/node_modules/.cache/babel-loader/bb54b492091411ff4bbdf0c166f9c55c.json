{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport ItemGridThumbnail from './ItemGridThumbnail';\nimport MoreOptions from './MoreOptions';\nimport Name from '../common/item/Name';\nimport './ItemGridCell.scss';\nvar ItemGridCell = function ItemGridCell(_ref) {\n  var canPreview = _ref.canPreview,\n    isSmall = _ref.isSmall,\n    isTouch = _ref.isTouch,\n    item = _ref.item,\n    onItemClick = _ref.onItemClick,\n    onItemSelect = _ref.onItemSelect,\n    rootId = _ref.rootId,\n    view = _ref.view,\n    rest = _objectWithoutProperties(_ref, [\"canPreview\", \"isSmall\", \"isTouch\", \"item\", \"onItemClick\", \"onItemSelect\", \"rootId\", \"view\"]);\n  return React.createElement(\"figure\", {\n    className: \"bce-ItemGridCell\"\n  }, React.createElement(ItemGridThumbnail, {\n    item: item\n  }), React.createElement(\"figcaption\", {\n    className: \"bce-ItemGridCell-figcaption\"\n  }, React.createElement(Name, {\n    canPreview: canPreview,\n    isTouch: isTouch,\n    item: item,\n    onItemClick: onItemClick,\n    onItemSelect: onItemSelect,\n    rootId: rootId,\n    showDetails: true,\n    view: view\n  }), React.createElement(MoreOptions, _extends({\n    canPreview: canPreview,\n    isSmall: true,\n    item: item,\n    onItemSelect: onItemSelect\n  }, rest))));\n};\nexport default ItemGridCell;","map":{"version":3,"sources":["../../../src/elements/content-explorer/ItemGridCell.js"],"names":["React","ItemGridThumbnail","MoreOptions","Name","ItemGridCell","canPreview","isSmall","isTouch","item","onItemClick","onItemSelect","rootId","view","rest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AAEA,OAAO,qBAAP;AAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAUR;EAAA,IATTC,UASS,GAAA,IAAA,CATTA,UASS;IARTC,OAQS,GAAA,IAAA,CARTA,OAQS;IAPTC,OAOS,GAAA,IAAA,CAPTA,OAOS;IANTC,IAMS,GAAA,IAAA,CANTA,IAMS;IALTC,WAKS,GAAA,IAAA,CALTA,WAKS;IAJTC,YAIS,GAAA,IAAA,CAJTA,YAIS;IAHTC,MAGS,GAAA,IAAA,CAHTA,MAGS;IAFTC,IAES,GAAA,IAAA,CAFTA,IAES;IADNC,IACM,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,YAAA,EAAA,SAAA,EAAA,SAAA,EAAA,MAAA,EAAA,aAAA,EAAA,cAAA,EAAA,QAAA,EAAA,MAAA,CAAA,CAAA;EACT,OACI,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IAAQ,SAAS,EAAC;EAAlB,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAA;IAAmB,IAAI,EAAEL;EAAzB,CAAA,CADJ,EAEI,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;IAAY,SAAS,EAAC;EAAtB,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IACI,UAAU,EAAEH,UADhB;IAEI,OAAO,EAAEE,OAFb;IAGI,IAAI,EAAEC,IAHV;IAII,WAAW,EAAEC,WAJjB;IAKI,YAAY,EAAEC,YALlB;IAMI,MAAM,EAAEC,MANZ;IAOI,WAAW,EAAA,IAPf;IAQI,IAAI,EAAEC;EARV,CAAA,CADJ,EAWI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA,QAAA,CAAA;IAAa,UAAU,EAAEP,UAAzB;IAAqC,OAAO,EAAA,IAA5C;IAA6C,IAAI,EAAEG,IAAnD;IAAyD,YAAY,EAAEE;EAAvE,CAAA,EAAyFG,IAAzF,CAAA,CAXJ,CAFJ,CADJ;AAkBH,CA7BD;AA8BA,eAAeT,YAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport ItemGridThumbnail from './ItemGridThumbnail';\nimport MoreOptions from './MoreOptions';\nimport Name from '../common/item/Name';\nimport type { ItemGridProps } from './flowTypes';\nimport './ItemGridCell.scss';\nimport type { BoxItem } from '../../common/types/core';\n\ntype Props = {\n    item: BoxItem,\n    ...$Exact<ItemGridProps>,\n};\n\nconst ItemGridCell = ({\n    canPreview,\n    isSmall,\n    isTouch,\n    item,\n    onItemClick,\n    onItemSelect,\n    rootId,\n    view,\n    ...rest\n}: Props) => {\n    return (\n        <figure className=\"bce-ItemGridCell\">\n            <ItemGridThumbnail item={item} />\n            <figcaption className=\"bce-ItemGridCell-figcaption\">\n                <Name\n                    canPreview={canPreview}\n                    isTouch={isTouch}\n                    item={item}\n                    onItemClick={onItemClick}\n                    onItemSelect={onItemSelect}\n                    rootId={rootId}\n                    showDetails\n                    view={view}\n                />\n                <MoreOptions canPreview={canPreview} isSmall item={item} onItemSelect={onItemSelect} {...rest} />\n            </figcaption>\n        </figure>\n    );\n};\nexport default ItemGridCell;\n"]},"metadata":{},"sourceType":"module"}