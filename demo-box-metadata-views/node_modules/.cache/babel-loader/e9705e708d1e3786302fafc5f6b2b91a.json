{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport uniqueId from 'lodash/uniqueId';\nimport classNames from 'classnames';\nimport CheckboxTooltip from './CheckboxTooltip';\nimport './Checkbox.scss';\nvar Checkbox = function Checkbox(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    description = _ref.description,\n    fieldLabel = _ref.fieldLabel,\n    hideLabel = _ref.hideLabel,\n    id = _ref.id,\n    isChecked = _ref.isChecked,\n    isDisabled = _ref.isDisabled,\n    label = _ref.label,\n    name = _ref.name,\n    onChange = _ref.onChange,\n    subsection = _ref.subsection,\n    tooltip = _ref.tooltip,\n    rest = _objectWithoutProperties(_ref, [\"className\", \"description\", \"fieldLabel\", \"hideLabel\", \"id\", \"isChecked\", \"isDisabled\", \"label\", \"name\", \"onChange\", \"subsection\", \"tooltip\"]);\n  var generatedID = React.useRef(uniqueId('checkbox')).current; // use passed-in ID from props; otherwise generate one\n\n  var inputID = id || generatedID;\n  var checkboxAndLabel = React.createElement(\"span\", {\n    className: \"checkbox-label\"\n  }, React.createElement(\"input\", _extends({\n    checked: isChecked,\n    disabled: isDisabled,\n    id: inputID,\n    name: name,\n    onChange: onChange,\n    type: \"checkbox\"\n  }, rest)), React.createElement(\"span\", {\n    className: \"checkbox-pointer-target\"\n  }), React.createElement(\"span\", {\n    className: classNames('bdl-Checkbox-labelTooltipWrapper', {\n      'accessibility-hidden': hideLabel\n    })\n  }, React.createElement(\"label\", {\n    htmlFor: inputID\n  }, label), tooltip && React.createElement(CheckboxTooltip, {\n    tooltip: tooltip\n  })));\n  return React.createElement(\"div\", {\n    className: classNames('checkbox-container', className, {\n      'is-disabled bdl-is-disabled': isDisabled\n    })\n  }, fieldLabel && React.createElement(\"div\", {\n    className: \"label\"\n  }, fieldLabel), checkboxAndLabel, description ? React.createElement(\"div\", {\n    className: \"checkbox-description\"\n  }, description) : null, subsection ? React.createElement(\"div\", {\n    className: \"checkbox-subsection\"\n  }, subsection) : null);\n};\nexport default Checkbox;","map":{"version":3,"sources":["../../../src/components/checkbox/Checkbox.tsx"],"names":["React","uniqueId","classNames","CheckboxTooltip","Checkbox","className","description","fieldLabel","hideLabel","id","isChecked","isDisabled","label","name","onChange","subsection","tooltip","rest","generatedID","useRef","current","inputID","checkboxAndLabel"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport uniqueId from 'lodash/uniqueId';\nimport classNames from 'classnames';\n\nimport CheckboxTooltip from './CheckboxTooltip';\n\nimport './Checkbox.scss';\n\nexport interface CheckboxProps {\n    /** Class name for the checkbox */\n    className?: string;\n    /** Description for the checkbox */\n    description?: React.ReactNode;\n    /** fieldLabel - label for the field shown on top of the checkbox */\n    fieldLabel?: React.ReactNode;\n    /** hideLabel - whether the checkbox label is hidden or not */\n    hideLabel?: boolean;\n    /** id - Unique `id` for the input */\n    id?: string;\n    /** isChecked - whether the checkbox is checked or not */\n    isChecked?: boolean; // @TODO: eventually call this `checked`\n    /** isDisabled - whether the checkbox is disabled or not */\n    isDisabled?: boolean; // @TODO: eventually call this `disabled`\n    /** Label displayed for the input */\n    label: React.ReactNode;\n    /** Name of the input */\n    name: string;\n    /** onBlur - blur callback function that takes the event as the argument */\n    onBlur?:\n        | ((e: React.SyntheticEvent<HTMLInputElement, Event>) => React.ReactText)\n        | {\n              (e: React.FocusEvent<HTMLInputElement>): void;\n          };\n    /** onChange - change callback function that takes the event as the argument */\n    onChange?: (e: React.SyntheticEvent<HTMLInputElement, Event>) => string | number | boolean | void;\n    /** Subsection below the checkbox */\n    subsection?: React.ReactNode;\n    /** Tooltip text next to the checkbox label */\n    tooltip?: string;\n    /** Value for the checkbox */\n    value?: string | number | string[];\n}\n\nconst Checkbox = ({\n    className = '',\n    description,\n    fieldLabel,\n    hideLabel,\n    id,\n    isChecked,\n    isDisabled,\n    label,\n    name,\n    onChange,\n    subsection,\n    tooltip,\n    ...rest // @TODO: eventually remove `rest` in favor of explicit props\n}: CheckboxProps) => {\n    const generatedID = React.useRef(uniqueId('checkbox')).current;\n    // use passed-in ID from props; otherwise generate one\n    const inputID = id || generatedID;\n\n    const checkboxAndLabel = (\n        <span className=\"checkbox-label\">\n            <input\n                checked={isChecked}\n                disabled={isDisabled}\n                id={inputID}\n                name={name}\n                onChange={onChange}\n                type=\"checkbox\"\n                {...rest}\n            />\n            {/* This span is used for the before/after custom checkbox styles, but mouse clicks will pass through this element\n                    to the underlying <input> */}\n            <span className=\"checkbox-pointer-target\" />\n            <span className={classNames('bdl-Checkbox-labelTooltipWrapper', { 'accessibility-hidden': hideLabel })}>\n                <label htmlFor={inputID}>{label}</label>\n                {tooltip && <CheckboxTooltip tooltip={tooltip} />}\n            </span>\n        </span>\n    );\n\n    return (\n        <div className={classNames('checkbox-container', className, { 'is-disabled bdl-is-disabled': isDisabled })}>\n            {fieldLabel && <div className=\"label\">{fieldLabel}</div>}\n            {checkboxAndLabel}\n            {description ? <div className=\"checkbox-description\">{description}</div> : null}\n            {subsection ? <div className=\"checkbox-subsection\">{subsection}</div> : null}\n        </div>\n    );\n};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}