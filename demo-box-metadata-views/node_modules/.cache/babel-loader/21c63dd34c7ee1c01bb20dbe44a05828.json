{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n/**\n * \n * @file File picker header and list component\n * @author Box\n */\nimport React from 'react';\nimport EmptyState from '../common/empty-state';\nimport ProgressBar from '../common/progress-bar';\nimport ItemGrid from './ItemGrid';\nimport ItemList from './ItemList';\nimport MetadataBasedItemList from '../../features/metadata-based-view';\nimport { VIEW_ERROR, VIEW_METADATA, VIEW_MODE_LIST, VIEW_MODE_GRID, VIEW_SELECTED } from '../../constants';\nimport './Content.scss';\n/**\n * Determines if we should show the empty state\n *\n * @param {string} view the current view\n * @param {Object} currentCollection the current collection\n * @param {FieldsToShow} fieldsToShow list of metadata template fields to show\n * @return {boolean} empty or not\n */\n\nfunction isEmpty(view, currentCollection, fieldsToShow) {\n  var _currentCollection$it = currentCollection.items,\n    items = _currentCollection$it === void 0 ? [] : _currentCollection$it;\n  return view === VIEW_ERROR || !items.length || view === VIEW_METADATA && !fieldsToShow.length;\n}\nvar Content = function Content(_ref) {\n  var currentCollection = _ref.currentCollection,\n    focusedRow = _ref.focusedRow,\n    _ref$gridColumnCount = _ref.gridColumnCount,\n    gridColumnCount = _ref$gridColumnCount === void 0 ? 1 : _ref$gridColumnCount,\n    isMedium = _ref.isMedium,\n    onSortChange = _ref.onSortChange,\n    tableRef = _ref.tableRef,\n    view = _ref.view,\n    _ref$viewMode = _ref.viewMode,\n    viewMode = _ref$viewMode === void 0 ? VIEW_MODE_LIST : _ref$viewMode,\n    _ref$fieldsToShow = _ref.fieldsToShow,\n    fieldsToShow = _ref$fieldsToShow === void 0 ? [] : _ref$fieldsToShow,\n    rest = _objectWithoutProperties(_ref, [\"currentCollection\", \"focusedRow\", \"gridColumnCount\", \"isMedium\", \"onSortChange\", \"tableRef\", \"view\", \"viewMode\", \"fieldsToShow\"]);\n  var isViewEmpty = isEmpty(view, currentCollection, fieldsToShow);\n  var isMetadataBasedView = view === VIEW_METADATA;\n  var isListView = !isMetadataBasedView && viewMode === VIEW_MODE_LIST; // Folder view or Recents view\n\n  var isGridView = !isMetadataBasedView && viewMode === VIEW_MODE_GRID; // Folder view or Recents view\n\n  return React.createElement(\"div\", {\n    className: \"bce-content\"\n  }, view === VIEW_ERROR || view === VIEW_SELECTED ? null : React.createElement(ProgressBar, {\n    percent: currentCollection.percentLoaded\n  }), isViewEmpty && React.createElement(EmptyState, {\n    view: view,\n    isLoading: currentCollection.percentLoaded !== 100\n  }), !isViewEmpty && isMetadataBasedView && React.createElement(MetadataBasedItemList, _extends({\n    currentCollection: currentCollection,\n    fieldsToShow: fieldsToShow\n  }, rest)), !isViewEmpty && isListView && React.createElement(ItemList, _extends({\n    currentCollection: currentCollection,\n    onSortChange: onSortChange,\n    focusedRow: focusedRow,\n    isMedium: isMedium,\n    tableRef: tableRef,\n    view: view\n  }, rest)), !isViewEmpty && isGridView && React.createElement(ItemGrid, _extends({\n    currentCollection: currentCollection,\n    gridColumnCount: gridColumnCount,\n    view: view\n  }, rest)));\n};\nexport default Content;","map":{"version":3,"sources":["../../../src/elements/content-explorer/Content.js"],"names":["React","EmptyState","ProgressBar","ItemGrid","ItemList","MetadataBasedItemList","VIEW_ERROR","VIEW_METADATA","VIEW_MODE_LIST","VIEW_MODE_GRID","VIEW_SELECTED","isEmpty","view","currentCollection","fieldsToShow","items","length","Content","focusedRow","gridColumnCount","isMedium","onSortChange","tableRef","viewMode","rest","isViewEmpty","isMetadataBasedView","isListView","isGridView","percentLoaded"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,cAApC,EAAoDC,cAApD,EAAoEC,aAApE,QAAyF,iBAAzF;AAIA,OAAO,gBAAP;AAEA;;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,IAAjB,EAA6BC,iBAA7B,EAA4DC,YAA5D,EAAiG;EAAA,IAAA,qBAAA,GAC1DD,iBAD0D,CACrFE,KADqF;IACrFA,KADqF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAC7E,EAD6E,GAAA,qBAAA;EAE7F,OAAOH,IAAI,KAAKN,UAATM,IAAuB,CAACG,KAAK,CAACC,MAA9BJ,IAAyCA,IAAI,KAAKL,aAATK,IAA0B,CAACE,YAAY,CAACE,MAAxF;AACH;AA+BD,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAWH;EAAA,IAVTJ,iBAUS,GAAA,IAAA,CAVTA,iBAUS;IATTK,UASS,GAAA,IAAA,CATTA,UASS;IAAA,oBAAA,GAAA,IAAA,CARTC,eAQS;IARTA,eAQS,GAAA,oBAAA,KAAA,KAAA,CAAA,GARS,CAQT,GAAA,oBAAA;IAPTC,QAOS,GAAA,IAAA,CAPTA,QAOS;IANTC,YAMS,GAAA,IAAA,CANTA,YAMS;IALTC,QAKS,GAAA,IAAA,CALTA,QAKS;IAJTV,IAIS,GAAA,IAAA,CAJTA,IAIS;IAAA,aAAA,GAAA,IAAA,CAHTW,QAGS;IAHTA,QAGS,GAAA,aAAA,KAAA,KAAA,CAAA,GAHEf,cAGF,GAAA,aAAA;IAAA,iBAAA,GAAA,IAAA,CAFTM,YAES;IAFTA,YAES,GAAA,iBAAA,KAAA,KAAA,CAAA,GAFM,EAEN,GAAA,iBAAA;IADNU,IACM,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,mBAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,UAAA,EAAA,cAAA,EAAA,UAAA,EAAA,MAAA,EAAA,UAAA,EAAA,cAAA,CAAA,CAAA;EACT,IAAMC,WAAW,GAAGd,OAAO,CAACC,IAAD,EAAOC,iBAAP,EAA0BC,YAA1B,CAA3B;EACA,IAAMY,mBAAmB,GAAGd,IAAI,KAAKL,aAArC;EACA,IAAMoB,UAAU,GAAG,CAACD,mBAAD,IAAwBH,QAAQ,KAAKf,cAAxD,CAHS,CAG+D;;EACxE,IAAMoB,UAAU,GAAG,CAACF,mBAAD,IAAwBH,QAAQ,KAAKd,cAAxD,CAJS,CAI+D;;EAExE,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACKG,IAAI,KAAKN,UAATM,IAAuBA,IAAI,KAAKF,aAAhCE,GAAgD,IAAhDA,GACG,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IAAa,OAAO,EAAEC,iBAAiB,CAACgB;EAAxC,CAAA,CAFR,EAKKJ,WAAW,IAAI,KAAA,CAAA,aAAA,CAAC,UAAD,EAAA;IAAY,IAAI,EAAEb,IAAlB;IAAwB,SAAS,EAAEC,iBAAiB,CAACgB,aAAlBhB,KAAoC;EAAvE,CAAA,CALpB,EAMK,CAACY,WAAD,IAAgBC,mBAAhB,IACG,KAAA,CAAA,aAAA,CAAC,qBAAD,EAAA,QAAA,CAAA;IAAuB,iBAAiB,EAAEb,iBAA1C;IAA6D,YAAY,EAAEC;EAA3E,CAAA,EAA6FU,IAA7F,CAAA,CAPR,EASK,CAACC,WAAD,IAAgBE,UAAhB,IACG,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA,QAAA,CAAA;IACI,iBAAiB,EAAEd,iBADvB;IAEI,YAAY,EAAEQ,YAFlB;IAGI,UAAU,EAAEH,UAHhB;IAII,QAAQ,EAAEE,QAJd;IAKI,QAAQ,EAAEE,QALd;IAMI,IAAI,EAAEV;EANV,CAAA,EAOQY,IAPR,CAAA,CAVR,EAoBK,CAACC,WAAD,IAAgBG,UAAhB,IACG,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA,QAAA,CAAA;IACI,iBAAiB,EAAEf,iBADvB;IAEI,eAAe,EAAEM,eAFrB;IAGI,IAAI,EAAEP;EAHV,CAAA,EAIQY,IAJR,CAAA,CArBR,CADJ;AA+BH,CAhDD;AAkDA,eAAeP,OAAf","sourcesContent":["/**\n * @flow\n * @file File picker header and list component\n * @author Box\n */\n\nimport React from 'react';\nimport EmptyState from '../common/empty-state';\nimport ProgressBar from '../common/progress-bar';\nimport ItemGrid from './ItemGrid';\nimport ItemList from './ItemList';\nimport MetadataBasedItemList from '../../features/metadata-based-view';\nimport { VIEW_ERROR, VIEW_METADATA, VIEW_MODE_LIST, VIEW_MODE_GRID, VIEW_SELECTED } from '../../constants';\nimport type { ViewMode } from '../common/flowTypes';\nimport type { FieldsToShow } from '../../common/types/metadataQueries';\nimport type { View, Collection } from '../../common/types/core';\nimport './Content.scss';\n\n/**\n * Determines if we should show the empty state\n *\n * @param {string} view the current view\n * @param {Object} currentCollection the current collection\n * @param {FieldsToShow} fieldsToShow list of metadata template fields to show\n * @return {boolean} empty or not\n */\nfunction isEmpty(view: View, currentCollection: Collection, fieldsToShow: FieldsToShow): boolean {\n    const { items = [] }: Collection = currentCollection;\n    return view === VIEW_ERROR || !items.length || (view === VIEW_METADATA && !fieldsToShow.length);\n}\n\ntype Props = {\n    canDelete: boolean,\n    canDownload: boolean,\n    canPreview: boolean,\n    canRename: boolean,\n    canShare: boolean,\n    currentCollection: Collection,\n    fieldsToShow?: FieldsToShow,\n    focusedRow: number,\n    gridColumnCount?: number,\n    isMedium: boolean,\n    isSmall: boolean,\n    isTouch: boolean,\n    onItemClick: Function,\n    onItemDelete: Function,\n    onItemDownload: Function,\n    onItemPreview: Function,\n    onItemRename: Function,\n    onItemSelect: Function,\n    onItemShare: Function,\n    onMetadataUpdate: Function,\n    onSortChange: Function,\n    rootElement?: HTMLElement,\n    rootId: string,\n    tableRef: Function,\n    view: View,\n    viewMode?: ViewMode,\n};\n\nconst Content = ({\n    currentCollection,\n    focusedRow,\n    gridColumnCount = 1,\n    isMedium,\n    onSortChange,\n    tableRef,\n    view,\n    viewMode = VIEW_MODE_LIST,\n    fieldsToShow = [],\n    ...rest\n}: Props) => {\n    const isViewEmpty = isEmpty(view, currentCollection, fieldsToShow);\n    const isMetadataBasedView = view === VIEW_METADATA;\n    const isListView = !isMetadataBasedView && viewMode === VIEW_MODE_LIST; // Folder view or Recents view\n    const isGridView = !isMetadataBasedView && viewMode === VIEW_MODE_GRID; // Folder view or Recents view\n\n    return (\n        <div className=\"bce-content\">\n            {view === VIEW_ERROR || view === VIEW_SELECTED ? null : (\n                <ProgressBar percent={currentCollection.percentLoaded} />\n            )}\n\n            {isViewEmpty && <EmptyState view={view} isLoading={currentCollection.percentLoaded !== 100} />}\n            {!isViewEmpty && isMetadataBasedView && (\n                <MetadataBasedItemList currentCollection={currentCollection} fieldsToShow={fieldsToShow} {...rest} />\n            )}\n            {!isViewEmpty && isListView && (\n                <ItemList\n                    currentCollection={currentCollection}\n                    onSortChange={onSortChange}\n                    focusedRow={focusedRow}\n                    isMedium={isMedium}\n                    tableRef={tableRef}\n                    view={view}\n                    {...rest}\n                />\n            )}\n            {!isViewEmpty && isGridView && (\n                <ItemGrid\n                    currentCollection={currentCollection}\n                    gridColumnCount={gridColumnCount}\n                    view={view}\n                    {...rest}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}