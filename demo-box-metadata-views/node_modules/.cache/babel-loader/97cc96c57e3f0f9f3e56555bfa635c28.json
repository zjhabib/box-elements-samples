{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport flow from 'lodash/flow';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport TetherComponent from 'react-tether';\nimport { withFeatureConsumer, getFeatureConfig } from '../../../common/feature-checking';\nimport { withAPIContext } from '../../../common/api-context';\nimport Avatar from '../Avatar';\nimport Media from '../../../../components/media';\nimport { MenuItem } from '../../../../components/menu';\nimport ActivityError from '../common/activity-error';\nimport ActivityMessage from '../common/activity-message';\nimport ActivityTimestamp from '../common/activity-timestamp';\nimport DeleteConfirmation from '../common/delete-confirmation';\nimport IconTaskApproval from '../../../../icons/two-toned/IconTaskApproval';\nimport IconTaskGeneral from '../../../../icons/two-toned/IconTaskGeneral';\nimport IconTrash from '../../../../icons/general/IconTrash';\nimport IconPencil from '../../../../icons/general/IconPencil';\nimport UserLink from '../common/user-link';\nimport API from '../../../../api/APIFactory';\nimport { TASK_COMPLETION_RULE_ALL, TASK_NEW_APPROVED, TASK_NEW_REJECTED, TASK_NEW_NOT_STARTED, TASK_NEW_IN_PROGRESS, TASK_NEW_COMPLETED, TASK_TYPE_APPROVAL, PLACEHOLDER_USER, TASK_EDIT_MODE_EDIT } from '../../../../constants';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport { bdlGray80 } from '../../../../styles/variables';\nimport TaskActions from './TaskActions';\nimport TaskCompletionRuleIcon from './TaskCompletionRuleIcon';\nimport TaskDueDate from './TaskDueDate';\nimport TaskStatus from './TaskStatus';\nimport AssigneeList from './AssigneeList';\nimport TaskModal from '../../TaskModal';\nimport TaskMultiFileIcon from './TaskMultiFileIcon';\nimport commonMessages from '../../../common/messages';\nimport messages from './messages';\nimport './Task.scss';\nvar Task = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Task, _React$Component);\n  function Task() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Task);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Task)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loadCollabError: undefined,\n      assignedToFull: _this.props.assigned_to,\n      modalError: undefined,\n      isEditing: false,\n      isLoading: false,\n      isAssigneeListOpen: false,\n      isConfirmingDelete: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleAssigneeListExpand\", function () {\n      _this.getAllTaskCollaborators(function () {\n        _this.setState({\n          isAssigneeListOpen: true\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleAssigneeListCollapse\", function () {\n      _this.setState({\n        isAssigneeListOpen: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEditClick\", function () {\n      _this.getAllTaskCollaborators(function () {\n        _this.setState({\n          isEditing: true\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDeleteClick\", function () {\n      _this.setState({\n        isConfirmingDelete: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDeleteConfirm\", function () {\n      var _this$props = _this.props,\n        id = _this$props.id,\n        onDelete = _this$props.onDelete,\n        permissions = _this$props.permissions;\n      if (onDelete) {\n        onDelete({\n          id: id,\n          permissions: permissions\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDeleteCancel\", function () {\n      _this.setState({\n        isConfirmingDelete: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEditModalClose\", function () {\n      var onModalClose = _this.props.onModalClose;\n      _this.setState({\n        isEditing: false,\n        modalError: undefined\n      });\n      if (onModalClose) {\n        onModalClose();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEditSubmitError\", function (error) {\n      _this.setState({\n        modalError: error\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getAllTaskCollaborators\", function (onSuccess) {\n      var _this$props2 = _this.props,\n        id = _this$props2.id,\n        api = _this$props2.api,\n        task_links = _this$props2.task_links,\n        assigned_to = _this$props2.assigned_to;\n      var errorOccured = commonMessages.errorOccured;\n      var taskCollaboratorLoadErrorMessage = messages.taskCollaboratorLoadErrorMessage; // skip fetch when there are no additional collaborators\n\n      if (!assigned_to.next_marker) {\n        _this.setState({\n          assignedToFull: assigned_to\n        });\n        onSuccess();\n        return;\n      } // fileid is required for api calls, check for presence\n\n      var fileId = get(task_links, 'entries[0].target.id');\n      if (!fileId) {\n        return;\n      }\n      _this.setState({\n        isLoading: true\n      });\n      api.getTaskCollaboratorsAPI(false).getTaskCollaborators({\n        task: {\n          id: id\n        },\n        file: {\n          id: fileId\n        },\n        errorCallback: function errorCallback() {\n          _this.setState({\n            isLoading: false,\n            loadCollabError: {\n              message: taskCollaboratorLoadErrorMessage,\n              title: errorOccured\n            }\n          });\n        },\n        successCallback: function successCallback(assignedToFull) {\n          _this.setState({\n            assignedToFull: assignedToFull,\n            isLoading: false\n          });\n          onSuccess();\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTaskAction\", function (taskId, assignmentId, taskStatus) {\n      var onAssignmentUpdate = _this.props.onAssignmentUpdate;\n      _this.setState({\n        isAssigneeListOpen: false\n      });\n      onAssignmentUpdate(taskId, assignmentId, taskStatus);\n    });\n    return _this;\n  }\n  _createClass(Task, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props3 = this.props,\n        approverSelectorContacts = _this$props3.approverSelectorContacts,\n        assigned_to = _this$props3.assigned_to,\n        completion_rule = _this$props3.completion_rule,\n        created_at = _this$props3.created_at,\n        created_by = _this$props3.created_by,\n        currentUser = _this$props3.currentUser,\n        due_at = _this$props3.due_at,\n        error = _this$props3.error,\n        features = _this$props3.features,\n        getApproverWithQuery = _this$props3.getApproverWithQuery,\n        getAvatarUrl = _this$props3.getAvatarUrl,\n        getUserProfileUrl = _this$props3.getUserProfileUrl,\n        id = _this$props3.id,\n        isPending = _this$props3.isPending,\n        description = _this$props3.description,\n        onEdit = _this$props3.onEdit,\n        onView = _this$props3.onView,\n        permissions = _this$props3.permissions,\n        status = _this$props3.status,\n        task_links = _this$props3.task_links,\n        task_type = _this$props3.task_type,\n        translatedTaggedMessage = _this$props3.translatedTaggedMessage,\n        translations = _this$props3.translations;\n      var _this$state = this.state,\n        assignedToFull = _this$state.assignedToFull,\n        modalError = _this$state.modalError,\n        isEditing = _this$state.isEditing,\n        isLoading = _this$state.isLoading,\n        loadCollabError = _this$state.loadCollabError,\n        isAssigneeListOpen = _this$state.isAssigneeListOpen,\n        isConfirmingDelete = _this$state.isConfirmingDelete;\n      var inlineError = loadCollabError || error;\n      var assignments = assigned_to && assigned_to.entries;\n      var currentUserAssignment = assignments && assignments.find(function (_ref) {\n        var target = _ref.target;\n        return target.id === currentUser.id;\n      });\n      var createdByUser = created_by.target || PLACEHOLDER_USER;\n      var createdAtTimestamp = new Date(created_at).getTime();\n      var isTaskCompleted = !(status === TASK_NEW_NOT_STARTED || status === TASK_NEW_IN_PROGRESS);\n      var isCreator = created_by.target.id === currentUser.id;\n      var isMultiFile = task_links.entries.length > 1;\n      var shouldShowActions;\n      if (isTaskCompleted) {\n        shouldShowActions = false;\n      } else if (isMultiFile && isCreator) {\n        shouldShowActions = true;\n      } else {\n        shouldShowActions = currentUserAssignment && currentUserAssignment.permissions && currentUserAssignment.permissions.can_update && currentUserAssignment.status === TASK_NEW_NOT_STARTED;\n      }\n      var TaskTypeIcon = task_type === TASK_TYPE_APPROVAL ? IconTaskApproval : IconTaskGeneral;\n      var isMenuVisible = (permissions.can_delete || permissions.can_update) && !isPending;\n      return React.createElement(\"div\", {\n        className: \"bcs-Task\",\n        \"data-resin-feature\": \"tasks\",\n        \"data-resin-taskid\": id,\n        \"data-resin-tasktype\": task_type,\n        \"data-resin-numassignees\": assignments && assignments.length\n      }, inlineError ? React.createElement(ActivityError, inlineError) : null, React.createElement(Media, {\n        className: classNames('bcs-Task-media', {\n          'bcs-is-pending': isPending || isLoading\n        }),\n        \"data-testid\": \"task-card\"\n      }, React.createElement(Media.Figure, {\n        className: \"bcs-Task-avatar\"\n      }, React.createElement(Avatar, {\n        getAvatarUrl: getAvatarUrl,\n        user: createdByUser\n      }), React.createElement(TaskTypeIcon, {\n        width: 20,\n        height: 20,\n        className: \"bcs-Task-avatarBadge\"\n      })), React.createElement(Media.Body, null, isMenuVisible && React.createElement(TetherComponent, {\n        attachment: \"top right\",\n        className: \"bcs-Task-deleteConfirmationModal\",\n        constraints: [{\n          to: 'scrollParent',\n          attachment: 'together'\n        }],\n        targetAttachment: \"bottom right\"\n      }, React.createElement(Media.Menu, {\n        isDisabled: isConfirmingDelete,\n        \"data-testid\": \"task-actions-menu\",\n        menuProps: {\n          'data-resin-component': ACTIVITY_TARGETS.TASK_OPTIONS\n        }\n      }, permissions.can_update && React.createElement(MenuItem, {\n        \"data-resin-target\": ACTIVITY_TARGETS.TASK_OPTIONS_EDIT,\n        \"data-testid\": \"edit-task\",\n        onClick: this.handleEditClick\n      }, React.createElement(IconPencil, {\n        color: bdlGray80\n      }), React.createElement(FormattedMessage, messages.taskEditMenuItem)), permissions.can_delete && React.createElement(MenuItem, {\n        \"data-resin-target\": ACTIVITY_TARGETS.TASK_OPTIONS_DELETE,\n        \"data-testid\": \"delete-task\",\n        onClick: this.handleDeleteClick\n      }, React.createElement(IconTrash, {\n        color: bdlGray80\n      }), React.createElement(FormattedMessage, messages.taskDeleteMenuItem))), isConfirmingDelete && React.createElement(DeleteConfirmation, {\n        \"data-resin-component\": ACTIVITY_TARGETS.TASK_OPTIONS,\n        isOpen: isConfirmingDelete,\n        message: messages.taskDeletePrompt,\n        onDeleteCancel: this.handleDeleteCancel,\n        onDeleteConfirm: this.handleDeleteConfirm\n      })), React.createElement(\"div\", {\n        className: \"bcs-Task-headline\"\n      }, React.createElement(UserLink, _extends({}, createdByUser, {\n        \"data-resin-target\": ACTIVITY_TARGETS.PROFILE,\n        getUserProfileUrl: getUserProfileUrl\n      }))), React.createElement(\"div\", null, React.createElement(ActivityTimestamp, {\n        date: createdAtTimestamp\n      })), React.createElement(\"div\", {\n        className: \"bcs-Task-status\"\n      }, React.createElement(TaskStatus, {\n        status: status\n      }), React.createElement(TaskMultiFileIcon, {\n        isMultiFile: isMultiFile\n      }), React.createElement(TaskCompletionRuleIcon, {\n        completionRule: completion_rule\n      })), React.createElement(\"div\", {\n        className: \"bcs-Task-dueDate\"\n      }, !!due_at && React.createElement(TaskDueDate, {\n        dueDate: due_at,\n        status: status\n      })), React.createElement(\"div\", null, React.createElement(ActivityMessage, _extends({\n        id: id,\n        tagged_message: description,\n        translatedTaggedMessage: translatedTaggedMessage\n      }, translations, {\n        translationFailed: error ? true : null,\n        getUserProfileUrl: getUserProfileUrl\n      }))), React.createElement(\"div\", {\n        className: \"bcs-Task-assigneeListContainer\"\n      }, React.createElement(AssigneeList, {\n        isOpen: isAssigneeListOpen,\n        onCollapse: this.handleAssigneeListCollapse,\n        onExpand: this.handleAssigneeListExpand,\n        getAvatarUrl: getAvatarUrl,\n        initialAssigneeCount: 3,\n        users: isAssigneeListOpen ? assignedToFull : assigned_to\n      })), shouldShowActions && React.createElement(\"div\", {\n        className: \"bcs-Task-actionsContainer\",\n        \"data-testid\": \"action-container\"\n      }, React.createElement(TaskActions, {\n        isMultiFile: isMultiFile,\n        taskType: task_type,\n        onTaskApproval: isPending ? noop : function () {\n          return (\n            // $FlowFixMe checked by shouldShowActions\n            _this2.handleTaskAction(id, currentUserAssignment.id, TASK_NEW_APPROVED)\n          );\n        },\n        onTaskReject: isPending ? noop : function () {\n          return (\n            // $FlowFixMe checked by shouldShowActions\n            _this2.handleTaskAction(id, currentUserAssignment.id, TASK_NEW_REJECTED)\n          );\n        },\n        onTaskComplete: isPending ? noop : function () {\n          return _this2.handleTaskAction(id,\n          // $FlowFixMe checked by shouldShowActions\n          currentUserAssignment.id, TASK_NEW_COMPLETED);\n        },\n        onTaskView: onView && function () {\n          return onView(id, isCreator);\n        }\n      })))), React.createElement(TaskModal, {\n        editMode: TASK_EDIT_MODE_EDIT,\n        error: modalError,\n        feedbackUrl: getFeatureConfig(features, 'activityFeed.tasks').feedbackUrl || '',\n        onSubmitError: this.handleEditSubmitError,\n        onSubmitSuccess: this.handleEditModalClose,\n        onModalClose: this.handleEditModalClose,\n        isTaskFormOpen: isEditing,\n        taskFormProps: {\n          id: id,\n          approvers: assignedToFull.entries,\n          approverSelectorContacts: approverSelectorContacts,\n          completionRule: completion_rule,\n          getApproverWithQuery: getApproverWithQuery,\n          getAvatarUrl: getAvatarUrl,\n          createTask: function createTask() {},\n          editTask: onEdit,\n          dueDate: due_at,\n          message: description\n        },\n        taskType: task_type\n      }));\n    }\n  }]);\n  return Task;\n}(React.Component);\n_defineProperty(Task, \"defaultProps\", {\n  completion_rule: TASK_COMPLETION_RULE_ALL\n});\nexport { Task as TaskComponent };\nexport default flow([withFeatureConsumer, withAPIContext])(Task);","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/Task.js"],"names":["React","noop","flow","get","FormattedMessage","classNames","TetherComponent","withFeatureConsumer","getFeatureConfig","withAPIContext","Avatar","Media","MenuItem","ActivityError","ActivityMessage","ActivityTimestamp","DeleteConfirmation","IconTaskApproval","IconTaskGeneral","IconTrash","IconPencil","UserLink","API","TASK_COMPLETION_RULE_ALL","TASK_NEW_APPROVED","TASK_NEW_REJECTED","TASK_NEW_NOT_STARTED","TASK_NEW_IN_PROGRESS","TASK_NEW_COMPLETED","TASK_TYPE_APPROVAL","PLACEHOLDER_USER","TASK_EDIT_MODE_EDIT","ACTIVITY_TARGETS","bdlGray80","TaskActions","TaskCompletionRuleIcon","TaskDueDate","TaskStatus","AssigneeList","TaskModal","TaskMultiFileIcon","commonMessages","messages","Task","Component","completion_rule","loadCollabError","undefined","assignedToFull","props","assigned_to","modalError","isEditing","isLoading","isAssigneeListOpen","isConfirmingDelete","getAllTaskCollaborators","setState","id","onDelete","permissions","onModalClose","error","onSuccess","api","task_links","errorOccured","taskCollaboratorLoadErrorMessage","next_marker","fileId","getTaskCollaboratorsAPI","getTaskCollaborators","task","file","errorCallback","message","title","successCallback","taskId","assignmentId","taskStatus","onAssignmentUpdate","approverSelectorContacts","created_at","created_by","currentUser","due_at","features","getApproverWithQuery","getAvatarUrl","getUserProfileUrl","isPending","description","onEdit","onView","status","task_type","translatedTaggedMessage","translations","state","inlineError","assignments","entries","currentUserAssignment","find","target","createdByUser","createdAtTimestamp","Date","getTime","isTaskCompleted","isCreator","isMultiFile","length","shouldShowActions","can_update","TaskTypeIcon","isMenuVisible","can_delete","to","attachment","TASK_OPTIONS","TASK_OPTIONS_EDIT","handleEditClick","taskEditMenuItem","TASK_OPTIONS_DELETE","handleDeleteClick","taskDeleteMenuItem","taskDeletePrompt","handleDeleteCancel","handleDeleteConfirm","PROFILE","handleAssigneeListCollapse","handleAssigneeListExpand","handleTaskAction","feedbackUrl","handleEditSubmitError","handleEditModalClose","approvers","completionRule","createTask","editTask","dueDate","TaskComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport flow from 'lodash/flow';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport TetherComponent from 'react-tether';\nimport { withFeatureConsumer, getFeatureConfig } from '../../../common/feature-checking';\nimport { withAPIContext } from '../../../common/api-context';\nimport Avatar from '../Avatar';\nimport Media from '../../../../components/media';\nimport { MenuItem } from '../../../../components/menu';\nimport ActivityError from '../common/activity-error';\nimport ActivityMessage from '../common/activity-message';\nimport ActivityTimestamp from '../common/activity-timestamp';\nimport DeleteConfirmation from '../common/delete-confirmation';\nimport IconTaskApproval from '../../../../icons/two-toned/IconTaskApproval';\nimport IconTaskGeneral from '../../../../icons/two-toned/IconTaskGeneral';\nimport IconTrash from '../../../../icons/general/IconTrash';\nimport IconPencil from '../../../../icons/general/IconPencil';\nimport UserLink from '../common/user-link';\nimport API from '../../../../api/APIFactory';\nimport {\n    TASK_COMPLETION_RULE_ALL,\n    TASK_NEW_APPROVED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_NOT_STARTED,\n    TASK_NEW_IN_PROGRESS,\n    TASK_NEW_COMPLETED,\n    TASK_TYPE_APPROVAL,\n    PLACEHOLDER_USER,\n    TASK_EDIT_MODE_EDIT,\n} from '../../../../constants';\nimport type { TaskAssigneeCollection, TaskNew } from '../../../../common/types/tasks';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport { bdlGray80 } from '../../../../styles/variables';\nimport TaskActions from './TaskActions';\nimport TaskCompletionRuleIcon from './TaskCompletionRuleIcon';\nimport TaskDueDate from './TaskDueDate';\nimport TaskStatus from './TaskStatus';\nimport AssigneeList from './AssigneeList';\nimport TaskModal from '../../TaskModal';\nimport TaskMultiFileIcon from './TaskMultiFileIcon';\nimport commonMessages from '../../../common/messages';\nimport messages from './messages';\nimport type { GetAvatarUrlCallback, GetProfileUrlCallback } from '../../../common/flowTypes';\nimport type { ElementsXhrError } from '../../../../common/types/api';\nimport type { SelectorItems, User } from '../../../../common/types/core';\nimport type { ActionItemError } from '../../../../common/types/feed';\nimport type { Translations } from '../../flowTypes';\nimport type { FeatureConfig } from '../../../common/feature-checking';\n\nimport './Task.scss';\n\ntype Props = {|\n    ...TaskNew,\n    api: API,\n    approverSelectorContacts: SelectorItems<>,\n    currentUser: User,\n    error?: ActionItemError,\n    features?: FeatureConfig,\n    getApproverWithQuery?: Function,\n    getAvatarUrl: GetAvatarUrlCallback,\n    getMentionWithQuery?: Function,\n    getUserProfileUrl?: GetProfileUrlCallback,\n    isPending?: boolean,\n    onAssignmentUpdate: Function,\n    onDelete?: Function,\n    onEdit?: Function,\n    onModalClose?: Function,\n    onView?: Function,\n    translatedTaggedMessage?: string,\n    translations?: Translations,\n|};\n\ntype State = {\n    // the complete list of assignees (when task.assigned_to is truncated)\n    assignedToFull: TaskAssigneeCollection,\n    isAssigneeListOpen: boolean,\n    isConfirmingDelete: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    loadCollabError: ?ActionItemError,\n    modalError: ?ElementsXhrError,\n};\n\nclass Task extends React.Component<Props, State> {\n    static defaultProps = {\n        completion_rule: TASK_COMPLETION_RULE_ALL,\n    };\n\n    state = {\n        loadCollabError: undefined,\n        assignedToFull: this.props.assigned_to,\n        modalError: undefined,\n        isEditing: false,\n        isLoading: false,\n        isAssigneeListOpen: false,\n        isConfirmingDelete: false,\n    };\n\n    handleAssigneeListExpand = () => {\n        this.getAllTaskCollaborators(() => {\n            this.setState({ isAssigneeListOpen: true });\n        });\n    };\n\n    handleAssigneeListCollapse = () => {\n        this.setState({ isAssigneeListOpen: false });\n    };\n\n    handleEditClick = () => {\n        this.getAllTaskCollaborators(() => {\n            this.setState({ isEditing: true });\n        });\n    };\n\n    handleDeleteClick = () => {\n        this.setState({ isConfirmingDelete: true });\n    };\n\n    handleDeleteConfirm = (): void => {\n        const { id, onDelete, permissions } = this.props;\n\n        if (onDelete) {\n            onDelete({ id, permissions });\n        }\n    };\n\n    handleDeleteCancel = (): void => {\n        this.setState({ isConfirmingDelete: false });\n    };\n\n    handleEditModalClose = () => {\n        const { onModalClose } = this.props;\n        this.setState({ isEditing: false, modalError: undefined });\n\n        if (onModalClose) {\n            onModalClose();\n        }\n    };\n\n    handleEditSubmitError = (error: ElementsXhrError) => {\n        this.setState({ modalError: error });\n    };\n\n    getAllTaskCollaborators = (onSuccess: () => any) => {\n        const { id, api, task_links, assigned_to } = this.props;\n        const { errorOccured } = commonMessages;\n        const { taskCollaboratorLoadErrorMessage } = messages;\n\n        // skip fetch when there are no additional collaborators\n        if (!assigned_to.next_marker) {\n            this.setState({ assignedToFull: assigned_to });\n            onSuccess();\n            return;\n        }\n\n        // fileid is required for api calls, check for presence\n        const fileId = get(task_links, 'entries[0].target.id');\n        if (!fileId) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        api.getTaskCollaboratorsAPI(false).getTaskCollaborators({\n            task: { id },\n            file: { id: fileId },\n            errorCallback: () => {\n                this.setState({\n                    isLoading: false,\n                    loadCollabError: {\n                        message: taskCollaboratorLoadErrorMessage,\n                        title: errorOccured,\n                    },\n                });\n            },\n            successCallback: assignedToFull => {\n                this.setState({ assignedToFull, isLoading: false });\n                onSuccess();\n            },\n        });\n    };\n\n    handleTaskAction = (taskId: string, assignmentId: string, taskStatus: string) => {\n        const { onAssignmentUpdate } = this.props;\n\n        this.setState({ isAssigneeListOpen: false });\n\n        onAssignmentUpdate(taskId, assignmentId, taskStatus);\n    };\n\n    render() {\n        const {\n            approverSelectorContacts,\n            assigned_to,\n            completion_rule,\n            created_at,\n            created_by,\n            currentUser,\n            due_at,\n            error,\n            features,\n            getApproverWithQuery,\n            getAvatarUrl,\n            getUserProfileUrl,\n            id,\n            isPending,\n            description,\n            onEdit,\n            onView,\n            permissions,\n            status,\n            task_links,\n            task_type,\n            translatedTaggedMessage,\n            translations,\n        } = this.props;\n\n        const {\n            assignedToFull,\n            modalError,\n            isEditing,\n            isLoading,\n            loadCollabError,\n            isAssigneeListOpen,\n            isConfirmingDelete,\n        } = this.state;\n\n        const inlineError = loadCollabError || error;\n\n        const assignments = assigned_to && assigned_to.entries;\n\n        const currentUserAssignment = assignments && assignments.find(({ target }) => target.id === currentUser.id);\n\n        const createdByUser = created_by.target || PLACEHOLDER_USER;\n\n        const createdAtTimestamp = new Date(created_at).getTime();\n\n        const isTaskCompleted = !(status === TASK_NEW_NOT_STARTED || status === TASK_NEW_IN_PROGRESS);\n\n        const isCreator = created_by.target.id === currentUser.id;\n\n        const isMultiFile = task_links.entries.length > 1;\n\n        let shouldShowActions;\n        if (isTaskCompleted) {\n            shouldShowActions = false;\n        } else if (isMultiFile && isCreator) {\n            shouldShowActions = true;\n        } else {\n            shouldShowActions =\n                currentUserAssignment &&\n                currentUserAssignment.permissions &&\n                currentUserAssignment.permissions.can_update &&\n                currentUserAssignment.status === TASK_NEW_NOT_STARTED;\n        }\n\n        const TaskTypeIcon = task_type === TASK_TYPE_APPROVAL ? IconTaskApproval : IconTaskGeneral;\n\n        const isMenuVisible = (permissions.can_delete || permissions.can_update) && !isPending;\n\n        return (\n            <div\n                className=\"bcs-Task\"\n                data-resin-feature=\"tasks\"\n                data-resin-taskid={id}\n                data-resin-tasktype={task_type}\n                data-resin-numassignees={assignments && assignments.length}\n            >\n                {/* $FlowFixMe */}\n                {inlineError ? <ActivityError {...inlineError} /> : null}\n                <Media\n                    className={classNames('bcs-Task-media', {\n                        'bcs-is-pending': isPending || isLoading,\n                    })}\n                    data-testid=\"task-card\"\n                >\n                    <Media.Figure className=\"bcs-Task-avatar\">\n                        <Avatar getAvatarUrl={getAvatarUrl} user={createdByUser} />\n                        <TaskTypeIcon width={20} height={20} className=\"bcs-Task-avatarBadge\" />\n                    </Media.Figure>\n                    <Media.Body>\n                        {isMenuVisible && (\n                            <TetherComponent\n                                attachment=\"top right\"\n                                className=\"bcs-Task-deleteConfirmationModal\"\n                                constraints={[{ to: 'scrollParent', attachment: 'together' }]}\n                                targetAttachment=\"bottom right\"\n                            >\n                                <Media.Menu\n                                    isDisabled={isConfirmingDelete}\n                                    data-testid=\"task-actions-menu\"\n                                    menuProps={{\n                                        'data-resin-component': ACTIVITY_TARGETS.TASK_OPTIONS,\n                                    }}\n                                >\n                                    {permissions.can_update && (\n                                        <MenuItem\n                                            data-resin-target={ACTIVITY_TARGETS.TASK_OPTIONS_EDIT}\n                                            data-testid=\"edit-task\"\n                                            onClick={this.handleEditClick}\n                                        >\n                                            <IconPencil color={bdlGray80} />\n                                            <FormattedMessage {...messages.taskEditMenuItem} />\n                                        </MenuItem>\n                                    )}\n                                    {permissions.can_delete && (\n                                        <MenuItem\n                                            data-resin-target={ACTIVITY_TARGETS.TASK_OPTIONS_DELETE}\n                                            data-testid=\"delete-task\"\n                                            onClick={this.handleDeleteClick}\n                                        >\n                                            <IconTrash color={bdlGray80} />\n                                            <FormattedMessage {...messages.taskDeleteMenuItem} />\n                                        </MenuItem>\n                                    )}\n                                </Media.Menu>\n                                {isConfirmingDelete && (\n                                    <DeleteConfirmation\n                                        data-resin-component={ACTIVITY_TARGETS.TASK_OPTIONS}\n                                        isOpen={isConfirmingDelete}\n                                        message={messages.taskDeletePrompt}\n                                        onDeleteCancel={this.handleDeleteCancel}\n                                        onDeleteConfirm={this.handleDeleteConfirm}\n                                    />\n                                )}\n                            </TetherComponent>\n                        )}\n                        <div className=\"bcs-Task-headline\">\n                            <UserLink\n                                {...createdByUser}\n                                data-resin-target={ACTIVITY_TARGETS.PROFILE}\n                                getUserProfileUrl={getUserProfileUrl}\n                            />\n                        </div>\n                        <div>\n                            <ActivityTimestamp date={createdAtTimestamp} />\n                        </div>\n                        <div className=\"bcs-Task-status\">\n                            <TaskStatus status={status} />\n                            <TaskMultiFileIcon isMultiFile={isMultiFile} />\n                            <TaskCompletionRuleIcon completionRule={completion_rule} />\n                        </div>\n                        <div className=\"bcs-Task-dueDate\">\n                            {!!due_at && <TaskDueDate dueDate={due_at} status={status} />}\n                        </div>\n                        <div>\n                            <ActivityMessage\n                                id={id}\n                                tagged_message={description}\n                                translatedTaggedMessage={translatedTaggedMessage}\n                                {...translations}\n                                translationFailed={error ? true : null}\n                                getUserProfileUrl={getUserProfileUrl}\n                            />\n                        </div>\n                        <div className=\"bcs-Task-assigneeListContainer\">\n                            <AssigneeList\n                                isOpen={isAssigneeListOpen}\n                                onCollapse={this.handleAssigneeListCollapse}\n                                onExpand={this.handleAssigneeListExpand}\n                                getAvatarUrl={getAvatarUrl}\n                                initialAssigneeCount={3}\n                                users={isAssigneeListOpen ? assignedToFull : assigned_to}\n                            />\n                        </div>\n                        {shouldShowActions && (\n                            <div className=\"bcs-Task-actionsContainer\" data-testid=\"action-container\">\n                                <TaskActions\n                                    isMultiFile={isMultiFile}\n                                    taskType={task_type}\n                                    onTaskApproval={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  // $FlowFixMe checked by shouldShowActions\n                                                  this.handleTaskAction(id, currentUserAssignment.id, TASK_NEW_APPROVED)\n                                    }\n                                    onTaskReject={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  // $FlowFixMe checked by shouldShowActions\n                                                  this.handleTaskAction(id, currentUserAssignment.id, TASK_NEW_REJECTED)\n                                    }\n                                    onTaskComplete={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  this.handleTaskAction(\n                                                      id,\n                                                      // $FlowFixMe checked by shouldShowActions\n                                                      currentUserAssignment.id,\n                                                      TASK_NEW_COMPLETED,\n                                                  )\n                                    }\n                                    onTaskView={onView && (() => onView(id, isCreator))}\n                                />\n                            </div>\n                        )}\n                    </Media.Body>\n                </Media>\n                <TaskModal\n                    editMode={TASK_EDIT_MODE_EDIT}\n                    error={modalError}\n                    feedbackUrl={getFeatureConfig(features, 'activityFeed.tasks').feedbackUrl || ''}\n                    onSubmitError={this.handleEditSubmitError}\n                    onSubmitSuccess={this.handleEditModalClose}\n                    onModalClose={this.handleEditModalClose}\n                    isTaskFormOpen={isEditing}\n                    taskFormProps={{\n                        id,\n                        approvers: assignedToFull.entries,\n                        approverSelectorContacts,\n                        completionRule: completion_rule,\n                        getApproverWithQuery,\n                        getAvatarUrl,\n                        createTask: () => {},\n                        editTask: onEdit,\n                        dueDate: due_at,\n                        message: description,\n                    }}\n                    taskType={task_type}\n                />\n            </div>\n        );\n    }\n}\n\nexport { Task as TaskComponent };\nexport default flow([withFeatureConsumer, withAPIContext])(Task);\n"]},"metadata":{},"sourceType":"module"}