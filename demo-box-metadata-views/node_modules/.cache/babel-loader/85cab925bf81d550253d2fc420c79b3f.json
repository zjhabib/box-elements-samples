{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport AnimateHeight from 'react-animate-height';\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport IconCaretDown from '../../icons/general/IconCaretDown';\nimport PlainButton from '../plain-button';\nimport { ButtonType } from '../button';\nimport { bdlGray50 } from '../../styles/variables';\nimport './Collapsible.scss';\nvar Collapsible = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Collapsible, _React$PureComponent);\n  function Collapsible(props) {\n    var _this;\n    _classCallCheck(this, Collapsible);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collapsible).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"toggleVisibility\", function () {\n      var _this$props = _this.props,\n        onOpen = _this$props.onOpen,\n        onClose = _this$props.onClose;\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen\n        };\n      }, function () {\n        var isOpen = _this.state.isOpen;\n        if (isOpen && onOpen) {\n          onOpen(_assertThisInitialized(_this));\n        } else if (!isOpen && onClose) {\n          onClose(_assertThisInitialized(_this));\n        }\n      });\n    });\n    _this.state = {\n      isOpen: props.isOpen\n    };\n    return _this;\n  }\n  _createClass(Collapsible, [{\n    key: \"render\",\n    value: function render() {\n      var isOpen = this.state.isOpen;\n      var _this$props2 = this.props,\n        animationDuration = _this$props2.animationDuration,\n        _this$props2$buttonPr = _this$props2.buttonProps,\n        buttonProps = _this$props2$buttonPr === void 0 ? {} : _this$props2$buttonPr,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        isBordered = _this$props2.isBordered,\n        hasStickyHeader = _this$props2.hasStickyHeader,\n        headerActionItems = _this$props2.headerActionItems,\n        title = _this$props2.title;\n      var sectionClassName = classNames('collapsible-card', {\n        'is-open': isOpen\n      }, {\n        'is-bordered': isBordered\n      }, className);\n      var interactionTarget = buttonProps[RESIN_TAG_TARGET];\n      var modifiedButtonProps = omit(buttonProps, [RESIN_TAG_TARGET]);\n      var buttonClassName = hasStickyHeader ? 'collapsible-card-header has-sticky-header' : 'collapsible-card-header';\n      if (interactionTarget) {\n        modifiedButtonProps[RESIN_TAG_TARGET] = \"\".concat(interactionTarget).concat(isOpen ? 'collapse' : 'expand');\n      }\n      return React.createElement(\"div\", {\n        className: sectionClassName\n      }, React.createElement(\"div\", {\n        className: buttonClassName\n      }, React.createElement(PlainButton, _extends({}, modifiedButtonProps, {\n        className: \"collapsible-card-title\",\n        onClick: this.toggleVisibility,\n        type: ButtonType.BUTTON\n      }), title, React.createElement(IconCaretDown, {\n        className: \"collapsible-card-header-caret\",\n        color: bdlGray50,\n        width: 8\n      })), !!headerActionItems && React.createElement(\"span\", {\n        className: \"bdl-Collapsible-actionItems\"\n      }, headerActionItems)), React.createElement(AnimateHeight, {\n        duration: animationDuration,\n        height: isOpen ? 'auto' : 0\n      }, React.createElement(\"div\", {\n        className: \"collapsible-card-content\"\n      }, children)));\n    }\n  }]);\n  return Collapsible;\n}(React.PureComponent);\n_defineProperty(Collapsible, \"defaultProps\", {\n  buttonProps: {},\n  className: '',\n  isOpen: true,\n  animationDuration: 100\n});\nexport default Collapsible;","map":{"version":3,"sources":["../../../src/components/collapsible/Collapsible.tsx"],"names":["React","classNames","omit","AnimateHeight","RESIN_TAG_TARGET","IconCaretDown","PlainButton","ButtonType","bdlGray50","Collapsible","PureComponent","buttonProps","className","isOpen","animationDuration","props","state","onOpen","onClose","setState","prevState","children","isBordered","hasStickyHeader","headerActionItems","title","sectionClassName","interactionTarget","modifiedButtonProps","buttonClassName","toggleVisibility","BUTTON"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport AnimateHeight from 'react-animate-height';\n\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport IconCaretDown from '../../icons/general/IconCaretDown';\nimport PlainButton from '../plain-button';\nimport { ButtonType } from '../button';\nimport { bdlGray50 } from '../../styles/variables';\n\nimport './Collapsible.scss';\n\nexport interface CollapsibleProps {\n    /** animationDuration - duration of animation in milliseconds */\n    animationDuration?: number;\n    /** buttonProps - other props (e.g. resin target names) to be included in the button */\n    buttonProps?: Record<string, React.ReactNode>;\n    /** children - content to be displayed in the card when it is expanded */\n    children: Array<React.ReactChild> | React.ReactChild;\n    /** className - CSS class for the wrapper div */\n    className?: string;\n    /** hasStickyHeader - determines look of component */\n    hasStickyHeader?: boolean;\n    /** headerActionItems - determines stickiness of the header */\n    headerActionItems?: React.ReactChild;\n    /** headerButton - button in the title of the collapsible card */\n    headerButton?: React.ReactElement;\n    /** isBordered - determines optional header action items */\n    isBordered?: boolean;\n    /** isOpen - initial state of the collapsible card */\n    isOpen: boolean;\n    /** onClose - callback called when collapsible is opened */\n    onClose?: Function;\n    /** onOpen - callback called when collapsible is collapsed */\n    onOpen?: Function;\n    /** title - string or component in the title of the collapsible card */\n    title: string | React.ReactElement;\n}\n\ninterface CollapsibleState {\n    /** isOpen - initial state of the collapsible card */\n    isOpen: boolean;\n}\n\nclass Collapsible extends React.PureComponent<CollapsibleProps, CollapsibleState> {\n    static defaultProps = {\n        buttonProps: {},\n        className: '',\n        isOpen: true,\n        animationDuration: 100,\n    };\n\n    constructor(props: CollapsibleProps) {\n        super(props);\n        this.state = {\n            isOpen: props.isOpen,\n        };\n    }\n\n    toggleVisibility = () => {\n        const { onOpen, onClose } = this.props;\n        this.setState(\n            prevState => ({\n                isOpen: !prevState.isOpen,\n            }),\n            () => {\n                const { isOpen } = this.state;\n                if (isOpen && onOpen) {\n                    onOpen(this);\n                } else if (!isOpen && onClose) {\n                    onClose(this);\n                }\n            },\n        );\n    };\n\n    render() {\n        const { isOpen }: CollapsibleState = this.state;\n        const {\n            animationDuration,\n            buttonProps = {},\n            children,\n            className,\n            isBordered,\n            hasStickyHeader,\n            headerActionItems,\n            title,\n        }: CollapsibleProps = this.props;\n\n        const sectionClassName = classNames(\n            'collapsible-card',\n            {\n                'is-open': isOpen,\n            },\n            {\n                'is-bordered': isBordered,\n            },\n            className,\n        );\n        const interactionTarget = buttonProps[RESIN_TAG_TARGET];\n        const modifiedButtonProps = omit(buttonProps, [RESIN_TAG_TARGET]);\n        const buttonClassName = hasStickyHeader\n            ? 'collapsible-card-header has-sticky-header'\n            : 'collapsible-card-header';\n\n        if (interactionTarget) {\n            modifiedButtonProps[RESIN_TAG_TARGET] = `${interactionTarget}${isOpen ? 'collapse' : 'expand'}`;\n        }\n\n        return (\n            <div className={sectionClassName}>\n                <div className={buttonClassName}>\n                    <PlainButton\n                        {...modifiedButtonProps}\n                        className=\"collapsible-card-title\"\n                        onClick={this.toggleVisibility}\n                        type={ButtonType.BUTTON}\n                    >\n                        {title}\n                        <IconCaretDown className=\"collapsible-card-header-caret\" color={bdlGray50} width={8} />\n                    </PlainButton>\n                    {!!headerActionItems && <span className=\"bdl-Collapsible-actionItems\">{headerActionItems}</span>}\n                </div>\n                <AnimateHeight duration={animationDuration} height={isOpen ? 'auto' : 0}>\n                    <div className=\"collapsible-card-content\">{children}</div>\n                </AnimateHeight>\n            </div>\n        );\n    }\n}\n\nexport default Collapsible;\n"]},"metadata":{},"sourceType":"module"}