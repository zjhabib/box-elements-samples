{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport { List } from 'immutable';\nimport Tooltip from '../tooltip';\nimport { KEYS } from '../../constants';\nimport RoundPill from './RoundPill';\nimport Pill from './Pill';\nimport SuggestedPillsRow from './SuggestedPillsRow';\nfunction stopDefaultEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nvar PillSelector = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PillSelector, _React$Component);\n  function PillSelector() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, PillSelector);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PillSelector)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isFocused: false,\n      selectedIndex: -1\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getNumSelected\", function () {\n      var selectedOptions = _this.props.selectedOptions;\n      return typeof selectedOptions.size === 'number' ? selectedOptions.size : selectedOptions.length;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPillsByKey\", function (key) {\n      var selectedOptions = _this.props.selectedOptions;\n      return selectedOptions.map(function (option) {\n        return option[key];\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function () {\n      _this.inputEl.focus();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function () {\n      _this.setState({\n        isFocused: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function () {\n      _this.setState({\n        isFocused: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      var inputValue = _this.inputEl.value;\n      var numPills = _this.getNumSelected();\n      var selectedIndex = _this.state.selectedIndex;\n      switch (event.key) {\n        case KEYS.backspace:\n          {\n            var index = -1;\n            if (selectedIndex >= 0) {\n              // remove selected pill\n              index = selectedIndex;\n              _this.resetSelectedIndex();\n              _this.inputEl.focus();\n            } else if (inputValue === '') {\n              // remove last pill\n              index = numPills - 1;\n            }\n            if (index >= 0) {\n              var _this$props = _this.props,\n                onRemove = _this$props.onRemove,\n                selectedOptions = _this$props.selectedOptions;\n              var selectedOption =\n              // $FlowFixMe\n              typeof selectedOptions.get === 'function' ? selectedOptions.get(index) : selectedOptions[index];\n              onRemove(selectedOption, index);\n              stopDefaultEvent(event);\n            }\n            break;\n          }\n        case KEYS.arrowLeft:\n          if (selectedIndex >= 0) {\n            // select previous pill\n            _this.setState({\n              selectedIndex: Math.max(selectedIndex - 1, 0)\n            });\n            stopDefaultEvent(event);\n          } else if (inputValue === '' && numPills > 0) {\n            // select last pill\n            _this.hiddenEl.focus();\n            _this.setState({\n              selectedIndex: numPills - 1\n            });\n            stopDefaultEvent(event);\n          }\n          break;\n        case KEYS.arrowRight:\n          {\n            if (selectedIndex >= 0) {\n              var _index = selectedIndex + 1;\n              if (_index >= numPills) {\n                // deselect last pill\n                _this.resetSelectedIndex();\n                _this.inputEl.focus();\n              } else {\n                // select next pill\n                _this.setState({\n                  selectedIndex: _index\n                });\n              }\n              stopDefaultEvent(event);\n            }\n            break;\n          }\n        // no default\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"errorMessageID\", uniqueId('errorMessage'));\n    _defineProperty(_assertThisInitialized(_this), \"hiddenRef\", function (hiddenEl) {\n      if (hiddenEl) {\n        _this.hiddenEl = hiddenEl;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"resetSelectedIndex\", function () {\n      if (_this.state.selectedIndex !== -1) {\n        _this.setState({\n          selectedIndex: -1\n        });\n      }\n    });\n    return _this;\n  }\n  _createClass(PillSelector, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$state = this.state,\n        isFocused = _this$state.isFocused,\n        selectedIndex = _this$state.selectedIndex;\n      var _this$props2 = this.props,\n        allowInvalidPills = _this$props2.allowInvalidPills,\n        className = _this$props2.className,\n        disabled = _this$props2.disabled,\n        error = _this$props2.error,\n        getPillImageUrl = _this$props2.getPillImageUrl,\n        inputProps = _this$props2.inputProps,\n        onInput = _this$props2.onInput,\n        onRemove = _this$props2.onRemove,\n        onSuggestedPillAdd = _this$props2.onSuggestedPillAdd,\n        placeholder = _this$props2.placeholder,\n        selectedOptions = _this$props2.selectedOptions,\n        showAvatars = _this$props2.showAvatars,\n        showRoundedPills = _this$props2.showRoundedPills,\n        suggestedPillsData = _this$props2.suggestedPillsData,\n        suggestedPillsFilter = _this$props2.suggestedPillsFilter,\n        suggestedPillsTitle = _this$props2.suggestedPillsTitle,\n        validator = _this$props2.validator,\n        rest = _objectWithoutProperties(_this$props2, [\"allowInvalidPills\", \"className\", \"disabled\", \"error\", \"getPillImageUrl\", \"inputProps\", \"onInput\", \"onRemove\", \"onSuggestedPillAdd\", \"placeholder\", \"selectedOptions\", \"showAvatars\", \"showRoundedPills\", \"suggestedPillsData\", \"suggestedPillsFilter\", \"suggestedPillsTitle\", \"validator\"]);\n      var suggestedPillsEnabled = suggestedPillsData && suggestedPillsData.length > 0;\n      var hasError = !!error;\n      var classes = classNames('bdl-PillSelector', 'pill-selector-input-wrapper', {\n        'is-disabled': disabled,\n        'bdl-is-disabled': disabled,\n        'is-focused': isFocused,\n        'show-error': hasError,\n        'pill-selector-suggestions-enabled': suggestedPillsEnabled,\n        'bdl-PillSelector--suggestionsEnabled': suggestedPillsEnabled\n      });\n      var ariaAttrs = {\n        'aria-invalid': hasError,\n        'aria-errormessage': this.errorMessageID\n      };\n      return React.createElement(Tooltip, {\n        isShown: hasError,\n        text: error || '',\n        position: \"middle-right\",\n        theme: \"error\"\n      }, React.createElement(\"span\", {\n        className: classes,\n        onBlur: this.handleBlur,\n        onClick: this.handleClick,\n        onFocus: this.handleFocus,\n        onKeyDown: this.handleKeyDown\n      }, showRoundedPills ? selectedOptions.map(function (option, index) {\n        return React.createElement(RoundPill, {\n          getPillImageUrl: getPillImageUrl,\n          isValid: allowInvalidPills ? validator(option) : true,\n          isDisabled: disabled,\n          isSelected: index === selectedIndex,\n          key: option.value,\n          onRemove: onRemove.bind(_this2, option, index) // $FlowFixMe option.text is for backwards compatibility\n          ,\n\n          text: option.displayText || option.text,\n          showAvatar: true,\n          id: option.id,\n          hasWarning: option.hasWarning,\n          isExternal: option.isExternalUser\n        });\n      }) : selectedOptions.map(function (option, index) {\n        // TODO: This and associated types will be removed once all views are updates with round pills.\n        return React.createElement(Pill, {\n          isValid: allowInvalidPills ? validator(option) : true,\n          isDisabled: disabled,\n          isSelected: index === selectedIndex,\n          key: option.value,\n          onRemove: onRemove.bind(_this2, option, index) // $FlowFixMe option.text is for backwards compatibility\n          ,\n\n          text: option.displayText || option.text\n        });\n      }), React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        className: \"accessibility-hidden\",\n        onBlur: this.resetSelectedIndex,\n        ref: this.hiddenRef,\n        tabIndex: -1,\n        \"data-testid\": \"pill-selection-helper\"\n      }), React.createElement(\"textarea\", _extends({}, ariaAttrs, rest, inputProps, {\n        autoComplete: \"off\",\n        className: classNames('bdl-PillSelector-input', 'pill-selector-input', className, {\n          'bdl-PillSelector-input--showAvatars': showAvatars\n        }),\n        disabled: disabled,\n        onInput: onInput,\n        placeholder: this.getNumSelected() === 0 ? placeholder : '',\n        ref: function ref(input) {\n          _this2.inputEl = input;\n        }\n      })), React.createElement(SuggestedPillsRow, {\n        onSuggestedPillAdd: onSuggestedPillAdd,\n        selectedPillsValues: this.getPillsByKey('value'),\n        suggestedPillsFilter: suggestedPillsFilter,\n        suggestedPillsData: suggestedPillsData,\n        title: suggestedPillsTitle\n      }), React.createElement(\"span\", {\n        id: this.errorMessageID,\n        className: \"accessibility-hidden\",\n        role: \"alert\"\n      }, error)));\n    }\n  }]);\n  return PillSelector;\n}(React.Component);\n_defineProperty(PillSelector, \"defaultProps\", {\n  allowInvalidPills: false,\n  disabled: false,\n  error: '',\n  inputProps: {},\n  placeholder: '',\n  selectedOptions: [],\n  validator: function validator() {\n    return true;\n  }\n});\nexport default PillSelector;","map":{"version":3,"sources":["../../../src/components/pill-selector-dropdown/PillSelector.js"],"names":["React","classNames","uniqueId","List","Tooltip","KEYS","RoundPill","Pill","SuggestedPillsRow","stopDefaultEvent","event","preventDefault","stopPropagation","PillSelector","Component","allowInvalidPills","disabled","error","inputProps","placeholder","selectedOptions","validator","isFocused","selectedIndex","props","size","length","key","map","option","inputEl","focus","setState","inputValue","value","numPills","getNumSelected","state","backspace","index","resetSelectedIndex","onRemove","selectedOption","get","arrowLeft","Math","max","hiddenEl","arrowRight","className","getPillImageUrl","onInput","onSuggestedPillAdd","showAvatars","showRoundedPills","suggestedPillsData","suggestedPillsFilter","suggestedPillsTitle","rest","suggestedPillsEnabled","hasError","classes","ariaAttrs","errorMessageID","handleBlur","handleClick","handleFocus","handleKeyDown","bind","displayText","text","id","hasWarning","isExternalUser","hiddenRef","input","getPillsByKey"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport { List } from 'immutable';\n\nimport Tooltip from '../tooltip';\nimport { KEYS } from '../../constants';\n\nimport RoundPill from './RoundPill';\nimport Pill from './Pill';\nimport SuggestedPillsRow from './SuggestedPillsRow';\nimport type { RoundOption, Option, OptionValue, SuggestedPillsFilter } from './flowTypes';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\ntype Props = {\n    allowInvalidPills: boolean,\n    className?: string,\n    disabled?: boolean,\n    error?: React.Node,\n    /** Function to retrieve the image URL associated with a pill */\n    getPillImageUrl?: (data: { id: string | number, [key: string]: any }) => string,\n    inputProps: Object,\n    onInput: Function,\n    onRemove: Function,\n    onSuggestedPillAdd?: Function,\n    placeholder: string,\n    selectedOptions: Array<Object> | List<Object>,\n    /** Whether to show avatars in pills (if rounded style is enabled) */\n    showAvatars?: boolean,\n    /** Whether to use rounded style for pills */\n    showRoundedPills?: boolean,\n    suggestedPillsData?: Array<Object>,\n    suggestedPillsFilter?: SuggestedPillsFilter,\n    suggestedPillsTitle?: string,\n    validator: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    isFocused: boolean,\n    selectedIndex: number,\n};\n\nclass PillSelector extends React.Component<Props, State> {\n    static defaultProps = {\n        allowInvalidPills: false,\n        disabled: false,\n        error: '',\n        inputProps: {},\n        placeholder: '',\n        selectedOptions: [],\n        validator: () => true,\n    };\n\n    state = {\n        isFocused: false,\n        selectedIndex: -1,\n    };\n\n    getNumSelected = (): number => {\n        const { selectedOptions } = this.props;\n\n        return typeof selectedOptions.size === 'number' ? selectedOptions.size : selectedOptions.length;\n    };\n\n    getPillsByKey = (key: string): Array<any> => {\n        const { selectedOptions } = this.props;\n\n        return selectedOptions.map(option => option[key]);\n    };\n\n    inputEl: HTMLInputElement;\n\n    handleClick = () => {\n        this.inputEl.focus();\n    };\n\n    handleFocus = () => {\n        this.setState({ isFocused: true });\n    };\n\n    handleBlur = () => {\n        this.setState({ isFocused: false });\n    };\n\n    hiddenEl: HTMLSpanElement;\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const inputValue = this.inputEl.value;\n        const numPills = this.getNumSelected();\n        const { selectedIndex } = this.state;\n\n        switch (event.key) {\n            case KEYS.backspace: {\n                let index = -1;\n                if (selectedIndex >= 0) {\n                    // remove selected pill\n                    index = selectedIndex;\n                    this.resetSelectedIndex();\n                    this.inputEl.focus();\n                } else if (inputValue === '') {\n                    // remove last pill\n                    index = numPills - 1;\n                }\n                if (index >= 0) {\n                    const { onRemove, selectedOptions } = this.props;\n                    const selectedOption =\n                        // $FlowFixMe\n                        typeof selectedOptions.get === 'function' ? selectedOptions.get(index) : selectedOptions[index];\n                    onRemove(selectedOption, index);\n                    stopDefaultEvent(event);\n                }\n                break;\n            }\n            case KEYS.arrowLeft:\n                if (selectedIndex >= 0) {\n                    // select previous pill\n                    this.setState({\n                        selectedIndex: Math.max(selectedIndex - 1, 0),\n                    });\n                    stopDefaultEvent(event);\n                } else if (inputValue === '' && numPills > 0) {\n                    // select last pill\n                    this.hiddenEl.focus();\n                    this.setState({ selectedIndex: numPills - 1 });\n                    stopDefaultEvent(event);\n                }\n                break;\n            case KEYS.arrowRight: {\n                if (selectedIndex >= 0) {\n                    const index = selectedIndex + 1;\n                    if (index >= numPills) {\n                        // deselect last pill\n                        this.resetSelectedIndex();\n                        this.inputEl.focus();\n                    } else {\n                        // select next pill\n                        this.setState({ selectedIndex: index });\n                    }\n                    stopDefaultEvent(event);\n                }\n                break;\n            }\n            // no default\n        }\n    };\n\n    errorMessageID = uniqueId('errorMessage');\n\n    hiddenRef = (hiddenEl: ?HTMLSpanElement) => {\n        if (hiddenEl) {\n            this.hiddenEl = hiddenEl;\n        }\n    };\n\n    resetSelectedIndex = () => {\n        if (this.state.selectedIndex !== -1) {\n            this.setState({ selectedIndex: -1 });\n        }\n    };\n\n    render() {\n        const { isFocused, selectedIndex } = this.state;\n        const {\n            allowInvalidPills,\n            className,\n            disabled,\n            error,\n            getPillImageUrl,\n            inputProps,\n            onInput,\n            onRemove,\n            onSuggestedPillAdd,\n            placeholder,\n            selectedOptions,\n            showAvatars,\n            showRoundedPills,\n            suggestedPillsData,\n            suggestedPillsFilter,\n            suggestedPillsTitle,\n            validator,\n            ...rest\n        } = this.props;\n        const suggestedPillsEnabled = suggestedPillsData && suggestedPillsData.length > 0;\n        const hasError = !!error;\n        const classes = classNames('bdl-PillSelector', 'pill-selector-input-wrapper', {\n            'is-disabled': disabled,\n            'bdl-is-disabled': disabled,\n            'is-focused': isFocused,\n            'show-error': hasError,\n            'pill-selector-suggestions-enabled': suggestedPillsEnabled,\n            'bdl-PillSelector--suggestionsEnabled': suggestedPillsEnabled,\n        });\n        const ariaAttrs = {\n            'aria-invalid': hasError,\n            'aria-errormessage': this.errorMessageID,\n        };\n\n        return (\n            <Tooltip isShown={hasError} text={error || ''} position=\"middle-right\" theme=\"error\">\n                {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n                <span\n                    className={classes}\n                    onBlur={this.handleBlur}\n                    onClick={this.handleClick}\n                    onFocus={this.handleFocus}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    {showRoundedPills\n                        ? selectedOptions.map((option: RoundOption, index: number) => {\n                              return (\n                                  <RoundPill\n                                      getPillImageUrl={getPillImageUrl}\n                                      isValid={allowInvalidPills ? validator(option) : true}\n                                      isDisabled={disabled}\n                                      isSelected={index === selectedIndex}\n                                      key={option.value}\n                                      onRemove={onRemove.bind(this, option, index)}\n                                      // $FlowFixMe option.text is for backwards compatibility\n                                      text={option.displayText || option.text}\n                                      showAvatar\n                                      id={option.id}\n                                      hasWarning={option.hasWarning}\n                                      isExternal={option.isExternalUser}\n                                  />\n                              );\n                          })\n                        : selectedOptions.map((option: Option, index: number) => {\n                              // TODO: This and associated types will be removed once all views are updates with round pills.\n                              return (\n                                  <Pill\n                                      isValid={allowInvalidPills ? validator(option) : true}\n                                      isDisabled={disabled}\n                                      isSelected={index === selectedIndex}\n                                      key={option.value}\n                                      onRemove={onRemove.bind(this, option, index)}\n                                      // $FlowFixMe option.text is for backwards compatibility\n                                      text={option.displayText || option.text}\n                                  />\n                              );\n                          })}\n\n                    {/* hidden element for focus/key events during pill selection */}\n                    <span\n                        aria-hidden=\"true\"\n                        className=\"accessibility-hidden\"\n                        onBlur={this.resetSelectedIndex}\n                        ref={this.hiddenRef}\n                        tabIndex={-1}\n                        data-testid=\"pill-selection-helper\"\n                    />\n                    <textarea\n                        {...ariaAttrs}\n                        {...rest}\n                        {...inputProps}\n                        autoComplete=\"off\"\n                        className={classNames('bdl-PillSelector-input', 'pill-selector-input', className, {\n                            'bdl-PillSelector-input--showAvatars': showAvatars,\n                        })}\n                        disabled={disabled}\n                        onInput={onInput}\n                        placeholder={this.getNumSelected() === 0 ? placeholder : ''}\n                        ref={input => {\n                            this.inputEl = input;\n                        }}\n                    />\n                    <SuggestedPillsRow\n                        onSuggestedPillAdd={onSuggestedPillAdd}\n                        selectedPillsValues={this.getPillsByKey('value')}\n                        suggestedPillsFilter={suggestedPillsFilter}\n                        suggestedPillsData={suggestedPillsData}\n                        title={suggestedPillsTitle}\n                    />\n                    <span id={this.errorMessageID} className=\"accessibility-hidden\" role=\"alert\">\n                        {error}\n                    </span>\n                </span>\n            </Tooltip>\n        );\n    }\n}\n\nexport default PillSelector;\n"]},"metadata":{},"sourceType":"module"}