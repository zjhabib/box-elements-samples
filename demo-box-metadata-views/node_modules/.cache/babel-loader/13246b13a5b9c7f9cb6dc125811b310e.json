{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * \n * @file Component for in-modal error messages for tasks\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport getProp from 'lodash/get';\nimport messages from './messages';\nimport apiMessages from '../../../../api/messages';\nimport { TASK_EDIT_MODE_EDIT, TASK_MAX_GROUP_ASSIGNEES, ERROR_CODE_GROUP_EXCEEDS_LIMIT } from '../../../../constants';\nimport InlineNotice from '../../../../components/inline-notice/InlineNotice';\nvar TaskError = function TaskError(_ref) {\n  var editMode = _ref.editMode,\n    error = _ref.error,\n    taskType = _ref.taskType;\n  var isEditMode = editMode === TASK_EDIT_MODE_EDIT;\n  var isForbiddenErrorOnEdit = getProp(error, 'status') === 403 && isEditMode;\n  var taskGroupExceedsError = getProp(error, 'code') === ERROR_CODE_GROUP_EXCEEDS_LIMIT;\n  var errorTitle = isForbiddenErrorOnEdit ? messages.taskEditWarningTitle : messages.taskCreateErrorTitle;\n  var errorMessage = isEditMode ? messages.taskUpdateErrorMessage : apiMessages.taskCreateErrorMessage;\n  if (!error) {\n    return null;\n  } // error message changes when a forbidden operation occurs while editing a task\n\n  if (isForbiddenErrorOnEdit) {\n    switch (taskType) {\n      case 'GENERAL':\n        errorMessage = messages.taskGeneralAssigneeRemovalWarningMessage;\n        break;\n      case 'APPROVAL':\n        errorMessage = messages.taskApprovalAssigneeRemovalWarningMessage;\n        break;\n      default:\n        return null;\n    }\n  }\n  return taskGroupExceedsError ? React.createElement(InlineNotice, {\n    type: \"warning\",\n    title: React.createElement(FormattedMessage, messages.taskGroupExceedsLimitWarningTitle)\n  }, React.createElement(FormattedMessage, _extends({}, apiMessages.taskGroupExceedsLimitWarningMessage, {\n    values: {\n      max: TASK_MAX_GROUP_ASSIGNEES\n    }\n  }))) : React.createElement(InlineNotice, {\n    type: \"error\",\n    title: React.createElement(FormattedMessage, errorTitle)\n  }, React.createElement(FormattedMessage, errorMessage));\n};\nexport default TaskError;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-form/TaskError.js"],"names":["React","FormattedMessage","getProp","messages","apiMessages","TASK_EDIT_MODE_EDIT","TASK_MAX_GROUP_ASSIGNEES","ERROR_CODE_GROUP_EXCEEDS_LIMIT","InlineNotice","TaskError","editMode","error","taskType","isEditMode","isForbiddenErrorOnEdit","taskGroupExceedsError","errorTitle","taskEditWarningTitle","taskCreateErrorTitle","errorMessage","taskUpdateErrorMessage","taskCreateErrorMessage","taskGeneralAssigneeRemovalWarningMessage","taskApprovalAssigneeRemovalWarningMessage","taskGroupExceedsLimitWarningTitle","taskGroupExceedsLimitWarningMessage","max"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,mBAAT,EAA8BC,wBAA9B,EAAwDC,8BAAxD,QAA8F,uBAA9F;AACA,OAAOC,YAAP,MAAyB,mDAAzB;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAA0C;EAAA,IAAvCC,QAAuC,GAAA,IAAA,CAAvCA,QAAuC;IAA7BC,KAA6B,GAAA,IAAA,CAA7BA,KAA6B;IAAtBC,QAAsB,GAAA,IAAA,CAAtBA,QAAsB;EACxD,IAAMC,UAAU,GAAGH,QAAQ,KAAKL,mBAAhC;EACA,IAAMS,sBAAsB,GAAGZ,OAAO,CAACS,KAAD,EAAQ,QAAR,CAAPT,KAA6B,GAA7BA,IAAoCW,UAAnE;EACA,IAAME,qBAAqB,GAAGb,OAAO,CAACS,KAAD,EAAQ,MAAR,CAAPT,KAA2BK,8BAAzD;EAEA,IAAMS,UAAU,GAAGF,sBAAsB,GAAGX,QAAQ,CAACc,oBAAZ,GAAmCd,QAAQ,CAACe,oBAArF;EACA,IAAIC,YAAY,GAAGN,UAAU,GAAGV,QAAQ,CAACiB,sBAAZ,GAAqChB,WAAW,CAACiB,sBAA9E;EACA,IAAI,CAACV,KAAL,EAAY;IACR,OAAO,IAAP;EACH,CATuD,CAWxD;;EACA,IAAIG,sBAAJ,EAA4B;IACxB,QAAQF,QAAR;MACI,KAAK,SAAL;QACIO,YAAY,GAAGhB,QAAQ,CAACmB,wCAAxBH;QACA;MACJ,KAAK,UAAL;QACIA,YAAY,GAAGhB,QAAQ,CAACoB,yCAAxBJ;QACA;MACJ;QACI,OAAO,IAAP;IARR;EAUH;EAED,OAAOJ,qBAAqB,GACxB,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;IAAc,IAAI,EAAC,SAAnB;IAA6B,KAAK,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBZ,QAAQ,CAACqB,iCAA/B;EAApC,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACQpB,WAAW,CAACqB,mCADpB,EAAA;IAEI,MAAM,EAAE;MAAEC,GAAG,EAAEpB;IAAP;EAFZ,CAAA,CAAA,CADJ,CADwB,GAQxB,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;IAAc,IAAI,EAAC,OAAnB;IAA2B,KAAK,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBU,UAAtB;EAAlC,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBG,YAAtB,CADJ,CARJ;AAYH,CArCD;AAuCA,eAAeV,SAAf","sourcesContent":["/**\n * @flow\n * @file Component for in-modal error messages for tasks\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport getProp from 'lodash/get';\n\nimport messages from './messages';\nimport apiMessages from '../../../../api/messages';\nimport { TASK_EDIT_MODE_EDIT, TASK_MAX_GROUP_ASSIGNEES, ERROR_CODE_GROUP_EXCEEDS_LIMIT } from '../../../../constants';\nimport InlineNotice from '../../../../components/inline-notice/InlineNotice';\n\nimport type { TaskType, TaskEditMode } from '../../../../common/types/tasks';\n\ntype Props = {\n    editMode?: TaskEditMode,\n    error?: { status: number }, // TODO: update to ElementXhrError once API supports it\n    taskType: TaskType,\n};\nconst TaskError = ({ editMode, error, taskType }: Props) => {\n    const isEditMode = editMode === TASK_EDIT_MODE_EDIT;\n    const isForbiddenErrorOnEdit = getProp(error, 'status') === 403 && isEditMode;\n    const taskGroupExceedsError = getProp(error, 'code') === ERROR_CODE_GROUP_EXCEEDS_LIMIT;\n\n    const errorTitle = isForbiddenErrorOnEdit ? messages.taskEditWarningTitle : messages.taskCreateErrorTitle;\n    let errorMessage = isEditMode ? messages.taskUpdateErrorMessage : apiMessages.taskCreateErrorMessage;\n    if (!error) {\n        return null;\n    }\n\n    // error message changes when a forbidden operation occurs while editing a task\n    if (isForbiddenErrorOnEdit) {\n        switch (taskType) {\n            case 'GENERAL':\n                errorMessage = messages.taskGeneralAssigneeRemovalWarningMessage;\n                break;\n            case 'APPROVAL':\n                errorMessage = messages.taskApprovalAssigneeRemovalWarningMessage;\n                break;\n            default:\n                return null;\n        }\n    }\n\n    return taskGroupExceedsError ? (\n        <InlineNotice type=\"warning\" title={<FormattedMessage {...messages.taskGroupExceedsLimitWarningTitle} />}>\n            <FormattedMessage\n                {...apiMessages.taskGroupExceedsLimitWarningMessage}\n                values={{ max: TASK_MAX_GROUP_ASSIGNEES }}\n            />\n        </InlineNotice>\n    ) : (\n        <InlineNotice type=\"error\" title={<FormattedMessage {...errorTitle} />}>\n            <FormattedMessage {...errorMessage} />\n        </InlineNotice>\n    );\n};\n\nexport default TaskError;\n"]},"metadata":{},"sourceType":"module"}