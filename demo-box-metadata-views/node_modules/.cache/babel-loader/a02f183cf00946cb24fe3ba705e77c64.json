{"ast":null,"code":"/**\n * \n * @file Component that creates breadcumbs for both the header and name details\n * @author Box\n */\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport Breadcrumb from './Breadcrumb';\nimport BreadcrumbDropdown from './BreadcrumbDropdown';\nimport BreadcrumbDelimiter from './BreadcrumbDelimiter';\nimport { DELIMITER_CARET, DEFAULT_ROOT, DELIMITER_SLASH } from '../../../constants';\nimport messages from '../messages';\nimport './Breadcrumbs.scss';\n\n/**\n * Filters out ancestors to root from the crumbs.\n * This is useful when the root is not All Files.\n *\n * @private\n * @param {string} rootId the root folder id\n * @param {Array} crumbs list of crumbs\n * @return {Array} crumbs\n */\nfunction filterCrumbs(rootId, crumbs) {\n  var rootIndex = crumbs.findIndex(function (crumb) {\n    return crumb.id === rootId;\n  });\n  return rootIndex === -1 ? crumbs : crumbs.slice(rootIndex);\n}\n/**\n * Creates an individual breadcrumb\n *\n * @private\n * @param {Object} crumb single crumb data\n * @param {boolean} isLast is this the last crumb\n * @return {Element}\n */\n\nfunction getBreadcrumb(crumbs, isLast, onCrumbClick, delimiter) {\n  if (Array.isArray(crumbs)) {\n    var condensed = delimiter !== DELIMITER_CARET;\n    return React.createElement(\"span\", {\n      className: \"be-breadcrumb-more\"\n    }, React.createElement(BreadcrumbDropdown, {\n      className: condensed ? 'be-breadcrumbs-condensed' : '',\n      crumbs: crumbs,\n      onCrumbClick: onCrumbClick\n    }), React.createElement(BreadcrumbDelimiter, {\n      delimiter: condensed ? DELIMITER_SLASH : DELIMITER_CARET\n    }));\n  }\n  var id = crumbs.id,\n    name = crumbs.name;\n  return React.createElement(Breadcrumb, {\n    delimiter: delimiter,\n    isLast: isLast,\n    name: name,\n    onClick: function onClick() {\n      return onCrumbClick(id);\n    }\n  });\n}\nvar Breadcrumbs = function Breadcrumbs(_ref) {\n  var rootId = _ref.rootId,\n    crumbs = _ref.crumbs,\n    onCrumbClick = _ref.onCrumbClick,\n    delimiter = _ref.delimiter,\n    _ref$isSmall = _ref.isSmall,\n    isSmall = _ref$isSmall === void 0 ? false : _ref$isSmall,\n    intl = _ref.intl;\n  if (!rootId || crumbs.length === 0) {\n    return React.createElement(\"span\", null);\n  } // The crumbs given may have ancestors higher than the root. We need to filter them out.\n\n  var filteredCrumbs = filterCrumbs(rootId, crumbs); // Make sure \"All Files\" crumb is localized\n\n  var defaultRootCrumb = filteredCrumbs.find(function (_ref2) {\n    var id = _ref2.id;\n    return id === DEFAULT_ROOT;\n  });\n  if (defaultRootCrumb) {\n    defaultRootCrumb.name = intl.formatMessage(messages.rootBreadcrumb);\n  }\n  var length = filteredCrumbs.length; // Always show the last/leaf breadcrumb.\n\n  var crumb = filteredCrumbs[length - 1];\n  var onClick = crumb.id ? function () {\n    return onCrumbClick(crumb.id);\n  } : undefined;\n  var lastBreadcrumb = React.createElement(Breadcrumb, {\n    isLast: true,\n    name: crumb.name,\n    onClick: onClick\n  }); // Always show the second last/parent breadcrumb when there are at least 2 crumbs.\n\n  var secondLastBreadcrumb = length > 1 ? getBreadcrumb(filteredCrumbs[length - 2], false, onCrumbClick, delimiter) : null; // Only show the more dropdown when there were at least 4 crumbs.\n\n  var moreBreadcrumbs = length > 3 ? getBreadcrumb(filteredCrumbs.slice(1, length - 2), false, onCrumbClick, delimiter) : null; // Only show the root breadcrumb when there are at least 3 crumbs.\n\n  var firstBreadcrumb = length > 2 ? getBreadcrumb(filteredCrumbs[0], false, onCrumbClick, delimiter) : null;\n  return React.createElement(\"div\", {\n    className: \"be-breadcrumbs\"\n  }, isSmall ? null : firstBreadcrumb, isSmall ? null : moreBreadcrumbs, secondLastBreadcrumb, lastBreadcrumb);\n};\nexport { Breadcrumbs as BreadcrumbsBase };\nexport default injectIntl(Breadcrumbs);","map":{"version":3,"sources":["../../../../src/elements/common/breadcrumbs/Breadcrumbs.js"],"names":["React","injectIntl","Breadcrumb","BreadcrumbDropdown","BreadcrumbDelimiter","DELIMITER_CARET","DEFAULT_ROOT","DELIMITER_SLASH","messages","filterCrumbs","rootId","crumbs","rootIndex","findIndex","crumb","id","slice","getBreadcrumb","isLast","onCrumbClick","delimiter","Array","isArray","condensed","name","Breadcrumbs","isSmall","intl","length","filteredCrumbs","defaultRootCrumb","find","formatMessage","rootBreadcrumb","onClick","undefined","lastBreadcrumb","secondLastBreadcrumb","moreBreadcrumbs","firstBreadcrumb","BreadcrumbsBase"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Component that creates breadcumbs for both the header and name details\n * @author Box\n */\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport Breadcrumb from './Breadcrumb';\nimport BreadcrumbDropdown from './BreadcrumbDropdown';\nimport BreadcrumbDelimiter from './BreadcrumbDelimiter';\nimport { DELIMITER_CARET, DEFAULT_ROOT, DELIMITER_SLASH } from '../../../constants';\nimport messages from '../messages';\nimport type { Delimiter, Crumb } from '../../../common/types/core';\nimport './Breadcrumbs.scss';\n\ntype Props = {\n    crumbs: Crumb[],\n    delimiter: Delimiter,\n    isSmall?: boolean,\n    onCrumbClick: Function,\n    rootId: string,\n} & InjectIntlProvidedProps;\n\n/**\n * Filters out ancestors to root from the crumbs.\n * This is useful when the root is not All Files.\n *\n * @private\n * @param {string} rootId the root folder id\n * @param {Array} crumbs list of crumbs\n * @return {Array} crumbs\n */\nfunction filterCrumbs(rootId: string, crumbs: Crumb[]): Crumb[] {\n    const rootIndex = crumbs.findIndex((crumb: Crumb) => crumb.id === rootId);\n    return rootIndex === -1 ? crumbs : crumbs.slice(rootIndex);\n}\n\n/**\n * Creates an individual breadcrumb\n *\n * @private\n * @param {Object} crumb single crumb data\n * @param {boolean} isLast is this the last crumb\n * @return {Element}\n */\nfunction getBreadcrumb(crumbs: Crumb | Crumb[], isLast: boolean, onCrumbClick: Function, delimiter: Delimiter) {\n    if (Array.isArray(crumbs)) {\n        const condensed = delimiter !== DELIMITER_CARET;\n        return (\n            <span className=\"be-breadcrumb-more\">\n                <BreadcrumbDropdown\n                    className={condensed ? 'be-breadcrumbs-condensed' : ''}\n                    crumbs={crumbs}\n                    onCrumbClick={onCrumbClick}\n                />\n                <BreadcrumbDelimiter delimiter={condensed ? DELIMITER_SLASH : DELIMITER_CARET} />\n            </span>\n        );\n    }\n\n    const { id, name } = crumbs;\n    return <Breadcrumb delimiter={delimiter} isLast={isLast} name={name} onClick={() => onCrumbClick(id)} />;\n}\n\nconst Breadcrumbs = ({ rootId, crumbs, onCrumbClick, delimiter, isSmall = false, intl }: Props) => {\n    if (!rootId || crumbs.length === 0) {\n        return <span />;\n    }\n\n    // The crumbs given may have ancestors higher than the root. We need to filter them out.\n    const filteredCrumbs = filterCrumbs(rootId, crumbs);\n\n    // Make sure \"All Files\" crumb is localized\n    const defaultRootCrumb = filteredCrumbs.find(({ id }) => id === DEFAULT_ROOT);\n    if (defaultRootCrumb) {\n        defaultRootCrumb.name = intl.formatMessage(messages.rootBreadcrumb);\n    }\n\n    const { length } = filteredCrumbs;\n\n    // Always show the last/leaf breadcrumb.\n    const crumb = filteredCrumbs[length - 1];\n    const onClick = crumb.id ? () => onCrumbClick(crumb.id) : undefined;\n    const lastBreadcrumb = <Breadcrumb isLast name={crumb.name} onClick={onClick} />;\n\n    // Always show the second last/parent breadcrumb when there are at least 2 crumbs.\n    const secondLastBreadcrumb =\n        length > 1 ? getBreadcrumb(filteredCrumbs[length - 2], false, onCrumbClick, delimiter) : null;\n\n    // Only show the more dropdown when there were at least 4 crumbs.\n    const moreBreadcrumbs =\n        length > 3 ? getBreadcrumb(filteredCrumbs.slice(1, length - 2), false, onCrumbClick, delimiter) : null;\n\n    // Only show the root breadcrumb when there are at least 3 crumbs.\n    const firstBreadcrumb = length > 2 ? getBreadcrumb(filteredCrumbs[0], false, onCrumbClick, delimiter) : null;\n\n    return (\n        <div className=\"be-breadcrumbs\">\n            {isSmall ? null : firstBreadcrumb}\n            {isSmall ? null : moreBreadcrumbs}\n            {secondLastBreadcrumb}\n            {lastBreadcrumb}\n        </div>\n    );\n};\n\nexport { Breadcrumbs as BreadcrumbsBase };\nexport default injectIntl(Breadcrumbs);\n"]},"metadata":{},"sourceType":"module"}