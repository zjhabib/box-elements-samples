{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n/**\n * \n * @file Open With button\n * @author Box\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport noop from 'lodash/noop';\nimport Button from '../../components/button/Button';\nimport IconOpenWith from '../../icons/general/IconOpenWith';\nimport Tooltip from '../common/Tooltip';\nimport messages from '../common/messages';\nimport OpenWithButtonContents from './OpenWithButtonContents';\nimport utils from './openWithUtils';\nimport { CLASS_INTEGRATION_ICON, OPEN_WITH_BUTTON_ICON_SIZE } from '../../constants';\nimport getIcon from './IconFileMap';\n\n/**\n * Gets the tooltip text for the ContentOpenWith button\n *\n * @private\n * @return {?(string | Element)} the tooltip message\n */\nexport var getTooltip = function getTooltip(displayDescription, isLoading, error) {\n  var disabledReasons = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  if (isLoading) {\n    return null;\n  }\n  var message = React.createElement(FormattedMessage, messages.emptyOpenWithDescription);\n  if (disabledReasons.length > 0) {\n    var _disabledReasons = _slicedToArray(disabledReasons, 1);\n    message = _disabledReasons[0];\n  } else if (error) {\n    message = React.createElement(FormattedMessage, messages.errorOpenWithDescription);\n  } else if (displayDescription) {\n    message = displayDescription;\n  }\n  return message;\n};\nvar OpenWithButton = function OpenWithButton(_ref) {\n  var error = _ref.error,\n    _ref$onClick = _ref.onClick,\n    _onClick = _ref$onClick === void 0 ? noop : _ref$onClick,\n    displayIntegration = _ref.displayIntegration,\n    isLoading = _ref.isLoading;\n  var _ref2 = displayIntegration || {},\n    displayName = _ref2.displayName,\n    isDisplayIntegrationDisabled = _ref2.isDisabled,\n    extension = _ref2.extension,\n    disabledReasons = _ref2.disabledReasons,\n    displayDescription = _ref2.displayDescription;\n  var isDisabled = !!isDisplayIntegrationDisabled || !displayName;\n  var Icon = displayName ? getIcon(displayName) : IconOpenWith;\n  var tooltipDisplayProps = utils.isDisabledBecauseBoxToolsIsNotInstalled(displayIntegration) ? {\n    isShown: true,\n    showCloseButton: true\n  } : {};\n  return React.createElement(Tooltip, _extends({\n    className: \"bcow-tooltip\",\n    position: \"bottom-center\",\n    text: getTooltip(displayDescription, isLoading, error, disabledReasons)\n  }, tooltipDisplayProps), React.createElement(Button, {\n    \"data-testid\": \"singleintegrationbutton\",\n    isDisabled: isDisabled,\n    onClick: function onClick() {\n      return displayIntegration ? _onClick(displayIntegration) : noop;\n    }\n  }, React.createElement(OpenWithButtonContents, null, React.createElement(Icon, {\n    className: CLASS_INTEGRATION_ICON,\n    dimension: OPEN_WITH_BUTTON_ICON_SIZE,\n    extension: extension,\n    height: OPEN_WITH_BUTTON_ICON_SIZE,\n    width: OPEN_WITH_BUTTON_ICON_SIZE\n  }))));\n};\nexport default OpenWithButton;","map":{"version":3,"sources":["../../../src/elements/content-open-with/OpenWithButton.js"],"names":["React","FormattedMessage","noop","Button","IconOpenWith","Tooltip","messages","OpenWithButtonContents","utils","CLASS_INTEGRATION_ICON","OPEN_WITH_BUTTON_ICON_SIZE","getIcon","getTooltip","displayDescription","isLoading","error","disabledReasons","message","emptyOpenWithDescription","length","errorOpenWithDescription","OpenWithButton","onClick","displayIntegration","displayName","isDisabled","isDisplayIntegrationDisabled","extension","Icon","tooltipDisplayProps","isDisabledBecauseBoxToolsIsNotInstalled","isShown","showCloseButton"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Open With button\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport noop from 'lodash/noop';\nimport Button from '../../components/button/Button';\nimport IconOpenWith from '../../icons/general/IconOpenWith';\nimport Tooltip from '../common/Tooltip';\nimport messages from '../common/messages';\nimport OpenWithButtonContents from './OpenWithButtonContents';\nimport utils from './openWithUtils';\nimport { CLASS_INTEGRATION_ICON, OPEN_WITH_BUTTON_ICON_SIZE } from '../../constants';\nimport getIcon from './IconFileMap';\nimport type { DisabledReason, Integration } from '../../common/types/integrations';\n\ntype Props = {\n    displayIntegration?: ?Integration,\n    error: ?any,\n    icon?: string,\n    isLoading: boolean,\n    onClick?: Integration => void,\n    tooltipText?: string | Object,\n};\n\n/**\n * Gets the tooltip text for the ContentOpenWith button\n *\n * @private\n * @return {?(string | Element)} the tooltip message\n */\nexport const getTooltip = (\n    displayDescription: string,\n    isLoading: boolean,\n    error: ?Error,\n    disabledReasons: Array<DisabledReason> = [],\n): ?DisabledReason => {\n    if (isLoading) {\n        return null;\n    }\n\n    let message = <FormattedMessage {...messages.emptyOpenWithDescription} />;\n    if (disabledReasons.length > 0) {\n        [message] = disabledReasons;\n    } else if (error) {\n        message = <FormattedMessage {...messages.errorOpenWithDescription} />;\n    } else if (displayDescription) {\n        message = displayDescription;\n    }\n\n    return message;\n};\n\nconst OpenWithButton = ({ error, onClick = noop, displayIntegration, isLoading }: Props) => {\n    const { displayName, isDisabled: isDisplayIntegrationDisabled, extension, disabledReasons, displayDescription } =\n        displayIntegration || {};\n\n    const isDisabled = !!isDisplayIntegrationDisabled || !displayName;\n    const Icon = displayName ? getIcon(displayName) : IconOpenWith;\n\n    const tooltipDisplayProps = utils.isDisabledBecauseBoxToolsIsNotInstalled(displayIntegration)\n        ? { isShown: true, showCloseButton: true }\n        : {};\n\n    return (\n        <Tooltip\n            className=\"bcow-tooltip\"\n            position=\"bottom-center\"\n            text={getTooltip(displayDescription, isLoading, error, disabledReasons)}\n            {...tooltipDisplayProps}\n        >\n            <Button\n                data-testid=\"singleintegrationbutton\"\n                isDisabled={isDisabled}\n                onClick={() => (displayIntegration ? onClick(displayIntegration) : noop)}\n            >\n                <OpenWithButtonContents>\n                    <Icon\n                        className={CLASS_INTEGRATION_ICON}\n                        dimension={OPEN_WITH_BUTTON_ICON_SIZE}\n                        extension={extension}\n                        height={OPEN_WITH_BUTTON_ICON_SIZE}\n                        width={OPEN_WITH_BUTTON_ICON_SIZE}\n                    />\n                </OpenWithButtonContents>\n            </Button>\n        </Tooltip>\n    );\n};\n\nexport default OpenWithButton;\n"]},"metadata":{},"sourceType":"module"}