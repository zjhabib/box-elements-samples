{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\n/**\n * \n * @file Sort component\n * @author Box\n */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport DropdownMenu from '../../../components/dropdown-menu/DropdownMenu';\nimport Menu from '../../../components/menu/Menu';\nimport MenuItem from '../../../components/menu/MenuItem';\nimport IconCheck from '../../../icons/general/IconCheck';\nimport SortButton from './SortButton';\nimport messages from '../messages';\nimport { FIELD_NAME, FIELD_DATE, FIELD_SIZE, SORT_ASC, SORT_DESC } from '../../../constants';\nimport './Sort.scss';\nvar SORT_ITEMS = [[FIELD_NAME, SORT_ASC], [FIELD_NAME, SORT_DESC], [FIELD_DATE, SORT_ASC], [FIELD_DATE, SORT_DESC], [FIELD_SIZE, SORT_ASC], [FIELD_SIZE, SORT_DESC]];\nvar Sort = function Sort(_ref) {\n  var sortBy = _ref.sortBy,\n    sortDirection = _ref.sortDirection,\n    onSortChange = _ref.onSortChange;\n  return React.createElement(DropdownMenu, {\n    isRightAligned: true\n  }, React.createElement(SortButton, null), React.createElement(Menu, null, SORT_ITEMS.map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      sortByValue = _ref3[0],\n      sortDirectionValue = _ref3[1];\n    var isSelected = sortByValue === sortBy && sortDirectionValue === sortDirection;\n    var sortItemKey = \"\".concat(sortByValue).concat(sortDirectionValue);\n    return React.createElement(MenuItem, {\n      key: sortItemKey,\n      onClick: function onClick() {\n        return onSortChange(sortByValue, sortDirectionValue);\n      }\n    }, React.createElement(\"div\", {\n      className: \"be-sort-selected\"\n    }, isSelected && React.createElement(IconCheck, {\n      height: 16,\n      width: 16\n    })), React.createElement(FormattedMessage, messages[sortItemKey]));\n  })));\n};\nexport default Sort;","map":{"version":3,"sources":["../../../../src/elements/common/sub-header/Sort.js"],"names":["React","FormattedMessage","DropdownMenu","Menu","MenuItem","IconCheck","SortButton","messages","FIELD_NAME","FIELD_DATE","FIELD_SIZE","SORT_ASC","SORT_DESC","SORT_ITEMS","Sort","sortBy","sortDirection","onSortChange","map","sortByValue","sortDirectionValue","isSelected","sortItemKey"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,YAAP,MAAyB,gDAAzB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,UAAjC,EAA6CC,QAA7C,EAAuDC,SAAvD,QAAwE,oBAAxE;AAEA,OAAO,aAAP;AAUA,IAAMC,UAA2B,GAAG,CAChC,CAACL,UAAD,EAAaG,QAAb,CADgC,EAEhC,CAACH,UAAD,EAAaI,SAAb,CAFgC,EAGhC,CAACH,UAAD,EAAaE,QAAb,CAHgC,EAIhC,CAACF,UAAD,EAAaG,SAAb,CAJgC,EAKhC,CAACF,UAAD,EAAaC,QAAb,CALgC,EAMhC,CAACD,UAAD,EAAaE,SAAb,CANgC,CAApC;AASA,IAAME,IAAI,GAAG,SAAPA,IAAO,CAAA,IAAA,EAAA;EAAA,IAAGC,MAAH,GAAA,IAAA,CAAGA,MAAH;IAAWC,aAAX,GAAA,IAAA,CAAWA,aAAX;IAA0BC,YAA1B,GAAA,IAAA,CAA0BA,YAA1B;EAAA,OACT,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;IAAc,cAAc,EAAA;EAA5B,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,UAAD,EAAA,IAAA,CADJ,EAEI,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,IAAA,EACK,UAAU,CAACC,GAAX,CAAe,UAAA,KAAA,EAAuC;IAAA,IAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;MAArCC,WAAqC,GAAA,KAAA,CAAA,CAAA,CAAA;MAAxBC,kBAAwB,GAAA,KAAA,CAAA,CAAA,CAAA;IACnD,IAAMC,UAAU,GAAGF,WAAW,KAAKJ,MAAhBI,IAA0BC,kBAAkB,KAAKJ,aAApE;IACA,IAAMM,WAAW,GAAA,EAAA,CAAA,MAAA,CAAMH,WAAN,CAAA,CAAA,MAAA,CAAoBC,kBAApB,CAAjB;IAEA,OACI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;MAAU,GAAG,EAAEE,WAAf;MAA4B,OAAO,EAAE,SAAA,OAAA,CAAA,EAAA;QAAA,OAAML,YAAY,CAACE,WAAD,EAAcC,kBAAd,CAAlB;MAAA;IAArC,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAC;IAAf,CAAA,EAAmCC,UAAU,IAAI,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;MAAW,MAAM,EAAE,EAAnB;MAAuB,KAAK,EAAE;IAA9B,CAAA,CAAjD,CADJ,EAEI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBd,QAAQ,CAACe,WAAD,CAA9B,CAFJ,CADJ;EAMH,CAVA,CADL,CAFJ,CADS;AAAA,CAAb;AAmBA,eAAeR,IAAf","sourcesContent":["/**\n * @flow\n * @file Sort component\n * @author Box\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport DropdownMenu from '../../../components/dropdown-menu/DropdownMenu';\nimport Menu from '../../../components/menu/Menu';\nimport MenuItem from '../../../components/menu/MenuItem';\nimport IconCheck from '../../../icons/general/IconCheck';\nimport SortButton from './SortButton';\nimport messages from '../messages';\nimport { FIELD_NAME, FIELD_DATE, FIELD_SIZE, SORT_ASC, SORT_DESC } from '../../../constants';\nimport type { SortBy, SortDirection } from '../../../common/types/core';\nimport './Sort.scss';\n\ntype Props = {\n    onSortChange: Function,\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n};\n\ntype SortItem = [SortBy, SortDirection];\n\nconst SORT_ITEMS: Array<SortItem> = [\n    [FIELD_NAME, SORT_ASC],\n    [FIELD_NAME, SORT_DESC],\n    [FIELD_DATE, SORT_ASC],\n    [FIELD_DATE, SORT_DESC],\n    [FIELD_SIZE, SORT_ASC],\n    [FIELD_SIZE, SORT_DESC],\n];\n\nconst Sort = ({ sortBy, sortDirection, onSortChange }: Props) => (\n    <DropdownMenu isRightAligned>\n        <SortButton />\n        <Menu>\n            {SORT_ITEMS.map(([sortByValue, sortDirectionValue]) => {\n                const isSelected = sortByValue === sortBy && sortDirectionValue === sortDirection;\n                const sortItemKey = `${sortByValue}${sortDirectionValue}`;\n\n                return (\n                    <MenuItem key={sortItemKey} onClick={() => onSortChange(sortByValue, sortDirectionValue)}>\n                        <div className=\"be-sort-selected\">{isSelected && <IconCheck height={16} width={16} />}</div>\n                        <FormattedMessage {...messages[sortItemKey]} />\n                    </MenuItem>\n                );\n            })}\n        </Menu>\n    </DropdownMenu>\n);\n\nexport default Sort;\n"]},"metadata":{},"sourceType":"module"}