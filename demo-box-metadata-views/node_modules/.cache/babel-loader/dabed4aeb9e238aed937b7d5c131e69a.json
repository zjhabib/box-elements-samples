{"ast":null,"code":"var _statusMessages;\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport ReadableTime from '../../../../components/time/ReadableTime';\nimport commonMessages from '../../../common/messages';\nimport messages from './messages';\nimport { TASK_NEW_APPROVED, TASK_NEW_REJECTED, TASK_NEW_COMPLETED, TASK_NEW_NOT_STARTED } from '../../../../constants';\nimport './AssigneeDetails.scss';\nvar statusMessages = (_statusMessages = {}, _defineProperty(_statusMessages, TASK_NEW_APPROVED, messages.tasksFeedStatusApproved), _defineProperty(_statusMessages, TASK_NEW_REJECTED, messages.tasksFeedStatusRejected), _defineProperty(_statusMessages, TASK_NEW_COMPLETED, messages.tasksFeedStatusCompleted), _defineProperty(_statusMessages, TASK_NEW_NOT_STARTED, null), _statusMessages);\nvar Datestamp = function Datestamp(_ref) {\n  var date = _ref.date;\n  return React.createElement(ReadableTime, {\n    timestamp: new Date(date).getTime(),\n    alwaysShowTime: true,\n    relativeThreshold: 0\n  });\n};\nvar AvatarDetails = React.memo(function (_ref2) {\n  var user = _ref2.user,\n    status = _ref2.status,\n    completedAt = _ref2.completedAt,\n    className = _ref2.className;\n  var statusMessage = statusMessages[status] || null;\n  return React.createElement(\"div\", {\n    className: classNames(className, 'bcs-AssigneeDetails')\n  }, React.createElement(\"div\", {\n    className: \"bcs-AssigneeDetails-name\"\n  }, user.name ? user.name : React.createElement(FormattedMessage, commonMessages.priorCollaborator)), statusMessage && completedAt && React.createElement(\"div\", {\n    className: \"bcs-AssigneeDetails-status\"\n  }, React.createElement(FormattedMessage, _extends({}, statusMessage, {\n    values: {\n      dateTime: React.createElement(Datestamp, {\n        date: completedAt\n      })\n    }\n  }))));\n});\nexport default AvatarDetails;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/AssigneeDetails.js"],"names":["React","FormattedMessage","classNames","ReadableTime","commonMessages","messages","TASK_NEW_APPROVED","TASK_NEW_REJECTED","TASK_NEW_COMPLETED","TASK_NEW_NOT_STARTED","statusMessages","tasksFeedStatusApproved","tasksFeedStatusRejected","tasksFeedStatusCompleted","Datestamp","date","Date","getTime","AvatarDetails","memo","user","status","completedAt","className","statusMessage","name","priorCollaborator","dateTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,kBAA/C,EAAmEC,oBAAnE,QAA+F,uBAA/F;AAGA,OAAO,wBAAP;AAEA,IAAMC,cAAc,IAAA,eAAA,GAAA,CAAA,CAAA,EAAA,eAAA,CAAA,eAAA,EACfJ,iBADe,EACKD,QAAQ,CAACM,uBADd,CAAA,EAAA,eAAA,CAAA,eAAA,EAEfJ,iBAFe,EAEKF,QAAQ,CAACO,uBAFd,CAAA,EAAA,eAAA,CAAA,eAAA,EAGfJ,kBAHe,EAGMH,QAAQ,CAACQ,wBAHf,CAAA,EAAA,eAAA,CAAA,eAAA,EAIfJ,oBAJe,EAIQ,IAJR,CAAA,EAAA,eAAA,CAApB;AAOA,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAAwC;EAAA,IAArCC,IAAqC,GAAA,IAAA,CAArCA,IAAqC;EACtD,OAAO,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;IAAc,SAAS,EAAE,IAAIC,IAAJ,CAASD,IAAT,CAAA,CAAeE,OAAf,CAAA,CAAzB;IAAmD,cAAc,EAAA,IAAjE;IAAkE,iBAAiB,EAAE;EAArF,CAAA,CAAP;AACH,CAFD;AAWA,IAAMC,aAAa,GAAG,KAAK,CAACC,IAAN,CAAkB,UAAA,KAAA,EAAqD;EAAA,IAAlDC,IAAkD,GAAA,KAAA,CAAlDA,IAAkD;IAA5CC,MAA4C,GAAA,KAAA,CAA5CA,MAA4C;IAApCC,WAAoC,GAAA,KAAA,CAApCA,WAAoC;IAAvBC,SAAuB,GAAA,KAAA,CAAvBA,SAAuB;EACzF,IAAMC,aAAa,GAAGd,cAAc,CAACW,MAAD,CAAdX,IAA0B,IAAhD;EACA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAER,UAAU,CAACqB,SAAD,EAAY,qBAAZ;EAA1B,CAAA,EACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACKH,IAAI,CAACK,IAALL,GAAYA,IAAI,CAACK,IAAjBL,GAAwB,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBhB,cAAc,CAACsB,iBAArC,CAD7B,CADJ,EAIKF,aAAa,IAAIF,WAAjBE,IACG,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAsBA,aAAtB,EAAA;IAAqC,MAAM,EAAE;MAAEG,QAAQ,EAAE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA;QAAW,IAAI,EAAEL;MAAjB,CAAA;IAAZ;EAA7C,CAAA,CAAA,CADJ,CALR,CADJ;AAYH,CAdqB,CAAtB;AAgBA,eAAeJ,aAAf","sourcesContent":["// @flow strict\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport ReadableTime from '../../../../components/time/ReadableTime';\nimport commonMessages from '../../../common/messages';\nimport messages from './messages';\nimport { TASK_NEW_APPROVED, TASK_NEW_REJECTED, TASK_NEW_COMPLETED, TASK_NEW_NOT_STARTED } from '../../../../constants';\nimport type { ISODate } from '../../../../common/types/core';\n\nimport './AssigneeDetails.scss';\n\nconst statusMessages = {\n    [TASK_NEW_APPROVED]: messages.tasksFeedStatusApproved,\n    [TASK_NEW_REJECTED]: messages.tasksFeedStatusRejected,\n    [TASK_NEW_COMPLETED]: messages.tasksFeedStatusCompleted,\n    [TASK_NEW_NOT_STARTED]: null,\n};\n\nconst Datestamp = ({ date }: { date: ISODate | Date }) => {\n    return <ReadableTime timestamp={new Date(date).getTime()} alwaysShowTime relativeThreshold={0} />;\n};\n\ntype Props = {\n    className?: string,\n    completedAt?: ?ISODate | Date,\n    status: $Keys<typeof statusMessages>,\n    user: { name: string },\n};\n\nconst AvatarDetails = React.memo<Props>(({ user, status, completedAt, className }: Props) => {\n    const statusMessage = statusMessages[status] || null;\n    return (\n        <div className={classNames(className, 'bcs-AssigneeDetails')}>\n            <div className=\"bcs-AssigneeDetails-name\">\n                {user.name ? user.name : <FormattedMessage {...commonMessages.priorCollaborator} />}\n            </div>\n            {statusMessage && completedAt && (\n                <div className=\"bcs-AssigneeDetails-status\">\n                    <FormattedMessage {...statusMessage} values={{ dateTime: <Datestamp date={completedAt} /> }} />\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default AvatarDetails;\n"]},"metadata":{},"sourceType":"module"}