{"ast":null,"code":"/**\n * \n * @file Function to sort item list\n * @author Box\n */\nimport { TYPE_FILE, TYPE_FOLDER, SORT_DESC, FIELD_MODIFIED_AT, FIELD_INTERACTED_AT, FIELD_NAME, FIELD_SIZE } from '../constants';\n\n/**\n * Comparator function for sorting files and folders\n *\n * @param {string} sortBy field to sort by\n * @param {string} sortDirection desc or asc\n * @return {Function} comparator function\n */\nexport default function (sortBy, sortDirection, cache) {\n  var invert = sortDirection === SORT_DESC ? 1 : -1;\n  return function (a, b) {\n    var itemA = cache.get(a);\n    var itemB = cache.get(b);\n    var itemAType = itemA.type || TYPE_FILE;\n    var itemBType = itemB.type || TYPE_FILE;\n    var itemAName = itemA.name || '';\n    var itemBName = itemB.name || '';\n    var itemADate = Date.parse(itemA.modified_at || '0');\n    var itemBDate = Date.parse(itemB.modified_at || '0');\n    var itemAInteractedDate = Date.parse(itemA.interacted_at || itemA.modified_at || '0');\n    var itemBInteractedDate = Date.parse(itemB.interacted_at || itemB.modified_at || '0');\n    var itemASize = itemA.size || 0;\n    var itemBSize = itemB.size || 0; // If a and b are of the same type, then use sortBy\n\n    if (itemAType === itemBType) {\n      if (sortBy === FIELD_NAME) {\n        if (itemAName.toLowerCase() > itemBName.toLowerCase()) return -1 * invert;\n        if (itemAName.toLowerCase() < itemBName.toLowerCase()) return 1 * invert;\n      } else if (sortBy === FIELD_MODIFIED_AT) {\n        if (itemADate > itemBDate) return -1 * invert;\n        if (itemADate < itemBDate) return 1 * invert;\n      } else if (sortBy === FIELD_INTERACTED_AT) {\n        if (itemAInteractedDate > itemBInteractedDate) return -1 * invert;\n        if (itemAInteractedDate < itemBInteractedDate) return 1 * invert;\n      } else if (sortBy === FIELD_SIZE) {\n        if (itemASize > itemBSize) return -1 * invert;\n        if (itemASize < itemBSize) return 1 * invert;\n      } else {\n        // Should never reach here\n        throw new Error('Unsupported sort field!');\n      }\n      return 0;\n    } // If a and b are of different types, then use type to sort\n    // Folder > File > WebLink\n\n    if (itemAType === TYPE_FOLDER) return -1;\n    if (itemBType === TYPE_FOLDER) return 1;\n    if (itemAType === TYPE_FILE) return -1;\n    if (itemBType === TYPE_FILE) return 1; // Should never reach here\n\n    throw new Error('Error in sort comparator!');\n  };\n}","map":{"version":3,"sources":["../../src/utils/comparator.js"],"names":["TYPE_FILE","TYPE_FOLDER","SORT_DESC","FIELD_MODIFIED_AT","FIELD_INTERACTED_AT","FIELD_NAME","FIELD_SIZE","sortBy","sortDirection","cache","invert","a","b","itemA","get","itemB","itemAType","type","itemBType","itemAName","name","itemBName","itemADate","Date","parse","modified_at","itemBDate","itemAInteractedDate","interacted_at","itemBInteractedDate","itemASize","size","itemBSize","toLowerCase","Error"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Function to sort item list\n * @author Box\n */\n\nimport {\n    TYPE_FILE,\n    TYPE_FOLDER,\n    SORT_DESC,\n    FIELD_MODIFIED_AT,\n    FIELD_INTERACTED_AT,\n    FIELD_NAME,\n    FIELD_SIZE,\n} from '../constants';\nimport type { SortBy, SortDirection, ItemType, BoxItem } from '../common/types/core';\nimport type APICache from './Cache';\n\n/**\n * Comparator function for sorting files and folders\n *\n * @param {string} sortBy field to sort by\n * @param {string} sortDirection desc or asc\n * @return {Function} comparator function\n */\nexport default function(sortBy: SortBy, sortDirection: SortDirection, cache: APICache): Function {\n    const invert: number = sortDirection === SORT_DESC ? 1 : -1;\n    return (a: string, b: string): number => {\n        const itemA: BoxItem = cache.get(a);\n        const itemB: BoxItem = cache.get(b);\n\n        const itemAType: ItemType = itemA.type || TYPE_FILE;\n        const itemBType: ItemType = itemB.type || TYPE_FILE;\n        const itemAName: string = itemA.name || '';\n        const itemBName: string = itemB.name || '';\n        const itemADate: number = Date.parse(itemA.modified_at || '0');\n        const itemBDate: number = Date.parse(itemB.modified_at || '0');\n        const itemAInteractedDate: number = Date.parse(itemA.interacted_at || itemA.modified_at || '0');\n        const itemBInteractedDate: number = Date.parse(itemB.interacted_at || itemB.modified_at || '0');\n        const itemASize: number = itemA.size || 0;\n        const itemBSize: number = itemB.size || 0;\n\n        // If a and b are of the same type, then use sortBy\n        if (itemAType === itemBType) {\n            if (sortBy === FIELD_NAME) {\n                if (itemAName.toLowerCase() > itemBName.toLowerCase()) return -1 * invert;\n                if (itemAName.toLowerCase() < itemBName.toLowerCase()) return 1 * invert;\n            } else if (sortBy === FIELD_MODIFIED_AT) {\n                if (itemADate > itemBDate) return -1 * invert;\n                if (itemADate < itemBDate) return 1 * invert;\n            } else if (sortBy === FIELD_INTERACTED_AT) {\n                if (itemAInteractedDate > itemBInteractedDate) return -1 * invert;\n                if (itemAInteractedDate < itemBInteractedDate) return 1 * invert;\n            } else if (sortBy === FIELD_SIZE) {\n                if (itemASize > itemBSize) return -1 * invert;\n                if (itemASize < itemBSize) return 1 * invert;\n            } else {\n                // Should never reach here\n                throw new Error('Unsupported sort field!');\n            }\n\n            return 0;\n        }\n\n        // If a and b are of different types, then use type to sort\n        // Folder > File > WebLink\n        if (itemAType === TYPE_FOLDER) return -1;\n        if (itemBType === TYPE_FOLDER) return 1;\n        if (itemAType === TYPE_FILE) return -1;\n        if (itemBType === TYPE_FILE) return 1;\n\n        // Should never reach here\n        throw new Error('Error in sort comparator!');\n    };\n}\n"]},"metadata":{},"sourceType":"module"}