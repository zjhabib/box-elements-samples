{"ast":null,"code":"/**\n * \n * @file Open With dropdown menu item\n * @author Box\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport MenuItem from '../../components/menu/MenuItem';\nimport messages from '../common/messages';\nimport { OPEN_WITH_MENU_ITEM_ICON_SIZE } from '../../constants';\nimport getIcon from './IconFileMap';\nimport utils from './openWithUtils';\nimport './OpenWithDropdownMenuItem.scss';\nfunction getErrorMessage() {\n  var disabledReasons = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var message; // Use the first disabled reason as the description if the integration is disabled.\n\n  var code = disabledReasons[0];\n  var defaultErrorMessage = React.createElement(FormattedMessage, messages.errorOpenWithDescription);\n  switch (code) {\n    case 'blocked_by_shield_access_policy':\n      message = React.createElement(FormattedMessage, messages.boxEditErrorBlockedByPolicy);\n      break;\n    case 'collaborators_hidden':\n      message = defaultErrorMessage;\n      break;\n    default:\n      message = disabledReasons[0] || defaultErrorMessage;\n  }\n  return message;\n}\nvar OpenWithDropdownMenuItem = function OpenWithDropdownMenuItem(_ref) {\n  var integration = _ref.integration,\n    _onClick = _ref.onClick;\n  var displayName = integration.displayName,\n    displayDescription = integration.displayDescription,\n    isDisabled = integration.isDisabled,\n    extension = integration.extension,\n    disabledReasons = integration.disabledReasons;\n  var Icon = getIcon(displayName);\n  var description = isDisabled ? getErrorMessage(disabledReasons) : displayDescription;\n  var className = classNames({\n    'bcow-box-tools-uninstalled': utils.isDisabledBecauseBoxToolsIsNotInstalled(integration)\n  });\n  return React.createElement(MenuItem, {\n    className: className,\n    isDisabled: isDisabled,\n    onClick: function onClick() {\n      return _onClick(integration);\n    }\n  }, React.createElement(Icon, {\n    dimension: OPEN_WITH_MENU_ITEM_ICON_SIZE,\n    extension: extension,\n    height: OPEN_WITH_MENU_ITEM_ICON_SIZE,\n    width: OPEN_WITH_MENU_ITEM_ICON_SIZE\n  }), React.createElement(\"span\", null, React.createElement(\"p\", {\n    className: \"bcow-menu-item-title\"\n  }, displayName), React.createElement(\"p\", {\n    className: \"bcow-menu-item-description\"\n  }, description)));\n};\nexport default OpenWithDropdownMenuItem;","map":{"version":3,"sources":["../../../src/elements/content-open-with/OpenWithDropdownMenuItem.js"],"names":["React","FormattedMessage","classNames","MenuItem","messages","OPEN_WITH_MENU_ITEM_ICON_SIZE","getIcon","utils","getErrorMessage","disabledReasons","message","code","defaultErrorMessage","errorOpenWithDescription","boxEditErrorBlockedByPolicy","OpenWithDropdownMenuItem","integration","onClick","displayName","displayDescription","isDisabled","extension","Icon","description","className","isDisabledBecauseBoxToolsIsNotInstalled"],"mappings":"AAAA;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,6BAAT,QAA8C,iBAA9C;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAO,iCAAP;AAOA,SAASC,eAAT,CAAA,EAAkF;EAAA,IAAzDC,eAAyD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAhB,EAAgB;EAC9E,IAAIC,OAAJ,CAD8E,CAE9E;;EACA,IAAMC,IAAI,GAAGF,eAAe,CAAC,CAAD,CAA5B;EACA,IAAMG,mBAAmB,GAAG,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBR,QAAQ,CAACS,wBAA/B,CAA5B;EAEA,QAAQF,IAAR;IACI,KAAK,iCAAL;MACID,OAAO,GAAG,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBN,QAAQ,CAACU,2BAA/B,CAAVJ;MACA;IACJ,KAAK,sBAAL;MACIA,OAAO,GAAGE,mBAAVF;MACA;IACJ;MACIA,OAAO,GAAGD,eAAe,CAAC,CAAD,CAAfA,IAAsBG,mBAAhCF;EARR;EAUA,OAAOA,OAAP;AACH;AAED,IAAMK,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,IAAA,EAAqC;EAAA,IAAlCC,WAAkC,GAAA,IAAA,CAAlCA,WAAkC;IAArBC,QAAqB,GAAA,IAAA,CAArBA,OAAqB;EAAA,IAC1DC,WAD0D,GACkBF,WADlB,CAC1DE,WAD0D;IAC7CC,kBAD6C,GACkBH,WADlB,CAC7CG,kBAD6C;IACzBC,UADyB,GACkBJ,WADlB,CACzBI,UADyB;IACbC,SADa,GACkBL,WADlB,CACbK,SADa;IACFZ,eADE,GACkBO,WADlB,CACFP,eADE;EAElE,IAAMa,IAAI,GAAGhB,OAAO,CAACY,WAAD,CAApB;EACA,IAAMK,WAAW,GAAGH,UAAU,GAAGZ,eAAe,CAACC,eAAD,CAAlB,GAAsCU,kBAApE;EACA,IAAMK,SAAS,GAAGtB,UAAU,CAAC;IACzB,4BAAA,EAA8BK,KAAK,CAACkB,uCAANlB,CAA8CS,WAA9CT;EADL,CAAD,CAA5B;EAIA,OACI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;IAAU,SAAS,EAAEiB,SAArB;IAAgC,UAAU,EAAEJ,UAA5C;IAAwD,OAAO,EAAE,SAAA,OAAA,CAAA,EAAA;MAAA,OAAMH,QAAO,CAACD,WAAD,CAAb;IAAA;EAAjE,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;IACI,SAAS,EAAEX,6BADf;IAEI,SAAS,EAAEgB,SAFf;IAGI,MAAM,EAAEhB,6BAHZ;IAII,KAAK,EAAEA;EAJX,CAAA,CADJ,EAOI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;IAAG,SAAS,EAAC;EAAb,CAAA,EAAqCa,WAArC,CADJ,EAEI,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;IAAG,SAAS,EAAC;EAAb,CAAA,EAA2CK,WAA3C,CAFJ,CAPJ,CADJ;AAcH,CAtBD;AAwBA,eAAeR,wBAAf","sourcesContent":["/**\n * @flow\n * @file Open With dropdown menu item\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport MenuItem from '../../components/menu/MenuItem';\nimport messages from '../common/messages';\nimport { OPEN_WITH_MENU_ITEM_ICON_SIZE } from '../../constants';\nimport getIcon from './IconFileMap';\nimport utils from './openWithUtils';\nimport type { Integration, DisabledReason } from '../../common/types/integrations';\nimport './OpenWithDropdownMenuItem.scss';\n\ntype Props = {\n    integration: Integration,\n    onClick: Function,\n};\n\nfunction getErrorMessage(disabledReasons: Array<DisabledReason> = []): React.Node {\n    let message;\n    // Use the first disabled reason as the description if the integration is disabled.\n    const code = disabledReasons[0];\n    const defaultErrorMessage = <FormattedMessage {...messages.errorOpenWithDescription} />;\n\n    switch (code) {\n        case 'blocked_by_shield_access_policy':\n            message = <FormattedMessage {...messages.boxEditErrorBlockedByPolicy} />;\n            break;\n        case 'collaborators_hidden':\n            message = defaultErrorMessage;\n            break;\n        default:\n            message = disabledReasons[0] || defaultErrorMessage;\n    }\n    return message;\n}\n\nconst OpenWithDropdownMenuItem = ({ integration, onClick }: Props) => {\n    const { displayName, displayDescription, isDisabled, extension, disabledReasons } = integration;\n    const Icon = getIcon(displayName);\n    const description = isDisabled ? getErrorMessage(disabledReasons) : displayDescription;\n    const className = classNames({\n        'bcow-box-tools-uninstalled': utils.isDisabledBecauseBoxToolsIsNotInstalled(integration),\n    });\n\n    return (\n        <MenuItem className={className} isDisabled={isDisabled} onClick={() => onClick(integration)}>\n            <Icon\n                dimension={OPEN_WITH_MENU_ITEM_ICON_SIZE}\n                extension={extension}\n                height={OPEN_WITH_MENU_ITEM_ICON_SIZE}\n                width={OPEN_WITH_MENU_ITEM_ICON_SIZE}\n            />\n            <span>\n                <p className=\"bcow-menu-item-title\">{displayName}</p>\n                <p className=\"bcow-menu-item-description\">{description}</p>\n            </span>\n        </MenuItem>\n    );\n};\n\nexport default OpenWithDropdownMenuItem;\n"]},"metadata":{},"sourceType":"module"}