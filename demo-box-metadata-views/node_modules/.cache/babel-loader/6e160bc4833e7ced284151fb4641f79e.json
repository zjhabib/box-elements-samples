{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Modal, ModalActions } from '../../../components/modal';\nimport commonMessages from '../../../common/messages';\nimport Button from '../../../components/button';\nimport classificationMessages from '../messages';\nimport ClassifiedBadge from '../ClassifiedBadge';\nimport Label from '../../../components/label/Label';\nimport messages from './messages';\nimport SecurityControlsItem from './SecurityControlsItem';\nimport './SecurityControlsModal.scss';\nvar SecurityControlsModal = function SecurityControlsModal(_ref) {\n  var closeModal = _ref.closeModal,\n    definition = _ref.definition,\n    classificationColor = _ref.classificationColor,\n    classificationName = _ref.classificationName,\n    isSecurityControlsModalOpen = _ref.isSecurityControlsModalOpen,\n    itemName = _ref.itemName,\n    modalItems = _ref.modalItems;\n  if (!itemName || !classificationName || !definition) {\n    return null;\n  }\n  var title = React.createElement(FormattedMessage, _extends({}, messages.modalTitle, {\n    values: {\n      itemName: itemName\n    }\n  }));\n  return React.createElement(Modal, {\n    className: \"bdl-SecurityControlsModal\",\n    title: title,\n    onRequestClose: closeModal,\n    isOpen: isSecurityControlsModalOpen\n  }, React.createElement(\"p\", null, React.createElement(FormattedMessage, messages.modalDescription)), React.createElement(ClassifiedBadge, {\n    color: classificationColor,\n    name: classificationName\n  }), React.createElement(Label, {\n    text: React.createElement(FormattedMessage, classificationMessages.definition)\n  }, React.createElement(\"p\", {\n    className: \"bdl-SecurityControlsModal-definition\"\n  }, definition)), React.createElement(\"ul\", {\n    className: \"bdl-SecurityControlsModal-controlsItemList\"\n  }, modalItems.map(function (_ref2) {\n    var message = _ref2.message,\n      tooltipMessage = _ref2.tooltipMessage;\n    return React.createElement(SecurityControlsItem, {\n      key: message.id,\n      message: message,\n      tooltipMessage: tooltipMessage\n    });\n  })), React.createElement(ModalActions, null, React.createElement(Button, {\n    onClick: closeModal,\n    type: \"button\"\n  }, React.createElement(FormattedMessage, commonMessages.close))));\n};\nSecurityControlsModal.defaultProps = {\n  isSecurityControlsModalOpen: false,\n  modalItems: []\n};\nexport default SecurityControlsModal;","map":{"version":3,"sources":["../../../../src/features/classification/security-controls/SecurityControlsModal.js"],"names":["React","FormattedMessage","Modal","ModalActions","commonMessages","Button","classificationMessages","ClassifiedBadge","Label","messages","SecurityControlsItem","SecurityControlsModal","closeModal","definition","classificationColor","classificationName","isSecurityControlsModalOpen","itemName","modalItems","title","modalTitle","modalDescription","map","message","tooltipMessage","id","close","defaultProps"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Modal, ModalActions } from '../../../components/modal';\nimport commonMessages from '../../../common/messages';\nimport Button from '../../../components/button';\nimport classificationMessages from '../messages';\nimport ClassifiedBadge from '../ClassifiedBadge';\nimport Label from '../../../components/label/Label';\nimport messages from './messages';\nimport SecurityControlsItem from './SecurityControlsItem';\nimport './SecurityControlsModal.scss';\nimport type { MessageItem } from '../flowTypes';\n\ntype Props = {\n    classificationColor?: string,\n    classificationName?: string,\n    closeModal: Function,\n    definition?: string,\n    isSecurityControlsModalOpen: boolean,\n    itemName?: string,\n    modalItems: Array<MessageItem>,\n};\n\nconst SecurityControlsModal = ({\n    closeModal,\n    definition,\n    classificationColor,\n    classificationName,\n    isSecurityControlsModalOpen,\n    itemName,\n    modalItems,\n}: Props) => {\n    if (!itemName || !classificationName || !definition) {\n        return null;\n    }\n\n    const title = <FormattedMessage {...messages.modalTitle} values={{ itemName }} />;\n\n    return (\n        <Modal\n            className=\"bdl-SecurityControlsModal\"\n            title={title}\n            onRequestClose={closeModal}\n            isOpen={isSecurityControlsModalOpen}\n        >\n            <p>\n                <FormattedMessage {...messages.modalDescription} />\n            </p>\n            <ClassifiedBadge color={classificationColor} name={((classificationName: any): string)} />\n            <Label text={<FormattedMessage {...classificationMessages.definition} />}>\n                <p className=\"bdl-SecurityControlsModal-definition\">{definition}</p>\n            </Label>\n            <ul className=\"bdl-SecurityControlsModal-controlsItemList\">\n                {modalItems.map(({ message, tooltipMessage }) => (\n                    <SecurityControlsItem key={message.id} message={message} tooltipMessage={tooltipMessage} />\n                ))}\n            </ul>\n            <ModalActions>\n                <Button onClick={closeModal} type=\"button\">\n                    <FormattedMessage {...commonMessages.close} />\n                </Button>\n            </ModalActions>\n        </Modal>\n    );\n};\n\nSecurityControlsModal.defaultProps = {\n    isSecurityControlsModalOpen: false,\n    modalItems: [],\n};\n\nexport default SecurityControlsModal;\n"]},"metadata":{},"sourceType":"module"}