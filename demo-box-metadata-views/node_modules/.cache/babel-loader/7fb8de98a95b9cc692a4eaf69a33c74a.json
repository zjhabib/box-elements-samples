{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { EditorState } from 'draft-js';\nimport DatalistItem from '../../datalist-item';\nimport DraftJSEditor from '../../draft-js-editor';\nimport SelectorDropdown from '../../selector-dropdown';\nimport { addMention as _addMention, defaultMentionTriggers, getActiveMentionForEditorState as _getActiveMentionForEditorState } from './utils';\nimport messages from './messages';\nimport './MentionSelector.scss';\nvar DefaultSelectorRow = function DefaultSelectorRow(_ref) {\n  var _ref$item = _ref.item,\n    item = _ref$item === void 0 ? {} : _ref$item,\n    rest = _objectWithoutProperties(_ref, [\"item\"]);\n  return React.createElement(DatalistItem, rest, item.name, \" \", React.createElement(\"span\", {\n    className: \"dropdown-secondary-text\"\n  }, item.email));\n};\nvar DefaultStartMentionMessage = function DefaultStartMentionMessage() {\n  return React.createElement(FormattedMessage, messages.startMention);\n};\nvar MentionStartState = function MentionStartState(_ref2) {\n  var message = _ref2.message;\n  return React.createElement(\"div\", {\n    className: \"mention-start-state\"\n  }, message);\n};\nvar DraftJSMentionSelector = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DraftJSMentionSelector, _React$Component);\n  function DraftJSMentionSelector(props) {\n    var _this;\n    _classCallCheck(this, DraftJSMentionSelector);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DraftJSMentionSelector).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"handleMention\", function () {\n      var onMention = _this.props.onMention;\n      var activeMention = _this.state.activeMention;\n      if (onMention) {\n        onMention(activeMention ? activeMention.mentionString : '');\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleContactSelected\", function (index) {\n      var contacts = _this.props.contacts;\n      _this.addMention(contacts[index]);\n      _this.setState({\n        activeMention: null,\n        isFocused: true\n      }, function () {\n        _this.handleMention();\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n      _this.setState({\n        isFocused: false\n      });\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (event) {\n      var onFocus = _this.props.onFocus;\n      _this.setState({\n        isFocused: true\n      });\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (nextEditorState) {\n      var onChange = _this.props.onChange;\n      var activeMention = _this.getActiveMentionForEditorState(nextEditorState);\n      _this.setState({\n        activeMention: activeMention\n      }, function () {\n        if (onChange) {\n          onChange(nextEditorState);\n        }\n        if (activeMention && activeMention.mentionString) {\n          _this.handleMention();\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"shouldDisplayMentionLookup\", function () {\n      var contacts = _this.props.contacts;\n      var activeMention = _this.state.activeMention;\n      return !!(activeMention && activeMention.mentionString && contacts.length);\n    });\n    var mentionTriggers = props.mentionTriggers.reduce(function (prev, current) {\n      return \"\".concat(prev, \"\\\\\").concat(current);\n    }, '');\n    _this.state = {\n      activeMention: null,\n      isFocused: false,\n      mentionPattern: new RegExp(\"([\".concat(mentionTriggers, \"])([^\").concat(mentionTriggers, \"]*)$\"))\n    };\n    return _this;\n  }\n  /**\n   * Lifecycle method that gets called immediately after an update\n   * @param {object} lastProps Props the component is receiving\n   * @returns {void}\n   */\n\n  _createClass(DraftJSMentionSelector, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevContacts = prevProps.contacts;\n      var currentContacts = this.props.contacts;\n      var activeMention = this.state.activeMention;\n      if (activeMention !== null && !currentContacts.length && prevContacts !== currentContacts) {\n        // if empty set of contacts get passed in, set active mention to null\n        this.setState({\n          activeMention: null\n        });\n      }\n    }\n    /**\n     * Extracts the active mention from the editor state\n     *\n     * @param {EditorState} editorState\n     * @returns {object}\n     */\n  }, {\n    key: \"getActiveMentionForEditorState\",\n    value: function getActiveMentionForEditorState(editorState) {\n      var mentionPattern = this.state.mentionPattern;\n      return _getActiveMentionForEditorState(editorState, mentionPattern);\n    }\n    /**\n     * Called on each keypress when a mention is being composed\n     * @returns {void}\n     */\n  }, {\n    key: \"addMention\",\n    /**\n     * Inserts a selected mention into the editor\n     * @param {object} mention The selected mention to insert\n     */\n    value: function addMention(mention) {\n      var _this2 = this;\n      var activeMention = this.state.activeMention;\n      var editorState = this.props.editorState;\n      var editorStateWithLink = _addMention(editorState, activeMention, mention);\n      this.setState({\n        activeMention: null\n      }, function () {\n        _this2.handleChange(editorStateWithLink);\n      });\n    }\n    /**\n     * @returns {boolean}\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        className = _this$props.className,\n        contacts = _this$props.contacts,\n        editorState = _this$props.editorState,\n        error = _this$props.error,\n        hideLabel = _this$props.hideLabel,\n        isDisabled = _this$props.isDisabled,\n        isRequired = _this$props.isRequired,\n        label = _this$props.label,\n        onReturn = _this$props.onReturn,\n        placeholder = _this$props.placeholder,\n        selectorRow = _this$props.selectorRow,\n        startMentionMessage = _this$props.startMentionMessage,\n        onMention = _this$props.onMention;\n      var _this$state = this.state,\n        activeMention = _this$state.activeMention,\n        isFocused = _this$state.isFocused;\n      var classes = classNames('mention-selector-wrapper', className);\n      var showMentionStartState = !!(onMention && activeMention && !activeMention.mentionString && isFocused);\n      return React.createElement(\"div\", {\n        className: classes\n      }, React.createElement(SelectorDropdown, {\n        onSelect: this.handleContactSelected,\n        selector: React.createElement(DraftJSEditor, {\n          editorState: editorState,\n          error: error,\n          hideLabel: hideLabel,\n          isDisabled: isDisabled,\n          isFocused: isFocused,\n          isRequired: isRequired,\n          label: label,\n          onBlur: this.handleBlur,\n          onFocus: this.handleFocus,\n          onChange: this.handleChange,\n          onReturn: onReturn,\n          placeholder: placeholder\n        })\n      }, this.shouldDisplayMentionLookup() ? contacts.map(function (contact) {\n        return React.cloneElement(selectorRow, _objectSpread({}, selectorRow.props, {}, contact, {\n          key: contact.id\n        }));\n      }) : []), showMentionStartState ? React.createElement(MentionStartState, {\n        message: startMentionMessage\n      }) : null);\n    }\n  }]);\n  return DraftJSMentionSelector;\n}(React.Component);\n_defineProperty(DraftJSMentionSelector, \"defaultProps\", {\n  className: '',\n  contacts: [],\n  isDisabled: false,\n  isRequired: false,\n  mentionTriggers: defaultMentionTriggers,\n  selectorRow: React.createElement(DefaultSelectorRow, null),\n  startMentionMessage: React.createElement(DefaultStartMentionMessage, null)\n});\nexport default DraftJSMentionSelector;","map":{"version":3,"sources":["../../../../src/components/form-elements/draft-js-mention-selector/DraftJSMentionSelectorCore.js"],"names":["React","FormattedMessage","classNames","EditorState","DatalistItem","DraftJSEditor","SelectorDropdown","addMention","defaultMentionTriggers","getActiveMentionForEditorState","messages","DefaultSelectorRow","item","rest","name","email","DefaultStartMentionMessage","startMention","MentionStartState","message","DraftJSMentionSelector","Component","className","contacts","isDisabled","isRequired","mentionTriggers","selectorRow","startMentionMessage","props","reduce","prev","current","state","activeMention","isFocused","mentionPattern","RegExp","prevProps","prevContacts","currentContacts","length","setState","editorState","onMention","mentionString","index","handleMention","event","onBlur","onFocus","nextEditorState","onChange","mention","editorStateWithLink","handleChange","error","hideLabel","label","onReturn","placeholder","classes","showMentionStartState","handleContactSelected","handleBlur","handleFocus","shouldDisplayMentionLookup","map","cloneElement","contact","key","id"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { EditorState } from 'draft-js';\n\nimport DatalistItem from '../../datalist-item';\nimport DraftJSEditor from '../../draft-js-editor';\nimport SelectorDropdown from '../../selector-dropdown';\nimport { addMention, defaultMentionTriggers, getActiveMentionForEditorState } from './utils';\n\nimport messages from './messages';\n\nimport type { SelectorItems } from '../../../common/types/core';\nimport type { Mention } from './utils';\n\nimport './MentionSelector.scss';\n\ntype DefaultSelectorRowProps = {\n    item?: {\n        email?: string,\n        name?: string,\n    },\n};\n\nconst DefaultSelectorRow = ({ item = {}, ...rest }: DefaultSelectorRowProps) => (\n    <DatalistItem {...rest}>\n        {item.name} <span className=\"dropdown-secondary-text\">{item.email}</span>\n    </DatalistItem>\n);\n\nconst DefaultStartMentionMessage = () => <FormattedMessage {...messages.startMention} />;\n\ntype MentionStartStateProps = {\n    message?: React.Node,\n};\n\nconst MentionStartState = ({ message }: MentionStartStateProps) => <div className=\"mention-start-state\">{message}</div>;\n\ntype Props = {\n    className?: string,\n    contacts: SelectorItems<>,\n    editorState: EditorState,\n    error?: ?Object,\n    hideLabel?: boolean,\n    isDisabled?: boolean,\n    isRequired?: boolean,\n    label: React.Node,\n    mentionTriggers: Array<string>,\n    onBlur?: Function,\n    onChange?: Function,\n    onFocus?: Function,\n    onMention?: Function,\n    onReturn?: Function,\n    placeholder?: string,\n    selectorRow: React.Element<any>,\n    startMentionMessage?: React.Node,\n};\n\ntype State = {\n    activeMention: Mention | null,\n    isFocused: boolean,\n    mentionPattern: RegExp,\n};\n\nclass DraftJSMentionSelector extends React.Component<Props, State> {\n    static defaultProps = {\n        className: '',\n        contacts: [],\n        isDisabled: false,\n        isRequired: false,\n        mentionTriggers: defaultMentionTriggers,\n        selectorRow: <DefaultSelectorRow />,\n        startMentionMessage: <DefaultStartMentionMessage />,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const mentionTriggers = props.mentionTriggers.reduce((prev, current) => `${prev}\\\\${current}`, '');\n\n        this.state = {\n            activeMention: null,\n            isFocused: false,\n            mentionPattern: new RegExp(`([${mentionTriggers}])([^${mentionTriggers}]*)$`),\n        };\n    }\n\n    /**\n     * Lifecycle method that gets called immediately after an update\n     * @param {object} lastProps Props the component is receiving\n     * @returns {void}\n     */\n    componentDidUpdate(prevProps: Props) {\n        const { contacts: prevContacts } = prevProps;\n        const { contacts: currentContacts } = this.props;\n        const { activeMention } = this.state;\n\n        if (activeMention !== null && !currentContacts.length && prevContacts !== currentContacts) {\n            // if empty set of contacts get passed in, set active mention to null\n            this.setState({\n                activeMention: null,\n            });\n        }\n    }\n\n    /**\n     * Extracts the active mention from the editor state\n     *\n     * @param {EditorState} editorState\n     * @returns {object}\n     */\n    getActiveMentionForEditorState(editorState: EditorState) {\n        const { mentionPattern } = this.state;\n\n        return getActiveMentionForEditorState(editorState, mentionPattern);\n    }\n\n    /**\n     * Called on each keypress when a mention is being composed\n     * @returns {void}\n     */\n    handleMention = () => {\n        const { onMention } = this.props;\n        const { activeMention } = this.state;\n\n        if (onMention) {\n            onMention(activeMention ? activeMention.mentionString : '');\n        }\n    };\n\n    /**\n     * Method that gets called when a mention contact is selected\n     * @param {number} index The selected index\n     * @returns {void}\n     */\n    handleContactSelected = (index: number) => {\n        const { contacts } = this.props;\n        this.addMention(contacts[index]);\n        this.setState(\n            {\n                activeMention: null,\n                isFocused: true,\n            },\n            () => {\n                this.handleMention();\n            },\n        );\n    };\n\n    handleBlur = (event: SyntheticEvent<>) => {\n        const { onBlur } = this.props;\n\n        this.setState({\n            isFocused: false,\n        });\n\n        if (onBlur) {\n            onBlur(event);\n        }\n    };\n\n    handleFocus = (event: SyntheticEvent<>) => {\n        const { onFocus } = this.props;\n\n        this.setState({\n            isFocused: true,\n        });\n\n        if (onFocus) {\n            onFocus(event);\n        }\n    };\n\n    /**\n     * Event handler called when DraftJSEditor emits onChange\n     * Checks current text to see if any mentions were made\n     * @param {EditorState} editorState The new editor state\n     * @returns {void}\n     */\n    handleChange = (nextEditorState: EditorState) => {\n        const { onChange } = this.props;\n\n        const activeMention = this.getActiveMentionForEditorState(nextEditorState);\n\n        this.setState(\n            {\n                activeMention,\n            },\n            () => {\n                if (onChange) {\n                    onChange(nextEditorState);\n                }\n\n                if (activeMention && activeMention.mentionString) {\n                    this.handleMention();\n                }\n            },\n        );\n    };\n\n    /**\n     * Inserts a selected mention into the editor\n     * @param {object} mention The selected mention to insert\n     */\n    addMention(mention: Object) {\n        const { activeMention } = this.state;\n        const { editorState } = this.props;\n\n        const editorStateWithLink = addMention(editorState, activeMention, mention);\n\n        this.setState(\n            {\n                activeMention: null,\n            },\n            () => {\n                this.handleChange(editorStateWithLink);\n            },\n        );\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    shouldDisplayMentionLookup = () => {\n        const { contacts } = this.props;\n        const { activeMention } = this.state;\n\n        return !!(activeMention && activeMention.mentionString && contacts.length);\n    };\n\n    render() {\n        const {\n            className,\n            contacts,\n            editorState,\n            error,\n            hideLabel,\n            isDisabled,\n            isRequired,\n            label,\n            onReturn,\n            placeholder,\n            selectorRow,\n            startMentionMessage,\n            onMention,\n        } = this.props;\n        const { activeMention, isFocused } = this.state;\n\n        const classes = classNames('mention-selector-wrapper', className);\n\n        const showMentionStartState = !!(onMention && activeMention && !activeMention.mentionString && isFocused);\n\n        return (\n            <div className={classes}>\n                <SelectorDropdown\n                    onSelect={this.handleContactSelected}\n                    selector={\n                        <DraftJSEditor\n                            editorState={editorState}\n                            error={error}\n                            hideLabel={hideLabel}\n                            isDisabled={isDisabled}\n                            isFocused={isFocused}\n                            isRequired={isRequired}\n                            label={label}\n                            onBlur={this.handleBlur}\n                            onFocus={this.handleFocus}\n                            onChange={this.handleChange}\n                            onReturn={onReturn}\n                            placeholder={placeholder}\n                        />\n                    }\n                >\n                    {this.shouldDisplayMentionLookup()\n                        ? contacts.map(contact =>\n                              React.cloneElement(selectorRow, {\n                                  ...selectorRow.props,\n                                  ...contact,\n                                  key: contact.id,\n                              }),\n                          )\n                        : []}\n                </SelectorDropdown>\n                {showMentionStartState ? <MentionStartState message={startMentionMessage} /> : null}\n            </div>\n        );\n    }\n}\n\nexport default DraftJSMentionSelector;\n"]},"metadata":{},"sourceType":"module"}