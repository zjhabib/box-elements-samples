{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport Label from '../label';\nimport Tooltip from '../tooltip';\nimport './TextArea.scss';\nvar TextArea = function TextArea(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    description = _ref.description,\n    error = _ref.error,\n    errorTooltipPosition = _ref.errorTooltipPosition,\n    hideLabel = _ref.hideLabel,\n    hideOptionalLabel = _ref.hideOptionalLabel,\n    isRequired = _ref.isRequired,\n    isResizable = _ref.isResizable,\n    label = _ref.label,\n    textareaRef = _ref.textareaRef,\n    rest = _objectWithoutProperties(_ref, [\"className\", \"description\", \"error\", \"errorTooltipPosition\", \"hideLabel\", \"hideOptionalLabel\", \"isRequired\", \"isResizable\", \"label\", \"textareaRef\"]);\n  var hasError = !!error;\n  var classes = classNames(className, 'text-area-container', {\n    'show-error': hasError\n  });\n  var errorMessageID = React.useRef(uniqueId('errorMessage')).current;\n  var descriptionID = React.useRef(uniqueId('description')).current;\n  var ariaAttrs = {\n    'aria-invalid': hasError,\n    'aria-required': isRequired,\n    'aria-errormessage': errorMessageID,\n    'aria-describedby': description ? descriptionID : undefined\n  };\n  return React.createElement(\"div\", {\n    className: classes\n  }, React.createElement(Label, {\n    hideLabel: hideLabel,\n    showOptionalText: !hideOptionalLabel && !isRequired,\n    text: label\n  }, !!description && React.createElement(\"div\", {\n    id: descriptionID,\n    className: \"text-area-description\"\n  }, description), React.createElement(Tooltip, {\n    isShown: hasError,\n    position: errorTooltipPosition || 'bottom-left',\n    text: error || '',\n    theme: \"error\"\n  }, React.createElement(\"textarea\", _extends({\n    ref: textareaRef,\n    required: isRequired,\n    style: {\n      resize: isResizable ? '' : 'none'\n    }\n  }, ariaAttrs, rest))), React.createElement(\"span\", {\n    id: errorMessageID,\n    className: \"accessibility-hidden\",\n    role: \"alert\"\n  }, error)));\n};\nTextArea.displayName = 'TextArea';\nexport default TextArea;","map":{"version":3,"sources":["../../../src/components/text-area/TextArea.js"],"names":["React","classNames","uniqueId","Label","Tooltip","TextArea","className","description","error","errorTooltipPosition","hideLabel","hideOptionalLabel","isRequired","isResizable","label","textareaRef","rest","hasError","classes","errorMessageID","useRef","current","descriptionID","ariaAttrs","undefined","resize","displayName"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport Label from '../label';\nimport Tooltip from '../tooltip';\nimport type { Position } from '../tooltip';\n\nimport './TextArea.scss';\n\ntype Props = {\n    className?: string,\n    description?: React.Node,\n    error?: React.Node,\n    /** Renders error tooltip at the specified position (positions are those from Tooltip) */\n    errorTooltipPosition?: Position,\n    /** Hides the label */\n    hideLabel?: boolean,\n    /** Hides (optional) text from the label */\n    hideOptionalLabel?: boolean,\n    /** Makes the text area value required */\n    isRequired?: boolean,\n    /** Is text area resizable */\n    isResizable?: boolean,\n    /** Label displayed for the text area */\n    label: React.Node,\n    textareaRef?: Function, // @TODO: eventually rename to innerRef for consistancy across all form elements\n};\n\nconst TextArea = ({\n    className = '',\n    description,\n    error,\n    errorTooltipPosition,\n    hideLabel,\n    hideOptionalLabel,\n    isRequired,\n    isResizable,\n    label,\n    textareaRef,\n    ...rest\n}: Props) => {\n    const hasError = !!error;\n    const classes = classNames(className, 'text-area-container', {\n        'show-error': hasError,\n    });\n\n    const errorMessageID = React.useRef(uniqueId('errorMessage')).current;\n    const descriptionID = React.useRef(uniqueId('description')).current;\n\n    const ariaAttrs = {\n        'aria-invalid': hasError,\n        'aria-required': isRequired,\n        'aria-errormessage': errorMessageID,\n        'aria-describedby': description ? descriptionID : undefined,\n    };\n\n    return (\n        <div className={classes}>\n            <Label hideLabel={hideLabel} showOptionalText={!hideOptionalLabel && !isRequired} text={label}>\n                {!!description && (\n                    <div id={descriptionID} className=\"text-area-description\">\n                        {description}\n                    </div>\n                )}\n                <Tooltip\n                    isShown={hasError}\n                    position={errorTooltipPosition || 'bottom-left'}\n                    text={error || ''}\n                    theme=\"error\"\n                >\n                    <textarea\n                        ref={textareaRef}\n                        required={isRequired}\n                        style={{ resize: isResizable ? '' : 'none' }}\n                        {...ariaAttrs}\n                        {...rest}\n                    />\n                </Tooltip>\n                <span id={errorMessageID} className=\"accessibility-hidden\" role=\"alert\">\n                    {error}\n                </span>\n            </Label>\n        </div>\n    );\n};\n\nTextArea.displayName = 'TextArea';\n\nexport type TextAreaProps = Props;\nexport default TextArea;\n"]},"metadata":{},"sourceType":"module"}