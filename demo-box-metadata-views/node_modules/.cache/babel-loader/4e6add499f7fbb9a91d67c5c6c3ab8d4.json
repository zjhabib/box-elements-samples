{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Content Sidebar Component\n * @author Box\n */\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport uniqueid from 'lodash/uniqueId';\nimport { withRouter } from 'react-router-dom';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport LocalStore from '../../utils/LocalStore';\nimport SidebarNav from './SidebarNav';\nimport SidebarPanels from './SidebarPanels';\nimport SidebarUtils from './SidebarUtils';\nimport { withFeatureConsumer } from '../common/feature-checking';\nexport var SIDEBAR_FORCE_KEY = 'bcs.force';\nexport var SIDEBAR_FORCE_VALUE_CLOSED = 'closed';\nexport var SIDEBAR_FORCE_VALUE_OPEN = 'open';\nvar Sidebar = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Sidebar, _React$Component);\n  function Sidebar(props) {\n    var _this;\n    _classCallCheck(this, Sidebar);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sidebar).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"id\", uniqueid('bcs_'));\n    _defineProperty(_assertThisInitialized(_this), \"sidebarPanels\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"store\", new LocalStore());\n    _defineProperty(_assertThisInitialized(_this), \"getUrlPrefix\", function (pathname) {\n      var basePath = pathname.substring(1).split('/')[0];\n      return basePath;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleVersionHistoryClick\", function (event) {\n      var _this$props = _this.props,\n        file = _this$props.file,\n        history = _this$props.history;\n      var currentVersion = file.file_version;\n      var fileVersionSlug = currentVersion ? \"/\".concat(currentVersion.id) : '';\n      var urlPrefix = _this.getUrlPrefix(history.location.pathname);\n      if (event.preventDefault) {\n        event.preventDefault();\n      }\n      history.push(\"/\".concat(urlPrefix, \"/versions\").concat(fileVersionSlug));\n    });\n    _this.state = {\n      isDirty: _this.getLocationState('open') || false\n    };\n    _this.setForcedByLocation();\n    return _this;\n  }\n  _createClass(Sidebar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n        fileId = _this$props2.fileId,\n        history = _this$props2.history,\n        location = _this$props2.location;\n      var prevFileId = prevProps.fileId,\n        prevLocation = prevProps.location;\n      var isDirty = this.state.isDirty; // User navigated to a different file without ever navigating the sidebar\n\n      if (!isDirty && fileId !== prevFileId && location.pathname !== '/') {\n        history.replace({\n          pathname: '/',\n          state: {\n            silent: true\n          }\n        });\n      } // User navigated or toggled the sidebar intentionally, internally or externally\n\n      if (location !== prevLocation && !this.getLocationState('silent')) {\n        this.setForcedByLocation();\n        this.setState({\n          isDirty: true\n        });\n      }\n    }\n  }, {\n    key: \"getLocationState\",\n    /**\n     * Getter for location state properties.\n     *\n     * NOTE: Each location on the history stack has its own optional state object that is wholly separate from\n     * this component's internal state. Values on the location state object can persist even between refreshes\n     * when using certain history contexts, such as BrowserHistory.\n     *\n     * @param key - Optionally get a specific key value from state\n     * @returns {any} - The location state or state key value\n     */\n    value: function getLocationState(key) {\n      var location = this.props.location;\n      var _location$state = location.state,\n        locationState = _location$state === void 0 ? {} : _location$state;\n      return getProp(locationState, key);\n    }\n    /**\n     * Getter/setter for sidebar forced state\n     *\n     * @param isOpen - Optionally set the sidebar to open/closed\n     * @returns {string|null} - The sidebar open/closed state\n     */\n  }, {\n    key: \"isForced\",\n    value: function isForced(isOpen) {\n      if (isOpen !== undefined) {\n        this.store.setItem(SIDEBAR_FORCE_KEY, isOpen ? SIDEBAR_FORCE_VALUE_OPEN : SIDEBAR_FORCE_VALUE_CLOSED);\n      }\n      return this.store.getItem(SIDEBAR_FORCE_KEY);\n    }\n    /**\n     * Getter for whether the sidebar has been forced open\n     * @returns {boolean} - True if the sidebar has been forced open\n     */\n  }, {\n    key: \"isForcedOpen\",\n    value: function isForcedOpen() {\n      return this.isForced() === SIDEBAR_FORCE_VALUE_OPEN;\n    }\n    /**\n     * Getter for whether the sidebar has been forced open/closed previously\n     * @returns {boolean} - True if the sidebar has been forced open/closed previously\n     */\n  }, {\n    key: \"isForcedSet\",\n    value: function isForcedSet() {\n      return this.isForced() !== null;\n    }\n    /**\n     * Refreshes the sidebar panel\n     * @returns {void}\n     */\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var shouldRefreshCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var sidebarPanels = this.sidebarPanels.current;\n      if (sidebarPanels) {\n        sidebarPanels.refresh(shouldRefreshCache);\n      }\n    }\n    /**\n     * Helper to set the local store open state based on the location open state, if defined\n     */\n  }, {\n    key: \"setForcedByLocation\",\n    value: function setForcedByLocation() {\n      var isLocationOpen = this.getLocationState('open');\n      if (isLocationOpen !== undefined && isLocationOpen !== null) {\n        this.isForced(isLocationOpen);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n        activitySidebarProps = _this$props3.activitySidebarProps,\n        additionalTabs = _this$props3.additionalTabs,\n        className = _this$props3.className,\n        currentUser = _this$props3.currentUser,\n        detailsSidebarProps = _this$props3.detailsSidebarProps,\n        file = _this$props3.file,\n        fileId = _this$props3.fileId,\n        getPreview = _this$props3.getPreview,\n        getViewer = _this$props3.getViewer,\n        hasAdditionalTabs = _this$props3.hasAdditionalTabs,\n        hasVersions = _this$props3.hasVersions,\n        isDefaultOpen = _this$props3.isDefaultOpen,\n        isLoading = _this$props3.isLoading,\n        metadataEditors = _this$props3.metadataEditors,\n        metadataSidebarProps = _this$props3.metadataSidebarProps,\n        onAnnotationSelect = _this$props3.onAnnotationSelect,\n        onVersionChange = _this$props3.onVersionChange,\n        versionsSidebarProps = _this$props3.versionsSidebarProps;\n      var isOpen = this.isForcedSet() ? this.isForcedOpen() : !!isDefaultOpen;\n      var hasActivity = SidebarUtils.canHaveActivitySidebar(this.props);\n      var hasDetails = SidebarUtils.canHaveDetailsSidebar(this.props);\n      var hasMetadata = SidebarUtils.shouldRenderMetadataSidebar(this.props, metadataEditors);\n      var hasSkills = SidebarUtils.shouldRenderSkillsSidebar(this.props, file);\n      var onVersionHistoryClick = hasVersions ? this.handleVersionHistoryClick : this.props.onVersionHistoryClick;\n      var styleClassName = classNames('be bcs', className, {\n        'bcs-is-open': isOpen\n      });\n      return React.createElement(\"aside\", {\n        id: this.id,\n        className: styleClassName\n      }, isLoading ? React.createElement(\"div\", {\n        className: \"bcs-loading\"\n      }, React.createElement(LoadingIndicator, null)) : React.createElement(React.Fragment, null, React.createElement(SidebarNav, {\n        additionalTabs: additionalTabs,\n        elementId: this.id,\n        fileId: fileId,\n        hasActivity: hasActivity,\n        hasAdditionalTabs: hasAdditionalTabs,\n        hasDetails: hasDetails,\n        hasMetadata: hasMetadata,\n        hasSkills: hasSkills,\n        isOpen: isOpen\n      }), React.createElement(SidebarPanels, {\n        activitySidebarProps: activitySidebarProps,\n        currentUser: currentUser,\n        elementId: this.id,\n        detailsSidebarProps: detailsSidebarProps,\n        file: file,\n        fileId: fileId,\n        getPreview: getPreview,\n        getViewer: getViewer,\n        hasActivity: hasActivity,\n        hasDetails: hasDetails,\n        hasMetadata: hasMetadata,\n        hasSkills: hasSkills,\n        hasVersions: hasVersions,\n        isOpen: isOpen,\n        key: file.id,\n        metadataSidebarProps: metadataSidebarProps,\n        onAnnotationSelect: onAnnotationSelect,\n        onVersionChange: onVersionChange,\n        onVersionHistoryClick: onVersionHistoryClick,\n        ref: this.sidebarPanels,\n        versionsSidebarProps: versionsSidebarProps\n      })));\n    }\n  }]);\n  return Sidebar;\n}(React.Component);\n_defineProperty(Sidebar, \"defaultProps\", {\n  annotatorState: {},\n  isDefaultOpen: true,\n  isLoading: false,\n  getAnnotationsMatchPath: noop,\n  getAnnotationsPath: noop\n});\nexport { Sidebar as SidebarComponent };\nexport default flow([withFeatureConsumer, withRouter])(Sidebar);","map":{"version":3,"sources":["../../../src/elements/content-sidebar/Sidebar.js"],"names":["React","classNames","flow","getProp","noop","uniqueid","withRouter","LoadingIndicator","LocalStore","SidebarNav","SidebarPanels","SidebarUtils","withFeatureConsumer","SIDEBAR_FORCE_KEY","SIDEBAR_FORCE_VALUE_CLOSED","SIDEBAR_FORCE_VALUE_OPEN","Sidebar","Component","annotatorState","isDefaultOpen","isLoading","getAnnotationsMatchPath","getAnnotationsPath","createRef","props","state","isDirty","getLocationState","setForcedByLocation","prevProps","fileId","history","location","prevFileId","prevLocation","pathname","replace","silent","setState","basePath","substring","split","event","file","file_version","currentVersion","fileVersionSlug","id","urlPrefix","getUrlPrefix","preventDefault","push","key","locationState","isOpen","undefined","store","setItem","getItem","isForced","shouldRefreshCache","current","sidebarPanels","refresh","isLocationOpen","activitySidebarProps","additionalTabs","className","currentUser","detailsSidebarProps","getPreview","getViewer","hasAdditionalTabs","hasVersions","metadataEditors","metadataSidebarProps","onAnnotationSelect","onVersionChange","versionsSidebarProps","isForcedSet","isForcedOpen","hasActivity","canHaveActivitySidebar","hasDetails","canHaveDetailsSidebar","hasMetadata","shouldRenderMetadataSidebar","hasSkills","shouldRenderSkillsSidebar","onVersionHistoryClick","handleVersionHistoryClick","styleClassName","SidebarComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Content Sidebar Component\n * @author Box\n */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport uniqueid from 'lodash/uniqueId';\nimport { withRouter } from 'react-router-dom';\nimport type { Location, RouterHistory } from 'react-router-dom';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport LocalStore from '../../utils/LocalStore';\nimport SidebarNav from './SidebarNav';\nimport SidebarPanels from './SidebarPanels';\nimport SidebarUtils from './SidebarUtils';\nimport { withFeatureConsumer } from '../common/feature-checking';\nimport type { FeatureConfig } from '../common/feature-checking';\nimport type { ActivitySidebarProps } from './ActivitySidebar';\nimport type { DetailsSidebarProps } from './DetailsSidebar';\nimport type { MetadataSidebarProps } from './MetadataSidebar';\nimport type { VersionsSidebarProps } from './versions';\nimport type { AdditionalSidebarTab } from './flowTypes';\nimport type { MetadataEditor } from '../../common/types/metadata';\nimport type { BoxItem, User } from '../../common/types/core';\n\ntype Props = {\n    activitySidebarProps: ActivitySidebarProps,\n    additionalTabs?: Array<AdditionalSidebarTab>,\n    className: string,\n    currentUser?: User,\n    detailsSidebarProps: DetailsSidebarProps,\n    features: FeatureConfig,\n    file: BoxItem,\n    fileId: string,\n    getPreview: Function,\n    getViewer: Function,\n    hasActivityFeed: boolean,\n    hasAdditionalTabs: boolean,\n    hasMetadata: boolean,\n    hasSkills: boolean,\n    hasVersions: boolean,\n    history: RouterHistory,\n    isDefaultOpen?: boolean,\n    isLoading?: boolean,\n    location: Location,\n    metadataEditors?: Array<MetadataEditor>,\n    metadataSidebarProps: MetadataSidebarProps,\n    onAnnotationSelect?: Function,\n    onVersionChange?: Function,\n    onVersionHistoryClick?: Function,\n    versionsSidebarProps: VersionsSidebarProps,\n};\n\ntype State = {\n    isDirty: boolean,\n};\n\nexport const SIDEBAR_FORCE_KEY: 'bcs.force' = 'bcs.force';\nexport const SIDEBAR_FORCE_VALUE_CLOSED: 'closed' = 'closed';\nexport const SIDEBAR_FORCE_VALUE_OPEN: 'open' = 'open';\n\nclass Sidebar extends React.Component<Props, State> {\n    static defaultProps = {\n        annotatorState: {},\n        isDefaultOpen: true,\n        isLoading: false,\n        getAnnotationsMatchPath: noop,\n        getAnnotationsPath: noop,\n    };\n\n    id: string = uniqueid('bcs_');\n\n    props: Props;\n\n    sidebarPanels: { current: null | SidebarPanels } = React.createRef();\n\n    state: State;\n\n    store: LocalStore = new LocalStore();\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            isDirty: this.getLocationState('open') || false,\n        };\n\n        this.setForcedByLocation();\n    }\n\n    componentDidUpdate(prevProps: Props): void {\n        const { fileId, history, location }: Props = this.props;\n        const { fileId: prevFileId, location: prevLocation }: Props = prevProps;\n        const { isDirty }: State = this.state;\n\n        // User navigated to a different file without ever navigating the sidebar\n        if (!isDirty && fileId !== prevFileId && location.pathname !== '/') {\n            history.replace({ pathname: '/', state: { silent: true } });\n        }\n\n        // User navigated or toggled the sidebar intentionally, internally or externally\n        if (location !== prevLocation && !this.getLocationState('silent')) {\n            this.setForcedByLocation();\n            this.setState({ isDirty: true });\n        }\n    }\n\n    getUrlPrefix = (pathname: string) => {\n        const basePath = pathname.substring(1).split('/')[0];\n        return basePath;\n    };\n\n    /**\n     * Handle version history click\n     *\n     * @param {SyntheticEvent} event - The event\n     * @return {void}\n     */\n    handleVersionHistoryClick = (event: SyntheticEvent<>): void => {\n        const { file, history } = this.props;\n        const { file_version: currentVersion } = file;\n        const fileVersionSlug = currentVersion ? `/${currentVersion.id}` : '';\n\n        const urlPrefix = this.getUrlPrefix(history.location.pathname);\n\n        if (event.preventDefault) {\n            event.preventDefault();\n        }\n\n        history.push(`/${urlPrefix}/versions${fileVersionSlug}`);\n    };\n\n    /**\n     * Getter for location state properties.\n     *\n     * NOTE: Each location on the history stack has its own optional state object that is wholly separate from\n     * this component's internal state. Values on the location state object can persist even between refreshes\n     * when using certain history contexts, such as BrowserHistory.\n     *\n     * @param key - Optionally get a specific key value from state\n     * @returns {any} - The location state or state key value\n     */\n    getLocationState(key?: string): any {\n        const { location } = this.props;\n        const { state: locationState = {} } = location;\n        return getProp(locationState, key);\n    }\n\n    /**\n     * Getter/setter for sidebar forced state\n     *\n     * @param isOpen - Optionally set the sidebar to open/closed\n     * @returns {string|null} - The sidebar open/closed state\n     */\n    isForced(isOpen?: boolean): ?(typeof SIDEBAR_FORCE_VALUE_CLOSED | typeof SIDEBAR_FORCE_VALUE_OPEN) {\n        if (isOpen !== undefined) {\n            this.store.setItem(SIDEBAR_FORCE_KEY, isOpen ? SIDEBAR_FORCE_VALUE_OPEN : SIDEBAR_FORCE_VALUE_CLOSED);\n        }\n\n        return this.store.getItem(SIDEBAR_FORCE_KEY);\n    }\n\n    /**\n     * Getter for whether the sidebar has been forced open\n     * @returns {boolean} - True if the sidebar has been forced open\n     */\n    isForcedOpen(): boolean {\n        return this.isForced() === SIDEBAR_FORCE_VALUE_OPEN;\n    }\n\n    /**\n     * Getter for whether the sidebar has been forced open/closed previously\n     * @returns {boolean} - True if the sidebar has been forced open/closed previously\n     */\n    isForcedSet(): boolean {\n        return this.isForced() !== null;\n    }\n\n    /**\n     * Refreshes the sidebar panel\n     * @returns {void}\n     */\n    refresh(shouldRefreshCache: boolean = true): void {\n        const { current: sidebarPanels } = this.sidebarPanels;\n\n        if (sidebarPanels) {\n            sidebarPanels.refresh(shouldRefreshCache);\n        }\n    }\n\n    /**\n     * Helper to set the local store open state based on the location open state, if defined\n     */\n    setForcedByLocation(): void {\n        const isLocationOpen: ?boolean = this.getLocationState('open');\n\n        if (isLocationOpen !== undefined && isLocationOpen !== null) {\n            this.isForced(isLocationOpen);\n        }\n    }\n\n    render() {\n        const {\n            activitySidebarProps,\n            additionalTabs,\n            className,\n            currentUser,\n            detailsSidebarProps,\n            file,\n            fileId,\n            getPreview,\n            getViewer,\n            hasAdditionalTabs,\n            hasVersions,\n            isDefaultOpen,\n            isLoading,\n            metadataEditors,\n            metadataSidebarProps,\n            onAnnotationSelect,\n            onVersionChange,\n            versionsSidebarProps,\n        }: Props = this.props;\n        const isOpen = this.isForcedSet() ? this.isForcedOpen() : !!isDefaultOpen;\n        const hasActivity = SidebarUtils.canHaveActivitySidebar(this.props);\n        const hasDetails = SidebarUtils.canHaveDetailsSidebar(this.props);\n        const hasMetadata = SidebarUtils.shouldRenderMetadataSidebar(this.props, metadataEditors);\n        const hasSkills = SidebarUtils.shouldRenderSkillsSidebar(this.props, file);\n        const onVersionHistoryClick = hasVersions ? this.handleVersionHistoryClick : this.props.onVersionHistoryClick;\n        const styleClassName = classNames('be bcs', className, {\n            'bcs-is-open': isOpen,\n        });\n\n        return (\n            <aside id={this.id} className={styleClassName}>\n                {isLoading ? (\n                    <div className=\"bcs-loading\">\n                        <LoadingIndicator />\n                    </div>\n                ) : (\n                    <>\n                        <SidebarNav\n                            additionalTabs={additionalTabs}\n                            elementId={this.id}\n                            fileId={fileId}\n                            hasActivity={hasActivity}\n                            hasAdditionalTabs={hasAdditionalTabs}\n                            hasDetails={hasDetails}\n                            hasMetadata={hasMetadata}\n                            hasSkills={hasSkills}\n                            isOpen={isOpen}\n                        />\n                        <SidebarPanels\n                            activitySidebarProps={activitySidebarProps}\n                            currentUser={currentUser}\n                            elementId={this.id}\n                            detailsSidebarProps={detailsSidebarProps}\n                            file={file}\n                            fileId={fileId}\n                            getPreview={getPreview}\n                            getViewer={getViewer}\n                            hasActivity={hasActivity}\n                            hasDetails={hasDetails}\n                            hasMetadata={hasMetadata}\n                            hasSkills={hasSkills}\n                            hasVersions={hasVersions}\n                            isOpen={isOpen}\n                            key={file.id}\n                            metadataSidebarProps={metadataSidebarProps}\n                            onAnnotationSelect={onAnnotationSelect}\n                            onVersionChange={onVersionChange}\n                            onVersionHistoryClick={onVersionHistoryClick}\n                            ref={this.sidebarPanels}\n                            versionsSidebarProps={versionsSidebarProps}\n                        />\n                    </>\n                )}\n            </aside>\n        );\n    }\n}\n\nexport { Sidebar as SidebarComponent };\nexport default flow([withFeatureConsumer, withRouter])(Sidebar);\n"]},"metadata":{},"sourceType":"module"}