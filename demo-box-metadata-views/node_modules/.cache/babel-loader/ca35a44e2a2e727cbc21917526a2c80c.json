{"ast":null,"code":"import sha1 from 'js-sha1';\n/**\n * \n * @file Wrapper to provide a consistent interface for the webcrypto API\n * @author Box\n */\n\n/**\n * Returns the correct crypto library based on browser implementation\n *\n * @return {Object}\n */\n\nfunction getCrypto() {\n  return window.crypto || window.msCrypto;\n}\n/**\n * Returns a Promise of a digest generated from the\n * hash function and text given as parameters\n *\n * @param {string} algorithm\n * @param {ArrayBuffer} buffer\n * @return {Promise} Promise - resolves with an ArrayBuffer containing the digest result\n */\n\nfunction digest(algorithm, buffer) {\n  var cryptoRef = getCrypto();\n  if (cryptoRef !== window.msCrypto) {\n    return cryptoRef.subtle.digest(algorithm, buffer);\n  } // IE11 implements an early version of the SubtleCrypto interface which doesn't use Promises\n  // See http://web-developer-articles.blogspot.com/2015/05/web-cryptography-api.html\n\n  return new Promise(function (resolve, reject) {\n    // Microsoft has dropped support for SHA-1 and so SHA-1 needs to be calculated differently\n    if (algorithm === 'SHA-1') {\n      try {\n        var hashBuffer = sha1.arrayBuffer(buffer);\n        resolve(hashBuffer);\n      } catch (e) {\n        reject(e);\n      }\n    } else {\n      var cryptoOperation = cryptoRef.subtle.digest({\n        name: algorithm\n      }, buffer);\n      cryptoOperation.oncomplete = function (event) {\n        resolve(event.target.result);\n      };\n      cryptoOperation.onerror = reject;\n    }\n  });\n}\n/**\n * Given a buffer/byteArray fills it with random values and returns the same array\n *\n * @param {Uint8Array} buffer\n * @return {Uint8Array}\n */\n\nfunction getRandomValues(buffer) {\n  var cryptoRef = getCrypto();\n  var copy = new Uint8Array(buffer);\n  cryptoRef.getRandomValues(copy);\n  return copy;\n}\nexport { getCrypto, digest, getRandomValues };","map":{"version":3,"sources":["../../src/utils/webcrypto.js"],"names":["sha1","getCrypto","window","crypto","msCrypto","digest","algorithm","buffer","cryptoRef","subtle","Promise","resolve","reject","hashBuffer","arrayBuffer","e","cryptoOperation","name","oncomplete","event","target","result","onerror","getRandomValues","copy","Uint8Array"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA;;;;;;AAMA;;;;;;AAKA,SAASC,SAAT,CAAA,EAA6B;EACzB,OAAOC,MAAM,CAACC,MAAPD,IAAiBA,MAAM,CAACE,QAA/B;AACH;AAED;;;;;;;;;AAQA,SAASC,MAAT,CAAgBC,SAAhB,EAAmCC,MAAnC,EAA8E;EAC1E,IAAMC,SAAS,GAAGP,SAAS,CAAA,CAA3B;EAEA,IAAIO,SAAS,KAAKN,MAAM,CAACE,QAAzB,EAAmC;IAC/B,OAAOI,SAAS,CAACC,MAAVD,CAAiBH,MAAjBG,CAAwBF,SAAxBE,EAAmCD,MAAnCC,CAAP;EACH,CALyE,CAO1E;EACA;;EACA,OAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACpC;IACA,IAAIN,SAAS,KAAK,OAAlB,EAA2B;MACvB,IAAI;QACA,IAAMO,UAAU,GAAGb,IAAI,CAACc,WAALd,CAAiBO,MAAjBP,CAAnB;QACAW,OAAO,CAACE,UAAD,CAAPF;MACH,CAHD,CAGE,OAAOI,CAAP,EAAU;QACRH,MAAM,CAACG,CAAD,CAANH;MACH;IACJ,CAPD,MAOO;MACH,IAAMI,eAAe,GAAG,SAAS,CAACP,MAAV,CAAiBJ,MAAjB,CAAwB;QAAEY,IAAI,EAAEX;MAAR,CAAxB,EAA6CC,MAA7C,CAAxB;MAEAS,eAAe,CAACE,UAAhBF,GAA6B,UAAA,KAAK,EAAI;QAClCL,OAAO,CAACQ,KAAK,CAACC,MAAND,CAAaE,MAAd,CAAPV;MACH,CAFDK;MAGAA,eAAe,CAACM,OAAhBN,GAA0BJ,MAA1BI;IACH;EACJ,CAjBM,CAAP;AAkBH;AAED;;;;;;;AAMA,SAASO,eAAT,CAAyBhB,MAAzB,EAAyD;EACrD,IAAMC,SAAS,GAAGP,SAAS,CAAA,CAA3B;EACA,IAAMuB,IAAI,GAAG,IAAIC,UAAJ,CAAelB,MAAf,CAAb;EACAC,SAAS,CAACe,eAAVf,CAA0BgB,IAA1BhB,CAAAA;EAEA,OAAOgB,IAAP;AACH;AAED,SAASvB,SAAT,EAAoBI,MAApB,EAA4BkB,eAA5B","sourcesContent":["import sha1 from 'js-sha1';\n/**\n * @flow\n * @file Wrapper to provide a consistent interface for the webcrypto API\n * @author Box\n */\n\n/**\n * Returns the correct crypto library based on browser implementation\n *\n * @return {Object}\n */\nfunction getCrypto(): Object {\n    return window.crypto || window.msCrypto;\n}\n\n/**\n * Returns a Promise of a digest generated from the\n * hash function and text given as parameters\n *\n * @param {string} algorithm\n * @param {ArrayBuffer} buffer\n * @return {Promise} Promise - resolves with an ArrayBuffer containing the digest result\n */\nfunction digest(algorithm: string, buffer: ArrayBuffer): Promise<ArrayBuffer> {\n    const cryptoRef = getCrypto();\n\n    if (cryptoRef !== window.msCrypto) {\n        return cryptoRef.subtle.digest(algorithm, buffer);\n    }\n\n    // IE11 implements an early version of the SubtleCrypto interface which doesn't use Promises\n    // See http://web-developer-articles.blogspot.com/2015/05/web-cryptography-api.html\n    return new Promise((resolve, reject) => {\n        // Microsoft has dropped support for SHA-1 and so SHA-1 needs to be calculated differently\n        if (algorithm === 'SHA-1') {\n            try {\n                const hashBuffer = sha1.arrayBuffer(buffer);\n                resolve(hashBuffer);\n            } catch (e) {\n                reject(e);\n            }\n        } else {\n            const cryptoOperation = cryptoRef.subtle.digest({ name: algorithm }, buffer);\n\n            cryptoOperation.oncomplete = event => {\n                resolve(event.target.result);\n            };\n            cryptoOperation.onerror = reject;\n        }\n    });\n}\n\n/**\n * Given a buffer/byteArray fills it with random values and returns the same array\n *\n * @param {Uint8Array} buffer\n * @return {Uint8Array}\n */\nfunction getRandomValues(buffer: Uint8Array): Uint8Array {\n    const cryptoRef = getCrypto();\n    const copy = new Uint8Array(buffer);\n    cryptoRef.getRandomValues(copy);\n\n    return copy;\n}\n\nexport { getCrypto, digest, getRandomValues };\n"]},"metadata":{},"sourceType":"module"}