{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n/**\n * \n * @file Versions Menu component\n * @author Box\n */\nimport React from 'react';\nimport last from 'lodash/last';\nimport { injectIntl } from 'react-intl';\nimport * as util from '../../../utils/datetime';\nimport messages from './messages';\nimport VersionsGroup from './VersionsGroup';\nimport './VersionsMenu.scss';\nvar getHeading = function getHeading(_ref) {\n  var intl = _ref.intl,\n    version = _ref.version;\n  var createdAt = version.created_at;\n  var currentDate = new Date();\n  var currentDay = currentDate.getDay();\n  var currentSunday = currentDate.getDate() - currentDay;\n  var createdAtDate = util.convertToDate(createdAt);\n  var heading;\n  if (util.isToday(createdAtDate)) {\n    heading = intl.formatMessage(messages.versionsToday); // Today\n  } else if (util.isYesterday(createdAtDate)) {\n    heading = intl.formatMessage(messages.versionsYesterday); // Yesterday\n  } else if (!util.isCurrentYear(createdAtDate)) {\n    heading = intl.formatDate(createdAt, {\n      year: 'numeric'\n    }); // 2018\n  } else if (!util.isCurrentMonth(createdAtDate)) {\n    heading = intl.formatDate(createdAt, {\n      month: 'long'\n    }); // January\n  } else if (createdAtDate.getDate() <= currentSunday - 7) {\n    heading = intl.formatMessage(messages.versionsThisMonth); // This Month\n  } else if (createdAtDate.getDate() <= currentSunday) {\n    heading = intl.formatMessage(messages.versionsPriorWeek); // Last Week\n  } else {\n    heading = intl.formatDate(createdAt, {\n      weekday: 'long'\n    }); // Monday\n  }\n\n  return heading;\n};\nvar VersionsMenu = React.memo(function (_ref2) {\n  var intl = _ref2.intl,\n    versions = _ref2.versions,\n    rest = _objectWithoutProperties(_ref2, [\"intl\", \"versions\"]);\n  var _ref3 = versions[0] || {},\n    currentId = _ref3.id; // Build an ordered set of groups with headings based on the original order of the versions array\n\n  var versionGroups = versions.reduce(function (groups, version) {\n    var currentGroup = last(groups);\n    var groupHeading = getHeading({\n      intl: intl,\n      version: version\n    }); // Push a new group if there are no groups or if the heading has changed\n\n    if (!currentGroup || currentGroup.groupHeading !== groupHeading) {\n      groups.push({\n        groupHeading: groupHeading,\n        groupVersions: []\n      });\n    } // Push the sorted version to the newest group's versions collection\n\n    last(groups).groupVersions.push(version);\n    return groups;\n  }, []);\n  return React.createElement(\"ul\", {\n    className: \"bcs-VersionsMenu\"\n  }, versionGroups.map(function (_ref4) {\n    var groupHeading = _ref4.groupHeading,\n      groupVersions = _ref4.groupVersions;\n    return React.createElement(\"li\", {\n      className: \"bcs-VersionsMenu-item\",\n      key: groupHeading\n    }, React.createElement(VersionsGroup, _extends({\n      currentId: currentId,\n      heading: groupHeading,\n      versions: groupVersions\n    }, rest)));\n  }));\n});\nexport default injectIntl(VersionsMenu);","map":{"version":3,"sources":["../../../../src/elements/content-sidebar/versions/VersionsMenu.js"],"names":["React","last","injectIntl","util","messages","VersionsGroup","getHeading","intl","version","created_at","createdAt","currentDate","Date","currentDay","getDay","currentSunday","getDate","createdAtDate","convertToDate","heading","isToday","formatMessage","versionsToday","isYesterday","versionsYesterday","isCurrentYear","formatDate","year","isCurrentMonth","month","versionsThisMonth","versionsPriorWeek","weekday","VersionsMenu","memo","versions","rest","id","currentId","versionGroups","reduce","groups","currentGroup","groupHeading","push","groupVersions","map"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Versions Menu component\n * @author Box\n */\n\nimport React from 'react';\nimport last from 'lodash/last';\nimport { injectIntl } from 'react-intl';\nimport * as util from '../../../utils/datetime';\nimport messages from './messages';\nimport VersionsGroup from './VersionsGroup';\nimport type { BoxItemVersion } from '../../../common/types/core';\nimport './VersionsMenu.scss';\n\ntype Props = {\n    fileId: string,\n    intl: any,\n    versionCount: number,\n    versionLimit: number,\n    versions: Array<BoxItemVersion>,\n};\n\ntype VersionGroups = Array<{ groupHeading: string, groupVersions: Array<BoxItemVersion> }>;\n\nconst getHeading = ({ intl, version }: { intl: any, version: BoxItemVersion }): string => {\n    const { created_at: createdAt } = version;\n    const currentDate = new Date();\n    const currentDay = currentDate.getDay();\n    const currentSunday = currentDate.getDate() - currentDay;\n    const createdAtDate = util.convertToDate(createdAt);\n    let heading;\n\n    if (util.isToday(createdAtDate)) {\n        heading = intl.formatMessage(messages.versionsToday); // Today\n    } else if (util.isYesterday(createdAtDate)) {\n        heading = intl.formatMessage(messages.versionsYesterday); // Yesterday\n    } else if (!util.isCurrentYear(createdAtDate)) {\n        heading = intl.formatDate(createdAt, { year: 'numeric' }); // 2018\n    } else if (!util.isCurrentMonth(createdAtDate)) {\n        heading = intl.formatDate(createdAt, { month: 'long' }); // January\n    } else if (createdAtDate.getDate() <= currentSunday - 7) {\n        heading = intl.formatMessage(messages.versionsThisMonth); // This Month\n    } else if (createdAtDate.getDate() <= currentSunday) {\n        heading = intl.formatMessage(messages.versionsPriorWeek); // Last Week\n    } else {\n        heading = intl.formatDate(createdAt, { weekday: 'long' }); // Monday\n    }\n\n    return heading;\n};\n\nconst VersionsMenu = React.memo<Props>(({ intl, versions, ...rest }: Props) => {\n    const { id: currentId } = versions[0] || {};\n\n    // Build an ordered set of groups with headings based on the original order of the versions array\n    const versionGroups = versions.reduce((groups: VersionGroups, version: BoxItemVersion): VersionGroups => {\n        const currentGroup = last(groups);\n        const groupHeading = getHeading({ intl, version });\n\n        // Push a new group if there are no groups or if the heading has changed\n        if (!currentGroup || currentGroup.groupHeading !== groupHeading) {\n            groups.push({\n                groupHeading,\n                groupVersions: [],\n            });\n        }\n\n        // Push the sorted version to the newest group's versions collection\n        last(groups).groupVersions.push(version);\n        return groups;\n    }, []);\n\n    return (\n        <ul className=\"bcs-VersionsMenu\">\n            {versionGroups.map(({ groupHeading, groupVersions }) => (\n                <li className=\"bcs-VersionsMenu-item\" key={groupHeading}>\n                    <VersionsGroup currentId={currentId} heading={groupHeading} versions={groupVersions} {...rest} />\n                </li>\n            ))}\n        </ul>\n    );\n});\n\nexport default injectIntl(VersionsMenu);\n"]},"metadata":{},"sourceType":"module"}