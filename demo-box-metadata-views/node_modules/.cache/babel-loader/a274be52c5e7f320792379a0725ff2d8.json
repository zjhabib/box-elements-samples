{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from './messages'; // $FlowFixMe LabelPill is in typescript\n\nimport LabelPill from '../../../../components/label-pill';\nimport { ReadableTime } from '../../../../components/time';\nimport { TASK_NEW_NOT_STARTED } from '../../../../constants';\nvar TaskDueDate = function TaskDueDate(_ref) {\n  var dueDate = _ref.dueDate,\n    status = _ref.status;\n  var isOverdue = dueDate ? status === TASK_NEW_NOT_STARTED && new Date(dueDate) < Date.now() : false;\n  var fullDueDate = new Date(dueDate);\n  var pillProps = isOverdue ? {\n    'data-testid': 'task-overdue-date',\n    type: 'error'\n  } : {\n    type: 'default'\n  };\n  return React.createElement(\"div\", {\n    \"data-testid\": \"task-due-date\"\n  }, React.createElement(LabelPill.Pill, pillProps, React.createElement(LabelPill.Text, null, React.createElement(FormattedMessage, _extends({}, messages.taskFeedStatusDue, {\n    values: {\n      dateTime: React.createElement(ReadableTime, {\n        alwaysShowTime: true,\n        uppercase: true,\n        timestamp: fullDueDate.getTime()\n      })\n    }\n  })))));\n};\nexport default TaskDueDate;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/TaskDueDate.js"],"names":["React","FormattedMessage","messages","LabelPill","ReadableTime","TASK_NEW_NOT_STARTED","TaskDueDate","dueDate","status","isOverdue","Date","now","fullDueDate","pillProps","type","taskFeedStatusDue","dateTime","getTime"],"mappings":";;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,oBAAT,QAAqC,uBAArC;AAUA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAA4C;EAAA,IAAzCC,OAAyC,GAAA,IAAA,CAAzCA,OAAyC;IAAhCC,MAAgC,GAAA,IAAA,CAAhCA,MAAgC;EAC5D,IAAMC,SAAS,GAAGF,OAAO,GAAGC,MAAM,KAAKH,oBAAXG,IAAmC,IAAIE,IAAJ,CAASH,OAAT,CAAA,GAAoBG,IAAI,CAACC,GAALD,CAAAA,CAA1D,GAAuE,KAAhG;EACA,IAAME,WAAW,GAAG,IAAIF,IAAJ,CAASH,OAAT,CAApB;EACA,IAAMM,SAAS,GAAGJ,SAAS,GAAG;IAAE,aAAA,EAAe,mBAAjB;IAAsCK,IAAI,EAAE;EAA5C,CAAH,GAA2D;IAAEA,IAAI,EAAE;EAAR,CAAtF;EACA,OACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,aAAA,EAAY;EAAjB,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,SAAD,CAAW,IAAX,EAAoBD,SAApB,EACI,KAAA,CAAA,aAAA,CAAC,SAAD,CAAW,IAAX,EAAA,IAAA,EACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACQX,QAAQ,CAACa,iBADjB,EAAA;IAEI,MAAM,EAAE;MACJC,QAAQ,EAAE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA;QAAc,cAAc,EAAA,IAA5B;QAA6B,SAAS,EAAA,IAAtC;QAAuC,SAAS,EAAEJ,WAAW,CAACK,OAAZL,CAAAA;MAAlD,CAAA;IADN;EAFZ,CAAA,CAAA,CADJ,CADJ,CADJ,CADJ;AAcH,CAlBD;AAoBA,eAAeN,WAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from './messages';\n// $FlowFixMe LabelPill is in typescript\nimport LabelPill from '../../../../components/label-pill';\nimport { ReadableTime } from '../../../../components/time';\nimport { TASK_NEW_NOT_STARTED } from '../../../../constants';\n\nimport type { TaskStatus } from '../../../../common/types/tasks';\nimport type { ISODate } from '../../../../common/types/core';\n\ntype Props = {\n    dueDate: ISODate,\n    status: TaskStatus,\n};\n\nconst TaskDueDate = ({ dueDate, status }: Props): React.Node => {\n    const isOverdue = dueDate ? status === TASK_NEW_NOT_STARTED && new Date(dueDate) < Date.now() : false;\n    const fullDueDate = new Date(dueDate);\n    const pillProps = isOverdue ? { 'data-testid': 'task-overdue-date', type: 'error' } : { type: 'default' };\n    return (\n        <div data-testid=\"task-due-date\">\n            <LabelPill.Pill {...pillProps}>\n                <LabelPill.Text>\n                    <FormattedMessage\n                        {...messages.taskFeedStatusDue}\n                        values={{\n                            dateTime: <ReadableTime alwaysShowTime uppercase timestamp={fullDueDate.getTime()} />,\n                        }}\n                    />\n                </LabelPill.Text>\n            </LabelPill.Pill>\n        </div>\n    );\n};\n\nexport default TaskDueDate;\n"]},"metadata":{},"sourceType":"module"}