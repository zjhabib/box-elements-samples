{"ast":null,"code":"/**\n * Gets a cookie by name\n *\n * @param {string} name Cookie name.\n * @returns {string} Cookie value\n */\nfunction get(name) {\n  var _window = window,\n    document = _window.document;\n  var cookies = document.cookie.split('; ');\n  var len = cookies.length;\n  var pair;\n  var i;\n  for (i = 0; i < len; i += 1) {\n    pair = cookies[i].split('=');\n    if (pair[0] === name) {\n      if (pair[1]) {\n        // Internet Explorer doesn't set a = on empty cookie values, therefore pair[1] is undefined\n        return decodeURIComponent(pair[1]);\n      }\n      return '';\n    }\n  }\n  return '';\n}\n/**\n * Sets a cookie. The name and value are required, and all other params have default values.\n * It is recommended to use the default values unless you have a specific reason to override them.\n *\n * @param {string} name - Cookie name.\n * @param {mixed} value - Cookie value.\n * @param {int} expires - (Optional) Expiration date in UNIX time. Defaults to 2 months in the future. 0 for session cookies.\n * @param {string} path - (Optional) Cookie path. Defaults to the root path '/'.\n * @param {string} domain - (Optional) Cookie domain. Defaults to the cookie_domain used server-side.\n * @returns {void}\n */\n\nfunction set(name, value, expires) {\n  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';\n  var domain = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  var _window2 = window,\n    document = _window2.document;\n  var expiresDate = new Date();\n  var cookie = [];\n  if (typeof expires === 'undefined') {\n    expires = expiresDate.getTime() + 1000 * 3600 * 24 * 60; // two months;\n  }\n\n  expiresDate.setTime(expires);\n  cookie.push(\"\".concat(name, \"=\").concat(encodeURIComponent(value)));\n  if (expires !== 0) {\n    // do not add \"expires\" when creating a session cookie\n    cookie.push(\"; expires=\".concat(expiresDate.toUTCString()));\n  }\n  cookie.push(\"; path=\".concat(path));\n  if (domain) {\n    cookie.push(\"; domain=\".concat(domain));\n  }\n  cookie.push('; secure');\n  document.cookie = cookie.join('');\n}\n/**\n * Deletes a cookie by name.\n *\n * @param {string} name Cookie name.\n * @returns {void}\n */\n\nfunction remove(name) {\n  set(name, '', new Date(0).getTime());\n}\n/**\n * Checks if cookies are enabled for this browser\n * This is useful when treating Box as a 3rd party (iframed)\n * @returns {boolean} True if cookies are enabled, false if not.\n */\n\nfunction isEnabled() {\n  var _window3 = window,\n    document = _window3.document;\n  var theCookie = document.cookie;\n  return !!(theCookie && theCookie.length > 0);\n}\nexport { get, isEnabled, remove, set };","map":{"version":3,"sources":["../../../src/api/box-edit/cookies.js"],"names":["get","name","document","window","cookies","cookie","split","len","length","pair","i","decodeURIComponent","set","value","expires","path","domain","expiresDate","Date","getTime","setTime","push","encodeURIComponent","toUTCString","join","remove","isEnabled","theCookie"],"mappings":"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","sourcesContent":["// @flow\n\n/**\n * Gets a cookie by name\n *\n * @param {string} name Cookie name.\n * @returns {string} Cookie value\n */\n\nfunction get(name: string): string {\n    const { document } = window;\n    const cookies = document.cookie.split('; ');\n    const len = cookies.length;\n\n    let pair;\n    let i;\n\n    for (i = 0; i < len; i += 1) {\n        pair = cookies[i].split('=');\n\n        if (pair[0] === name) {\n            if (pair[1]) {\n                // Internet Explorer doesn't set a = on empty cookie values, therefore pair[1] is undefined\n                return decodeURIComponent(pair[1]);\n            }\n            return '';\n        }\n    }\n\n    return '';\n}\n\n/**\n * Sets a cookie. The name and value are required, and all other params have default values.\n * It is recommended to use the default values unless you have a specific reason to override them.\n *\n * @param {string} name - Cookie name.\n * @param {mixed} value - Cookie value.\n * @param {int} expires - (Optional) Expiration date in UNIX time. Defaults to 2 months in the future. 0 for session cookies.\n * @param {string} path - (Optional) Cookie path. Defaults to the root path '/'.\n * @param {string} domain - (Optional) Cookie domain. Defaults to the cookie_domain used server-side.\n * @returns {void}\n */\nfunction set(name: string, value: any, expires: number, path: string = '/', domain: string = '') {\n    const { document } = window;\n    const expiresDate = new Date();\n    const cookie = [];\n\n    if (typeof expires === 'undefined') {\n        expires = expiresDate.getTime() + 1000 * 3600 * 24 * 60; // two months;\n    }\n    expiresDate.setTime(expires);\n\n    cookie.push(`${name}=${encodeURIComponent(value)}`);\n    if (expires !== 0) {\n        // do not add \"expires\" when creating a session cookie\n        cookie.push(`; expires=${expiresDate.toUTCString()}`);\n    }\n    cookie.push(`; path=${path}`);\n\n    if (domain) {\n        cookie.push(`; domain=${domain}`);\n    }\n\n    cookie.push('; secure');\n\n    document.cookie = cookie.join('');\n}\n\n/**\n * Deletes a cookie by name.\n *\n * @param {string} name Cookie name.\n * @returns {void}\n */\nfunction remove(name: string): void {\n    set(name, '', new Date(0).getTime());\n}\n\n/**\n * Checks if cookies are enabled for this browser\n * This is useful when treating Box as a 3rd party (iframed)\n * @returns {boolean} True if cookies are enabled, false if not.\n */\nfunction isEnabled(): boolean {\n    const { document } = window;\n    const theCookie = document.cookie;\n    return !!(theCookie && theCookie.length > 0);\n}\n\nexport { get, isEnabled, remove, set };\n"]},"metadata":{},"sourceType":"module"}