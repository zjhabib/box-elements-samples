{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\n/**\n * \n * @file class for Box offset based API's to inherit common functionality from\n * @author Box\n */\nimport { getTypedFileId } from '../utils/file';\nimport Base from './Base';\nimport { DEFAULT_FETCH_START, DEFAULT_FETCH_END } from '../constants';\nvar OffsetBasedApi = /*#__PURE__*/\nfunction (_Base) {\n  _inherits(OffsetBasedApi, _Base);\n  function OffsetBasedApi() {\n    _classCallCheck(this, OffsetBasedApi);\n    return _possibleConstructorReturn(this, _getPrototypeOf(OffsetBasedApi).apply(this, arguments));\n  }\n  _createClass(OffsetBasedApi, [{\n    key: \"getQueryParameters\",\n    /**\n     * @property {Data}\n     */\n\n    /**\n     * Gets query params for the API\n     *\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @return the query params object\n     */\n    value: function getQueryParameters(offset, limit, fields) {\n      var queryParams = {\n        offset: offset,\n        limit: limit\n      };\n      if (fields && fields.length > 0) {\n        queryParams.fields = fields.toString();\n      }\n      return queryParams;\n    }\n    /**\n     * Determines if the API has more items to fetch\n     *\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} totalCount the total number of items\n     * @return {boolean} true if there are more items\n     */\n  }, {\n    key: \"hasMoreItems\",\n    value: function hasMoreItems(offset, totalCount) {\n      return totalCount === undefined || offset < totalCount;\n    }\n    /**\n     * Helper for get\n     *\n     * @param {string} id the file id\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling the sucessCallback\n     * @private\n     */\n  }, {\n    key: \"offsetGetRequest\",\n    value: function () {\n      var _offsetGetRequest = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id, offset, limit, shouldFetchAll, fields) {\n        var params, url, _ref, data, entries, totalCount, nextOffset;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.isDestroyed()) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 2:\n                _context.prev = 2;\n                params = this.getQueryParameters(offset, limit, fields);\n                url = this.getUrl(id);\n                _context.next = 7;\n                return this.xhr.get({\n                  url: url,\n                  id: getTypedFileId(id),\n                  params: params\n                });\n              case 7:\n                _ref = _context.sent;\n                data = _ref.data;\n                entries = this.data ? this.data.entries : [];\n                this.data = _objectSpread({}, data, {\n                  entries: entries.concat(data.entries)\n                });\n                totalCount = data.total_count;\n                nextOffset = offset + limit;\n                if (!(shouldFetchAll && this.hasMoreItems(nextOffset, totalCount))) {\n                  _context.next = 16;\n                  break;\n                }\n                this.offsetGetRequest(id, nextOffset, limit, shouldFetchAll, fields);\n                return _context.abrupt(\"return\");\n              case 16:\n                this.successHandler(this.data);\n                _context.next = 22;\n                break;\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](2);\n                this.errorHandler(_context.t0);\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 19]]);\n      }));\n      function offsetGetRequest(_x, _x2, _x3, _x4, _x5) {\n        return _offsetGetRequest.apply(this, arguments);\n      }\n      return offsetGetRequest;\n    }()\n    /**\n     * Offset based API get\n     *\n     * @param {string} id the file id\n     * @param {Function} successCallback the success callback\n     * @param {Function} errorCallback the error callback\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling the sucessCallback\n     */\n  }, {\n    key: \"offsetGet\",\n    value: function () {\n      var _offsetGet = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(id, successCallback, errorCallback) {\n        var offset,\n          limit,\n          fields,\n          shouldFetchAll,\n          _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                offset = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : DEFAULT_FETCH_START;\n                limit = _args2.length > 4 && _args2[4] !== undefined ? _args2[4] : DEFAULT_FETCH_END;\n                fields = _args2.length > 5 ? _args2[5] : undefined;\n                shouldFetchAll = _args2.length > 6 && _args2[6] !== undefined ? _args2[6] : true;\n                this.successCallback = successCallback;\n                this.errorCallback = errorCallback;\n                return _context2.abrupt(\"return\", this.offsetGetRequest(id, offset, limit, shouldFetchAll, fields));\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function offsetGet(_x6, _x7, _x8) {\n        return _offsetGet.apply(this, arguments);\n      }\n      return offsetGet;\n    }()\n  }]);\n  return OffsetBasedApi;\n}(Base);\nexport default OffsetBasedApi;","map":{"version":3,"sources":["../../src/api/OffsetBasedAPI.js"],"names":["getTypedFileId","Base","DEFAULT_FETCH_START","DEFAULT_FETCH_END","OffsetBasedApi","offset","limit","fields","queryParams","length","toString","totalCount","undefined","id","shouldFetchAll","isDestroyed","params","getQueryParameters","url","getUrl","data","xhr","get","entries","concat","total_count","nextOffset","hasMoreItems","offsetGetRequest","successHandler","errorHandler","successCallback","errorCallback"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,SAASA,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,cAAvD;IAcMC,c;;;;;;;;;IACF;;;;IAKA;;;;;;;;uCAQmBC,M,EAAgBC,K,EAAeC,M,EAAgC;MAC9E,IAAMC,WAAmB,GAAG;QACxBH,MAAM,EAANA,MADwB;QAExBC,KAAK,EAALA;MAFwB,CAA5B;MAKA,IAAIC,MAAM,IAAIA,MAAM,CAACE,MAAPF,GAAgB,CAA9B,EAAiC;QAC7BC,WAAW,CAACD,MAAZC,GAAqBD,MAAM,CAACG,QAAPH,CAAAA,CAArBC;MACH;MAED,OAAOA,WAAP;IACH;IAED;;;;;;;;;iCAOaH,M,EAAgBM,U,EAA8B;MACvD,OAAOA,UAAU,KAAKC,SAAfD,IAA4BN,MAAM,GAAGM,UAA5C;IACH;IAED;;;;;;;;;;;;;;gDAWIE,E,EACAR,M,EACAC,K,EACAQ,c,EACAP,M;;;;;;qBAEI,IAAA,CAAKQ,WAAL,CAAA,C;;;;;;;gBAMMC,M,GAAS,IAAA,CAAKC,kBAAL,CAAwBZ,MAAxB,EAAgCC,KAAhC,EAAuCC,MAAvC,C;gBACTW,G,GAAM,IAAA,CAAKC,MAAL,CAAYN,EAAZ,C;;uBAE2B,IAAA,CAAKQ,GAAL,CAASC,GAAT,CAAa;kBAChDJ,GAAG,EAAHA,GADgD;kBAEhDL,EAAE,EAAEb,cAAc,CAACa,EAAD,CAF8B;kBAGhDG,MAAM,EAANA;gBAHgD,CAAb,C;;;gBAA/BI,I,QAAAA,I;gBAMFG,O,GAAU,IAAA,CAAKH,IAAL,GAAY,IAAA,CAAKA,IAAL,CAAUG,OAAtB,GAAgC,E;gBAChD,IAAA,CAAKH,IAAL,GAAA,aAAA,CAAA,CAAA,CAAA,EACOA,IADP,EAAA;kBAEIG,OAAO,EAAEA,OAAO,CAACC,MAARD,CAAeH,IAAI,CAACG,OAApBA;gBAFb,CAAA,CAAA;gBAIMZ,U,GAAaS,IAAI,CAACK,W;gBAClBC,U,GAAarB,MAAM,GAAGC,K;sBACxBQ,cAAc,IAAI,IAAA,CAAKa,YAAL,CAAkBD,UAAlB,EAA8Bf,UAA9B,C;;;;gBAClB,IAAA,CAAKiB,gBAAL,CAAsBf,EAAtB,EAA0Ba,UAA1B,EAAsCpB,KAAtC,EAA6CQ,cAA7C,EAA6DP,MAA7D,CAAA;;;gBAIJ,IAAA,CAAKsB,cAAL,CAAoB,IAAA,CAAKT,IAAzB,CAAA;;;;;;gBAEA,IAAA,CAAKU,YAAL,CAAA,QAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;IAIR;;;;;;;;;;;;;;;iDAYIjB,E,EACAkB,e,EACAC,a;;;;;;;;;;gBACA3B,M,8DAAiBH,mB;gBACjBI,K,8DAAgBH,iB;gBAChBI,M;gBACAO,c,8DAA0B,I;gBAE1B,IAAA,CAAKiB,eAAL,GAAuBA,eAAvB;gBACA,IAAA,CAAKC,aAAL,GAAqBA,aAArB;kDAEO,IAAA,CAAKJ,gBAAL,CAAsBf,EAAtB,EAA0BR,MAA1B,EAAkCC,KAAlC,EAAyCQ,cAAzC,EAAyDP,MAAzD,C;;;;;;;;;;;;;;;EA/GcN,I;AAmH7B,eAAeG,cAAf","sourcesContent":["/**\n * @flow\n * @file class for Box offset based API's to inherit common functionality from\n * @author Box\n */\nimport { getTypedFileId } from '../utils/file';\nimport Base from './Base';\nimport { DEFAULT_FETCH_START, DEFAULT_FETCH_END } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\ntype Params = {\n    fields?: string,\n    limit: number,\n    offset: number,\n};\n\ntype Data = {\n    entries: Array<any>,\n    total_count: number,\n};\n\nclass OffsetBasedApi extends Base {\n    /**\n     * @property {Data}\n     */\n    data: Data;\n\n    /**\n     * Gets query params for the API\n     *\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @return the query params object\n     */\n    getQueryParameters(offset: number, limit: number, fields?: Array<string>): Object {\n        const queryParams: Params = {\n            offset,\n            limit,\n        };\n\n        if (fields && fields.length > 0) {\n            queryParams.fields = fields.toString();\n        }\n\n        return queryParams;\n    }\n\n    /**\n     * Determines if the API has more items to fetch\n     *\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} totalCount the total number of items\n     * @return {boolean} true if there are more items\n     */\n    hasMoreItems(offset: number, totalCount?: number): boolean {\n        return totalCount === undefined || offset < totalCount;\n    }\n\n    /**\n     * Helper for get\n     *\n     * @param {string} id the file id\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling the sucessCallback\n     * @private\n     */\n    async offsetGetRequest(\n        id: string,\n        offset: number,\n        limit: number,\n        shouldFetchAll: boolean,\n        fields?: Array<string>,\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Make the XHR request\n        try {\n            const params = this.getQueryParameters(offset, limit, fields);\n            const url = this.getUrl(id);\n\n            const { data }: { data: Data } = await this.xhr.get({\n                url,\n                id: getTypedFileId(id),\n                params,\n            });\n\n            const entries = this.data ? this.data.entries : [];\n            this.data = {\n                ...data,\n                entries: entries.concat(data.entries),\n            };\n            const totalCount = data.total_count;\n            const nextOffset = offset + limit;\n            if (shouldFetchAll && this.hasMoreItems(nextOffset, totalCount)) {\n                this.offsetGetRequest(id, nextOffset, limit, shouldFetchAll, fields);\n                return;\n            }\n\n            this.successHandler(this.data);\n        } catch (error) {\n            this.errorHandler(error);\n        }\n    }\n\n    /**\n     * Offset based API get\n     *\n     * @param {string} id the file id\n     * @param {Function} successCallback the success callback\n     * @param {Function} errorCallback the error callback\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling the sucessCallback\n     */\n    async offsetGet(\n        id: string,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        offset: number = DEFAULT_FETCH_START,\n        limit: number = DEFAULT_FETCH_END,\n        fields?: Array<string>,\n        shouldFetchAll: boolean = true,\n    ): Promise<void> {\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        return this.offsetGetRequest(id, offset, limit, shouldFetchAll, fields);\n    }\n}\n\nexport default OffsetBasedApi;\n"]},"metadata":{},"sourceType":"module"}