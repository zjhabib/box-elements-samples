{"ast":null,"code":"/**\n * \n * @file Content sub header component\n * @author Box\n */\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../messages';\nimport { Breadcrumbs } from '../breadcrumbs';\nimport { VIEW_SEARCH, VIEW_FOLDER, VIEW_RECENTS, DELIMITER_CARET } from '../../../constants';\nvar SubHeaderLeft = function SubHeaderLeft(_ref) {\n  var view = _ref.view,\n    isSmall = _ref.isSmall,\n    rootId = _ref.rootId,\n    rootName = _ref.rootName,\n    currentCollection = _ref.currentCollection,\n    onItemClick = _ref.onItemClick,\n    intl = _ref.intl;\n  var crumbs;\n  if (view === VIEW_FOLDER || view === VIEW_SEARCH) {\n    var id = currentCollection.id,\n      _currentCollection$na = currentCollection.name,\n      name = _currentCollection$na === void 0 ? '' : _currentCollection$na,\n      _currentCollection$br = currentCollection.breadcrumbs,\n      breadcrumbs = _currentCollection$br === void 0 ? [] : _currentCollection$br;\n    crumbs = breadcrumbs.concat({\n      id: id,\n      name: name\n    }); // Search results are specific to the current folder\n    // hence the breadcrumb is added to the end of the list\n\n    if (view === VIEW_SEARCH) {\n      crumbs = crumbs.concat({\n        id: undefined,\n        name: intl.formatMessage(messages.searchBreadcrumb)\n      });\n    }\n  } else {\n    crumbs = [{\n      id: undefined,\n      name: intl.formatMessage(messages[\"\".concat(view, \"Breadcrumb\")])\n    }];\n    if (view !== VIEW_RECENTS) {\n      crumbs.unshift({\n        id: rootId,\n        name: rootName || intl.formatMessage(messages.rootBreadcrumb)\n      });\n    }\n  }\n  return React.createElement(Breadcrumbs, {\n    crumbs: crumbs,\n    delimiter: DELIMITER_CARET,\n    isSmall: isSmall,\n    onCrumbClick: onItemClick,\n    rootId: rootId\n  });\n};\nexport default injectIntl(SubHeaderLeft);","map":{"version":3,"sources":["../../../../src/elements/common/sub-header/SubHeaderLeft.js"],"names":["React","injectIntl","messages","Breadcrumbs","VIEW_SEARCH","VIEW_FOLDER","VIEW_RECENTS","DELIMITER_CARET","SubHeaderLeft","view","isSmall","rootId","rootName","currentCollection","onItemClick","intl","crumbs","id","name","breadcrumbs","concat","undefined","formatMessage","searchBreadcrumb","unshift","rootBreadcrumb"],"mappings":"AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,eAAjD,QAAwE,oBAAxE;AAYA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAAsF;EAAA,IAAnFC,IAAmF,GAAA,IAAA,CAAnFA,IAAmF;IAA7EC,OAA6E,GAAA,IAAA,CAA7EA,OAA6E;IAApEC,MAAoE,GAAA,IAAA,CAApEA,MAAoE;IAA5DC,QAA4D,GAAA,IAAA,CAA5DA,QAA4D;IAAlDC,iBAAkD,GAAA,IAAA,CAAlDA,iBAAkD;IAA/BC,WAA+B,GAAA,IAAA,CAA/BA,WAA+B;IAAlBC,IAAkB,GAAA,IAAA,CAAlBA,IAAkB;EACxG,IAAIC,MAAJ;EAEA,IAAIP,IAAI,KAAKJ,WAATI,IAAwBA,IAAI,KAAKL,WAArC,EAAkD;IAAA,IACtCa,EADsC,GACFJ,iBADE,CACtCI,EADsC;MAAA,qBAAA,GACFJ,iBADE,CAClCK,IADkC;MAClCA,IADkC,GAAA,qBAAA,KAAA,KAAA,CAAA,GAC3B,EAD2B,GAAA,qBAAA;MAAA,qBAAA,GACFL,iBADE,CACvBM,WADuB;MACvBA,WADuB,GAAA,qBAAA,KAAA,KAAA,CAAA,GACT,EADS,GAAA,qBAAA;IAE9CH,MAAM,GAAG,WAAW,CAACI,MAAZ,CAAmB;MAAEH,EAAE,EAAFA,EAAF;MAAMC,IAAI,EAAJA;IAAN,CAAnB,CAATF,CAF8C,CAI9C;IACA;;IACA,IAAIP,IAAI,KAAKL,WAAb,EAA0B;MACtBY,MAAM,GAAG,MAAM,CAACI,MAAP,CAAc;QACnBH,EAAE,EAAEI,SADe;QAEnBH,IAAI,EAAEH,IAAI,CAACO,aAALP,CAAmBb,QAAQ,CAACqB,gBAA5BR;MAFa,CAAd,CAATC;IAIH;EACJ,CAZD,MAYO;IACHA,MAAM,GAAG,CACL;MACIC,EAAE,EAAEI,SADR;MAEIH,IAAI,EAAEH,IAAI,CAACO,aAALP,CAAmBb,QAAQ,CAAA,EAAA,CAAA,MAAA,CAAIO,IAAJ,EAAA,YAAA,CAAA,CAA3BM;IAFV,CADK,CAATC;IAOA,IAAIP,IAAI,KAAKH,YAAb,EAA2B;MACvBU,MAAM,CAACQ,OAAPR,CAAe;QACXC,EAAE,EAAEN,MADO;QAEXO,IAAI,EAAEN,QAAQ,IAAIG,IAAI,CAACO,aAALP,CAAmBb,QAAQ,CAACuB,cAA5BV;MAFP,CAAfC,CAAAA;IAIH;EACJ;EAED,OACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;IACI,MAAM,EAAEA,MADZ;IAEI,SAAS,EAAET,eAFf;IAGI,OAAO,EAAEG,OAHb;IAII,YAAY,EAAEI,WAJlB;IAKI,MAAM,EAAEH;EALZ,CAAA,CADJ;AASH,CAxCD;AA0CA,eAAeV,UAAU,CAACO,aAAD,CAAzB","sourcesContent":["/**\n * @flow\n * @file Content sub header component\n * @author Box\n */\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport messages from '../messages';\nimport { Breadcrumbs } from '../breadcrumbs';\nimport { VIEW_SEARCH, VIEW_FOLDER, VIEW_RECENTS, DELIMITER_CARET } from '../../../constants';\nimport type { View, Collection } from '../../../common/types/core';\n\ntype Props = {\n    currentCollection: Collection,\n    isSmall: boolean,\n    onItemClick: Function,\n    rootId: string,\n    rootName?: string,\n    view: View,\n} & InjectIntlProvidedProps;\n\nconst SubHeaderLeft = ({ view, isSmall, rootId, rootName, currentCollection, onItemClick, intl }: Props) => {\n    let crumbs;\n\n    if (view === VIEW_FOLDER || view === VIEW_SEARCH) {\n        const { id, name = '', breadcrumbs = [] } = currentCollection;\n        crumbs = breadcrumbs.concat({ id, name });\n\n        // Search results are specific to the current folder\n        // hence the breadcrumb is added to the end of the list\n        if (view === VIEW_SEARCH) {\n            crumbs = crumbs.concat({\n                id: undefined,\n                name: intl.formatMessage(messages.searchBreadcrumb),\n            });\n        }\n    } else {\n        crumbs = [\n            {\n                id: undefined,\n                name: intl.formatMessage(messages[`${view}Breadcrumb`]),\n            },\n        ];\n\n        if (view !== VIEW_RECENTS) {\n            crumbs.unshift({\n                id: rootId,\n                name: rootName || intl.formatMessage(messages.rootBreadcrumb),\n            });\n        }\n    }\n\n    return (\n        <Breadcrumbs\n            crumbs={crumbs}\n            delimiter={DELIMITER_CARET}\n            isSmall={isSmall}\n            onCrumbClick={onItemClick}\n            rootId={rootId}\n        />\n    );\n};\n\nexport default injectIntl(SubHeaderLeft);\n"]},"metadata":{},"sourceType":"module"}