{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport commonMessages from '../../common/messages';\nvar badInput = function badInput() {\n  return {\n    code: 'badInput',\n    message: React.createElement(FormattedMessage, commonMessages.invalidInputError)\n  };\n};\nvar patternMismatch = function patternMismatch() {\n  return {\n    code: 'patternMismatch',\n    message: React.createElement(FormattedMessage, commonMessages.invalidInputError)\n  };\n};\nvar tooShort = function tooShort(minLength) {\n  return {\n    code: 'tooShort',\n    message: React.createElement(FormattedMessage, _extends({}, commonMessages.minLengthError, {\n      values: {\n        min: minLength\n      }\n    }))\n  };\n};\nvar tooLong = function tooLong(maxLength) {\n  return {\n    code: 'tooLong',\n    message: React.createElement(FormattedMessage, _extends({}, commonMessages.maxLengthError, {\n      values: {\n        max: maxLength\n      }\n    }))\n  };\n};\nvar typeMismatchEmail = function typeMismatchEmail() {\n  return {\n    code: 'typeMismatch',\n    message: React.createElement(FormattedMessage, commonMessages.invalidEmailError)\n  };\n};\nvar typeMismatchUrl = function typeMismatchUrl() {\n  return {\n    code: 'typeMismatch',\n    message: React.createElement(FormattedMessage, commonMessages.invalidURLError)\n  };\n};\nvar valueMissing = function valueMissing() {\n  return {\n    code: 'valueMissing',\n    message: React.createElement(FormattedMessage, commonMessages.requiredFieldError)\n  };\n};\nexport { badInput, patternMismatch, tooShort, tooLong, typeMismatchEmail, typeMismatchUrl, valueMissing };","map":{"version":3,"sources":["../../../src/components/form-elements/input-messages.js"],"names":["React","FormattedMessage","commonMessages","badInput","code","message","invalidInputError","patternMismatch","tooShort","minLength","minLengthError","min","tooLong","maxLength","maxLengthError","max","typeMismatchEmail","invalidEmailError","typeMismatchUrl","invalidURLError","valueMissing","requiredFieldError"],"mappings":";;;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,EAAA;EAAA,OAAO;IACpBC,IAAI,EAAE,UADc;IAEpBC,OAAO,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBH,cAAc,CAACI,iBAArC;EAFW,CAAP;AAAA,CAAjB;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,EAAA;EAAA,OAAO;IAC3BH,IAAI,EAAE,iBADqB;IAE3BC,OAAO,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBH,cAAc,CAACI,iBAArC;EAFkB,CAAP;AAAA,CAAxB;AAKA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAA;EAAA,OAAwB;IACrCL,IAAI,EAAE,UAD+B;IAErCC,OAAO,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAsBH,cAAc,CAACQ,cAArC,EAAA;MAAqD,MAAM,EAAE;QAAEC,GAAG,EAAEF;MAAP;IAA7D,CAAA,CAAA;EAF4B,CAAxB;AAAA,CAAjB;AAKA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,SAAD,EAAA;EAAA,OAAwB;IACpCT,IAAI,EAAE,SAD8B;IAEpCC,OAAO,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAsBH,cAAc,CAACY,cAArC,EAAA;MAAqD,MAAM,EAAE;QAAEC,GAAG,EAAEF;MAAP;IAA7D,CAAA,CAAA;EAF2B,CAAxB;AAAA,CAAhB;AAKA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,EAAA;EAAA,OAAO;IAC7BZ,IAAI,EAAE,cADuB;IAE7BC,OAAO,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBH,cAAc,CAACe,iBAArC;EAFoB,CAAP;AAAA,CAA1B;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,EAAA;EAAA,OAAO;IAC3Bd,IAAI,EAAE,cADqB;IAE3BC,OAAO,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBH,cAAc,CAACiB,eAArC;EAFkB,CAAP;AAAA,CAAxB;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,EAAA;EAAA,OAAO;IACxBhB,IAAI,EAAE,cADkB;IAExBC,OAAO,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBH,cAAc,CAACmB,kBAArC;EAFe,CAAP;AAAA,CAArB;AAKA,SAASlB,QAAT,EAAmBI,eAAnB,EAAoCC,QAApC,EAA8CI,OAA9C,EAAuDI,iBAAvD,EAA0EE,eAA1E,EAA2FE,YAA3F","sourcesContent":["// @flow\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport commonMessages from '../../common/messages';\n\nconst badInput = () => ({\n    code: 'badInput',\n    message: <FormattedMessage {...commonMessages.invalidInputError} />,\n});\n\nconst patternMismatch = () => ({\n    code: 'patternMismatch',\n    message: <FormattedMessage {...commonMessages.invalidInputError} />,\n});\n\nconst tooShort = (minLength: number) => ({\n    code: 'tooShort',\n    message: <FormattedMessage {...commonMessages.minLengthError} values={{ min: minLength }} />,\n});\n\nconst tooLong = (maxLength: number) => ({\n    code: 'tooLong',\n    message: <FormattedMessage {...commonMessages.maxLengthError} values={{ max: maxLength }} />,\n});\n\nconst typeMismatchEmail = () => ({\n    code: 'typeMismatch',\n    message: <FormattedMessage {...commonMessages.invalidEmailError} />,\n});\n\nconst typeMismatchUrl = () => ({\n    code: 'typeMismatch',\n    message: <FormattedMessage {...commonMessages.invalidURLError} />,\n});\n\nconst valueMissing = () => ({\n    code: 'valueMissing',\n    message: <FormattedMessage {...commonMessages.requiredFieldError} />,\n});\n\nexport { badInput, patternMismatch, tooShort, tooLong, typeMismatchEmail, typeMismatchUrl, valueMissing };\n"]},"metadata":{},"sourceType":"module"}