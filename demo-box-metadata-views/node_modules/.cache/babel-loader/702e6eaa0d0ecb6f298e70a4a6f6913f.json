{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport serialize from 'form-serialize';\nfunction getFormValidityState(form) {\n  // Turn the form.elements HTMLCollection into Array before reducing\n  return [].slice.call(form.elements).reduce(function (validityObj, inputEl) {\n    // Only serialize inputs that have a name defined\n    if (inputEl.name && !inputEl.validity.valid) {\n      var validityState = inputEl.validity;\n      if (inputEl.validity.customError) {\n        // If the input is displaying a custom error,\n        // we expose the errorCode stored in the validationMessage\n        validityState.customErrorCode = inputEl.validationMessage;\n      }\n      validityObj[inputEl.name] = {\n        validityState: validityState\n      };\n      return validityObj;\n    }\n    return validityObj;\n  }, {});\n}\nvar Form = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n  function Form(props) {\n    var _this;\n    _classCallCheck(this, Form);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_ref) {\n      var currentTarget = _ref.currentTarget;\n      if (_this.props.onChange) {\n        var formData = serialize(currentTarget, {\n          hash: true,\n          empty: true\n        });\n        _this.props.onChange(formData);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (event) {\n      var form = event.target;\n      event.preventDefault();\n      var isValid = form.checkValidity();\n      var _this$props = _this.props,\n        onInvalidSubmit = _this$props.onInvalidSubmit,\n        onValidSubmit = _this$props.onValidSubmit;\n      var registeredInputs = _this.state.registeredInputs;\n      if (isValid) {\n        var formData = serialize(form, {\n          hash: true,\n          empty: true\n        });\n        onValidSubmit(formData);\n      } else {\n        var formValidityState = getFormValidityState(form); // Push form validity state to inputs so errors are shown on submit\n\n        Object.keys(formValidityState).forEach(function (key) {\n          return registeredInputs[key] && registeredInputs[key](formValidityState[key].validityState);\n        });\n        if (onInvalidSubmit) {\n          onInvalidSubmit(formValidityState);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"registerInput\", function (name, setValidityStateHandler) {\n      var registeredInputs = _this.state.registeredInputs;\n      if (registeredInputs[name]) {\n        throw new Error(\"Input '\".concat(name, \"' is already registered.\"));\n      }\n      var nextState = _this.state;\n      nextState.registeredInputs[name] = setValidityStateHandler;\n      _this.setState(nextState);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"unregisterInput\", function (name) {\n      var nextState = _this.state;\n      delete nextState.registeredInputs[name];\n      _this.setState(nextState);\n    });\n    _this.state = {\n      registeredInputs: {}\n    };\n    return _this;\n  }\n  _createClass(Form, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        form: {\n          registerInput: this.registerInput.bind(this),\n          unregisterInput: this.unregisterInput.bind(this)\n        }\n      };\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref2) {\n      var prevFormValidityState = _ref2.formValidityState;\n      var formValidityState = this.props.formValidityState;\n      var registeredInputs = this.state.registeredInputs;\n      if (formValidityState !== prevFormValidityState) {\n        Object.keys(formValidityState).forEach(function (key) {\n          if (registeredInputs[key]) {\n            registeredInputs[key](formValidityState[key]);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return React.createElement(\"form\", {\n        noValidate: true,\n        onChange: this.onChange,\n        onSubmit: this.onSubmit\n      }, children);\n    }\n  }]);\n  return Form;\n}(Component);\n_defineProperty(Form, \"propTypes\", {\n  children: PropTypes.node,\n  /** Called when an input in the form changes */\n  onChange: PropTypes.func,\n  /** Called when a valid submit is made */\n  onValidSubmit: PropTypes.func.isRequired,\n  /** Called when an invalid submit is made */\n  onInvalidSubmit: PropTypes.func,\n  /** An object mapping input names to error messages */\n  formValidityState: PropTypes.object // eslint-disable-line react/no-unused-prop-types\n});\n\n_defineProperty(Form, \"childContextTypes\", {\n  form: PropTypes.shape({\n    registerInput: PropTypes.func.isRequired,\n    unregisterInput: PropTypes.func.isRequired\n  }).isRequired\n});\nexport default Form;","map":{"version":3,"sources":["../../../../src/components/form-elements/form/Form.js"],"names":["PropTypes","React","Component","serialize","getFormValidityState","form","slice","call","elements","reduce","validityObj","inputEl","name","validity","valid","validityState","customError","customErrorCode","validationMessage","Form","children","node","onChange","func","onValidSubmit","isRequired","onInvalidSubmit","formValidityState","object","shape","registerInput","unregisterInput","props","state","registeredInputs","bind","prevFormValidityState","Object","keys","forEach","key","currentTarget","formData","hash","empty","event","target","preventDefault","isValid","checkValidity","setValidityStateHandler","Error","nextState","setState","onSubmit"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport serialize from 'form-serialize';\n\nfunction getFormValidityState(form) {\n    // Turn the form.elements HTMLCollection into Array before reducing\n    return [].slice.call(form.elements).reduce((validityObj, inputEl) => {\n        // Only serialize inputs that have a name defined\n        if (inputEl.name && !inputEl.validity.valid) {\n            const validityState = inputEl.validity;\n\n            if (inputEl.validity.customError) {\n                // If the input is displaying a custom error,\n                // we expose the errorCode stored in the validationMessage\n                validityState.customErrorCode = inputEl.validationMessage;\n            }\n\n            validityObj[inputEl.name] = {\n                validityState,\n            };\n            return validityObj;\n        }\n        return validityObj;\n    }, {});\n}\n\nclass Form extends Component {\n    static propTypes = {\n        children: PropTypes.node,\n        /** Called when an input in the form changes */\n        onChange: PropTypes.func,\n        /** Called when a valid submit is made */\n        onValidSubmit: PropTypes.func.isRequired,\n        /** Called when an invalid submit is made */\n        onInvalidSubmit: PropTypes.func,\n        /** An object mapping input names to error messages */\n        formValidityState: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n    };\n\n    static childContextTypes = {\n        form: PropTypes.shape({\n            registerInput: PropTypes.func.isRequired,\n            unregisterInput: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            registeredInputs: {},\n        };\n    }\n\n    getChildContext() {\n        return {\n            form: {\n                registerInput: this.registerInput.bind(this),\n                unregisterInput: this.unregisterInput.bind(this),\n            },\n        };\n    }\n\n    componentDidUpdate({ formValidityState: prevFormValidityState }) {\n        const { formValidityState } = this.props;\n        const { registeredInputs } = this.state;\n\n        if (formValidityState !== prevFormValidityState) {\n            Object.keys(formValidityState).forEach(key => {\n                if (registeredInputs[key]) {\n                    registeredInputs[key](formValidityState[key]);\n                }\n            });\n        }\n    }\n\n    onChange = ({ currentTarget }) => {\n        if (this.props.onChange) {\n            const formData = serialize(currentTarget, {\n                hash: true,\n                empty: true,\n            });\n            this.props.onChange(formData);\n        }\n    };\n\n    onSubmit = event => {\n        const form = event.target;\n        event.preventDefault();\n        const isValid = form.checkValidity();\n        const { onInvalidSubmit, onValidSubmit } = this.props;\n        const { registeredInputs } = this.state;\n\n        if (isValid) {\n            const formData = serialize(form, { hash: true, empty: true });\n            onValidSubmit(formData);\n        } else {\n            const formValidityState = getFormValidityState(form);\n\n            // Push form validity state to inputs so errors are shown on submit\n            Object.keys(formValidityState).forEach(\n                key => registeredInputs[key] && registeredInputs[key](formValidityState[key].validityState),\n            );\n\n            if (onInvalidSubmit) {\n                onInvalidSubmit(formValidityState);\n            }\n        }\n    };\n\n    registerInput = (name, setValidityStateHandler) => {\n        const { registeredInputs } = this.state;\n\n        if (registeredInputs[name]) {\n            throw new Error(`Input '${name}' is already registered.`);\n        }\n\n        const nextState = this.state;\n        nextState.registeredInputs[name] = setValidityStateHandler;\n        this.setState(nextState);\n    };\n\n    unregisterInput = name => {\n        const nextState = this.state;\n        delete nextState.registeredInputs[name];\n        this.setState(nextState);\n    };\n\n    render() {\n        const { children } = this.props;\n        return (\n            <form noValidate onChange={this.onChange} onSubmit={this.onSubmit}>\n                {children}\n            </form>\n        );\n    }\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}