{"ast":null,"code":"/**\n * \n * @file Uploads manager\n */\nimport React from 'react';\nimport classNames from 'classnames';\nimport ItemList from './ItemList';\nimport OverallUploadsProgressBar from './OverallUploadsProgressBar';\nimport { STATUS_ERROR } from '../../constants';\nimport './UploadsManager.scss';\nvar UploadsManager = function UploadsManager(_ref) {\n  var items = _ref.items,\n    view = _ref.view,\n    onItemActionClick = _ref.onItemActionClick,\n    onRemoveActionClick = _ref.onRemoveActionClick,\n    onUploadsManagerActionClick = _ref.onUploadsManagerActionClick,\n    toggleUploadsManager = _ref.toggleUploadsManager,\n    isExpanded = _ref.isExpanded,\n    isVisible = _ref.isVisible,\n    isResumableUploadsEnabled = _ref.isResumableUploadsEnabled,\n    isDragging = _ref.isDragging;\n\n  /**\n   * Keydown handler for progress bar\n   *\n   * @param {SyntheticKeyboardEvent} event\n   * @return {void}\n   */\n  var handleProgressBarKeyDown = function handleProgressBarKeyDown(event) {\n    switch (event.key) {\n      case 'Enter':\n      case 'Space':\n        toggleUploadsManager();\n        break;\n      default: // noop\n    }\n  };\n\n  var numFailedUploads = 0;\n  var totalSize = 0;\n  var totalUploaded = 0;\n  items.forEach(function (item) {\n    if (item.status !== STATUS_ERROR && !item.isFolder) {\n      totalSize += item.size;\n      totalUploaded += item.size * item.progress / 100.0;\n    } else if (item.status === STATUS_ERROR) {\n      numFailedUploads += 1;\n    }\n  });\n  var percent = totalUploaded / totalSize * 100;\n  var isResumeVisible = isResumableUploadsEnabled && numFailedUploads > 0;\n  var hasMultipleFailedUploads = numFailedUploads > 1;\n  return React.createElement(\"div\", {\n    \"data-resin-component\": \"uploadsmanager\",\n    \"data-resin-feature\": \"uploads\",\n    className: classNames('be bcu-uploads-manager-container', {\n      'bcu-is-expanded': isExpanded,\n      'bcu-is-visible': isVisible\n    })\n  }, React.createElement(OverallUploadsProgressBar, {\n    isDragging: isDragging,\n    isExpanded: isExpanded,\n    isResumeVisible: isResumeVisible,\n    isVisible: isVisible,\n    hasMultipleFailedUploads: hasMultipleFailedUploads,\n    onClick: toggleUploadsManager,\n    onKeyDown: handleProgressBarKeyDown,\n    onUploadsManagerActionClick: onUploadsManagerActionClick,\n    percent: percent,\n    view: view\n  }), React.createElement(\"div\", {\n    className: \"bcu-uploads-manager-item-list\"\n  }, React.createElement(ItemList, {\n    isResumableUploadsEnabled: isResumableUploadsEnabled,\n    items: items,\n    onClick: onItemActionClick,\n    onRemoveClick: onRemoveActionClick,\n    view: view\n  })));\n};\nexport default UploadsManager;","map":{"version":3,"sources":["../../../src/elements/content-uploader/UploadsManager.js"],"names":["React","classNames","ItemList","OverallUploadsProgressBar","STATUS_ERROR","UploadsManager","items","view","onItemActionClick","onRemoveActionClick","onUploadsManagerActionClick","toggleUploadsManager","isExpanded","isVisible","isResumableUploadsEnabled","isDragging","handleProgressBarKeyDown","event","key","numFailedUploads","totalSize","totalUploaded","forEach","item","status","isFolder","size","progress","percent","isResumeVisible","hasMultipleFailedUploads"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Uploads manager\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport ItemList from './ItemList';\nimport OverallUploadsProgressBar from './OverallUploadsProgressBar';\nimport { STATUS_ERROR } from '../../constants';\nimport type { UploadItem } from '../../common/types/upload';\nimport type { View } from '../../common/types/core';\n\nimport './UploadsManager.scss';\n\ntype Props = {\n    isDragging: boolean,\n    isExpanded: boolean,\n    isResumableUploadsEnabled: boolean,\n    isVisible: boolean,\n    items: UploadItem[],\n    onItemActionClick: Function,\n    onRemoveActionClick: (item: UploadItem) => void,\n    onUploadsManagerActionClick: Function,\n    toggleUploadsManager: Function,\n    view: View,\n};\n\nconst UploadsManager = ({\n    items,\n    view,\n    onItemActionClick,\n    onRemoveActionClick,\n    onUploadsManagerActionClick,\n    toggleUploadsManager,\n    isExpanded,\n    isVisible,\n    isResumableUploadsEnabled,\n    isDragging,\n}: Props) => {\n    /**\n     * Keydown handler for progress bar\n     *\n     * @param {SyntheticKeyboardEvent} event\n     * @return {void}\n     */\n    const handleProgressBarKeyDown = (event: SyntheticKeyboardEvent<*>): void => {\n        switch (event.key) {\n            case 'Enter':\n            case 'Space':\n                toggleUploadsManager();\n                break;\n            default:\n            // noop\n        }\n    };\n\n    let numFailedUploads = 0;\n    let totalSize = 0;\n    let totalUploaded = 0;\n    items.forEach(item => {\n        if (item.status !== STATUS_ERROR && !item.isFolder) {\n            totalSize += item.size;\n            totalUploaded += (item.size * item.progress) / 100.0;\n        } else if (item.status === STATUS_ERROR) {\n            numFailedUploads += 1;\n        }\n    });\n\n    const percent = (totalUploaded / totalSize) * 100;\n    const isResumeVisible = isResumableUploadsEnabled && numFailedUploads > 0;\n    const hasMultipleFailedUploads = numFailedUploads > 1;\n\n    return (\n        <div\n            data-resin-component=\"uploadsmanager\"\n            data-resin-feature=\"uploads\"\n            className={classNames('be bcu-uploads-manager-container', {\n                'bcu-is-expanded': isExpanded,\n                'bcu-is-visible': isVisible,\n            })}\n        >\n            <OverallUploadsProgressBar\n                isDragging={isDragging}\n                isExpanded={isExpanded}\n                isResumeVisible={isResumeVisible}\n                isVisible={isVisible}\n                hasMultipleFailedUploads={hasMultipleFailedUploads}\n                onClick={toggleUploadsManager}\n                onKeyDown={handleProgressBarKeyDown}\n                onUploadsManagerActionClick={onUploadsManagerActionClick}\n                percent={percent}\n                view={view}\n            />\n            <div className=\"bcu-uploads-manager-item-list\">\n                <ItemList\n                    isResumableUploadsEnabled={isResumableUploadsEnabled}\n                    items={items}\n                    onClick={onItemActionClick}\n                    onRemoveClick={onRemoveActionClick}\n                    view={view}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default UploadsManager;\n"]},"metadata":{},"sourceType":"module"}