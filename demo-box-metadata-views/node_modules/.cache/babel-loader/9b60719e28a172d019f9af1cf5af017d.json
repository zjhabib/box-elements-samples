{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Open With Component\n * @author Box\n */\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport uniqueid from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport queryString from 'query-string';\nimport Internationalize from '../common/Internationalize';\nimport messages from '../common/messages';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport API from '../../api';\nimport IntegrationPortalContainer from './IntegrationPortalContainer';\nimport OpenWithDropdownMenu from './OpenWithDropdownMenu';\nimport BoxToolsInstallMessage from './BoxToolsInstallMessage';\nimport OpenWithButton from './OpenWithButton';\nimport OpenWithFallbackButton from './OpenWithFallbackButton';\nimport ExecuteForm from './ExecuteForm';\nimport '../common/base.scss';\nimport './ContentOpenWith.scss';\nimport { BOX_EDIT_INTEGRATION_ID, BOX_EDIT_SFC_INTEGRATION_ID, CLIENT_NAME_OPEN_WITH, DEFAULT_HOSTNAME_API, ERROR_CODE_EXECUTE_INTEGRATION, HTTP_GET, HTTP_POST, ORIGIN_OPEN_WITH, TYPE_FILE, TYPE_FOLDER } from '../../constants';\nvar UNSUPPORTED_INVOCATION_METHOD_TYPE = 'Integration invocation using this HTTP method type is not supported';\nvar BLACKLISTED_ERROR_MESSAGE_KEY = 'boxToolsBlacklistedError';\nvar BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY = 'boxToolsInstallErrorMessage';\nvar GENERIC_EXECUTE_MESSAGE_KEY = 'executeIntegrationOpenWithErrorHeader';\nvar AUTH_CODE = 'auth_code';\nvar ContentOpenWith = /*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ContentOpenWith, _PureComponent);\n\n  /**\n   * [constructor]\n   *\n   * @private\n   * @return {ContentOpenWith}\n   */\n  function ContentOpenWith(props) {\n    var _this;\n    _classCallCheck(this, ContentOpenWith);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContentOpenWith).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"initialState\", {\n      isDropdownOpen: false,\n      integrations: null,\n      isLoading: true,\n      fetchError: null,\n      executePostData: null,\n      shouldRenderErrorIntegrationPortal: false,\n      shouldRenderLoadingIntegrationPortal: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"fetchOpenWithSuccessHandler\", /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(integrations) {\n        var _this$props, boxToolsName, boxToolsInstallUrl, boxEditIntegration, _ref3, extension, errorMessageObject, formattedErrorMessage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = _this.props, boxToolsName = _this$props.boxToolsName, boxToolsInstallUrl = _this$props.boxToolsInstallUrl;\n                boxEditIntegration = integrations.find(function (_ref2) {\n                  var appIntegrationId = _ref2.appIntegrationId;\n                  return _this.isBoxEditIntegration(appIntegrationId);\n                });\n                if (!(boxEditIntegration && !boxEditIntegration.isDisabled)) {\n                  _context.next = 22;\n                  break;\n                }\n                _context.prev = 3;\n                _context.next = 6;\n                return _this.getIntegrationFileExtension();\n              case 6:\n                _ref3 = _context.sent;\n                extension = _ref3.extension;\n                boxEditIntegration.extension = extension; // If Box Edit is present and enabled, we need to set its ability to locally open the given file\n                // No-op if these checks are successful\n\n                _context.next = 11;\n                return _this.isBoxEditAvailable();\n              case 11:\n                _context.next = 13;\n                return _this.canOpenExtensionWithBoxEdit(boxEditIntegration);\n              case 13:\n                _context.next = 22;\n                break;\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](3);\n                errorMessageObject = messages[_context.t0.message] || messages[GENERIC_EXECUTE_MESSAGE_KEY];\n                formattedErrorMessage = React.createElement(FormattedMessage, errorMessageObject);\n                if (_context.t0.message === BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY) {\n                  formattedErrorMessage = React.createElement(BoxToolsInstallMessage, {\n                    boxToolsInstallUrl: boxToolsInstallUrl,\n                    boxToolsName: boxToolsName\n                  });\n                }\n                boxEditIntegration.disabledReasons.push(formattedErrorMessage);\n                boxEditIntegration.isDisabled = true;\n              case 22:\n                _this.setState({\n                  integrations: integrations,\n                  isLoading: false\n                });\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 15]]);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    _defineProperty(_assertThisInitialized(_this), \"getIntegrationFileExtension\", function () {\n      var fileId = _this.props.fileId;\n      return new Promise(function (resolve, reject) {\n        _this.api.getFileAPI().getFileExtension(fileId, resolve, function () {\n          return reject(new Error(GENERIC_EXECUTE_MESSAGE_KEY));\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isBoxEditAvailable\", function () {\n      return _this.api.getBoxEditAPI().checkBoxEditAvailability().catch(function () {\n        throw new Error(BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"canOpenExtensionWithBoxEdit\", function (_ref4) {\n      var _ref4$extension = _ref4.extension,\n        extension = _ref4$extension === void 0 ? '' : _ref4$extension;\n      return _this.api.getBoxEditAPI().getAppForExtension(extension).catch(function () {\n        throw new Error(BLACKLISTED_ERROR_MESSAGE_KEY);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"fetchErrorHandler\", function (error, code) {\n      _this.props.onError(error, code, {\n        error: error\n      });\n      _this.setState({\n        fetchError: error,\n        isLoading: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onIntegrationClick\", function (_ref5) {\n      var appIntegrationId = _ref5.appIntegrationId,\n        displayName = _ref5.displayName;\n      var fileId = _this.props.fileId;\n      var isBoxEditIntegration = _this.isBoxEditIntegration(appIntegrationId);\n      _this.api.getAppIntegrationsAPI(false).execute(appIntegrationId, fileId, _this.executeIntegrationSuccessHandler.bind(_assertThisInitialized(_this), appIntegrationId), isBoxEditIntegration ? _this.executeBoxEditErrorHandler : _this.executeIntegrationErrorHandler);\n      if (isBoxEditIntegration) {\n        // No window management is required when using Box Edit.\n        return;\n      } // These window features will open the new window directly on top of the current window at the same\n\n      var windowFeatures = \"left=\".concat(window.screenX, \",top=\").concat(window.screenY, \",height=\").concat(window.outerHeight, \",width=\").concat(window.innerWidth, \",toolbar=0\"); // window.open() is immediately invoked to avoid popup-blockers\n      // The name is included to be the target of a form if the integration is a POST integration.\n      // A uniqueid is used to force the browser to open a new tab every time, while still allowing\n      // a form to reference a given tab.\n\n      _this.integrationWindow = _this.window.open('', \"\".concat(uniqueid(appIntegrationId)), windowFeatures);\n      _this.integrationWindow.document.title = displayName;\n      _this.integrationWindow.onunload = _this.cleanupIntegrationWindow;\n      _this.setState({\n        shouldRenderLoadingIntegrationPortal: true,\n        shouldRenderErrorIntegrationPortal: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"cleanupIntegrationWindow\", function () {\n      _this.setState({\n        shouldRenderLoadingIntegrationPortal: false,\n        shouldRenderErrorIntegrationPortal: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"executeIntegrationSuccessHandler\", function (integrationId, executeData) {\n      if (_this.isBoxEditIntegration(integrationId)) {\n        _this.executeBoxEditSuccessHandler(integrationId, executeData);\n      } else {\n        _this.executeOnlineIntegrationSuccessHandler(executeData);\n      }\n      _this.onExecute(integrationId);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"executeOnlineIntegrationSuccessHandler\", function (executeData) {\n      var method = executeData.method,\n        url = executeData.url;\n      switch (method) {\n        case HTTP_POST:\n          _this.setState({\n            executePostData: executeData\n          });\n          break;\n        case HTTP_GET:\n          if (!_this.integrationWindow) {\n            return;\n          } // Prevents abuse of window.opener\n          // see here for more details: https://mathiasbynens.github.io/rel-noopener/\n\n          _this.integrationWindow.location = url;\n          _this.integrationWindow.opener = null;\n          break;\n        default:\n          _this.executeIntegrationErrorHandler(Error(UNSUPPORTED_INVOCATION_METHOD_TYPE), ERROR_CODE_EXECUTE_INTEGRATION);\n      }\n      _this.integrationWindow = null;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"executeBoxEditSuccessHandler\", function (integrationId, _ref6) {\n      var url = _ref6.url;\n      var _this$props2 = _this.props,\n        fileId = _this$props2.fileId,\n        token = _this$props2.token,\n        onError = _this$props2.onError;\n      var queryParams = queryString.parse(url);\n      var authCode = queryParams[AUTH_CODE];\n      var isFileScoped = _this.isBoxEditSFCIntegration(integrationId);\n      _this.api.getBoxEditAPI().openFile(fileId, {\n        data: {\n          auth_code: authCode,\n          token: token,\n          token_scope: isFileScoped ? TYPE_FILE : TYPE_FOLDER\n        }\n      }).catch(function (error) {\n        onError(error, ERROR_CODE_EXECUTE_INTEGRATION, {\n          error: error\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onExecuteFormSubmit\", function () {\n      _this.setState({\n        executePostData: null\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"executeIntegrationErrorHandler\", function (error, code) {\n      _this.props.onError(error, code, {\n        error: error\n      }); // eslint-disable-next-line no-console\n\n      console.error(error);\n      _this.setState({\n        shouldRenderLoadingIntegrationPortal: false,\n        shouldRenderErrorIntegrationPortal: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"executeBoxEditErrorHandler\", function (error) {\n      _this.props.onError(error); // eslint-disable-next-line no-console\n\n      console.error(error);\n    });\n    var _token = props.token,\n      apiHost = props.apiHost,\n      clientName = props.clientName,\n      language = props.language,\n      requestInterceptor = props.requestInterceptor,\n      responseInterceptor = props.responseInterceptor;\n    _this.id = uniqueid('bcow_');\n    _this.api = new API({\n      apiHost: apiHost,\n      clientName: clientName,\n      language: language,\n      requestInterceptor: requestInterceptor,\n      responseInterceptor: responseInterceptor,\n      token: _token\n    }); // Clone initial state to allow for state reset on new files\n\n    _this.state = _objectSpread({}, _this.initialState);\n    return _this;\n  }\n  /**\n   * Destroys api instances with caches\n   *\n   * @private\n   * @return {void}\n   */\n\n  _createClass(ContentOpenWith, [{\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.api.destroy(true);\n    }\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Don't destroy the cache while unmounting\n      this.api.destroy(false);\n    }\n    /**\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var fileId = this.props.fileId;\n      if (!fileId) {\n        return;\n      }\n      this.window = window;\n      this.fetchOpenWithData();\n    }\n    /**\n     * After component updates, re-fetch Open With data if appropriate.\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var currentFileId = this.props.fileId;\n      var previousFileId = prevProps.fileId;\n      if (!currentFileId) {\n        return;\n      }\n      if (currentFileId !== previousFileId) {\n        this.setState(_objectSpread({}, this.initialState));\n        this.fetchOpenWithData();\n      }\n    }\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n  }, {\n    key: \"isBoxEditIntegration\",\n    value: function isBoxEditIntegration(integrationId) {\n      return integrationId === BOX_EDIT_INTEGRATION_ID || this.isBoxEditSFCIntegration(integrationId);\n    }\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n  }, {\n    key: \"isBoxEditSFCIntegration\",\n    value: function isBoxEditSFCIntegration(integrationId) {\n      return integrationId === BOX_EDIT_SFC_INTEGRATION_ID;\n    }\n    /**\n     * Fetches Open With data.\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"fetchOpenWithData\",\n    value: function fetchOpenWithData() {\n      var fileId = this.props.fileId;\n      this.api.getOpenWithAPI(false).getOpenWithIntegrations(fileId, this.fetchOpenWithSuccessHandler, this.fetchErrorHandler);\n    }\n    /**\n     * Fetch app integrations info needed to render.\n     *\n     * @param {OpenWithIntegrations} integrations - The available Open With integrations\n     * @return {void}\n     */\n  }, {\n    key: \"onExecute\",\n    /**\n     * Calls the onExecute prop\n     *\n     * @private\n     * @param {string} integrationID - The integration that was executed\n     * @return {void}\n     */\n    value: function onExecute(integrationID) {\n      this.props.onExecute(integrationID);\n      this.setState({\n        shouldRenderLoadingIntegrationPortal: false\n      });\n    }\n    /**\n     * Handles execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n  }, {\n    key: \"getDisplayIntegration\",\n    /**\n     * Gets a display integration, if available, for the Open With button\n     *\n     * @private\n     * @return {?Integration}\n     */\n    value: function getDisplayIntegration() {\n      var integrations = this.state.integrations; // We only consider an integration a display integration if is the only integration in our state\n\n      return Array.isArray(integrations) && integrations.length === 1 ? integrations[0] : null;\n    }\n    /**\n     * Render the Open With element\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n        language = _this$props3.language,\n        intlMessages = _this$props3.messages,\n        dropdownAlignment = _this$props3.dropdownAlignment;\n      var _this$state = this.state,\n        fetchError = _this$state.fetchError,\n        isLoading = _this$state.isLoading,\n        integrations = _this$state.integrations,\n        executePostData = _this$state.executePostData,\n        shouldRenderLoadingIntegrationPortal = _this$state.shouldRenderLoadingIntegrationPortal,\n        shouldRenderErrorIntegrationPortal = _this$state.shouldRenderErrorIntegrationPortal;\n      var className = classNames('be bcow', this.props.className);\n      var displayIntegration = this.getDisplayIntegration();\n      var numIntegrations = integrations ? integrations.length : 0;\n      return React.createElement(Internationalize, {\n        language: language,\n        messages: intlMessages\n      }, React.createElement(\"div\", {\n        className: className,\n        \"data-testid\": \"bcow-content\",\n        id: this.id\n      }, numIntegrations <= 1 ? React.createElement(OpenWithButton, {\n        displayIntegration: displayIntegration,\n        error: fetchError,\n        isLoading: isLoading,\n        onClick: this.onIntegrationClick\n      }) : React.createElement(OpenWithDropdownMenu, {\n        dropdownAlignment: dropdownAlignment,\n        integrations: integrations,\n        onClick: this.onIntegrationClick\n      }), (shouldRenderLoadingIntegrationPortal || shouldRenderErrorIntegrationPortal) && React.createElement(IntegrationPortalContainer, {\n        hasError: shouldRenderErrorIntegrationPortal,\n        integrationWindow: this.integrationWindow\n      }), executePostData && React.createElement(ExecuteForm, {\n        executePostData: executePostData,\n        id: this.id,\n        onSubmit: this.onExecuteFormSubmit,\n        windowName: this.integrationWindow && this.integrationWindow.name\n      })));\n    }\n  }]);\n  return ContentOpenWith;\n}(PureComponent);\n_defineProperty(ContentOpenWith, \"defaultProps\", {\n  apiHost: DEFAULT_HOSTNAME_API,\n  className: '',\n  clientName: CLIENT_NAME_OPEN_WITH,\n  onExecute: noop,\n  onError: noop\n});\nexport { ContentOpenWith as ContentOpenWithComponent };\nexport default withErrorBoundary(ORIGIN_OPEN_WITH, OpenWithFallbackButton)(ContentOpenWith);","map":{"version":3,"sources":["../../../src/elements/content-open-with/ContentOpenWith.js"],"names":["React","PureComponent","classNames","uniqueid","noop","FormattedMessage","queryString","Internationalize","messages","withErrorBoundary","API","IntegrationPortalContainer","OpenWithDropdownMenu","BoxToolsInstallMessage","OpenWithButton","OpenWithFallbackButton","ExecuteForm","BOX_EDIT_INTEGRATION_ID","BOX_EDIT_SFC_INTEGRATION_ID","CLIENT_NAME_OPEN_WITH","DEFAULT_HOSTNAME_API","ERROR_CODE_EXECUTE_INTEGRATION","HTTP_GET","HTTP_POST","ORIGIN_OPEN_WITH","TYPE_FILE","TYPE_FOLDER","UNSUPPORTED_INVOCATION_METHOD_TYPE","BLACKLISTED_ERROR_MESSAGE_KEY","BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY","GENERIC_EXECUTE_MESSAGE_KEY","AUTH_CODE","ContentOpenWith","apiHost","className","clientName","onExecute","onError","isDropdownOpen","integrations","isLoading","fetchError","executePostData","shouldRenderErrorIntegrationPortal","shouldRenderLoadingIntegrationPortal","props","token","language","requestInterceptor","responseInterceptor","id","api","state","initialState","destroy","fileId","window","fetchOpenWithData","prevProps","currentFileId","previousFileId","setState","integrationId","isBoxEditSFCIntegration","getOpenWithAPI","getOpenWithIntegrations","fetchOpenWithSuccessHandler","fetchErrorHandler","boxToolsName","boxToolsInstallUrl","boxEditIntegration","find","appIntegrationId","isBoxEditIntegration","isDisabled","extension","getIntegrationFileExtension","isBoxEditAvailable","canOpenExtensionWithBoxEdit","errorMessageObject","message","formattedErrorMessage","disabledReasons","push","Promise","resolve","reject","getFileAPI","getFileExtension","Error","getBoxEditAPI","checkBoxEditAvailability","catch","getAppForExtension","error","code","displayName","getAppIntegrationsAPI","execute","executeIntegrationSuccessHandler","bind","executeBoxEditErrorHandler","executeIntegrationErrorHandler","windowFeatures","screenX","screenY","outerHeight","innerWidth","integrationWindow","open","document","title","onunload","cleanupIntegrationWindow","executeData","executeBoxEditSuccessHandler","executeOnlineIntegrationSuccessHandler","method","url","location","opener","queryParams","parse","authCode","isFileScoped","openFile","data","auth_code","token_scope","integrationID","console","Array","isArray","length","intlMessages","dropdownAlignment","displayIntegration","getDisplayIntegration","numIntegrations","onIntegrationClick","onExecuteFormSubmit","name","ContentOpenWithComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Open With Component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport uniqueid from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport queryString from 'query-string';\nimport Internationalize from '../common/Internationalize';\nimport messages from '../common/messages';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport API from '../../api';\nimport IntegrationPortalContainer from './IntegrationPortalContainer';\nimport OpenWithDropdownMenu from './OpenWithDropdownMenu';\nimport BoxToolsInstallMessage from './BoxToolsInstallMessage';\nimport OpenWithButton from './OpenWithButton';\nimport OpenWithFallbackButton from './OpenWithFallbackButton';\nimport ExecuteForm from './ExecuteForm';\nimport '../common/base.scss';\nimport './ContentOpenWith.scss';\nimport {\n    BOX_EDIT_INTEGRATION_ID,\n    BOX_EDIT_SFC_INTEGRATION_ID,\n    CLIENT_NAME_OPEN_WITH,\n    DEFAULT_HOSTNAME_API,\n    ERROR_CODE_EXECUTE_INTEGRATION,\n    HTTP_GET,\n    HTTP_POST,\n    ORIGIN_OPEN_WITH,\n    TYPE_FILE,\n    TYPE_FOLDER,\n} from '../../constants';\nimport type { Alignment } from '../common/flowTypes';\nimport type { ExecuteAPI, Integration } from '../../common/types/integrations';\nimport type { StringMap, Token, BoxItem } from '../../common/types/core';\n\nconst UNSUPPORTED_INVOCATION_METHOD_TYPE = 'Integration invocation using this HTTP method type is not supported';\nconst BLACKLISTED_ERROR_MESSAGE_KEY = 'boxToolsBlacklistedError';\nconst BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY = 'boxToolsInstallErrorMessage';\nconst GENERIC_EXECUTE_MESSAGE_KEY = 'executeIntegrationOpenWithErrorHeader';\nconst AUTH_CODE = 'auth_code';\n\ntype ExternalProps = {\n    show?: boolean,\n};\n\ntype Props = {\n    /** Box API url. */\n    apiHost: string,\n    /** Class name applied to base component. */\n    boxToolsInstallUrl?: string,\n    /** Application client name. */\n    boxToolsName?: string,\n    /** Custom name for Box Tools to display to users */\n    className: string,\n    /** Custom URL to direct users to install Box Tools */\n    clientName: string,\n    /** Determines positioning of menu dropdown */\n    dropdownAlignment: Alignment,\n    /** Box File ID. */\n    fileId: string,\n    /** Language to use for translations. */\n    language?: string,\n    /** Messages to be translated. */\n    messages?: StringMap,\n    /** Callback that executes when an integration attempts to open the given file */\n    onError: Function,\n    /** Callback that executes when an integration invocation fails. The two most common cases being API failures or blocking of a new window */\n    onExecute: Function,\n    /** Axios request interceptor that runs before a network request. */\n    requestInterceptor?: Function,\n    /** Axios response interceptor that runs before a network response is returned. */\n    responseInterceptor?: Function,\n    /** Access token. */\n    token: Token,\n};\n\ntype State = {\n    executePostData: ?Object,\n    fetchError: ?Error,\n    integrations: ?Array<Integration>,\n    isDropdownOpen: boolean,\n    isLoading: boolean,\n    shouldRenderErrorIntegrationPortal: boolean,\n    shouldRenderLoadingIntegrationPortal: boolean,\n};\n\nclass ContentOpenWith extends PureComponent<Props, State> {\n    api: API;\n\n    id: string;\n\n    props: Props;\n\n    state: State;\n\n    window: any;\n\n    integrationWindow: ?any;\n\n    static defaultProps = {\n        apiHost: DEFAULT_HOSTNAME_API,\n        className: '',\n        clientName: CLIENT_NAME_OPEN_WITH,\n        onExecute: noop,\n        onError: noop,\n    };\n\n    initialState: State = {\n        isDropdownOpen: false,\n        integrations: null,\n        isLoading: true,\n        fetchError: null,\n        executePostData: null,\n        shouldRenderErrorIntegrationPortal: false,\n        shouldRenderLoadingIntegrationPortal: false,\n    };\n\n    /**\n     * [constructor]\n     *\n     * @private\n     * @return {ContentOpenWith}\n     */\n    constructor(props: Props) {\n        super(props);\n\n        const { token, apiHost, clientName, language, requestInterceptor, responseInterceptor } = props;\n        this.id = uniqueid('bcow_');\n        this.api = new API({\n            apiHost,\n            clientName,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            token,\n        });\n\n        // Clone initial state to allow for state reset on new files\n        this.state = { ...this.initialState };\n    }\n\n    /**\n     * Destroys api instances with caches\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentWillUnmount() {\n        // Don't destroy the cache while unmounting\n        this.api.destroy(false);\n    }\n\n    /**\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidMount() {\n        const { fileId }: Props = this.props;\n        if (!fileId) {\n            return;\n        }\n\n        this.window = window;\n\n        this.fetchOpenWithData();\n    }\n\n    /**\n     * After component updates, re-fetch Open With data if appropriate.\n     *\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        const { fileId: currentFileId }: Props = this.props;\n        const { fileId: previousFileId }: Props = prevProps;\n\n        if (!currentFileId) {\n            return;\n        }\n\n        if (currentFileId !== previousFileId) {\n            this.setState({ ...this.initialState });\n            this.fetchOpenWithData();\n        }\n    }\n\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n    isBoxEditIntegration(integrationId: ?string): boolean {\n        return integrationId === BOX_EDIT_INTEGRATION_ID || this.isBoxEditSFCIntegration(integrationId);\n    }\n\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n    isBoxEditSFCIntegration(integrationId: ?string): boolean {\n        return integrationId === BOX_EDIT_SFC_INTEGRATION_ID;\n    }\n\n    /**\n     * Fetches Open With data.\n     *\n     * @return {void}\n     */\n    fetchOpenWithData(): void {\n        const { fileId }: Props = this.props;\n        this.api\n            .getOpenWithAPI(false)\n            .getOpenWithIntegrations(fileId, this.fetchOpenWithSuccessHandler, this.fetchErrorHandler);\n    }\n\n    /**\n     * Fetch app integrations info needed to render.\n     *\n     * @param {OpenWithIntegrations} integrations - The available Open With integrations\n     * @return {void}\n     */\n    fetchOpenWithSuccessHandler = async (integrations: Array<Integration>): Promise<any> => {\n        const { boxToolsName, boxToolsInstallUrl } = this.props;\n        const boxEditIntegration = integrations.find(({ appIntegrationId }) =>\n            this.isBoxEditIntegration(appIntegrationId),\n        );\n\n        if (boxEditIntegration && !boxEditIntegration.isDisabled) {\n            try {\n                const { extension } = await this.getIntegrationFileExtension();\n                boxEditIntegration.extension = extension;\n                // If Box Edit is present and enabled, we need to set its ability to locally open the given file\n                // No-op if these checks are successful\n                await this.isBoxEditAvailable();\n                await this.canOpenExtensionWithBoxEdit(boxEditIntegration);\n            } catch (error) {\n                const errorMessageObject = messages[error.message] || messages[GENERIC_EXECUTE_MESSAGE_KEY];\n                let formattedErrorMessage = <FormattedMessage {...errorMessageObject} />;\n                if (error.message === BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY) {\n                    formattedErrorMessage = (\n                        <BoxToolsInstallMessage boxToolsInstallUrl={boxToolsInstallUrl} boxToolsName={boxToolsName} />\n                    );\n                }\n\n                boxEditIntegration.disabledReasons.push(formattedErrorMessage);\n                boxEditIntegration.isDisabled = true;\n            }\n        }\n\n        this.setState({ integrations, isLoading: false });\n    };\n\n    /**\n     * Fetches the file extension of the current file.\n     *\n     * @return {Promise}\n     */\n    getIntegrationFileExtension = (): Promise<BoxItem> => {\n        const { fileId }: Props = this.props;\n        return new Promise((resolve, reject) => {\n            this.api\n                .getFileAPI()\n                .getFileExtension(fileId, resolve, () => reject(new Error(GENERIC_EXECUTE_MESSAGE_KEY)));\n        });\n    };\n\n    /**\n     * Uses Box Edit to check if Box Tools is installed and reachable\n     *\n     * @return {Promise}\n     */\n    isBoxEditAvailable = (): Promise<any> => {\n        return this.api\n            .getBoxEditAPI()\n            .checkBoxEditAvailability()\n            .catch(() => {\n                throw new Error(BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY);\n            });\n    };\n\n    /**\n     * Uses Box Edit to check if Box Tools can open a given file type\n     *\n     * @param {String} extension - A file extension\n     * @return {Promise}\n     */\n    canOpenExtensionWithBoxEdit = ({ extension = '' }: Integration): Promise<any> => {\n        return this.api\n            .getBoxEditAPI()\n            .getAppForExtension(extension)\n            .catch(() => {\n                throw new Error(BLACKLISTED_ERROR_MESSAGE_KEY);\n            });\n    };\n\n    /**\n     * Handles a fetch error for the open_with_integrations and app_integrations endpoints\n     *\n     * @param {Error} error - An axios fetch error\n     * @return {void}\n     */\n    fetchErrorHandler = (error: any, code: string): void => {\n        this.props.onError(error, code, { error });\n        this.setState({ fetchError: error, isLoading: false });\n    };\n\n    /**\n     * Click handler when an integration is clicked\n     *\n     * @private\n     * @param {string} appIntegrationId - An app integration ID\n     * @param {string} displayName - The integration's display name\n     * @return {void}\n     */\n    onIntegrationClick = ({ appIntegrationId, displayName }: Integration): void => {\n        const { fileId }: Props = this.props;\n        const isBoxEditIntegration = this.isBoxEditIntegration(appIntegrationId);\n        this.api\n            .getAppIntegrationsAPI(false)\n            .execute(\n                appIntegrationId,\n                fileId,\n                this.executeIntegrationSuccessHandler.bind(this, appIntegrationId),\n                isBoxEditIntegration ? this.executeBoxEditErrorHandler : this.executeIntegrationErrorHandler,\n            );\n\n        if (isBoxEditIntegration) {\n            // No window management is required when using Box Edit.\n            return;\n        }\n\n        // These window features will open the new window directly on top of the current window at the same\n        const windowFeatures = `left=${window.screenX},top=${window.screenY},height=${window.outerHeight},width=${window.innerWidth},toolbar=0`;\n\n        // window.open() is immediately invoked to avoid popup-blockers\n        // The name is included to be the target of a form if the integration is a POST integration.\n        // A uniqueid is used to force the browser to open a new tab every time, while still allowing\n        // a form to reference a given tab.\n        this.integrationWindow = this.window.open('', `${uniqueid(appIntegrationId)}`, windowFeatures);\n        this.integrationWindow.document.title = displayName;\n        this.integrationWindow.onunload = this.cleanupIntegrationWindow;\n\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: true,\n            shouldRenderErrorIntegrationPortal: false,\n        });\n    };\n\n    /**\n     * cleans up the portal UI when a tab is closed so that we can remount the component later.\n     *\n     * @private\n     * @return {void}\n     */\n    cleanupIntegrationWindow = () => {\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n            shouldRenderErrorIntegrationPortal: false,\n        });\n    };\n\n    /**\n     * Opens the integration in a new tab based on the API data\n     *\n     * @private\n     * @param {string} integrationId - The integration that was executed\n     * @param {ExecuteAPI} executeData - API response on how to open an executed integration\n\n     * @return {void}\n     */\n    executeIntegrationSuccessHandler = (integrationId: string, executeData: ExecuteAPI): void => {\n        if (this.isBoxEditIntegration(integrationId)) {\n            this.executeBoxEditSuccessHandler(integrationId, executeData);\n        } else {\n            this.executeOnlineIntegrationSuccessHandler(executeData);\n        }\n        this.onExecute(integrationId);\n    };\n\n    /**\n     * Opens the file via a Partner Integration\n     *\n     * @private\n     * @param {ExecuteAPI} executeData - API response on how to open an executed integration\n\n     * @return {void}\n     */\n    executeOnlineIntegrationSuccessHandler = (executeData: ExecuteAPI): void => {\n        const { method, url } = executeData;\n        switch (method) {\n            case HTTP_POST:\n                this.setState({ executePostData: executeData });\n                break;\n            case HTTP_GET:\n                if (!this.integrationWindow) {\n                    return;\n                }\n\n                // Prevents abuse of window.opener\n                // see here for more details: https://mathiasbynens.github.io/rel-noopener/\n                this.integrationWindow.location = url;\n                this.integrationWindow.opener = null;\n                break;\n            default:\n                this.executeIntegrationErrorHandler(\n                    Error(UNSUPPORTED_INVOCATION_METHOD_TYPE),\n                    ERROR_CODE_EXECUTE_INTEGRATION,\n                );\n        }\n\n        this.integrationWindow = null;\n    };\n\n    /**\n     * Opens the file via Box Edit\n     *\n     * @private\n     * @param {string} url - Integration execution URL\n\n     * @return {void}\n     */\n    executeBoxEditSuccessHandler = (integrationId: string, { url }: ExecuteAPI): void => {\n        const { fileId, token, onError } = this.props;\n        const queryParams = queryString.parse(url);\n        const authCode = queryParams[AUTH_CODE];\n        const isFileScoped = this.isBoxEditSFCIntegration(integrationId);\n\n        this.api\n            .getBoxEditAPI()\n            .openFile(fileId, {\n                data: {\n                    auth_code: authCode,\n                    token,\n                    token_scope: isFileScoped ? TYPE_FILE : TYPE_FOLDER,\n                },\n            })\n            .catch(error => {\n                onError(error, ERROR_CODE_EXECUTE_INTEGRATION, { error });\n            });\n    };\n\n    /**\n     * Clears state after a form has been submitted\n     *\n     * @private\n     * @return {void}\n     */\n    onExecuteFormSubmit = (): void => {\n        this.setState({ executePostData: null });\n    };\n\n    /**\n     * Calls the onExecute prop\n     *\n     * @private\n     * @param {string} integrationID - The integration that was executed\n     * @return {void}\n     */\n    onExecute(integrationID: string) {\n        this.props.onExecute(integrationID);\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n        });\n    }\n\n    /**\n     * Handles execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n    executeIntegrationErrorHandler = (error: any, code: string): void => {\n        this.props.onError(error, code, { error });\n        // eslint-disable-next-line no-console\n        console.error(error);\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n            shouldRenderErrorIntegrationPortal: true,\n        });\n    };\n\n    /**\n     * Handles Box Edit execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n    executeBoxEditErrorHandler = (error: any): void => {\n        this.props.onError(error);\n        // eslint-disable-next-line no-console\n        console.error(error);\n    };\n\n    /**\n     * Gets a display integration, if available, for the Open With button\n     *\n     * @private\n     * @return {?Integration}\n     */\n    getDisplayIntegration(): ?Integration {\n        const { integrations }: State = this.state;\n        // We only consider an integration a display integration if is the only integration in our state\n        return Array.isArray(integrations) && integrations.length === 1 ? integrations[0] : null;\n    }\n\n    /**\n     * Render the Open With element\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const { language, messages: intlMessages, dropdownAlignment }: Props = this.props;\n        const {\n            fetchError,\n            isLoading,\n            integrations,\n            executePostData,\n            shouldRenderLoadingIntegrationPortal,\n            shouldRenderErrorIntegrationPortal,\n        }: State = this.state;\n\n        const className = classNames('be bcow', this.props.className);\n        const displayIntegration = this.getDisplayIntegration();\n        const numIntegrations = integrations ? integrations.length : 0;\n\n        return (\n            <Internationalize language={language} messages={intlMessages}>\n                <div className={className} data-testid=\"bcow-content\" id={this.id}>\n                    {numIntegrations <= 1 ? (\n                        <OpenWithButton\n                            displayIntegration={displayIntegration}\n                            error={fetchError}\n                            isLoading={isLoading}\n                            onClick={this.onIntegrationClick}\n                        />\n                    ) : (\n                        <OpenWithDropdownMenu\n                            dropdownAlignment={dropdownAlignment}\n                            integrations={((integrations: any): Array<Integration>)}\n                            onClick={this.onIntegrationClick}\n                        />\n                    )}\n                    {(shouldRenderLoadingIntegrationPortal || shouldRenderErrorIntegrationPortal) && (\n                        <IntegrationPortalContainer\n                            hasError={shouldRenderErrorIntegrationPortal}\n                            integrationWindow={this.integrationWindow}\n                        />\n                    )}\n                    {executePostData && (\n                        <ExecuteForm\n                            executePostData={executePostData}\n                            id={this.id}\n                            onSubmit={this.onExecuteFormSubmit}\n                            windowName={this.integrationWindow && this.integrationWindow.name}\n                        />\n                    )}\n                </div>\n            </Internationalize>\n        );\n    }\n}\n\nexport type ContentOpenWithProps = Props & ExternalProps;\nexport { ContentOpenWith as ContentOpenWithComponent };\nexport default withErrorBoundary(ORIGIN_OPEN_WITH, OpenWithFallbackButton)(ContentOpenWith);\n"]},"metadata":{},"sourceType":"module"}