{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file HOC for drag drop\n * @author Box\n */\nimport React, { PureComponent } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport classNames from 'classnames';\n\n/* eslint-disable no-plusplus */\nvar makeDroppable = function makeDroppable(_ref) {\n  var dropValidator = _ref.dropValidator,\n    onDrop = _ref.onDrop;\n  return function (Wrapped) {\n    var _class, _temp;\n    return _temp = _class = /*#__PURE__*/\n    function (_PureComponent) {\n      _inherits(DroppableComponent, _PureComponent);\n\n      /**\n       * [constructor]\n       *\n       * @param {*} props\n       * @return {DroppableComponent}\n       */\n      function DroppableComponent(props) {\n        var _this;\n        _classCallCheck(this, DroppableComponent);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(DroppableComponent).call(this, props));\n        _defineProperty(_assertThisInitialized(_this), \"removeEventListeners\", function (element) {\n          element.removeEventListener('dragenter', _this.handleDragEnter);\n          element.removeEventListener('dragover', _this.handleDragOver);\n          element.removeEventListener('dragleave', _this.handleDragLeave);\n          element.removeEventListener('drop', _this.handleDrop);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"bindDragDropHandlers\", function () {\n          var droppableEl = findDOMNode(_assertThisInitialized(_this)); // eslint-disable-line react/no-find-dom-node\n\n          if (!droppableEl || !(droppableEl instanceof Element)) {\n            return;\n          } // add event listeners directly on the element\n\n          droppableEl.addEventListener('dragenter', _this.handleDragEnter);\n          droppableEl.addEventListener('dragover', _this.handleDragOver);\n          droppableEl.addEventListener('dragleave', _this.handleDragLeave);\n          droppableEl.addEventListener('drop', _this.handleDrop);\n          _this.droppableEl = droppableEl;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleDragEnter\", function (event) {\n          // This allows onDrop to be fired\n          event.preventDefault(); // Use this to track the number of drag enters and leaves.\n          // This is used to normalize enters/leaves between parent/child elements\n          // we only want to do things in dragenter when the counter === 1\n\n          if (++_this.enterLeaveCounter === 1) {\n            var dataTransfer = event.dataTransfer; // if we don't have a dropValidator, we just default canDrop to true\n\n            var canDrop = dropValidator ? dropValidator(_this.props, dataTransfer) : true;\n            _this.setState({\n              isOver: true,\n              canDrop: canDrop\n            });\n          }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleDragOver\", function (event) {\n          // This allows onDrop to be fired\n          event.preventDefault();\n          var canDrop = _this.state.canDrop;\n          var dataTransfer = event.dataTransfer;\n          if (!dataTransfer) {\n            return;\n          }\n          if (!canDrop) {\n            dataTransfer.dropEffect = 'none';\n          } else if (dataTransfer.effectAllowed) {\n            // Set the drop effect if it was defined\n            dataTransfer.dropEffect = dataTransfer.effectAllowed;\n          }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleDrop\", function (event) {\n          event.preventDefault(); // reset enterLeaveCounter\n\n          _this.enterLeaveCounter = 0;\n          var canDrop = _this.state.canDrop;\n          _this.setState({\n            canDrop: false,\n            isDragging: false,\n            isOver: false\n          });\n          if (canDrop && onDrop) {\n            onDrop(event, _this.props);\n          }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleDragLeave\", function (event) {\n          event.preventDefault(); // if enterLeaveCounter is zero, it means that we're actually leaving the item\n\n          if (--_this.enterLeaveCounter > 0) {\n            return;\n          }\n          _this.setState({\n            canDrop: false,\n            isDragging: false,\n            isOver: false\n          });\n        });\n        _this.enterLeaveCounter = 0;\n        _this.state = {\n          canDrop: false,\n          isDragging: false,\n          isOver: false\n        };\n        return _this;\n      }\n      /**\n       * Adds event listeners once the component mounts\n       * @inheritdoc\n       */\n\n      _createClass(DroppableComponent, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          this.bindDragDropHandlers();\n        }\n      }, {\n        key: \"componentDidUpdate\",\n        value: function componentDidUpdate() {\n          if (!this.droppableEl) {\n            this.bindDragDropHandlers();\n            return;\n          } // eslint-disable-next-line react/no-find-dom-node\n\n          if (findDOMNode(this) !== this.droppableEl) {\n            this.removeEventListeners(this.droppableEl);\n            this.bindDragDropHandlers();\n          }\n        }\n        /**\n         * Function that removes the drag and drop related event listeners on the input element\n         *\n         * @param {Element} element\n         * @return {void}\n         */\n      }, {\n        key: \"componentWillUnmount\",\n        /**\n         * Removes event listeners when the component is going to unmount\n         * @inheritdoc\n         */\n        value: function componentWillUnmount() {\n          if (!this.droppableEl || !(this.droppableEl instanceof Element)) {\n            return;\n          }\n          this.removeEventListeners(this.droppableEl);\n        }\n        /**\n         * Function that gets called when an item is dragged into the drop zone\n         *\n         * @param {SyntheticEvent} event - The dragenter event\n         * @return {void}\n         */\n      }, {\n        key: \"render\",\n        /**\n         * Renders the HOC\n         *\n         * @private\n         * @inheritdoc\n         * @return {Element}\n         */\n        value: function render() {\n          var _this$props = this.props,\n            className = _this$props.className,\n            rest = _objectWithoutProperties(_this$props, [\"className\"]);\n          var _this$state = this.state,\n            canDrop = _this$state.canDrop,\n            isOver = _this$state.isOver;\n          var classes = classNames(className, {\n            'is-droppable': canDrop,\n            'is-over': isOver\n          });\n          var mergedProps = _objectSpread({}, rest, {}, this.state, {\n            className: classes\n          });\n          return React.createElement(Wrapped, mergedProps);\n        }\n      }]);\n      return DroppableComponent;\n    }(PureComponent), _defineProperty(_class, \"defaultProps\", {\n      className: ''\n    }), _temp;\n  };\n};\nexport default makeDroppable;","map":{"version":3,"sources":["../../../../src/elements/common/droppable/makeDroppable.js"],"names":["React","PureComponent","findDOMNode","classNames","makeDroppable","dropValidator","onDrop","Wrapped","className","props","enterLeaveCounter","state","canDrop","isDragging","isOver","bindDragDropHandlers","droppableEl","removeEventListeners","element","removeEventListener","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","Element","addEventListener","event","preventDefault","dataTransfer","setState","dropEffect","effectAllowed","rest","classes","mergedProps"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file HOC for drag drop\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport classNames from 'classnames';\nimport type { ClassComponent } from '../../../common/types/core';\n\ntype PropsShape = {\n    className: string,\n};\n\ntype State = {\n    canDrop: boolean,\n    isDragging: boolean,\n    isOver: boolean,\n};\n\n/* eslint-disable no-plusplus */\nconst makeDroppable = ({ dropValidator, onDrop }: { dropValidator?: Function, onDrop?: Function }) => <\n    Props: PropsShape,\n>(\n    Wrapped: Function,\n): ClassComponent<any, any> =>\n    class DroppableComponent extends PureComponent<Props, State> {\n        props: Props;\n\n        state: State;\n\n        enterLeaveCounter: number;\n\n        droppableEl: Element;\n\n        static defaultProps = {\n            className: '',\n        };\n\n        /**\n         * [constructor]\n         *\n         * @param {*} props\n         * @return {DroppableComponent}\n         */\n        constructor(props: Props) {\n            super(props);\n            this.enterLeaveCounter = 0;\n            this.state = {\n                canDrop: false,\n                isDragging: false,\n                isOver: false,\n            };\n        }\n\n        /**\n         * Adds event listeners once the component mounts\n         * @inheritdoc\n         */\n        componentDidMount() {\n            this.bindDragDropHandlers();\n        }\n\n        componentDidUpdate() {\n            if (!this.droppableEl) {\n                this.bindDragDropHandlers();\n                return;\n            }\n            // eslint-disable-next-line react/no-find-dom-node\n            if (findDOMNode(this) !== this.droppableEl) {\n                this.removeEventListeners(this.droppableEl);\n                this.bindDragDropHandlers();\n            }\n        }\n\n        /**\n         * Function that removes the drag and drop related event listeners on the input element\n         *\n         * @param {Element} element\n         * @return {void}\n         */\n        removeEventListeners = (element: Element) => {\n            element.removeEventListener('dragenter', this.handleDragEnter);\n            element.removeEventListener('dragover', this.handleDragOver);\n            element.removeEventListener('dragleave', this.handleDragLeave);\n            element.removeEventListener('drop', this.handleDrop);\n        };\n\n        /**\n         * Bind drag and drop event handlers to the droppableEl, when the wrapped element\n         * is changed, remove the event listeners on the previous droppableEl and add\n         * event listeners on the new droppableEl\n         */\n        bindDragDropHandlers = () => {\n            const droppableEl = findDOMNode(this); // eslint-disable-line react/no-find-dom-node\n            if (!droppableEl || !(droppableEl instanceof Element)) {\n                return;\n            }\n\n            // add event listeners directly on the element\n            droppableEl.addEventListener('dragenter', this.handleDragEnter);\n            droppableEl.addEventListener('dragover', this.handleDragOver);\n            droppableEl.addEventListener('dragleave', this.handleDragLeave);\n            droppableEl.addEventListener('drop', this.handleDrop);\n\n            this.droppableEl = droppableEl;\n        };\n\n        /**\n         * Removes event listeners when the component is going to unmount\n         * @inheritdoc\n         */\n        componentWillUnmount() {\n            if (!this.droppableEl || !(this.droppableEl instanceof Element)) {\n                return;\n            }\n\n            this.removeEventListeners(this.droppableEl);\n        }\n\n        /**\n         * Function that gets called when an item is dragged into the drop zone\n         *\n         * @param {SyntheticEvent} event - The dragenter event\n         * @return {void}\n         */\n        handleDragEnter = (event: DragEvent) => {\n            // This allows onDrop to be fired\n            event.preventDefault();\n\n            // Use this to track the number of drag enters and leaves.\n            // This is used to normalize enters/leaves between parent/child elements\n\n            // we only want to do things in dragenter when the counter === 1\n            if (++this.enterLeaveCounter === 1) {\n                const { dataTransfer } = event;\n\n                // if we don't have a dropValidator, we just default canDrop to true\n                const canDrop = dropValidator ? dropValidator(this.props, dataTransfer) : true;\n\n                this.setState({\n                    isOver: true,\n                    canDrop,\n                });\n            }\n        };\n\n        /**\n         * Function that gets called when an item is dragged over the drop zone\n         *\n         * @param {DragEvent} event - The dragover event\n         * @return {void}\n         */\n        handleDragOver = (event: DragEvent) => {\n            // This allows onDrop to be fired\n            event.preventDefault();\n\n            const { canDrop } = this.state;\n            const { dataTransfer } = event;\n\n            if (!dataTransfer) {\n                return;\n            }\n\n            if (!canDrop) {\n                dataTransfer.dropEffect = 'none';\n            } else if (dataTransfer.effectAllowed) {\n                // Set the drop effect if it was defined\n                dataTransfer.dropEffect = dataTransfer.effectAllowed;\n            }\n        };\n\n        /**\n         * Function that gets called when an item is drop onto the drop zone\n         *\n         * @param {DragEvent} event - The drop event\n         * @return {void}\n         */\n        handleDrop = (event: DragEvent) => {\n            event.preventDefault();\n\n            // reset enterLeaveCounter\n            this.enterLeaveCounter = 0;\n\n            const { canDrop } = this.state;\n\n            this.setState({\n                canDrop: false,\n                isDragging: false,\n                isOver: false,\n            });\n\n            if (canDrop && onDrop) {\n                onDrop(event, this.props);\n            }\n        };\n\n        /**\n         * Function that gets called when an item is dragged out of the drop zone\n         *\n         * @param {DragEvent} event - The dragleave event\n         * @return {void}\n         */\n        handleDragLeave = (event: DragEvent) => {\n            event.preventDefault();\n\n            // if enterLeaveCounter is zero, it means that we're actually leaving the item\n            if (--this.enterLeaveCounter > 0) {\n                return;\n            }\n\n            this.setState({\n                canDrop: false,\n                isDragging: false,\n                isOver: false,\n            });\n        };\n\n        /**\n         * Renders the HOC\n         *\n         * @private\n         * @inheritdoc\n         * @return {Element}\n         */\n        render() {\n            const { className, ...rest } = this.props;\n            const { canDrop, isOver } = this.state;\n\n            const classes = classNames(className, {\n                'is-droppable': canDrop,\n                'is-over': isOver,\n            });\n\n            const mergedProps = {\n                ...rest,\n                ...this.state,\n                className: classes,\n            };\n\n            return <Wrapped {...mergedProps} />;\n        }\n    };\n\nexport default makeDroppable;\n"]},"metadata":{},"sourceType":"module"}