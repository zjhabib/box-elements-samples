{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport PlainButton from '../../components/plain-button';\nimport messages from './messages';\nvar VersionHistoryLink = function VersionHistoryLink(_ref) {\n  var className = _ref.className,\n    versionCount = _ref.versionCount,\n    onClick = _ref.onClick,\n    rest = _objectWithoutProperties(_ref, [\"className\", \"versionCount\", \"onClick\"]);\n  var formattedMessageComponent = React.createElement(FormattedMessage, _extends({}, messages.savedVersions, {\n    values: {\n      versionCount: versionCount\n    }\n  })); // Only render it as a link if there is an onClick\n\n  if (onClick) {\n    return React.createElement(PlainButton, _extends({\n      className: classNames('lnk', className),\n      onClick: onClick\n    }, rest), formattedMessageComponent);\n  }\n  return React.createElement(\"div\", {\n    className: className\n  }, formattedMessageComponent);\n};\nVersionHistoryLink.defaultProps = {\n  className: ''\n};\nexport default VersionHistoryLink;","map":{"version":3,"sources":["../../../src/features/item-details/VersionHistoryLink.js"],"names":["React","classNames","FormattedMessage","PlainButton","messages","VersionHistoryLink","className","versionCount","onClick","rest","formattedMessageComponent","savedVersions","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,+BAAxB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AASA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,IAAA,EAA0D;EAAA,IAAvDC,SAAuD,GAAA,IAAA,CAAvDA,SAAuD;IAA5CC,YAA4C,GAAA,IAAA,CAA5CA,YAA4C;IAA9BC,OAA8B,GAAA,IAAA,CAA9BA,OAA8B;IAAlBC,IAAkB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,cAAA,EAAA,SAAA,CAAA,CAAA;EACjF,IAAMC,yBAAyB,GAAG,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAsBN,QAAQ,CAACO,aAA/B,EAAA;IAA8C,MAAM,EAAE;MAAEJ,YAAY,EAAZA;IAAF;EAAtD,CAAA,CAAA,CAAlC,CADiF,CAGjF;;EACA,IAAIC,OAAJ,EAAa;IACT,OACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA,QAAA,CAAA;MAAa,SAAS,EAAEP,UAAU,CAAC,KAAD,EAAQK,SAAR,CAAlC;MAAsD,OAAO,EAAEE;IAA/D,CAAA,EAA4EC,IAA5E,CAAA,EACKC,yBADL,CADJ;EAKH;EAED,OAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAEJ;EAAhB,CAAA,EAA4BI,yBAA5B,CAAP;AACH,CAbD;AAeAL,kBAAkB,CAACO,YAAnBP,GAAkC;EAC9BC,SAAS,EAAE;AADmB,CAAlCD;AAIA,eAAeA,kBAAf","sourcesContent":["// @flow\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\n\nimport PlainButton from '../../components/plain-button';\n\nimport messages from './messages';\n\ntype Props = {\n    className: string,\n    /** the number of saved versions that exist for this item, should be 2 or more */\n    onClick?: Function,\n    versionCount: number,\n};\n\nconst VersionHistoryLink = ({ className, versionCount, onClick, ...rest }: Props) => {\n    const formattedMessageComponent = <FormattedMessage {...messages.savedVersions} values={{ versionCount }} />;\n\n    // Only render it as a link if there is an onClick\n    if (onClick) {\n        return (\n            <PlainButton className={classNames('lnk', className)} onClick={onClick} {...rest}>\n                {formattedMessageComponent}\n            </PlainButton>\n        );\n    }\n\n    return <div className={className}>{formattedMessageComponent}</div>;\n};\n\nVersionHistoryLink.defaultProps = {\n    className: '',\n};\n\nexport default VersionHistoryLink;\n"]},"metadata":{},"sourceType":"module"}