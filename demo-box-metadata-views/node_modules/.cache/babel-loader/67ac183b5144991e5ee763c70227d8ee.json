{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '../../components/button/Button';\nimport TextInput from '../../components/text-input/TextInput';\nimport Tooltip from '../../components/tooltip/Tooltip';\nimport commonMessages from '../../common/messages';\nimport IconInfo from '../../icons/general/IconInfo';\nimport messages from './messages';\nimport './CustomInstanceNewField.scss';\nvar CustomInstanceNewField = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CustomInstanceNewField, _React$PureComponent);\n  function CustomInstanceNewField() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, CustomInstanceNewField);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CustomInstanceNewField)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      key: '',\n      value: '',\n      error: ''\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyChange\", function (event) {\n      _this.onChange(event, 'key');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onValueChange\", function (event) {\n      _this.onChange(event, 'value');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onAdd\", function () {\n      var _this$state = _this.state,\n        key = _this$state.key,\n        value = _this$state.value;\n      var _this$props = _this.props,\n        onAdd = _this$props.onAdd,\n        properties = _this$props.properties;\n      if (Object.prototype.hasOwnProperty.call(properties, key)) {\n        _this.setState({\n          error: React.createElement(FormattedMessage, messages.customErrorDuplicateKey)\n        });\n      } else if (key.startsWith('$')) {\n        _this.setState({\n          error: React.createElement(FormattedMessage, messages.customErrorInternalKey)\n        });\n      } else if (key) {\n        onAdd(key, value);\n      } else {\n        _this.setState({\n          error: React.createElement(FormattedMessage, messages.customErrorRequired)\n        });\n      }\n    });\n    return _this;\n  }\n  _createClass(CustomInstanceNewField, [{\n    key: \"onChange\",\n    /**\n     * Common change handler\n     *\n     * @param {Event} event - keyboard event\n     * @param {string} attr - key or value\n     * @return {void}\n     */\n    value: function onChange(event, attr) {\n      var currentTarget = event.currentTarget;\n      this.setState(_defineProperty({\n        error: ''\n      }, attr, currentTarget.value));\n    }\n    /**\n     * Change handler for the key\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        intl = _this$props2.intl,\n        isCancellable = _this$props2.isCancellable,\n        onCancel = _this$props2.onCancel;\n      var _this$state2 = this.state,\n        key = _this$state2.key,\n        value = _this$state2.value,\n        error = _this$state2.error;\n      return React.createElement(\"div\", {\n        className: \"custom-new-field\"\n      }, React.createElement(\"div\", {\n        className: \"custom-new-field-header\"\n      }, React.createElement(FormattedMessage, _extends({\n        tagName: \"h5\"\n      }, messages.customNewField)), React.createElement(Tooltip, {\n        text: React.createElement(FormattedMessage, messages.customNewFieldMessage)\n      }, React.createElement(\"div\", {\n        tabIndex: \"-1\"\n      }, React.createElement(IconInfo, {\n        color: \"#777\",\n        height: 18,\n        width: 18\n      })))), React.createElement(TextInput, {\n        error: error,\n        isRequired: true,\n        label: React.createElement(FormattedMessage, messages.customKey),\n        onChange: this.onKeyChange,\n        placeholder: intl.formatMessage(messages.customKeyPlaceholder),\n        type: \"text\",\n        value: key\n      }), React.createElement(TextInput, {\n        hideOptionalLabel: true,\n        label: React.createElement(FormattedMessage, messages.customValue),\n        onChange: this.onValueChange,\n        placeholder: intl.formatMessage(messages.customValuePlaceholder),\n        type: \"text\",\n        value: value\n      }), React.createElement(\"div\", {\n        className: \"custom-new-field-actions\"\n      }, isCancellable && React.createElement(Button, {\n        \"data-resin-target\": \"metadata-customfieldcancel\",\n        onClick: onCancel,\n        type: \"button\"\n      }, React.createElement(FormattedMessage, commonMessages.cancel)), React.createElement(Button, {\n        \"data-resin-target\": \"metadata-customfieldadd\",\n        onClick: this.onAdd,\n        type: \"button\"\n      }, React.createElement(FormattedMessage, messages.customAdd))));\n    }\n  }]);\n  return CustomInstanceNewField;\n}(React.PureComponent);\nexport { CustomInstanceNewField as CustomInstanceNewFieldBase };\nexport default injectIntl(CustomInstanceNewField);","map":{"version":3,"sources":["../../../src/features/metadata-instance-editor/CustomInstanceNewField.js"],"names":["React","FormattedMessage","injectIntl","Button","TextInput","Tooltip","commonMessages","IconInfo","messages","CustomInstanceNewField","PureComponent","key","value","error","event","attr","currentTarget","setState","onChange","state","onAdd","properties","props","Object","prototype","hasOwnProperty","call","customErrorDuplicateKey","startsWith","customErrorInternalKey","customErrorRequired","intl","isCancellable","onCancel","customNewField","customNewFieldMessage","customKey","onKeyChange","formatMessage","customKeyPlaceholder","customValue","onValueChange","customValuePlaceholder","cancel","customAdd","CustomInstanceNewFieldBase"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport TextInput from '../../components/text-input/TextInput';\nimport Tooltip from '../../components/tooltip/Tooltip';\nimport commonMessages from '../../common/messages';\nimport IconInfo from '../../icons/general/IconInfo';\n\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataFields } from '../../common/types/metadata';\nimport './CustomInstanceNewField.scss';\n\ntype Props = {\n    intl: any,\n    isCancellable: boolean,\n    onAdd: (key: string, value: MetadataFieldValue) => void,\n    onCancel: () => void,\n    properties: MetadataFields,\n};\n\ntype State = {\n    error: React.Node,\n    key: string,\n    value: string,\n};\n\nclass CustomInstanceNewField extends React.PureComponent<Props, State> {\n    state: State = {\n        key: '',\n        value: '',\n        error: '',\n    };\n\n    /**\n     * Common change handler\n     *\n     * @param {Event} event - keyboard event\n     * @param {string} attr - key or value\n     * @return {void}\n     */\n    onChange(event: SyntheticKeyboardEvent<HTMLInputElement>, attr: string) {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            error: '',\n            [attr]: currentTarget.value,\n        });\n    }\n\n    /**\n     * Change handler for the key\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'key');\n    };\n\n    /**\n     * Change handler for the value\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onValueChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'value');\n    };\n\n    /**\n     * Persists the new metadata added or shows an error\n     *\n     * @return {void}\n     */\n    onAdd = () => {\n        const { key, value }: State = this.state;\n        const { onAdd, properties }: Props = this.props;\n        if (Object.prototype.hasOwnProperty.call(properties, key)) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorDuplicateKey} />,\n            });\n        } else if (key.startsWith('$')) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorInternalKey} />,\n            });\n        } else if (key) {\n            onAdd(key, value);\n        } else {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorRequired} />,\n            });\n        }\n    };\n\n    render() {\n        const { intl, isCancellable, onCancel }: Props = this.props;\n        const { key, value, error }: State = this.state;\n        return (\n            <div className=\"custom-new-field\">\n                <div className=\"custom-new-field-header\">\n                    <FormattedMessage tagName=\"h5\" {...messages.customNewField} />\n                    <Tooltip text={<FormattedMessage {...messages.customNewFieldMessage} />}>\n                        <div tabIndex=\"-1\">\n                            <IconInfo color=\"#777\" height={18} width={18} />\n                        </div>\n                    </Tooltip>\n                </div>\n                <TextInput\n                    error={error}\n                    isRequired\n                    label={<FormattedMessage {...messages.customKey} />}\n                    onChange={this.onKeyChange}\n                    placeholder={intl.formatMessage(messages.customKeyPlaceholder)}\n                    type=\"text\"\n                    value={key}\n                />\n                <TextInput\n                    hideOptionalLabel\n                    label={<FormattedMessage {...messages.customValue} />}\n                    onChange={this.onValueChange}\n                    placeholder={intl.formatMessage(messages.customValuePlaceholder)}\n                    type=\"text\"\n                    value={value}\n                />\n                <div className=\"custom-new-field-actions\">\n                    {isCancellable && (\n                        <Button data-resin-target=\"metadata-customfieldcancel\" onClick={onCancel} type=\"button\">\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                    )}\n                    <Button data-resin-target=\"metadata-customfieldadd\" onClick={this.onAdd} type=\"button\">\n                        <FormattedMessage {...messages.customAdd} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { CustomInstanceNewField as CustomInstanceNewFieldBase };\nexport default injectIntl(CustomInstanceNewField);\n"]},"metadata":{},"sourceType":"module"}