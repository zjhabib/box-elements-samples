{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Content Explorer Component\n * @author Box\n */\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport cloneDeep from 'lodash/cloneDeep';\nimport debounce from 'lodash/debounce';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport uniqueid from 'lodash/uniqueId';\nimport CreateFolderDialog from '../common/create-folder-dialog';\nimport UploadDialog from '../common/upload-dialog';\nimport Header from '../common/header';\nimport Pagination from '../../features/pagination';\nimport SubHeader from '../common/sub-header/SubHeader';\nimport makeResponsive from '../common/makeResponsive';\nimport openUrlInsideIframe from '../../utils/iframe';\nimport Internationalize from '../common/Internationalize';\nimport API from '../../api';\nimport MetadataQueryAPIHelper from '../../features/metadata-based-view/MetadataQueryAPIHelper';\nimport Footer from './Footer';\nimport PreviewDialog from './PreviewDialog';\nimport ShareDialog from './ShareDialog';\nimport RenameDialog from './RenameDialog';\nimport DeleteConfirmationDialog from './DeleteConfirmationDialog';\nimport Content from './Content';\nimport isThumbnailReady from './utils';\nimport { isFocusableElement, isInputElement, focus } from '../../utils/dom';\nimport { FILE_SHARED_LINK_FIELDS_TO_FETCH, FOLDER_FIELDS_TO_FETCH } from '../../utils/fields';\nimport LocalStore from '../../utils/LocalStore';\nimport { withFeatureConsumer, withFeatureProvider } from '../common/feature-checking';\nimport { DEFAULT_HOSTNAME_UPLOAD, DEFAULT_HOSTNAME_API, DEFAULT_HOSTNAME_APP, DEFAULT_HOSTNAME_STATIC, DEFAULT_SEARCH_DEBOUNCE, SORT_ASC, FIELD_NAME, DEFAULT_ROOT, VIEW_SEARCH, VIEW_FOLDER, VIEW_ERROR, VIEW_RECENTS, VIEW_METADATA, VIEW_MODE_LIST, TYPE_FILE, TYPE_WEBLINK, TYPE_FOLDER, CLIENT_NAME_CONTENT_EXPLORER, DEFAULT_PAGE_NUMBER, DEFAULT_PAGE_SIZE, DEFAULT_VIEW_FILES, DEFAULT_VIEW_RECENTS, DEFAULT_VIEW_METADATA, ERROR_CODE_ITEM_NAME_INVALID, ERROR_CODE_ITEM_NAME_TOO_LONG, TYPED_ID_FOLDER_PREFIX } from '../../constants';\nimport '../common/fonts.scss';\nimport '../common/base.scss';\nimport '../common/modal.scss';\nimport './ContentExplorer.scss';\nvar GRID_VIEW_MAX_COLUMNS = 7;\nvar GRID_VIEW_MIN_COLUMNS = 1;\nvar localStoreViewMode = 'bce.defaultViewMode';\nvar ContentExplorer = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContentExplorer, _Component);\n\n  // Keeps track of very 1st load\n\n  /**\n   * [constructor]\n   *\n   * @private\n   * @return {ContentExplorer}\n   */\n  function ContentExplorer(props) {\n    var _this;\n    _classCallCheck(this, ContentExplorer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContentExplorer).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"firstLoad\", true);\n    _defineProperty(_assertThisInitialized(_this), \"store\", new LocalStore());\n    _defineProperty(_assertThisInitialized(_this), \"showMetadataQueryResultsSuccessCallback\", function (metadataQueryCollection) {\n      var nextMarker = metadataQueryCollection.nextMarker;\n      var _this$state = _this.state,\n        currentCollection = _this$state.currentCollection,\n        currentPageNumber = _this$state.currentPageNumber,\n        markers = _this$state.markers;\n      var cloneMarkers = _toConsumableArray(markers);\n      if (nextMarker) {\n        cloneMarkers[currentPageNumber + 1] = nextMarker;\n      }\n      _this.setState({\n        currentCollection: _objectSpread({}, currentCollection, {}, metadataQueryCollection, {\n          percentLoaded: 100\n        }),\n        markers: cloneMarkers\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"errorCallback\", function (error) {\n      _this.setState({\n        view: VIEW_ERROR\n      });\n      /* eslint-disable no-console */\n\n      console.error(error);\n      /* eslint-enable no-console */\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"refreshCollection\", function () {\n      var _this$state2 = _this.state,\n        id = _this$state2.currentCollection.id,\n        view = _this$state2.view,\n        searchQuery = _this$state2.searchQuery;\n      if (view === VIEW_FOLDER && id) {\n        _this.fetchFolder(id, false);\n      } else if (view === VIEW_RECENTS) {\n        _this.showRecents(false);\n      } else if (view === VIEW_SEARCH && searchQuery) {\n        _this.search(searchQuery);\n      } else if (view === VIEW_METADATA) {\n        _this.showMetadataQueryResults();\n      } else {\n        throw new Error('Cannot refresh incompatible view!');\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"fetchFolder\", function (id) {\n      var triggerNavigationEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rootFolderId = _this.props.rootFolderId;\n      var _this$state3 = _this.state,\n        currentId = _this$state3.currentCollection.id,\n        currentOffset = _this$state3.currentOffset,\n        limit = _this$state3.currentPageSize,\n        _this$state3$searchQu = _this$state3.searchQuery,\n        searchQuery = _this$state3$searchQu === void 0 ? '' : _this$state3$searchQu,\n        sortBy = _this$state3.sortBy,\n        sortDirection = _this$state3.sortDirection;\n      var folderId = typeof id === 'string' ? id : rootFolderId;\n      var hasFolderChanged = currentId && currentId !== folderId;\n      var hasSearchQuery = !!searchQuery.trim().length;\n      var offset = hasFolderChanged || hasSearchQuery ? 0 : currentOffset; // Reset offset on folder or mode change\n      // If we are navigating around, aka not first load\n      // then reset the focus to the root so that after\n      // the collection loads the activeElement is not the\n      // button that was clicked to fetch the folder\n\n      if (!_this.firstLoad) {\n        _this.rootElement.focus();\n      } // Reset search state, the view and show busy indicator\n\n      _this.setState({\n        searchQuery: '',\n        view: VIEW_FOLDER,\n        currentCollection: _this.currentUnloadedCollection(),\n        currentOffset: offset\n      }); // Fetch the folder using folder API\n\n      _this.api.getFolderAPI().getFolder(folderId, limit, offset, sortBy, sortDirection, function (collection) {\n        _this.fetchFolderSuccessCallback(collection, triggerNavigationEvent);\n      }, _this.errorCallback, {\n        fields: FOLDER_FIELDS_TO_FETCH,\n        forceFetch: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onItemClick\", function (item) {\n      // If the id was passed in, just use that\n      if (typeof item === 'string') {\n        _this.fetchFolder(item);\n        return;\n      }\n      var id = item.id,\n        type = item.type;\n      var isTouch = _this.props.isTouch;\n      if (type === TYPE_FOLDER) {\n        _this.fetchFolder(id);\n        return;\n      }\n      if (isTouch) {\n        return;\n      }\n      _this.preview(item);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"searchSuccessCallback\", function (collection) {\n      var selected = _this.state.selected; // Close any open modals\n\n      _this.closeModals();\n      _this.updateCollection(collection, selected);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"debouncedSearch\", debounce(function (id, query) {\n      var _this$state4 = _this.state,\n        currentOffset = _this$state4.currentOffset,\n        currentPageSize = _this$state4.currentPageSize;\n      _this.api.getSearchAPI().search(id, query, currentPageSize, currentOffset, _this.searchSuccessCallback, _this.errorCallback, {\n        fields: FOLDER_FIELDS_TO_FETCH,\n        forceFetch: true\n      });\n    }, DEFAULT_SEARCH_DEBOUNCE));\n    _defineProperty(_assertThisInitialized(_this), \"search\", function (query) {\n      var rootFolderId = _this.props.rootFolderId;\n      var _this$state5 = _this.state,\n        id = _this$state5.currentCollection.id,\n        currentOffset = _this$state5.currentOffset,\n        searchQuery = _this$state5.searchQuery;\n      var folderId = typeof id === 'string' ? id : rootFolderId;\n      var trimmedQuery = query.trim();\n      if (!query) {\n        // Cancel the debounce so we don't search on a previous query\n        _this.debouncedSearch.cancel(); // Query was cleared out, load the prior folder\n        // The prior folder is always the parent folder for search\n\n        _this.setState({\n          currentOffset: 0\n        }, function () {\n          _this.fetchFolder(folderId, false);\n        });\n        return;\n      }\n      if (!trimmedQuery) {\n        // Query now only has bunch of spaces\n        // do nothing and but update prior state\n        _this.setState({\n          searchQuery: query\n        });\n        return;\n      }\n      _this.setState({\n        currentCollection: _this.currentUnloadedCollection(),\n        currentOffset: trimmedQuery === searchQuery ? currentOffset : 0,\n        searchQuery: query,\n        selected: undefined,\n        view: VIEW_SEARCH\n      });\n      _this.debouncedSearch(folderId, query);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"upload\", function () {\n      var _this$state$currentCo = _this.state.currentCollection,\n        id = _this$state$currentCo.id,\n        permissions = _this$state$currentCo.permissions;\n      var canUpload = _this.props.canUpload;\n      if (!canUpload || !id || !permissions) {\n        return;\n      }\n      var can_upload = permissions.can_upload;\n      if (!can_upload) {\n        return;\n      }\n      _this.setState({\n        isUploadModalOpen: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"uploadSuccessHandler\", function () {\n      var id = _this.state.currentCollection.id;\n      _this.fetchFolder(id, false);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"changeShareAccess\", function (access) {\n      var selected = _this.state.selected;\n      var canSetShareAccess = _this.props.canSetShareAccess;\n      if (!selected || !canSetShareAccess) {\n        return;\n      }\n      var permissions = selected.permissions,\n        type = selected.type;\n      if (!permissions || !type) {\n        return;\n      }\n      var can_set_share_access = permissions.can_set_share_access;\n      if (!can_set_share_access) {\n        return;\n      }\n      _this.setState({\n        isLoading: true\n      });\n      _this.api.getAPI(type).share(selected, access, function (updatedItem) {\n        _this.setState({\n          isLoading: false\n        });\n        _this.select(updatedItem);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"sort\", function (sortBy, sortDirection) {\n      var id = _this.state.currentCollection.id;\n      if (id) {\n        _this.setState({\n          sortBy: sortBy,\n          sortDirection: sortDirection\n        }, _this.refreshCollection);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"attemptThumbnailGeneration\", /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(item) {\n        var entries, representation, updatedRepresentation;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                entries = getProp(item, 'representations.entries');\n                representation = getProp(entries, '[0]');\n                if (!representation) {\n                  _context.next = 7;\n                  break;\n                }\n                _context.next = 5;\n                return _this.api.getFileAPI(false).generateRepresentation(representation);\n              case 5:\n                updatedRepresentation = _context.sent;\n                if (updatedRepresentation !== representation) {\n                  _this.updateItemInCollection(_objectSpread({}, cloneDeep(item), {\n                    representations: {\n                      entries: [updatedRepresentation].concat(_toConsumableArray(entries.slice(1)))\n                    }\n                  }));\n                }\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    _defineProperty(_assertThisInitialized(_this), \"updateItemInCollection\", function (newItem) {\n      var currentCollection = _this.state.currentCollection;\n      var _currentCollection$it = currentCollection.items,\n        items = _currentCollection$it === void 0 ? [] : _currentCollection$it;\n      var newCollection = _objectSpread({}, currentCollection);\n      newCollection.items = items.map(function (item) {\n        return item.id === newItem.id ? newItem : item;\n      });\n      _this.setState({\n        currentCollection: newCollection\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"select\", function (item) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n      var _this$state6 = _this.state,\n        selected = _this$state6.selected,\n        currentCollection = _this$state6.currentCollection;\n      var _currentCollection$it2 = currentCollection.items,\n        items = _currentCollection$it2 === void 0 ? [] : _currentCollection$it2;\n      var onSelect = _this.props.onSelect;\n      if (item === selected) {\n        callback(item);\n        return;\n      }\n      var selectedItem = _objectSpread({}, item, {\n        selected: true\n      });\n      _this.updateCollection(currentCollection, selectedItem, function () {\n        onSelect(cloneDeep([selectedItem]));\n        callback(selectedItem);\n      });\n      var focusedRow = items.findIndex(function (i) {\n        return i.id === item.id;\n      });\n      _this.setState({\n        focusedRow: focusedRow\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"preview\", function (item) {\n      var type = item.type,\n        url = item.url;\n      if (type === TYPE_WEBLINK) {\n        window.open(url);\n        return;\n      }\n      _this.select(item, _this.previewCallback);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"previewCallback\", function () {\n      var selected = _this.state.selected;\n      var canPreview = _this.props.canPreview;\n      if (!selected || !canPreview) {\n        return;\n      }\n      var permissions = selected.permissions;\n      if (!permissions) {\n        return;\n      }\n      var can_preview = permissions.can_preview;\n      if (!can_preview) {\n        return;\n      }\n      _this.setState({\n        isPreviewModalOpen: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"download\", function (item) {\n      _this.select(item, _this.downloadCallback);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"downloadCallback\", function () {\n      var selected = _this.state.selected;\n      var _this$props = _this.props,\n        canDownload = _this$props.canDownload,\n        onDownload = _this$props.onDownload;\n      if (!selected || !canDownload) {\n        return;\n      }\n      var id = selected.id,\n        permissions = selected.permissions;\n      if (!id || !permissions) {\n        return;\n      }\n      var can_download = permissions.can_download;\n      if (!can_download) {\n        return;\n      }\n      var openUrl = function openUrl(url) {\n        openUrlInsideIframe(url);\n        onDownload(cloneDeep([selected]));\n      };\n      var type = selected.type;\n      if (type === TYPE_FILE) {\n        _this.api.getFileAPI().getDownloadUrl(id, selected, openUrl, noop);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"delete\", function (item) {\n      _this.select(item, _this.deleteCallback);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"deleteCallback\", function () {\n      var _this$state7 = _this.state,\n        selected = _this$state7.selected,\n        isDeleteModalOpen = _this$state7.isDeleteModalOpen;\n      var _this$props2 = _this.props,\n        canDelete = _this$props2.canDelete,\n        onDelete = _this$props2.onDelete;\n      if (!selected || !canDelete) {\n        return;\n      }\n      var id = selected.id,\n        permissions = selected.permissions,\n        parent = selected.parent,\n        type = selected.type;\n      if (!id || !permissions || !parent || !type) {\n        return;\n      }\n      var parentId = parent.id;\n      var can_delete = permissions.can_delete;\n      if (!can_delete || !parentId) {\n        return;\n      }\n      if (!isDeleteModalOpen) {\n        _this.setState({\n          isDeleteModalOpen: true\n        });\n        return;\n      }\n      _this.setState({\n        isLoading: true\n      });\n      _this.api.getAPI(type).deleteItem(selected, function () {\n        onDelete(cloneDeep([selected]));\n        _this.refreshCollection();\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"rename\", function (item) {\n      _this.select(item, _this.renameCallback);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renameCallback\", function (nameWithoutExt, extension) {\n      var _this$state8 = _this.state,\n        selected = _this$state8.selected,\n        isRenameModalOpen = _this$state8.isRenameModalOpen;\n      var _this$props3 = _this.props,\n        canRename = _this$props3.canRename,\n        onRename = _this$props3.onRename;\n      if (!selected || !canRename) {\n        return;\n      }\n      var id = selected.id,\n        permissions = selected.permissions,\n        type = selected.type;\n      if (!id || !permissions || !type) {\n        return;\n      }\n      var can_rename = permissions.can_rename;\n      if (!can_rename) {\n        return;\n      }\n      if (!isRenameModalOpen || !nameWithoutExt) {\n        _this.setState({\n          isRenameModalOpen: true,\n          errorCode: ''\n        });\n        return;\n      }\n      var name = \"\".concat(nameWithoutExt).concat(extension);\n      if (!nameWithoutExt.trim()) {\n        _this.setState({\n          errorCode: ERROR_CODE_ITEM_NAME_INVALID,\n          isLoading: false\n        });\n        return;\n      }\n      _this.setState({\n        isLoading: true\n      });\n      _this.api.getAPI(type).rename(selected, name, function (updatedItem) {\n        _this.setState({\n          isRenameModalOpen: false\n        });\n        _this.refreshCollection();\n        _this.select(updatedItem);\n        onRename(cloneDeep(selected));\n      }, function (_ref2) {\n        var code = _ref2.code;\n        _this.setState({\n          errorCode: code,\n          isLoading: false\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"createFolder\", function () {\n      _this.createFolderCallback();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"createFolderCallback\", function (name) {\n      var _this$state9 = _this.state,\n        isCreateFolderModalOpen = _this$state9.isCreateFolderModalOpen,\n        currentCollection = _this$state9.currentCollection;\n      var _this$props4 = _this.props,\n        canCreateNewFolder = _this$props4.canCreateNewFolder,\n        onCreate = _this$props4.onCreate;\n      if (!canCreateNewFolder) {\n        return;\n      }\n      var id = currentCollection.id,\n        permissions = currentCollection.permissions;\n      if (!id || !permissions) {\n        return;\n      }\n      var can_upload = permissions.can_upload;\n      if (!can_upload) {\n        return;\n      }\n      if (!isCreateFolderModalOpen || !name) {\n        _this.setState({\n          isCreateFolderModalOpen: true,\n          errorCode: ''\n        });\n        return;\n      }\n      if (!name) {\n        _this.setState({\n          errorCode: ERROR_CODE_ITEM_NAME_INVALID,\n          isLoading: false\n        });\n        return;\n      }\n      if (name.length > 255) {\n        _this.setState({\n          errorCode: ERROR_CODE_ITEM_NAME_TOO_LONG,\n          isLoading: false\n        });\n        return;\n      }\n      _this.setState({\n        isLoading: true\n      });\n      _this.api.getFolderAPI().create(id, name, function (item) {\n        _this.refreshCollection();\n        _this.select(item);\n        onCreate(cloneDeep(item));\n      }, function (_ref3) {\n        var code = _ref3.code;\n        _this.setState({\n          errorCode: code,\n          isLoading: false\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"share\", function (item) {\n      _this.select(item, _this.shareCallback);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"fetchSharedLinkInfo\", function (item) {\n      var id = item.id,\n        type = item.type;\n      switch (type) {\n        case TYPE_FOLDER:\n          _this.api.getFolderAPI().getFolderFields(id, _this.handleSharedLinkSuccess, noop, {\n            fields: FILE_SHARED_LINK_FIELDS_TO_FETCH\n          });\n          break;\n        case TYPE_FILE:\n          _this.api.getFileAPI().getFile(id, _this.handleSharedLinkSuccess, noop, {\n            fields: FILE_SHARED_LINK_FIELDS_TO_FETCH\n          });\n          break;\n        case TYPE_WEBLINK:\n          _this.api.getWebLinkAPI().getWeblink(id, _this.handleSharedLinkSuccess, noop, {\n            fields: FILE_SHARED_LINK_FIELDS_TO_FETCH\n          });\n          break;\n        default:\n          throw new Error('Unknown Type');\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleSharedLinkSuccess\", function (newItem) {\n      var currentCollection = _this.state.currentCollection; // Update item in collection\n\n      _this.updateCollection(currentCollection, newItem, function () {\n        return _this.setState({\n          isShareModalOpen: true\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"shareCallback\", function () {\n      var selected = _this.state.selected;\n      var canShare = _this.props.canShare;\n      if (!selected || !canShare) {\n        return;\n      }\n      var permissions = selected.permissions;\n      if (!permissions) {\n        return;\n      }\n      var can_share = permissions.can_share;\n      if (!can_share) {\n        return;\n      }\n      _this.fetchSharedLinkInfo(selected);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"tableRef\", function (table) {\n      _this.table = table;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"closeModals\", function () {\n      var focusedRow = _this.state.focusedRow;\n      _this.setState({\n        isLoading: false,\n        isDeleteModalOpen: false,\n        isRenameModalOpen: false,\n        isCreateFolderModalOpen: false,\n        isShareModalOpen: false,\n        isUploadModalOpen: false,\n        isPreviewModalOpen: false\n      });\n      var _this$state10 = _this.state,\n        selected = _this$state10.selected,\n        _this$state10$current = _this$state10.currentCollection.items,\n        items = _this$state10$current === void 0 ? [] : _this$state10$current;\n      if (selected && items.length > 0) {\n        focus(_this.rootElement, \".bce-item-row-\".concat(focusedRow));\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (event) {\n      if (isInputElement(event.target)) {\n        return;\n      }\n      var rootFolderId = _this.props.rootFolderId;\n      var key = event.key.toLowerCase();\n      switch (key) {\n        case '/':\n          focus(_this.rootElement, '.be-search input[type=\"search\"]', false);\n          event.preventDefault();\n          break;\n        case 'arrowdown':\n          focus(_this.rootElement, '.bce-item-row', false);\n          _this.setState({\n            focusedRow: 0\n          });\n          event.preventDefault();\n          break;\n        case 'g':\n          break;\n        case 'b':\n          if (_this.globalModifier) {\n            focus(_this.rootElement, '.be-breadcrumb button', false);\n            event.preventDefault();\n          }\n          break;\n        case 'f':\n          if (_this.globalModifier) {\n            _this.fetchFolder(rootFolderId);\n            event.preventDefault();\n          }\n          break;\n        case 'u':\n          if (_this.globalModifier) {\n            _this.upload();\n            event.preventDefault();\n          }\n          break;\n        case 'r':\n          if (_this.globalModifier) {\n            _this.showRecents();\n            event.preventDefault();\n          }\n          break;\n        case 'n':\n          if (_this.globalModifier) {\n            _this.createFolder();\n            event.preventDefault();\n          }\n          break;\n        default:\n          _this.globalModifier = false;\n          return;\n      }\n      _this.globalModifier = key === 'g';\n    });\n    _defineProperty(_assertThisInitialized(_this), \"paginate\", function (newOffset) {\n      _this.setState({\n        currentOffset: newOffset\n      }, _this.refreshCollection);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"markerBasedPaginate\", function (newOffset) {\n      var currentPageNumber = _this.state.currentPageNumber;\n      _this.setState({\n        currentPageNumber: currentPageNumber + newOffset // newOffset could be negative\n      }, _this.refreshCollection);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getViewMode\", function () {\n      return _this.store.getItem(localStoreViewMode) || VIEW_MODE_LIST;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getMaxNumberOfGridViewColumnsForWidth\", function () {\n      var _this$props5 = _this.props,\n        isSmall = _this$props5.isSmall,\n        isMedium = _this$props5.isMedium,\n        isLarge = _this$props5.isLarge;\n      var maxWidthColumns = GRID_VIEW_MAX_COLUMNS;\n      if (isSmall) {\n        maxWidthColumns = 1;\n      } else if (isMedium) {\n        maxWidthColumns = 3;\n      } else if (isLarge) {\n        maxWidthColumns = 5;\n      }\n      return maxWidthColumns;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"changeViewMode\", function (viewMode) {\n      _this.store.setItem(localStoreViewMode, viewMode);\n      _this.forceUpdate();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onGridViewSliderChange\", function (sliderValue) {\n      // need to do this calculation since lowest value of grid view slider\n      // means highest number of columns\n      var gridColumnCount = GRID_VIEW_MAX_COLUMNS - sliderValue + 1;\n      _this.setState({\n        gridColumnCount: gridColumnCount\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateMetadata\", function (item, field, oldValue, newValue) {\n      _this.metadataQueryAPIHelper.updateMetadata(item, field, oldValue, newValue, function () {\n        _this.updateMetadataSuccessCallback(item, field, newValue);\n      }, _this.errorCallback);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateMetadataSuccessCallback\", function (item, field, newValue) {\n      var currentCollection = _this.state.currentCollection;\n      var _currentCollection$it3 = currentCollection.items,\n        items = _currentCollection$it3 === void 0 ? [] : _currentCollection$it3,\n        nextMarker = currentCollection.nextMarker;\n      var updatedItems = items.map(function (collectionItem) {\n        var clonedItem = cloneDeep(collectionItem);\n        if (item.id === clonedItem.id) {\n          var fields = getProp(clonedItem, 'metadata.enterprise.fields', []);\n          fields.forEach(function (itemField) {\n            if (itemField.key.split('.').pop() === field) {\n              itemField.value = newValue; // set updated metadata value to correct item in currentCollection\n            }\n          });\n        }\n\n        return clonedItem;\n      });\n      _this.setState({\n        currentCollection: {\n          items: updatedItems,\n          nextMarker: nextMarker,\n          percentLoaded: 100\n        }\n      });\n    });\n    var apiHost = props.apiHost,\n      initialPage = props.initialPage,\n      initialPageSize = props.initialPageSize,\n      language = props.language,\n      requestInterceptor = props.requestInterceptor,\n      responseInterceptor = props.responseInterceptor,\n      _rootFolderId = props.rootFolderId,\n      sharedLink = props.sharedLink,\n      sharedLinkPassword = props.sharedLinkPassword,\n      _sortBy = props.sortBy,\n      _sortDirection = props.sortDirection,\n      token = props.token,\n      uploadHost = props.uploadHost;\n    _this.api = new API({\n      apiHost: apiHost,\n      clientName: CLIENT_NAME_CONTENT_EXPLORER,\n      id: \"\".concat(TYPED_ID_FOLDER_PREFIX).concat(_rootFolderId),\n      language: language,\n      requestInterceptor: requestInterceptor,\n      responseInterceptor: responseInterceptor,\n      sharedLink: sharedLink,\n      sharedLinkPassword: sharedLinkPassword,\n      token: token,\n      uploadHost: uploadHost\n    });\n    _this.id = uniqueid('bce_');\n    _this.state = {\n      currentCollection: {},\n      currentOffset: initialPageSize * (initialPage - 1),\n      currentPageSize: initialPageSize,\n      currentPageNumber: 0,\n      errorCode: '',\n      focusedRow: 0,\n      gridColumnCount: 4,\n      isCreateFolderModalOpen: false,\n      isDeleteModalOpen: false,\n      isLoading: false,\n      isPreviewModalOpen: false,\n      isRenameModalOpen: false,\n      isShareModalOpen: false,\n      isUploadModalOpen: false,\n      markers: [],\n      rootName: '',\n      searchQuery: '',\n      sortBy: _sortBy,\n      sortDirection: _sortDirection,\n      view: VIEW_FOLDER\n    };\n    return _this;\n  }\n  /**\n   * Destroys api instances\n   *\n   * @private\n   * @return {void}\n   */\n\n  _createClass(ContentExplorer, [{\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.api.destroy(true);\n    }\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearCache();\n    }\n    /**\n     * Fetches the root folder on load\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props6 = this.props,\n        currentFolderId = _this$props6.currentFolderId,\n        defaultView = _this$props6.defaultView;\n      this.rootElement = document.getElementById(this.id);\n      this.appElement = this.rootElement.firstElementChild;\n      switch (defaultView) {\n        case DEFAULT_VIEW_RECENTS:\n          this.showRecents();\n          break;\n        case DEFAULT_VIEW_METADATA:\n          this.showMetadataQueryResults();\n          break;\n        default:\n          this.fetchFolder(currentFolderId);\n      }\n    }\n    /**\n     * Fetches the current folder if different\n     * from what was already fetched before.\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref4, prevState) {\n      var prevFolderId = _ref4.currentFolderId;\n      var currentFolderId = this.props.currentFolderId;\n      var id = prevState.currentCollection.id;\n      if (prevFolderId === currentFolderId) {\n        return;\n      }\n      if (typeof currentFolderId === 'string' && id !== currentFolderId) {\n        this.fetchFolder(currentFolderId);\n      }\n    }\n    /**\n     * Metadata queries success callback\n     *\n     * @private\n     * @param {Object} metadataQueryCollection - Metadata query response collection\n     * @return {void}\n     */\n  }, {\n    key: \"showMetadataQueryResults\",\n    /**\n     * Queries metadata_queries/execute API and fetches the result\n     *\n     * @private\n     * @return {void}\n     */\n    value: function showMetadataQueryResults() {\n      var _this$props$metadataQ = this.props.metadataQuery,\n        metadataQuery = _this$props$metadataQ === void 0 ? {} : _this$props$metadataQ;\n      var _this$state11 = this.state,\n        currentPageNumber = _this$state11.currentPageNumber,\n        markers = _this$state11.markers;\n      var metadataQueryClone = cloneDeep(metadataQuery);\n      if (currentPageNumber === 0) {\n        // Preserve the marker as part of the original query\n        markers[currentPageNumber] = metadataQueryClone.marker;\n      }\n      if (typeof markers[currentPageNumber] === 'string') {\n        // Set marker to the query to get next set of results\n        metadataQueryClone.marker = markers[currentPageNumber];\n      }\n      if (typeof metadataQueryClone.limit !== 'number') {\n        // Set limit to the query for pagination support\n        metadataQueryClone.limit = DEFAULT_PAGE_SIZE;\n      } // Reset search state, the view and show busy indicator\n\n      this.setState({\n        searchQuery: '',\n        currentCollection: this.currentUnloadedCollection(),\n        view: VIEW_METADATA\n      });\n      this.metadataQueryAPIHelper = new MetadataQueryAPIHelper(this.api);\n      this.metadataQueryAPIHelper.fetchMetadataQueryResults(metadataQueryClone, this.showMetadataQueryResultsSuccessCallback, this.errorCallback);\n    }\n    /**\n     * Resets the collection so that the loading bar starts showing\n     *\n     * @private\n     * @return {Collection}\n     */\n  }, {\n    key: \"currentUnloadedCollection\",\n    value: function currentUnloadedCollection() {\n      var currentCollection = this.state.currentCollection;\n      return _extends(currentCollection, {\n        percentLoaded: 0\n      });\n    }\n    /**\n     * Network error callback\n     *\n     * @private\n     * @param {Error} error error object\n     * @return {void}\n     */\n  }, {\n    key: \"finishNavigation\",\n    /**\n     * Focuses the grid and fires navigate event\n     *\n     * @private\n     * @return {void}\n     */\n    value: function finishNavigation() {\n      var autoFocus = this.props.autoFocus;\n      var percentLoaded = this.state.currentCollection.percentLoaded; // If loading for the very first time, only allow focus if autoFocus is true\n\n      if (this.firstLoad && !autoFocus) {\n        this.firstLoad = false;\n        return;\n      } // Don't focus the grid until its loaded and user is not already on an interactable element\n\n      if (percentLoaded === 100 && !isFocusableElement(document.activeElement)) {\n        focus(this.rootElement, '.bce-item-row');\n        this.setState({\n          focusedRow: 0\n        });\n      }\n      this.firstLoad = false;\n    }\n    /**\n     * Refreshing the item collection depending upon the view.\n     * Navigation event is prevented.\n     *\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: \"fetchFolderSuccessCallback\",\n    /**\n     * Folder fetch success callback\n     *\n     * @private\n     * @param {Object} collection - item collection object\n     * @param {Boolean|void} triggerNavigationEvent - To trigger navigate event and focus grid\n     * @return {void}\n     */\n    value: function fetchFolderSuccessCallback(collection, triggerNavigationEvent) {\n      var _this2 = this;\n      var _this$props7 = this.props,\n        onNavigate = _this$props7.onNavigate,\n        rootFolderId = _this$props7.rootFolderId;\n      var boxItem = collection.boxItem,\n        id = collection.id,\n        name = collection.name;\n      var selected = this.state.selected;\n      var rootName = id === rootFolderId ? name : ''; // Close any open modals\n\n      this.closeModals();\n      this.updateCollection(collection, selected, function () {\n        if (triggerNavigationEvent) {\n          // Fire folder navigation event\n          _this2.setState({\n            rootName: rootName\n          }, _this2.finishNavigation);\n          if (boxItem) {\n            onNavigate(cloneDeep(boxItem));\n          }\n        } else {\n          _this2.setState({\n            rootName: rootName\n          });\n        }\n      });\n    }\n    /**\n     * Fetches a folder, defaults to fetching root folder\n     *\n     * @private\n     * @param {string|void} [id] folder id\n     * @param {Boolean|void} [triggerNavigationEvent] To trigger navigate event\n     * @return {void}\n     */\n  }, {\n    key: \"recentsSuccessCallback\",\n    /**\n     * Recents fetch success callback\n     *\n     * @private\n     * @param {Object} collection item collection object\n     * @param {Boolean} triggerNavigationEvent - To trigger navigate event\n     * @return {void}\n     */\n    value: function recentsSuccessCallback(collection, triggerNavigationEvent) {\n      if (triggerNavigationEvent) {\n        this.updateCollection(collection, undefined, this.finishNavigation);\n      } else {\n        this.updateCollection(collection);\n      }\n    }\n    /**\n     * Shows recents.\n     *\n     * @private\n     * @param {Boolean|void} [triggerNavigationEvent] To trigger navigate event\n     * @return {void}\n     */\n  }, {\n    key: \"showRecents\",\n    value: function showRecents() {\n      var _this3 = this;\n      var triggerNavigationEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var rootFolderId = this.props.rootFolderId; // Reset search state, the view and show busy indicator\n\n      this.setState({\n        searchQuery: '',\n        view: VIEW_RECENTS,\n        currentCollection: this.currentUnloadedCollection(),\n        currentOffset: 0\n      }); // Fetch the folder using folder API\n\n      this.api.getRecentsAPI().recents(rootFolderId, function (collection) {\n        _this3.recentsSuccessCallback(collection, triggerNavigationEvent);\n      }, this.errorCallback, {\n        fields: FOLDER_FIELDS_TO_FETCH,\n        forceFetch: true\n      });\n    }\n    /**\n     * Uploads\n     *\n     * @private\n     * @param {File} file dom file object\n     * @return {void}\n     */\n  }, {\n    key: \"updateCollection\",\n    /**\n     * Sets state with currentCollection updated to have items.selected properties\n     * set according to the given selected param. Also updates the selected item in the\n     * currentcollection. selectedItem will be set to the selected state\n     * item if it is in currentCollection, otherwise it will be set to undefined.\n     *\n     * @private\n     * @param {Collection} collection - collection that needs to be updated\n     * @param {Object} [selectedItem] - The item that should be selected in that collection (if present)\n     * @param {Function} [callback] - callback function that should be called after setState occurs\n     * @return {void}\n     */\n    value: function () {\n      var _updateCollection = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(collection, selectedItem) {\n        var _this4 = this;\n        var callback,\n          _collection$items,\n          items,\n          fileAPI,\n          newCollection,\n          selectedId,\n          newSelectedItem,\n          itemThumbnails,\n          _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                callback = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : noop;\n                _collection$items = collection.items, items = _collection$items === void 0 ? [] : _collection$items;\n                fileAPI = this.api.getFileAPI(false);\n                newCollection = _objectSpread({}, collection);\n                selectedId = selectedItem ? selectedItem.id : null;\n                _context2.next = 7;\n                return Promise.all(items.map(function (item) {\n                  return item.type === TYPE_FILE ? fileAPI.getThumbnailUrl(item) : null;\n                }));\n              case 7:\n                itemThumbnails = _context2.sent;\n                newCollection.items = items.map(function (item, index) {\n                  var isSelected = item.id === selectedId;\n                  var currentItem = isSelected ? selectedItem : item;\n                  var thumbnailUrl = itemThumbnails[index];\n                  var newItem = _objectSpread({}, currentItem, {\n                    selected: isSelected,\n                    thumbnailUrl: thumbnailUrl\n                  });\n                  if (item.type === TYPE_FILE && thumbnailUrl && !isThumbnailReady(newItem)) {\n                    _this4.attemptThumbnailGeneration(newItem);\n                  } // Only if selectedItem is in the current collection do we want to set selected state\n\n                  if (isSelected) {\n                    newSelectedItem = newItem;\n                  }\n                  return newItem;\n                });\n                this.setState({\n                  currentCollection: newCollection,\n                  selected: newSelectedItem\n                }, callback);\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function updateCollection(_x2, _x3) {\n        return _updateCollection.apply(this, arguments);\n      }\n      return updateCollection;\n    }()\n    /**\n     * Attempts to generate a thumbnail for the given item and assigns the\n     * item its thumbnail url if successful\n     *\n     * @param {BoxItem} item - item to generate thumbnail for\n     * @return {Promise<void>}\n     */\n  }, {\n    key: \"render\",\n    /**\n     * Renders the file picker\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n    value: function render() {\n      var _this$props8 = this.props,\n        apiHost = _this$props8.apiHost,\n        appHost = _this$props8.appHost,\n        canCreateNewFolder = _this$props8.canCreateNewFolder,\n        canDelete = _this$props8.canDelete,\n        canDownload = _this$props8.canDownload,\n        canPreview = _this$props8.canPreview,\n        canRename = _this$props8.canRename,\n        canSetShareAccess = _this$props8.canSetShareAccess,\n        canShare = _this$props8.canShare,\n        canUpload = _this$props8.canUpload,\n        className = _this$props8.className,\n        contentPreviewProps = _this$props8.contentPreviewProps,\n        contentUploaderProps = _this$props8.contentUploaderProps,\n        defaultView = _this$props8.defaultView,\n        isMedium = _this$props8.isMedium,\n        isSmall = _this$props8.isSmall,\n        isTouch = _this$props8.isTouch,\n        language = _this$props8.language,\n        logoUrl = _this$props8.logoUrl,\n        measureRef = _this$props8.measureRef,\n        messages = _this$props8.messages,\n        fieldsToShow = _this$props8.fieldsToShow,\n        onDownload = _this$props8.onDownload,\n        onPreview = _this$props8.onPreview,\n        onUpload = _this$props8.onUpload,\n        requestInterceptor = _this$props8.requestInterceptor,\n        responseInterceptor = _this$props8.responseInterceptor,\n        rootFolderId = _this$props8.rootFolderId,\n        sharedLink = _this$props8.sharedLink,\n        sharedLinkPassword = _this$props8.sharedLinkPassword,\n        staticHost = _this$props8.staticHost,\n        staticPath = _this$props8.staticPath,\n        previewLibraryVersion = _this$props8.previewLibraryVersion,\n        token = _this$props8.token,\n        uploadHost = _this$props8.uploadHost;\n      var _this$state12 = this.state,\n        currentCollection = _this$state12.currentCollection,\n        currentPageNumber = _this$state12.currentPageNumber,\n        currentPageSize = _this$state12.currentPageSize,\n        errorCode = _this$state12.errorCode,\n        focusedRow = _this$state12.focusedRow,\n        gridColumnCount = _this$state12.gridColumnCount,\n        isCreateFolderModalOpen = _this$state12.isCreateFolderModalOpen,\n        isDeleteModalOpen = _this$state12.isDeleteModalOpen,\n        isLoading = _this$state12.isLoading,\n        isPreviewModalOpen = _this$state12.isPreviewModalOpen,\n        isRenameModalOpen = _this$state12.isRenameModalOpen,\n        isShareModalOpen = _this$state12.isShareModalOpen,\n        isUploadModalOpen = _this$state12.isUploadModalOpen,\n        markers = _this$state12.markers,\n        rootName = _this$state12.rootName,\n        searchQuery = _this$state12.searchQuery,\n        selected = _this$state12.selected,\n        view = _this$state12.view;\n      var id = currentCollection.id,\n        offset = currentCollection.offset,\n        permissions = currentCollection.permissions,\n        totalCount = currentCollection.totalCount;\n      var _ref5 = permissions || {},\n        can_upload = _ref5.can_upload;\n      var styleClassName = classNames('be bce', className);\n      var allowUpload = canUpload && !!can_upload;\n      var allowCreate = canCreateNewFolder && !!can_upload;\n      var isDefaultViewMetadata = defaultView === DEFAULT_VIEW_METADATA;\n      var isErrorView = view === VIEW_ERROR;\n      var viewMode = this.getViewMode();\n      var maxGridColumnCount = this.getMaxNumberOfGridViewColumnsForWidth();\n      var hasNextMarker = !!markers[currentPageNumber + 1];\n      var hasPreviousMarker = currentPageNumber === 1 || !!markers[currentPageNumber - 1];\n      /* eslint-disable jsx-a11y/no-static-element-interactions */\n\n      /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n\n      return React.createElement(Internationalize, {\n        language: language,\n        messages: messages\n      }, React.createElement(\"div\", {\n        id: this.id,\n        className: styleClassName,\n        ref: measureRef,\n        \"data-testid\": \"content-explorer\"\n      }, React.createElement(\"div\", {\n        className: \"be-app-element\",\n        onKeyDown: this.onKeyDown,\n        tabIndex: 0\n      }, !isDefaultViewMetadata && React.createElement(React.Fragment, null, React.createElement(Header, {\n        view: view,\n        isSmall: isSmall,\n        searchQuery: searchQuery,\n        logoUrl: logoUrl,\n        onSearch: this.search\n      }), React.createElement(SubHeader, {\n        view: view,\n        viewMode: viewMode,\n        rootId: rootFolderId,\n        isSmall: isSmall,\n        rootName: rootName,\n        currentCollection: currentCollection,\n        canUpload: allowUpload,\n        canCreateNewFolder: allowCreate,\n        gridColumnCount: gridColumnCount,\n        gridMaxColumns: GRID_VIEW_MAX_COLUMNS,\n        gridMinColumns: GRID_VIEW_MIN_COLUMNS,\n        maxGridColumnCountForWidth: maxGridColumnCount,\n        onUpload: this.upload,\n        onCreate: this.createFolder,\n        onGridViewSliderChange: this.onGridViewSliderChange,\n        onItemClick: this.fetchFolder,\n        onSortChange: this.sort,\n        onViewModeChange: this.changeViewMode\n      })), React.createElement(Content, {\n        canDelete: canDelete,\n        canDownload: canDownload,\n        canPreview: canPreview,\n        canRename: canRename,\n        canSetShareAccess: canSetShareAccess,\n        canShare: canShare,\n        currentCollection: currentCollection,\n        focusedRow: focusedRow,\n        gridColumnCount: Math.min(gridColumnCount, maxGridColumnCount),\n        isMedium: isMedium,\n        isSmall: isSmall,\n        isTouch: isTouch,\n        fieldsToShow: fieldsToShow,\n        onItemClick: this.onItemClick,\n        onItemDelete: this.delete,\n        onItemDownload: this.download,\n        onItemPreview: this.preview,\n        onItemRename: this.rename,\n        onItemSelect: this.select,\n        onItemShare: this.share,\n        onMetadataUpdate: this.updateMetadata,\n        onSortChange: this.sort,\n        rootElement: this.rootElement,\n        rootId: rootFolderId,\n        tableRef: this.tableRef,\n        view: view,\n        viewMode: viewMode\n      }), !isErrorView && React.createElement(Footer, null, React.createElement(Pagination, {\n        hasNextMarker: hasNextMarker,\n        hasPrevMarker: hasPreviousMarker,\n        offset: offset,\n        onOffsetChange: this.paginate,\n        pageSize: currentPageSize,\n        totalCount: totalCount,\n        onMarkerBasedPageChange: this.markerBasedPaginate\n      }))), allowUpload && !!this.appElement ? React.createElement(UploadDialog, {\n        isOpen: isUploadModalOpen,\n        currentFolderId: id,\n        token: token,\n        sharedLink: sharedLink,\n        sharedLinkPassword: sharedLinkPassword,\n        apiHost: apiHost,\n        uploadHost: uploadHost,\n        onClose: this.uploadSuccessHandler,\n        parentElement: this.rootElement,\n        appElement: this.appElement,\n        onUpload: onUpload,\n        contentUploaderProps: contentUploaderProps,\n        requestInterceptor: requestInterceptor,\n        responseInterceptor: responseInterceptor\n      }) : null, allowCreate && !!this.appElement ? React.createElement(CreateFolderDialog, {\n        isOpen: isCreateFolderModalOpen,\n        onCreate: this.createFolderCallback,\n        onCancel: this.closeModals,\n        isLoading: isLoading,\n        errorCode: errorCode,\n        parentElement: this.rootElement,\n        appElement: this.appElement\n      }) : null, canDelete && selected && !!this.appElement ? React.createElement(DeleteConfirmationDialog, {\n        isOpen: isDeleteModalOpen,\n        onDelete: this.deleteCallback,\n        onCancel: this.closeModals,\n        item: selected,\n        isLoading: isLoading,\n        parentElement: this.rootElement,\n        appElement: this.appElement\n      }) : null, canRename && selected && !!this.appElement ? React.createElement(RenameDialog, {\n        isOpen: isRenameModalOpen,\n        onRename: this.renameCallback,\n        onCancel: this.closeModals,\n        item: selected,\n        isLoading: isLoading,\n        errorCode: errorCode,\n        parentElement: this.rootElement,\n        appElement: this.appElement\n      }) : null, canShare && selected && !!this.appElement ? React.createElement(ShareDialog, {\n        isOpen: isShareModalOpen,\n        canSetShareAccess: canSetShareAccess,\n        onShareAccessChange: this.changeShareAccess,\n        onCancel: this.refreshCollection,\n        item: selected,\n        isLoading: isLoading,\n        parentElement: this.rootElement,\n        appElement: this.appElement\n      }) : null, canPreview && selected && !!this.appElement ? React.createElement(PreviewDialog, {\n        isOpen: isPreviewModalOpen,\n        isTouch: isTouch,\n        onCancel: this.closeModals,\n        item: selected,\n        currentCollection: currentCollection,\n        token: token,\n        parentElement: this.rootElement,\n        appElement: this.appElement,\n        onPreview: onPreview,\n        onDownload: onDownload,\n        canDownload: canDownload,\n        cache: this.api.getCache(),\n        apiHost: apiHost,\n        appHost: appHost,\n        staticHost: staticHost,\n        staticPath: staticPath,\n        previewLibraryVersion: previewLibraryVersion,\n        sharedLink: sharedLink,\n        sharedLinkPassword: sharedLinkPassword,\n        contentPreviewProps: contentPreviewProps,\n        requestInterceptor: requestInterceptor,\n        responseInterceptor: responseInterceptor\n      }) : null));\n      /* eslint-enable jsx-a11y/no-static-element-interactions */\n\n      /* eslint-enable jsx-a11y/no-noninteractive-tabindex */\n    }\n  }]);\n\n  return ContentExplorer;\n}(Component);\n_defineProperty(ContentExplorer, \"defaultProps\", {\n  rootFolderId: DEFAULT_ROOT,\n  sortBy: FIELD_NAME,\n  sortDirection: SORT_ASC,\n  canDownload: true,\n  canDelete: true,\n  canUpload: true,\n  canRename: true,\n  canShare: true,\n  canPreview: true,\n  canSetShareAccess: true,\n  canCreateNewFolder: true,\n  autoFocus: false,\n  apiHost: DEFAULT_HOSTNAME_API,\n  appHost: DEFAULT_HOSTNAME_APP,\n  staticHost: DEFAULT_HOSTNAME_STATIC,\n  uploadHost: DEFAULT_HOSTNAME_UPLOAD,\n  className: '',\n  onDelete: noop,\n  onDownload: noop,\n  onPreview: noop,\n  onRename: noop,\n  onCreate: noop,\n  onSelect: noop,\n  onUpload: noop,\n  onNavigate: noop,\n  defaultView: DEFAULT_VIEW_FILES,\n  initialPage: DEFAULT_PAGE_NUMBER,\n  initialPageSize: DEFAULT_PAGE_SIZE,\n  contentPreviewProps: {\n    contentSidebarProps: {}\n  },\n  contentUploaderProps: {}\n});\nexport { ContentExplorer as ContentExplorerComponent };\nexport default flow([makeResponsive, withFeatureConsumer, withFeatureProvider])(ContentExplorer);","map":{"version":3,"sources":["../../../src/elements/content-explorer/ContentExplorer.js"],"names":["React","Component","classNames","cloneDeep","debounce","flow","getProp","noop","uniqueid","CreateFolderDialog","UploadDialog","Header","Pagination","SubHeader","makeResponsive","openUrlInsideIframe","Internationalize","API","MetadataQueryAPIHelper","Footer","PreviewDialog","ShareDialog","RenameDialog","DeleteConfirmationDialog","Content","isThumbnailReady","isFocusableElement","isInputElement","focus","FILE_SHARED_LINK_FIELDS_TO_FETCH","FOLDER_FIELDS_TO_FETCH","LocalStore","withFeatureConsumer","withFeatureProvider","DEFAULT_HOSTNAME_UPLOAD","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_APP","DEFAULT_HOSTNAME_STATIC","DEFAULT_SEARCH_DEBOUNCE","SORT_ASC","FIELD_NAME","DEFAULT_ROOT","VIEW_SEARCH","VIEW_FOLDER","VIEW_ERROR","VIEW_RECENTS","VIEW_METADATA","VIEW_MODE_LIST","TYPE_FILE","TYPE_WEBLINK","TYPE_FOLDER","CLIENT_NAME_CONTENT_EXPLORER","DEFAULT_PAGE_NUMBER","DEFAULT_PAGE_SIZE","DEFAULT_VIEW_FILES","DEFAULT_VIEW_RECENTS","DEFAULT_VIEW_METADATA","ERROR_CODE_ITEM_NAME_INVALID","ERROR_CODE_ITEM_NAME_TOO_LONG","TYPED_ID_FOLDER_PREFIX","GRID_VIEW_MAX_COLUMNS","GRID_VIEW_MIN_COLUMNS","localStoreViewMode","ContentExplorer","rootFolderId","sortBy","sortDirection","canDownload","canDelete","canUpload","canRename","canShare","canPreview","canSetShareAccess","canCreateNewFolder","autoFocus","apiHost","appHost","staticHost","uploadHost","className","onDelete","onDownload","onPreview","onRename","onCreate","onSelect","onUpload","onNavigate","defaultView","initialPage","initialPageSize","contentPreviewProps","contentSidebarProps","contentUploaderProps","props","language","requestInterceptor","responseInterceptor","sharedLink","sharedLinkPassword","token","api","clientName","id","state","currentCollection","currentOffset","currentPageSize","currentPageNumber","errorCode","focusedRow","gridColumnCount","isCreateFolderModalOpen","isDeleteModalOpen","isLoading","isPreviewModalOpen","isRenameModalOpen","isShareModalOpen","isUploadModalOpen","markers","rootName","searchQuery","view","destroy","clearCache","currentFolderId","rootElement","document","getElementById","appElement","firstElementChild","showRecents","showMetadataQueryResults","fetchFolder","prevFolderId","prevState","metadataQueryCollection","nextMarker","cloneMarkers","setState","percentLoaded","metadataQuery","metadataQueryClone","marker","limit","currentUnloadedCollection","metadataQueryAPIHelper","fetchMetadataQueryResults","showMetadataQueryResultsSuccessCallback","errorCallback","error","console","firstLoad","activeElement","search","Error","collection","triggerNavigationEvent","boxItem","name","selected","closeModals","updateCollection","finishNavigation","currentId","folderId","hasFolderChanged","hasSearchQuery","trim","length","offset","getFolderAPI","getFolder","fetchFolderSuccessCallback","fields","forceFetch","item","type","isTouch","preview","query","getSearchAPI","searchSuccessCallback","trimmedQuery","debouncedSearch","cancel","undefined","getRecentsAPI","recents","recentsSuccessCallback","permissions","can_upload","access","can_set_share_access","getAPI","share","updatedItem","select","refreshCollection","selectedItem","callback","items","fileAPI","getFileAPI","newCollection","selectedId","itemThumbnails","all","map","getThumbnailUrl","index","isSelected","currentItem","thumbnailUrl","newItem","attemptThumbnailGeneration","newSelectedItem","entries","representation","updatedRepresentation","generateRepresentation","updateItemInCollection","representations","slice","findIndex","i","url","window","open","previewCallback","can_preview","downloadCallback","can_download","openUrl","getDownloadUrl","deleteCallback","parent","parentId","can_delete","deleteItem","renameCallback","nameWithoutExt","extension","can_rename","rename","code","createFolderCallback","create","shareCallback","getFolderFields","handleSharedLinkSuccess","getFile","getWebLinkAPI","getWeblink","can_share","fetchSharedLinkInfo","table","event","target","key","toLowerCase","preventDefault","globalModifier","upload","createFolder","newOffset","store","getItem","isSmall","isMedium","isLarge","maxWidthColumns","viewMode","setItem","forceUpdate","sliderValue","field","oldValue","newValue","updateMetadata","updateMetadataSuccessCallback","updatedItems","clonedItem","collectionItem","forEach","itemField","split","pop","value","logoUrl","measureRef","messages","fieldsToShow","staticPath","previewLibraryVersion","totalCount","styleClassName","allowUpload","allowCreate","isDefaultViewMetadata","isErrorView","getViewMode","maxGridColumnCount","getMaxNumberOfGridViewColumnsForWidth","hasNextMarker","hasPreviousMarker","onKeyDown","onGridViewSliderChange","sort","changeViewMode","Math","min","onItemClick","delete","download","tableRef","paginate","markerBasedPaginate","uploadSuccessHandler","changeShareAccess","getCache","ContentExplorerComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Content Explorer Component\n * @author Box\n */\n\nimport 'regenerator-runtime/runtime';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport cloneDeep from 'lodash/cloneDeep';\nimport debounce from 'lodash/debounce';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport uniqueid from 'lodash/uniqueId';\nimport CreateFolderDialog from '../common/create-folder-dialog';\nimport UploadDialog from '../common/upload-dialog';\nimport Header from '../common/header';\nimport Pagination from '../../features/pagination';\nimport SubHeader from '../common/sub-header/SubHeader';\nimport makeResponsive from '../common/makeResponsive';\nimport openUrlInsideIframe from '../../utils/iframe';\nimport Internationalize from '../common/Internationalize';\nimport API from '../../api';\nimport MetadataQueryAPIHelper from '../../features/metadata-based-view/MetadataQueryAPIHelper';\nimport Footer from './Footer';\nimport PreviewDialog from './PreviewDialog';\nimport ShareDialog from './ShareDialog';\nimport RenameDialog from './RenameDialog';\nimport DeleteConfirmationDialog from './DeleteConfirmationDialog';\nimport Content from './Content';\nimport isThumbnailReady from './utils';\nimport { isFocusableElement, isInputElement, focus } from '../../utils/dom';\nimport { FILE_SHARED_LINK_FIELDS_TO_FETCH, FOLDER_FIELDS_TO_FETCH } from '../../utils/fields';\nimport LocalStore from '../../utils/LocalStore';\nimport { withFeatureConsumer, withFeatureProvider, type FeatureConfig } from '../common/feature-checking';\nimport {\n    DEFAULT_HOSTNAME_UPLOAD,\n    DEFAULT_HOSTNAME_API,\n    DEFAULT_HOSTNAME_APP,\n    DEFAULT_HOSTNAME_STATIC,\n    DEFAULT_SEARCH_DEBOUNCE,\n    SORT_ASC,\n    FIELD_NAME,\n    DEFAULT_ROOT,\n    VIEW_SEARCH,\n    VIEW_FOLDER,\n    VIEW_ERROR,\n    VIEW_RECENTS,\n    VIEW_METADATA,\n    VIEW_MODE_LIST,\n    TYPE_FILE,\n    TYPE_WEBLINK,\n    TYPE_FOLDER,\n    CLIENT_NAME_CONTENT_EXPLORER,\n    DEFAULT_PAGE_NUMBER,\n    DEFAULT_PAGE_SIZE,\n    DEFAULT_VIEW_FILES,\n    DEFAULT_VIEW_RECENTS,\n    DEFAULT_VIEW_METADATA,\n    ERROR_CODE_ITEM_NAME_INVALID,\n    ERROR_CODE_ITEM_NAME_TOO_LONG,\n    TYPED_ID_FOLDER_PREFIX,\n} from '../../constants';\nimport type { ViewMode } from '../common/flowTypes';\nimport type { MetadataQuery, FieldsToShow } from '../../common/types/metadataQueries';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport type {\n    View,\n    DefaultView,\n    StringMap,\n    SortBy,\n    SortDirection,\n    Token,\n    Access,\n    Collection,\n    BoxItemPermission,\n    BoxItem,\n} from '../../common/types/core';\n\nimport '../common/fonts.scss';\nimport '../common/base.scss';\nimport '../common/modal.scss';\nimport './ContentExplorer.scss';\n\nconst GRID_VIEW_MAX_COLUMNS = 7;\nconst GRID_VIEW_MIN_COLUMNS = 1;\n\ntype Props = {\n    apiHost: string,\n    appHost: string,\n    autoFocus: boolean,\n    canCreateNewFolder: boolean,\n    canDelete: boolean,\n    canDownload: boolean,\n    canPreview: boolean,\n    canRename: boolean,\n    canSetShareAccess: boolean,\n    canShare: boolean,\n    canUpload: boolean,\n    className: string,\n    contentPreviewProps: ContentPreviewProps,\n    contentUploaderProps: ContentUploaderProps,\n    currentFolderId?: string,\n    defaultView: DefaultView,\n    features: FeatureConfig,\n    fieldsToShow?: FieldsToShow,\n    initialPage: number,\n    initialPageSize: number,\n    isLarge: boolean,\n    isMedium: boolean,\n    isSmall: boolean,\n    isTouch: boolean,\n    isVeryLarge: boolean,\n    language?: string,\n    logoUrl?: string,\n    measureRef?: Function,\n    messages?: StringMap,\n    metadataQuery?: MetadataQuery,\n    onCreate: Function,\n    onDelete: Function,\n    onDownload: Function,\n    onNavigate: Function,\n    onPreview: Function,\n    onRename: Function,\n    onSelect: Function,\n    onUpload: Function,\n    previewLibraryVersion: string,\n    requestInterceptor?: Function,\n    responseInterceptor?: Function,\n    rootFolderId: string,\n    sharedLink?: string,\n    sharedLinkPassword?: string,\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n    staticHost: string,\n    staticPath: string,\n    token: Token,\n    uploadHost: string,\n};\n\ntype State = {\n    currentCollection: Collection,\n    currentOffset: number,\n    currentPageNumber: number,\n    currentPageSize: number,\n    errorCode: string,\n    focusedRow: number,\n    gridColumnCount: number,\n    isCreateFolderModalOpen: boolean,\n    isDeleteModalOpen: boolean,\n    isLoading: boolean,\n    isPreviewModalOpen: boolean,\n    isRenameModalOpen: boolean,\n    isShareModalOpen: boolean,\n    isUploadModalOpen: boolean,\n    markers: Array<?string>,\n    rootName: string,\n    searchQuery: string,\n    selected?: BoxItem,\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n    view: View,\n};\n\nconst localStoreViewMode = 'bce.defaultViewMode';\n\nclass ContentExplorer extends Component<Props, State> {\n    id: string;\n\n    api: API;\n\n    state: State;\n\n    props: Props;\n\n    table: any;\n\n    rootElement: HTMLElement;\n\n    appElement: HTMLElement;\n\n    globalModifier: boolean;\n\n    firstLoad: boolean = true; // Keeps track of very 1st load\n\n    store: LocalStore = new LocalStore();\n\n    metadataQueryAPIHelper: MetadataQueryAPIHelper;\n\n    static defaultProps = {\n        rootFolderId: DEFAULT_ROOT,\n        sortBy: FIELD_NAME,\n        sortDirection: SORT_ASC,\n        canDownload: true,\n        canDelete: true,\n        canUpload: true,\n        canRename: true,\n        canShare: true,\n        canPreview: true,\n        canSetShareAccess: true,\n        canCreateNewFolder: true,\n        autoFocus: false,\n        apiHost: DEFAULT_HOSTNAME_API,\n        appHost: DEFAULT_HOSTNAME_APP,\n        staticHost: DEFAULT_HOSTNAME_STATIC,\n        uploadHost: DEFAULT_HOSTNAME_UPLOAD,\n        className: '',\n        onDelete: noop,\n        onDownload: noop,\n        onPreview: noop,\n        onRename: noop,\n        onCreate: noop,\n        onSelect: noop,\n        onUpload: noop,\n        onNavigate: noop,\n        defaultView: DEFAULT_VIEW_FILES,\n        initialPage: DEFAULT_PAGE_NUMBER,\n        initialPageSize: DEFAULT_PAGE_SIZE,\n        contentPreviewProps: {\n            contentSidebarProps: {},\n        },\n        contentUploaderProps: {},\n    };\n\n    /**\n     * [constructor]\n     *\n     * @private\n     * @return {ContentExplorer}\n     */\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            apiHost,\n            initialPage,\n            initialPageSize,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            rootFolderId,\n            sharedLink,\n            sharedLinkPassword,\n            sortBy,\n            sortDirection,\n            token,\n            uploadHost,\n        }: Props = props;\n\n        this.api = new API({\n            apiHost,\n            clientName: CLIENT_NAME_CONTENT_EXPLORER,\n            id: `${TYPED_ID_FOLDER_PREFIX}${rootFolderId}`,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            sharedLink,\n            sharedLinkPassword,\n            token,\n            uploadHost,\n        });\n\n        this.id = uniqueid('bce_');\n\n        this.state = {\n            currentCollection: {},\n            currentOffset: initialPageSize * (initialPage - 1),\n            currentPageSize: initialPageSize,\n            currentPageNumber: 0,\n            errorCode: '',\n            focusedRow: 0,\n            gridColumnCount: 4,\n            isCreateFolderModalOpen: false,\n            isDeleteModalOpen: false,\n            isLoading: false,\n            isPreviewModalOpen: false,\n            isRenameModalOpen: false,\n            isShareModalOpen: false,\n            isUploadModalOpen: false,\n            markers: [],\n            rootName: '',\n            searchQuery: '',\n            sortBy,\n            sortDirection,\n            view: VIEW_FOLDER,\n        };\n    }\n\n    /**\n     * Destroys api instances\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.clearCache();\n    }\n\n    /**\n     * Fetches the root folder on load\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidMount() {\n        const { currentFolderId, defaultView }: Props = this.props;\n        this.rootElement = ((document.getElementById(this.id): any): HTMLElement);\n        this.appElement = ((this.rootElement.firstElementChild: any): HTMLElement);\n\n        switch (defaultView) {\n            case DEFAULT_VIEW_RECENTS:\n                this.showRecents();\n                break;\n            case DEFAULT_VIEW_METADATA:\n                this.showMetadataQueryResults();\n                break;\n            default:\n                this.fetchFolder(currentFolderId);\n        }\n    }\n\n    /**\n     * Fetches the current folder if different\n     * from what was already fetched before.\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidUpdate({ currentFolderId: prevFolderId }: Props, prevState: State): void {\n        const { currentFolderId }: Props = this.props;\n        const {\n            currentCollection: { id },\n        }: State = prevState;\n\n        if (prevFolderId === currentFolderId) {\n            return;\n        }\n\n        if (typeof currentFolderId === 'string' && id !== currentFolderId) {\n            this.fetchFolder(currentFolderId);\n        }\n    }\n\n    /**\n     * Metadata queries success callback\n     *\n     * @private\n     * @param {Object} metadataQueryCollection - Metadata query response collection\n     * @return {void}\n     */\n    showMetadataQueryResultsSuccessCallback = (metadataQueryCollection: Collection): void => {\n        const { nextMarker } = metadataQueryCollection;\n        const { currentCollection, currentPageNumber, markers }: State = this.state;\n        const cloneMarkers = [...markers];\n        if (nextMarker) {\n            cloneMarkers[currentPageNumber + 1] = nextMarker;\n        }\n        this.setState({\n            currentCollection: {\n                ...currentCollection,\n                ...metadataQueryCollection,\n                percentLoaded: 100,\n            },\n            markers: cloneMarkers,\n        });\n    };\n\n    /**\n     * Queries metadata_queries/execute API and fetches the result\n     *\n     * @private\n     * @return {void}\n     */\n    showMetadataQueryResults() {\n        const { metadataQuery = {} }: Props = this.props;\n        const { currentPageNumber, markers }: State = this.state;\n        const metadataQueryClone = cloneDeep(metadataQuery);\n\n        if (currentPageNumber === 0) {\n            // Preserve the marker as part of the original query\n            markers[currentPageNumber] = metadataQueryClone.marker;\n        }\n\n        if (typeof markers[currentPageNumber] === 'string') {\n            // Set marker to the query to get next set of results\n            metadataQueryClone.marker = markers[currentPageNumber];\n        }\n\n        if (typeof metadataQueryClone.limit !== 'number') {\n            // Set limit to the query for pagination support\n            metadataQueryClone.limit = DEFAULT_PAGE_SIZE;\n        }\n        // Reset search state, the view and show busy indicator\n        this.setState({\n            searchQuery: '',\n            currentCollection: this.currentUnloadedCollection(),\n            view: VIEW_METADATA,\n        });\n        this.metadataQueryAPIHelper = new MetadataQueryAPIHelper(this.api);\n        this.metadataQueryAPIHelper.fetchMetadataQueryResults(\n            metadataQueryClone,\n            this.showMetadataQueryResultsSuccessCallback,\n            this.errorCallback,\n        );\n    }\n\n    /**\n     * Resets the collection so that the loading bar starts showing\n     *\n     * @private\n     * @return {Collection}\n     */\n    currentUnloadedCollection(): Collection {\n        const { currentCollection }: State = this.state;\n        return Object.assign(currentCollection, {\n            percentLoaded: 0,\n        });\n    }\n\n    /**\n     * Network error callback\n     *\n     * @private\n     * @param {Error} error error object\n     * @return {void}\n     */\n    errorCallback = (error: any) => {\n        this.setState({\n            view: VIEW_ERROR,\n        });\n        /* eslint-disable no-console */\n        console.error(error);\n        /* eslint-enable no-console */\n    };\n\n    /**\n     * Focuses the grid and fires navigate event\n     *\n     * @private\n     * @return {void}\n     */\n    finishNavigation() {\n        const { autoFocus }: Props = this.props;\n        const {\n            currentCollection: { percentLoaded },\n        }: State = this.state;\n\n        // If loading for the very first time, only allow focus if autoFocus is true\n        if (this.firstLoad && !autoFocus) {\n            this.firstLoad = false;\n            return;\n        }\n\n        // Don't focus the grid until its loaded and user is not already on an interactable element\n        if (percentLoaded === 100 && !isFocusableElement(document.activeElement)) {\n            focus(this.rootElement, '.bce-item-row');\n            this.setState({ focusedRow: 0 });\n        }\n\n        this.firstLoad = false;\n    }\n\n    /**\n     * Refreshing the item collection depending upon the view.\n     * Navigation event is prevented.\n     *\n     * @private\n     * @return {void}\n     */\n    refreshCollection = () => {\n        const {\n            currentCollection: { id },\n            view,\n            searchQuery,\n        }: State = this.state;\n        if (view === VIEW_FOLDER && id) {\n            this.fetchFolder(id, false);\n        } else if (view === VIEW_RECENTS) {\n            this.showRecents(false);\n        } else if (view === VIEW_SEARCH && searchQuery) {\n            this.search(searchQuery);\n        } else if (view === VIEW_METADATA) {\n            this.showMetadataQueryResults();\n        } else {\n            throw new Error('Cannot refresh incompatible view!');\n        }\n    };\n\n    /**\n     * Folder fetch success callback\n     *\n     * @private\n     * @param {Object} collection - item collection object\n     * @param {Boolean|void} triggerNavigationEvent - To trigger navigate event and focus grid\n     * @return {void}\n     */\n    fetchFolderSuccessCallback(collection: Collection, triggerNavigationEvent: boolean): void {\n        const { onNavigate, rootFolderId }: Props = this.props;\n        const { boxItem, id, name }: Collection = collection;\n        const { selected }: State = this.state;\n        const rootName = id === rootFolderId ? name : '';\n\n        // Close any open modals\n        this.closeModals();\n\n        this.updateCollection(collection, selected, () => {\n            if (triggerNavigationEvent) {\n                // Fire folder navigation event\n                this.setState({ rootName }, this.finishNavigation);\n                if (boxItem) {\n                    onNavigate(cloneDeep(boxItem));\n                }\n            } else {\n                this.setState({ rootName });\n            }\n        });\n    }\n\n    /**\n     * Fetches a folder, defaults to fetching root folder\n     *\n     * @private\n     * @param {string|void} [id] folder id\n     * @param {Boolean|void} [triggerNavigationEvent] To trigger navigate event\n     * @return {void}\n     */\n    fetchFolder = (id?: string, triggerNavigationEvent?: boolean = true) => {\n        const { rootFolderId }: Props = this.props;\n        const {\n            currentCollection: { id: currentId },\n            currentOffset,\n            currentPageSize: limit,\n            searchQuery = '',\n            sortBy,\n            sortDirection,\n        }: State = this.state;\n        const folderId: string = typeof id === 'string' ? id : rootFolderId;\n        const hasFolderChanged = currentId && currentId !== folderId;\n        const hasSearchQuery = !!searchQuery.trim().length;\n        const offset = hasFolderChanged || hasSearchQuery ? 0 : currentOffset; // Reset offset on folder or mode change\n\n        // If we are navigating around, aka not first load\n        // then reset the focus to the root so that after\n        // the collection loads the activeElement is not the\n        // button that was clicked to fetch the folder\n        if (!this.firstLoad) {\n            this.rootElement.focus();\n        }\n\n        // Reset search state, the view and show busy indicator\n        this.setState({\n            searchQuery: '',\n            view: VIEW_FOLDER,\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: offset,\n        });\n\n        // Fetch the folder using folder API\n        this.api.getFolderAPI().getFolder(\n            folderId,\n            limit,\n            offset,\n            sortBy,\n            sortDirection,\n            (collection: Collection) => {\n                this.fetchFolderSuccessCallback(collection, triggerNavigationEvent);\n            },\n            this.errorCallback,\n            { fields: FOLDER_FIELDS_TO_FETCH, forceFetch: true },\n        );\n    };\n\n    /**\n     * Action performed when clicking on an item\n     *\n     * @private\n     * @param {Object|string} item - the clicked box item\n     * @return {void}\n     */\n    onItemClick = (item: BoxItem | string) => {\n        // If the id was passed in, just use that\n        if (typeof item === 'string') {\n            this.fetchFolder(item);\n            return;\n        }\n\n        const { id, type }: BoxItem = item;\n        const { isTouch }: Props = this.props;\n\n        if (type === TYPE_FOLDER) {\n            this.fetchFolder(id);\n            return;\n        }\n\n        if (isTouch) {\n            return;\n        }\n\n        this.preview(item);\n    };\n\n    /**\n     * Search success callback\n     *\n     * @private\n     * @param {Object} collection item collection object\n     * @return {void}\n     */\n    searchSuccessCallback = (collection: Collection) => {\n        const { selected }: State = this.state;\n\n        // Close any open modals\n        this.closeModals();\n\n        this.updateCollection(collection, selected);\n    };\n\n    /**\n     * Debounced searching\n     *\n     * @private\n     * @param {string} id folder id\n     * @param {string} query search string\n     * @return {void}\n     */\n    debouncedSearch = debounce((id: string, query: string) => {\n        const { currentOffset, currentPageSize }: State = this.state;\n\n        this.api\n            .getSearchAPI()\n            .search(id, query, currentPageSize, currentOffset, this.searchSuccessCallback, this.errorCallback, {\n                fields: FOLDER_FIELDS_TO_FETCH,\n                forceFetch: true,\n            });\n    }, DEFAULT_SEARCH_DEBOUNCE);\n\n    /**\n     * Searches\n     *\n     * @private\n     * @param {string} query search string\n     * @return {void}\n     */\n    search = (query: string) => {\n        const { rootFolderId }: Props = this.props;\n        const {\n            currentCollection: { id },\n            currentOffset,\n            searchQuery,\n        }: State = this.state;\n        const folderId = typeof id === 'string' ? id : rootFolderId;\n        const trimmedQuery: string = query.trim();\n\n        if (!query) {\n            // Cancel the debounce so we don't search on a previous query\n            this.debouncedSearch.cancel();\n\n            // Query was cleared out, load the prior folder\n            // The prior folder is always the parent folder for search\n            this.setState({ currentOffset: 0 }, () => {\n                this.fetchFolder(folderId, false);\n            });\n\n            return;\n        }\n\n        if (!trimmedQuery) {\n            // Query now only has bunch of spaces\n            // do nothing and but update prior state\n            this.setState({\n                searchQuery: query,\n            });\n            return;\n        }\n\n        this.setState({\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: trimmedQuery === searchQuery ? currentOffset : 0,\n            searchQuery: query,\n            selected: undefined,\n            view: VIEW_SEARCH,\n        });\n\n        this.debouncedSearch(folderId, query);\n    };\n\n    /**\n     * Recents fetch success callback\n     *\n     * @private\n     * @param {Object} collection item collection object\n     * @param {Boolean} triggerNavigationEvent - To trigger navigate event\n     * @return {void}\n     */\n    recentsSuccessCallback(collection: Collection, triggerNavigationEvent: boolean) {\n        if (triggerNavigationEvent) {\n            this.updateCollection(collection, undefined, this.finishNavigation);\n        } else {\n            this.updateCollection(collection);\n        }\n    }\n\n    /**\n     * Shows recents.\n     *\n     * @private\n     * @param {Boolean|void} [triggerNavigationEvent] To trigger navigate event\n     * @return {void}\n     */\n    showRecents(triggerNavigationEvent: boolean = true): void {\n        const { rootFolderId }: Props = this.props;\n\n        // Reset search state, the view and show busy indicator\n        this.setState({\n            searchQuery: '',\n            view: VIEW_RECENTS,\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: 0,\n        });\n\n        // Fetch the folder using folder API\n        this.api.getRecentsAPI().recents(\n            rootFolderId,\n            (collection: Collection) => {\n                this.recentsSuccessCallback(collection, triggerNavigationEvent);\n            },\n            this.errorCallback,\n            { fields: FOLDER_FIELDS_TO_FETCH, forceFetch: true },\n        );\n    }\n\n    /**\n     * Uploads\n     *\n     * @private\n     * @param {File} file dom file object\n     * @return {void}\n     */\n    upload = () => {\n        const {\n            currentCollection: { id, permissions },\n        }: State = this.state;\n        const { canUpload }: Props = this.props;\n        if (!canUpload || !id || !permissions) {\n            return;\n        }\n\n        const { can_upload }: BoxItemPermission = permissions;\n        if (!can_upload) {\n            return;\n        }\n\n        this.setState({\n            isUploadModalOpen: true,\n        });\n    };\n\n    /**\n     * Upload success handler\n     *\n     * @private\n     * @param {File} file dom file object\n     * @return {void}\n     */\n    uploadSuccessHandler = () => {\n        const {\n            currentCollection: { id },\n        }: State = this.state;\n        this.fetchFolder(id, false);\n    };\n\n    /**\n     * Changes the share access of an item\n     *\n     * @private\n     * @param {Object} item file or folder object\n     * @param {string} access share access\n     * @return {void}\n     */\n    changeShareAccess = (access: Access) => {\n        const { selected }: State = this.state;\n        const { canSetShareAccess }: Props = this.props;\n        if (!selected || !canSetShareAccess) {\n            return;\n        }\n\n        const { permissions, type }: BoxItem = selected;\n        if (!permissions || !type) {\n            return;\n        }\n\n        const { can_set_share_access }: BoxItemPermission = permissions;\n        if (!can_set_share_access) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getAPI(type).share(selected, access, (updatedItem: BoxItem) => {\n            this.setState({ isLoading: false });\n            this.select(updatedItem);\n        });\n    };\n\n    /**\n     * Chages the sort by and sort direction\n     *\n     * @private\n     * @param {string} sortBy - field to sort by\n     * @param {string} sortDirection - sort direction\n     * @return {void}\n     */\n    sort = (sortBy: SortBy, sortDirection: SortDirection) => {\n        const {\n            currentCollection: { id },\n        }: State = this.state;\n        if (id) {\n            this.setState({ sortBy, sortDirection }, this.refreshCollection);\n        }\n    };\n\n    /**\n     * Sets state with currentCollection updated to have items.selected properties\n     * set according to the given selected param. Also updates the selected item in the\n     * currentcollection. selectedItem will be set to the selected state\n     * item if it is in currentCollection, otherwise it will be set to undefined.\n     *\n     * @private\n     * @param {Collection} collection - collection that needs to be updated\n     * @param {Object} [selectedItem] - The item that should be selected in that collection (if present)\n     * @param {Function} [callback] - callback function that should be called after setState occurs\n     * @return {void}\n     */\n    async updateCollection(collection: Collection, selectedItem: ?BoxItem, callback: Function = noop): Object {\n        const { items = [] } = collection;\n        const fileAPI = this.api.getFileAPI(false);\n        const newCollection: Collection = { ...collection };\n        const selectedId = selectedItem ? selectedItem.id : null;\n        let newSelectedItem: ?BoxItem;\n\n        const itemThumbnails = await Promise.all(\n            items.map(item => {\n                return item.type === TYPE_FILE ? fileAPI.getThumbnailUrl(item) : null;\n            }),\n        );\n\n        newCollection.items = items.map((item, index) => {\n            const isSelected = item.id === selectedId;\n            const currentItem = isSelected ? selectedItem : item;\n            const thumbnailUrl = itemThumbnails[index];\n\n            const newItem = {\n                ...currentItem,\n                selected: isSelected,\n                thumbnailUrl,\n            };\n\n            if (item.type === TYPE_FILE && thumbnailUrl && !isThumbnailReady(newItem)) {\n                this.attemptThumbnailGeneration(newItem);\n            }\n\n            // Only if selectedItem is in the current collection do we want to set selected state\n            if (isSelected) {\n                newSelectedItem = newItem;\n            }\n\n            return newItem;\n        });\n        this.setState({ currentCollection: newCollection, selected: newSelectedItem }, callback);\n    }\n\n    /**\n     * Attempts to generate a thumbnail for the given item and assigns the\n     * item its thumbnail url if successful\n     *\n     * @param {BoxItem} item - item to generate thumbnail for\n     * @return {Promise<void>}\n     */\n    attemptThumbnailGeneration = async (item: BoxItem): Promise<void> => {\n        const entries = getProp(item, 'representations.entries');\n        const representation = getProp(entries, '[0]');\n\n        if (representation) {\n            const updatedRepresentation = await this.api.getFileAPI(false).generateRepresentation(representation);\n            if (updatedRepresentation !== representation) {\n                this.updateItemInCollection({\n                    ...cloneDeep(item),\n                    representations: {\n                        entries: [updatedRepresentation, ...entries.slice(1)],\n                    },\n                });\n            }\n        }\n    };\n\n    /**\n     * Update item in this.state.currentCollection\n     *\n     * @param {BoxItem} newItem - item with updated properties\n     * @return {void}\n     */\n    updateItemInCollection = (newItem: BoxItem): void => {\n        const { currentCollection } = this.state;\n        const { items = [] } = currentCollection;\n        const newCollection = { ...currentCollection };\n\n        newCollection.items = items.map(item => (item.id === newItem.id ? newItem : item));\n        this.setState({ currentCollection: newCollection });\n    };\n\n    /**\n     * Selects or unselects an item\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @param {Function|void} [onSelect] - optional on select callback\n     * @return {void}\n     */\n    select = (item: BoxItem, callback: Function = noop): void => {\n        const { selected, currentCollection }: State = this.state;\n        const { items = [] } = currentCollection;\n        const { onSelect }: Props = this.props;\n\n        if (item === selected) {\n            callback(item);\n            return;\n        }\n\n        const selectedItem: BoxItem = { ...item, selected: true };\n\n        this.updateCollection(currentCollection, selectedItem, () => {\n            onSelect(cloneDeep([selectedItem]));\n            callback(selectedItem);\n        });\n\n        const focusedRow: number = items.findIndex((i: BoxItem) => i.id === item.id);\n\n        this.setState({ focusedRow });\n    };\n\n    /**\n     * Selects the clicked file and then previews it\n     * or opens it, if it was a web link\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    preview = (item: BoxItem): void => {\n        const { type, url }: BoxItem = item;\n        if (type === TYPE_WEBLINK) {\n            window.open(url);\n            return;\n        }\n\n        this.select(item, this.previewCallback);\n    };\n\n    /**\n     * Previews a file\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    previewCallback = (): void => {\n        const { selected }: State = this.state;\n        const { canPreview }: Props = this.props;\n        if (!selected || !canPreview) {\n            return;\n        }\n\n        const { permissions } = selected;\n        if (!permissions) {\n            return;\n        }\n\n        const { can_preview }: BoxItemPermission = permissions;\n        if (!can_preview) {\n            return;\n        }\n\n        this.setState({ isPreviewModalOpen: true });\n    };\n\n    /**\n     * Selects the clicked file and then downloads it\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    download = (item: BoxItem): void => {\n        this.select(item, this.downloadCallback);\n    };\n\n    /**\n     * Downloads a file\n     *\n     * @private\n     * @return {void}\n     */\n    downloadCallback = (): void => {\n        const { selected }: State = this.state;\n        const { canDownload, onDownload }: Props = this.props;\n        if (!selected || !canDownload) {\n            return;\n        }\n\n        const { id, permissions } = selected;\n        if (!id || !permissions) {\n            return;\n        }\n\n        const { can_download }: BoxItemPermission = permissions;\n        if (!can_download) {\n            return;\n        }\n\n        const openUrl: Function = (url: string) => {\n            openUrlInsideIframe(url);\n            onDownload(cloneDeep([selected]));\n        };\n\n        const { type }: BoxItem = selected;\n        if (type === TYPE_FILE) {\n            this.api.getFileAPI().getDownloadUrl(id, selected, openUrl, noop);\n        }\n    };\n\n    /**\n     * Selects the clicked file and then deletes it\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    delete = (item: BoxItem): void => {\n        this.select(item, this.deleteCallback);\n    };\n\n    /**\n     * Deletes a file\n     *\n     * @private\n     * @return {void}\n     */\n    deleteCallback = (): void => {\n        const { selected, isDeleteModalOpen }: State = this.state;\n        const { canDelete, onDelete }: Props = this.props;\n        if (!selected || !canDelete) {\n            return;\n        }\n\n        const { id, permissions, parent, type }: BoxItem = selected;\n        if (!id || !permissions || !parent || !type) {\n            return;\n        }\n\n        const { id: parentId } = parent;\n        const { can_delete }: BoxItemPermission = permissions;\n        if (!can_delete || !parentId) {\n            return;\n        }\n\n        if (!isDeleteModalOpen) {\n            this.setState({ isDeleteModalOpen: true });\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getAPI(type).deleteItem(selected, () => {\n            onDelete(cloneDeep([selected]));\n            this.refreshCollection();\n        });\n    };\n\n    /**\n     * Selects the clicked file and then renames it\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    rename = (item: BoxItem): void => {\n        this.select(item, this.renameCallback);\n    };\n\n    /**\n     * Callback for renaming an item\n     *\n     * @private\n     * @param {string} value new item name\n     * @return {void}\n     */\n    renameCallback = (nameWithoutExt: string, extension: string): void => {\n        const { selected, isRenameModalOpen }: State = this.state;\n        const { canRename, onRename }: Props = this.props;\n        if (!selected || !canRename) {\n            return;\n        }\n\n        const { id, permissions, type }: BoxItem = selected;\n        if (!id || !permissions || !type) {\n            return;\n        }\n\n        const { can_rename }: BoxItemPermission = permissions;\n        if (!can_rename) {\n            return;\n        }\n\n        if (!isRenameModalOpen || !nameWithoutExt) {\n            this.setState({ isRenameModalOpen: true, errorCode: '' });\n            return;\n        }\n\n        const name = `${nameWithoutExt}${extension}`;\n        if (!nameWithoutExt.trim()) {\n            this.setState({\n                errorCode: ERROR_CODE_ITEM_NAME_INVALID,\n                isLoading: false,\n            });\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getAPI(type).rename(\n            selected,\n            name,\n            (updatedItem: BoxItem) => {\n                this.setState({ isRenameModalOpen: false });\n                this.refreshCollection();\n                this.select(updatedItem);\n                onRename(cloneDeep(selected));\n            },\n            ({ code }) => {\n                this.setState({ errorCode: code, isLoading: false });\n            },\n        );\n    };\n\n    /**\n     * Creates a new folder\n     *\n     * @private\n     * @return {void}\n     */\n    createFolder = (): void => {\n        this.createFolderCallback();\n    };\n\n    /**\n     * New folder callback\n     *\n     * @private\n     * @param {string} name - folder name\n     * @return {void}\n     */\n    createFolderCallback = (name?: string): void => {\n        const { isCreateFolderModalOpen, currentCollection }: State = this.state;\n        const { canCreateNewFolder, onCreate }: Props = this.props;\n        if (!canCreateNewFolder) {\n            return;\n        }\n\n        const { id, permissions }: Collection = currentCollection;\n        if (!id || !permissions) {\n            return;\n        }\n\n        const { can_upload }: BoxItemPermission = permissions;\n        if (!can_upload) {\n            return;\n        }\n\n        if (!isCreateFolderModalOpen || !name) {\n            this.setState({ isCreateFolderModalOpen: true, errorCode: '' });\n            return;\n        }\n\n        if (!name) {\n            this.setState({\n                errorCode: ERROR_CODE_ITEM_NAME_INVALID,\n                isLoading: false,\n            });\n            return;\n        }\n\n        if (name.length > 255) {\n            this.setState({\n                errorCode: ERROR_CODE_ITEM_NAME_TOO_LONG,\n                isLoading: false,\n            });\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getFolderAPI().create(\n            id,\n            name,\n            (item: BoxItem) => {\n                this.refreshCollection();\n                this.select(item);\n                onCreate(cloneDeep(item));\n            },\n            ({ code }) => {\n                this.setState({\n                    errorCode: code,\n                    isLoading: false,\n                });\n            },\n        );\n    };\n\n    /**\n     * Selects the clicked file and then shares it\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    share = (item: BoxItem): void => {\n        this.select(item, this.shareCallback);\n    };\n\n    /**\n     * Fetch the shared link info\n     * @param {BoxItem} item - The item (folder, file, weblink)\n     * @returns {void}\n     */\n    fetchSharedLinkInfo = (item: BoxItem): void => {\n        const { id, type }: BoxItem = item;\n\n        switch (type) {\n            case TYPE_FOLDER:\n                this.api.getFolderAPI().getFolderFields(id, this.handleSharedLinkSuccess, noop, {\n                    fields: FILE_SHARED_LINK_FIELDS_TO_FETCH,\n                });\n                break;\n            case TYPE_FILE:\n                this.api\n                    .getFileAPI()\n                    .getFile(id, this.handleSharedLinkSuccess, noop, { fields: FILE_SHARED_LINK_FIELDS_TO_FETCH });\n                break;\n            case TYPE_WEBLINK:\n                this.api\n                    .getWebLinkAPI()\n                    .getWeblink(id, this.handleSharedLinkSuccess, noop, { fields: FILE_SHARED_LINK_FIELDS_TO_FETCH });\n                break;\n            default:\n                throw new Error('Unknown Type');\n        }\n    };\n\n    /**\n     * Handles the shared link info by either creating a share link using enterprise defaults if\n     * it does not already exist, otherwise update the item in the state currentCollection.\n     *\n     * @param {Object} item file or folder\n     * @returns {void}\n     */\n    handleSharedLinkSuccess = (newItem: BoxItem) => {\n        const { currentCollection } = this.state;\n\n        // Update item in collection\n        this.updateCollection(currentCollection, newItem, () => this.setState({ isShareModalOpen: true }));\n    };\n\n    /**\n     * Chages the sort by and sort direction\n     *\n     * @private\n     * @return {void}\n     */\n    shareCallback = (): void => {\n        const { selected }: State = this.state;\n        const { canShare }: Props = this.props;\n\n        if (!selected || !canShare) {\n            return;\n        }\n\n        const { permissions } = selected;\n        if (!permissions) {\n            return;\n        }\n\n        const { can_share }: BoxItemPermission = permissions;\n        if (!can_share) {\n            return;\n        }\n\n        this.fetchSharedLinkInfo(selected);\n    };\n\n    /**\n     * Saves reference to table component\n     *\n     * @private\n     * @param {Component} react component\n     * @return {void}\n     */\n    tableRef = (table: React$Component<*, *>): void => {\n        this.table = table;\n    };\n\n    /**\n     * Closes the modal dialogs that may be open\n     *\n     * @private\n     * @return {void}\n     */\n    closeModals = (): void => {\n        const { focusedRow }: State = this.state;\n\n        this.setState({\n            isLoading: false,\n            isDeleteModalOpen: false,\n            isRenameModalOpen: false,\n            isCreateFolderModalOpen: false,\n            isShareModalOpen: false,\n            isUploadModalOpen: false,\n            isPreviewModalOpen: false,\n        });\n\n        const {\n            selected,\n            currentCollection: { items = [] },\n        }: State = this.state;\n        if (selected && items.length > 0) {\n            focus(this.rootElement, `.bce-item-row-${focusedRow}`);\n        }\n    };\n\n    /**\n     * Keyboard events\n     *\n     * @private\n     * @return {void}\n     */\n    onKeyDown = (event: SyntheticKeyboardEvent<HTMLElement>) => {\n        if (isInputElement(event.target)) {\n            return;\n        }\n\n        const { rootFolderId }: Props = this.props;\n        const key = event.key.toLowerCase();\n\n        switch (key) {\n            case '/':\n                focus(this.rootElement, '.be-search input[type=\"search\"]', false);\n                event.preventDefault();\n                break;\n            case 'arrowdown':\n                focus(this.rootElement, '.bce-item-row', false);\n                this.setState({ focusedRow: 0 });\n                event.preventDefault();\n                break;\n            case 'g':\n                break;\n            case 'b':\n                if (this.globalModifier) {\n                    focus(this.rootElement, '.be-breadcrumb button', false);\n                    event.preventDefault();\n                }\n\n                break;\n            case 'f':\n                if (this.globalModifier) {\n                    this.fetchFolder(rootFolderId);\n                    event.preventDefault();\n                }\n\n                break;\n            case 'u':\n                if (this.globalModifier) {\n                    this.upload();\n                    event.preventDefault();\n                }\n\n                break;\n            case 'r':\n                if (this.globalModifier) {\n                    this.showRecents();\n                    event.preventDefault();\n                }\n\n                break;\n            case 'n':\n                if (this.globalModifier) {\n                    this.createFolder();\n                    event.preventDefault();\n                }\n\n                break;\n            default:\n                this.globalModifier = false;\n                return;\n        }\n\n        this.globalModifier = key === 'g';\n    };\n\n    /**\n     * Handle pagination changes for offset based pagination\n     *\n     * @param {number} newOffset - the new page offset value\n     */\n    paginate = (newOffset: number) => {\n        this.setState({ currentOffset: newOffset }, this.refreshCollection);\n    };\n\n    /**\n     * Handle pagination changes for marker based pagination\n     * @param {number} newOffset - the new page offset value\n     */\n    markerBasedPaginate = (newOffset: number) => {\n        const { currentPageNumber } = this.state;\n        this.setState(\n            {\n                currentPageNumber: currentPageNumber + newOffset, // newOffset could be negative\n            },\n            this.refreshCollection,\n        );\n    };\n\n    /**\n     * Get the current viewMode, checking local store if applicable\n     *\n     * @return {ViewMode}\n     */\n    getViewMode = (): ViewMode => this.store.getItem(localStoreViewMode) || VIEW_MODE_LIST;\n\n    /**\n     * Get the maximum number of grid view columns based on the current width of the\n     * content explorer.\n     *\n     * @return {number}\n     */\n    getMaxNumberOfGridViewColumnsForWidth = (): number => {\n        const { isSmall, isMedium, isLarge } = this.props;\n        let maxWidthColumns = GRID_VIEW_MAX_COLUMNS;\n        if (isSmall) {\n            maxWidthColumns = 1;\n        } else if (isMedium) {\n            maxWidthColumns = 3;\n        } else if (isLarge) {\n            maxWidthColumns = 5;\n        }\n        return maxWidthColumns;\n    };\n\n    /**\n     * Change the current view mode\n     *\n     * @param {ViewMode} viewMode - the new view mode\n     * @return {void}\n     */\n    changeViewMode = (viewMode: ViewMode): void => {\n        this.store.setItem(localStoreViewMode, viewMode);\n        this.forceUpdate();\n    };\n\n    /**\n     * Callback for when value of GridViewSlider changes\n     *\n     * @param {number} sliderValue - value of slider\n     * @return {void}\n     */\n    onGridViewSliderChange = (sliderValue: number): void => {\n        // need to do this calculation since lowest value of grid view slider\n        // means highest number of columns\n        const gridColumnCount = GRID_VIEW_MAX_COLUMNS - sliderValue + 1;\n        this.setState({ gridColumnCount });\n    };\n\n    /**\n     * Function to update metadata field value in metadata based view\n     * @param {BoxItem} item - file item whose metadata is being changed\n     * @param {string} field - metadata template field name\n     * @param {MetadataFieldValue} oldValue - current value\n     * @param {MetadataFieldValue} newVlaue - new value the field to be updated to\n     */\n\n    updateMetadata = (\n        item: BoxItem,\n        field: string,\n        oldValue: ?MetadataFieldValue,\n        newValue: ?MetadataFieldValue,\n    ): void => {\n        this.metadataQueryAPIHelper.updateMetadata(\n            item,\n            field,\n            oldValue,\n            newValue,\n            () => {\n                this.updateMetadataSuccessCallback(item, field, newValue);\n            },\n            this.errorCallback,\n        );\n    };\n\n    updateMetadataSuccessCallback = (item: BoxItem, field: string, newValue: ?MetadataFieldValue): void => {\n        const { currentCollection }: State = this.state;\n        const { items = [], nextMarker } = currentCollection;\n        const updatedItems = items.map(collectionItem => {\n            const clonedItem = cloneDeep(collectionItem);\n            if (item.id === clonedItem.id) {\n                const fields = getProp(clonedItem, 'metadata.enterprise.fields', []);\n                fields.forEach(itemField => {\n                    if (itemField.key.split('.').pop() === field) {\n                        itemField.value = newValue; // set updated metadata value to correct item in currentCollection\n                    }\n                });\n            }\n            return clonedItem;\n        });\n\n        this.setState({\n            currentCollection: {\n                items: updatedItems,\n                nextMarker,\n                percentLoaded: 100,\n            },\n        });\n    };\n\n    /**\n     * Renders the file picker\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const {\n            apiHost,\n            appHost,\n            canCreateNewFolder,\n            canDelete,\n            canDownload,\n            canPreview,\n            canRename,\n            canSetShareAccess,\n            canShare,\n            canUpload,\n            className,\n            contentPreviewProps,\n            contentUploaderProps,\n            defaultView,\n            isMedium,\n            isSmall,\n            isTouch,\n            language,\n            logoUrl,\n            measureRef,\n            messages,\n            fieldsToShow,\n            onDownload,\n            onPreview,\n            onUpload,\n            requestInterceptor,\n            responseInterceptor,\n            rootFolderId,\n            sharedLink,\n            sharedLinkPassword,\n            staticHost,\n            staticPath,\n            previewLibraryVersion,\n            token,\n            uploadHost,\n        }: Props = this.props;\n\n        const {\n            currentCollection,\n            currentPageNumber,\n            currentPageSize,\n            errorCode,\n            focusedRow,\n            gridColumnCount,\n            isCreateFolderModalOpen,\n            isDeleteModalOpen,\n            isLoading,\n            isPreviewModalOpen,\n            isRenameModalOpen,\n            isShareModalOpen,\n            isUploadModalOpen,\n            markers,\n            rootName,\n            searchQuery,\n            selected,\n            view,\n        }: State = this.state;\n\n        const { id, offset, permissions, totalCount }: Collection = currentCollection;\n        const { can_upload }: BoxItemPermission = permissions || {};\n        const styleClassName = classNames('be bce', className);\n        const allowUpload: boolean = canUpload && !!can_upload;\n        const allowCreate: boolean = canCreateNewFolder && !!can_upload;\n        const isDefaultViewMetadata: boolean = defaultView === DEFAULT_VIEW_METADATA;\n        const isErrorView: boolean = view === VIEW_ERROR;\n\n        const viewMode = this.getViewMode();\n        const maxGridColumnCount = this.getMaxNumberOfGridViewColumnsForWidth();\n\n        const hasNextMarker: boolean = !!markers[currentPageNumber + 1];\n        const hasPreviousMarker: boolean = currentPageNumber === 1 || !!markers[currentPageNumber - 1];\n\n        /* eslint-disable jsx-a11y/no-static-element-interactions */\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n        return (\n            <Internationalize language={language} messages={messages}>\n                <div id={this.id} className={styleClassName} ref={measureRef} data-testid=\"content-explorer\">\n                    <div className=\"be-app-element\" onKeyDown={this.onKeyDown} tabIndex={0}>\n                        {!isDefaultViewMetadata && (\n                            <>\n                                <Header\n                                    view={view}\n                                    isSmall={isSmall}\n                                    searchQuery={searchQuery}\n                                    logoUrl={logoUrl}\n                                    onSearch={this.search}\n                                />\n                                <SubHeader\n                                    view={view}\n                                    viewMode={viewMode}\n                                    rootId={rootFolderId}\n                                    isSmall={isSmall}\n                                    rootName={rootName}\n                                    currentCollection={currentCollection}\n                                    canUpload={allowUpload}\n                                    canCreateNewFolder={allowCreate}\n                                    gridColumnCount={gridColumnCount}\n                                    gridMaxColumns={GRID_VIEW_MAX_COLUMNS}\n                                    gridMinColumns={GRID_VIEW_MIN_COLUMNS}\n                                    maxGridColumnCountForWidth={maxGridColumnCount}\n                                    onUpload={this.upload}\n                                    onCreate={this.createFolder}\n                                    onGridViewSliderChange={this.onGridViewSliderChange}\n                                    onItemClick={this.fetchFolder}\n                                    onSortChange={this.sort}\n                                    onViewModeChange={this.changeViewMode}\n                                />\n                            </>\n                        )}\n                        <Content\n                            canDelete={canDelete}\n                            canDownload={canDownload}\n                            canPreview={canPreview}\n                            canRename={canRename}\n                            canSetShareAccess={canSetShareAccess}\n                            canShare={canShare}\n                            currentCollection={currentCollection}\n                            focusedRow={focusedRow}\n                            gridColumnCount={Math.min(gridColumnCount, maxGridColumnCount)}\n                            isMedium={isMedium}\n                            isSmall={isSmall}\n                            isTouch={isTouch}\n                            fieldsToShow={fieldsToShow}\n                            onItemClick={this.onItemClick}\n                            onItemDelete={this.delete}\n                            onItemDownload={this.download}\n                            onItemPreview={this.preview}\n                            onItemRename={this.rename}\n                            onItemSelect={this.select}\n                            onItemShare={this.share}\n                            onMetadataUpdate={this.updateMetadata}\n                            onSortChange={this.sort}\n                            rootElement={this.rootElement}\n                            rootId={rootFolderId}\n                            tableRef={this.tableRef}\n                            view={view}\n                            viewMode={viewMode}\n                        />\n                        {!isErrorView && (\n                            <Footer>\n                                <Pagination\n                                    hasNextMarker={hasNextMarker}\n                                    hasPrevMarker={hasPreviousMarker}\n                                    offset={offset}\n                                    onOffsetChange={this.paginate}\n                                    pageSize={currentPageSize}\n                                    totalCount={totalCount}\n                                    onMarkerBasedPageChange={this.markerBasedPaginate}\n                                />\n                            </Footer>\n                        )}\n                    </div>\n                    {allowUpload && !!this.appElement ? (\n                        <UploadDialog\n                            isOpen={isUploadModalOpen}\n                            currentFolderId={id}\n                            token={token}\n                            sharedLink={sharedLink}\n                            sharedLinkPassword={sharedLinkPassword}\n                            apiHost={apiHost}\n                            uploadHost={uploadHost}\n                            onClose={this.uploadSuccessHandler}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                            onUpload={onUpload}\n                            contentUploaderProps={contentUploaderProps}\n                            requestInterceptor={requestInterceptor}\n                            responseInterceptor={responseInterceptor}\n                        />\n                    ) : null}\n                    {allowCreate && !!this.appElement ? (\n                        <CreateFolderDialog\n                            isOpen={isCreateFolderModalOpen}\n                            onCreate={this.createFolderCallback}\n                            onCancel={this.closeModals}\n                            isLoading={isLoading}\n                            errorCode={errorCode}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                    {canDelete && selected && !!this.appElement ? (\n                        <DeleteConfirmationDialog\n                            isOpen={isDeleteModalOpen}\n                            onDelete={this.deleteCallback}\n                            onCancel={this.closeModals}\n                            item={selected}\n                            isLoading={isLoading}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                    {canRename && selected && !!this.appElement ? (\n                        <RenameDialog\n                            isOpen={isRenameModalOpen}\n                            onRename={this.renameCallback}\n                            onCancel={this.closeModals}\n                            item={selected}\n                            isLoading={isLoading}\n                            errorCode={errorCode}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                    {canShare && selected && !!this.appElement ? (\n                        <ShareDialog\n                            isOpen={isShareModalOpen}\n                            canSetShareAccess={canSetShareAccess}\n                            onShareAccessChange={this.changeShareAccess}\n                            onCancel={this.refreshCollection}\n                            item={selected}\n                            isLoading={isLoading}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                    {canPreview && selected && !!this.appElement ? (\n                        <PreviewDialog\n                            isOpen={isPreviewModalOpen}\n                            isTouch={isTouch}\n                            onCancel={this.closeModals}\n                            item={selected}\n                            currentCollection={currentCollection}\n                            token={token}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                            onPreview={onPreview}\n                            onDownload={onDownload}\n                            canDownload={canDownload}\n                            cache={this.api.getCache()}\n                            apiHost={apiHost}\n                            appHost={appHost}\n                            staticHost={staticHost}\n                            staticPath={staticPath}\n                            previewLibraryVersion={previewLibraryVersion}\n                            sharedLink={sharedLink}\n                            sharedLinkPassword={sharedLinkPassword}\n                            contentPreviewProps={contentPreviewProps}\n                            requestInterceptor={requestInterceptor}\n                            responseInterceptor={responseInterceptor}\n                        />\n                    ) : null}\n                </div>\n            </Internationalize>\n        );\n        /* eslint-enable jsx-a11y/no-static-element-interactions */\n        /* eslint-enable jsx-a11y/no-noninteractive-tabindex */\n    }\n}\n\nexport { ContentExplorer as ContentExplorerComponent };\nexport default flow([makeResponsive, withFeatureConsumer, withFeatureProvider])(ContentExplorer);\n"]},"metadata":{},"sourceType":"module"}