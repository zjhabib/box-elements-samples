{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nexport var OVERLAY_SCROLLABLE_CLASS = 'bdl-SelectField-overlay--scrollable';\nvar SelectFieldDropdown = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SelectFieldDropdown, _React$Component);\n  function SelectFieldDropdown() {\n    _classCallCheck(this, SelectFieldDropdown);\n    return _possibleConstructorReturn(this, _getPrototypeOf(SelectFieldDropdown).apply(this, arguments));\n  }\n  _createClass(SelectFieldDropdown, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var prevSelectedValues = _ref.selectedValues;\n      var _this$props = this.props,\n        multiple = _this$props.multiple,\n        scheduleUpdate = _this$props.scheduleUpdate,\n        selectedValues = _this$props.selectedValues;\n      if (multiple && scheduleUpdate && prevSelectedValues !== selectedValues) {\n        scheduleUpdate();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        children = _this$props2.children,\n        innerRef = _this$props2.innerRef,\n        style = _this$props2.style,\n        placement = _this$props2.placement,\n        isScrollable = _this$props2.isScrollable,\n        multiple = _this$props2.multiple,\n        selectFieldID = _this$props2.selectFieldID;\n      var listboxProps = {};\n      if (multiple) {\n        listboxProps['aria-multiselectable'] = true;\n      }\n      return React.createElement(\"ul\", _extends({\n        ref: innerRef,\n        style: style,\n        \"data-placement\": placement,\n        className: classNames('bdl-SelectFieldDropdown', 'overlay', _defineProperty({}, OVERLAY_SCROLLABLE_CLASS, isScrollable)),\n        id: selectFieldID,\n        role: \"listbox\" // preventDefault on mousedown so blur doesn't happen before click\n        ,\n\n        onMouseDown: function onMouseDown(event) {\n          return event.preventDefault();\n        }\n      }, listboxProps), children);\n    }\n  }]);\n  return SelectFieldDropdown;\n}(React.Component);\nexport default React.forwardRef(function (props, ref) {\n  return React.createElement(SelectFieldDropdown, _extends({}, props, {\n    innerRef: ref\n  }));\n});","map":{"version":3,"sources":["../../../src/components/select-field/SelectFieldDropdown.js"],"names":["React","classNames","OVERLAY_SCROLLABLE_CLASS","SelectFieldDropdown","Component","selectedValues","prevSelectedValues","multiple","scheduleUpdate","props","children","innerRef","style","placement","isScrollable","selectFieldID","listboxProps","event","preventDefault","forwardRef","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAKA,OAAO,IAAMC,wBAAwB,GAAG,qCAAjC;IAWDC,mB;;;;;;;;;6CACyD;MAAA,IAAtBG,kBAAsB,GAAA,IAAA,CAAtCD,cAAsC;MAAA,IAAA,WAAA,GACF,IAAA,CAAKI,KADH;QAC/CF,QAD+C,GAAA,WAAA,CAC/CA,QAD+C;QACrCC,cADqC,GAAA,WAAA,CACrCA,cADqC;QACrBH,cADqB,GAAA,WAAA,CACrBA,cADqB;MAEvD,IAAIE,QAAQ,IAAIC,cAAZD,IAA8BD,kBAAkB,KAAKD,cAAzD,EAAyE;QACrEG,cAAc,CAAA,CAAA;MACjB;IACJ;;;6BAEQ;MAAA,IAAA,YAAA,GACmF,IAAA,CAAKC,KADxF;QACGC,QADH,GAAA,YAAA,CACGA,QADH;QACaC,QADb,GAAA,YAAA,CACaA,QADb;QACuBC,KADvB,GAAA,YAAA,CACuBA,KADvB;QAC8BC,SAD9B,GAAA,YAAA,CAC8BA,SAD9B;QACyCC,YADzC,GAAA,YAAA,CACyCA,YADzC;QACuDP,QADvD,GAAA,YAAA,CACuDA,QADvD;QACiEQ,aADjE,GAAA,YAAA,CACiEA,aADjE;MAGL,IAAMC,YAAY,GAAG,CAAA,CAArB;MACA,IAAIT,QAAJ,EAAc;QACVS,YAAY,CAAC,sBAAD,CAAZA,GAAuC,IAAvCA;MACH;MAED,OACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;QACI,GAAG,EAAEL,QADT;QAEI,KAAK,EAAEC,KAFX;QAGI,gBAAA,EAAgBC,SAHpB;QAII,SAAS,EAAEZ,UAAU,CAAC,yBAAD,EAA4B,SAA5B,EAAA,eAAA,CAAA,CAAA,CAAA,EAChBC,wBADgB,EACWY,YADX,CAAA,CAJzB;QAOI,EAAE,EAAEC,aAPR;QAQI,IAAI,EAAC,SART,CASI;QAAA;;QACA,WAAW,EAAE,SAAA,WAAA,CAAA,KAAK,EAAA;UAAA,OAAIE,KAAK,CAACC,cAAND,CAAAA,CAAJ;QAAA;MAVtB,CAAA,EAWQD,YAXR,CAAA,EAaKN,QAbL,CADJ;IAiBH;;;EAjC6BV,KAAK,CAACI,S;AAoCxC,eAAe,KAAK,CAACe,UAAN,CAA0C,UAACV,KAAD,EAAeW,GAAf,EAAA;EAAA,OACrD,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAyBX,KAAzB,EAAA;IAAgC,QAAQ,EAAEW;EAA1C,CAAA,CAAA,CADqD;AAAA,CAA1C,CAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport type { SelectOptionValueProp } from './props';\nimport type { PopperChildrenProps } from '../popper/props';\n\nexport const OVERLAY_SCROLLABLE_CLASS = 'bdl-SelectField-overlay--scrollable';\n\ntype Props = {\n    children: React.Node,\n    innerRef?: React.Ref<any>,\n    isScrollable?: boolean,\n    multiple?: boolean,\n    selectFieldID: string,\n    selectedValues: Array<SelectOptionValueProp>,\n} & PopperChildrenProps;\n\nclass SelectFieldDropdown extends React.Component<Props> {\n    componentDidUpdate({ selectedValues: prevSelectedValues }) {\n        const { multiple, scheduleUpdate, selectedValues } = this.props;\n        if (multiple && scheduleUpdate && prevSelectedValues !== selectedValues) {\n            scheduleUpdate();\n        }\n    }\n\n    render() {\n        const { children, innerRef, style, placement, isScrollable, multiple, selectFieldID } = this.props;\n\n        const listboxProps = {};\n        if (multiple) {\n            listboxProps['aria-multiselectable'] = true;\n        }\n\n        return (\n            <ul\n                ref={innerRef}\n                style={style}\n                data-placement={placement}\n                className={classNames('bdl-SelectFieldDropdown', 'overlay', {\n                    [OVERLAY_SCROLLABLE_CLASS]: isScrollable,\n                })}\n                id={selectFieldID}\n                role=\"listbox\"\n                // preventDefault on mousedown so blur doesn't happen before click\n                onMouseDown={event => event.preventDefault()}\n                {...listboxProps}\n            >\n                {children}\n            </ul>\n        );\n    }\n}\n\nexport default React.forwardRef<Props, HTMLUListElement>((props: Props, ref) => (\n    <SelectFieldDropdown {...props} innerRef={ref} />\n));\n"]},"metadata":{},"sourceType":"module"}