{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * \n * @file Main entry point for the box api\n * @author Box\n */\nimport Cache from '../utils/Cache';\nimport ChunkedUploadAPI from './uploads/MultiputUpload';\nimport PlainUploadAPI from './uploads/PlainUpload';\nimport FolderAPI from './Folder';\nimport FileAPI from './File';\nimport WebLinkAPI from './WebLink';\nimport SearchAPI from './Search';\nimport RecentsAPI from './Recents';\nimport VersionsAPI from './Versions';\nimport CommentsAPI from './Comments';\nimport TasksNewAPI from './tasks/TasksNew';\nimport TaskCollaboratorsAPI from './tasks/TaskCollaborators';\nimport TaskLinksAPI from './tasks/TaskLinks';\nimport FileAccessStatsAPI from './FileAccessStats';\nimport MarkerBasedGroupsAPI from './MarkerBasedGroups';\nimport MarkerBasedUsersAPI from './MarkerBasedUsers';\nimport GroupsAPI from './Groups';\nimport UsersAPI from './Users';\nimport MetadataAPI from './Metadata';\nimport FileCollaboratorsAPI from './FileCollaborators';\nimport FileCollaborationsAPI from './FileCollaborations';\nimport FolderCollaborationsAPI from './FolderCollaborations';\nimport CollaborationsAPI from './Collaborations';\nimport FeedAPI from './Feed';\nimport AppIntegrationsAPI from './AppIntegrations';\nimport AnnotationsAPI from './Annotations';\nimport OpenWithAPI from './OpenWith';\nimport MetadataQueryAPI from './MetadataQuery';\nimport BoxEditAPI from './box-edit';\nimport { DEFAULT_HOSTNAME_API, DEFAULT_HOSTNAME_UPLOAD, TYPE_FOLDER, TYPE_FILE, TYPE_WEBLINK } from '../constants';\nvar APIFactory = /*#__PURE__*/\nfunction () {\n  /**\n   * @property {*}\n   */\n\n  /**\n   * @property {FileAPI}\n   */\n\n  /**\n   * @property {WebLink}\n   */\n\n  /**\n   * @property {FolderAPI}\n   */\n\n  /**\n   * @property {PlainUploadAPI}\n   */\n\n  /**\n   * @property {ChunkedUploadAPI}\n   */\n\n  /**\n   * @property {SearchAPI}\n   */\n\n  /**\n   * @property {RecentsAPI}\n   */\n\n  /**\n   * @property {VersionsAPI}\n   */\n\n  /**\n   * @property {CommentsAPI}\n   */\n\n  /**\n   * @property {TasksNewAPI}\n   */\n\n  /**\n   * @property {TaskCollaboratorsAPI}\n   */\n\n  /**\n   * @property {TaskLinksAPI}\n   */\n\n  /*\n   * @property {FileAccessStatsAPI}\n   */\n\n  /*\n   * @property {MarkerBasedGroupsAPI}\n   */\n\n  /*\n   * @property {MarkerBasedUsersAPI}\n   */\n\n  /**\n   * @property {GroupsAPI}\n   */\n\n  /*\n   * @property {UsersAPI}\n   */\n\n  /*\n   * @property {MetadataAPI}\n   */\n\n  /**\n   * @property {FileCollaboratorsAPI}\n   */\n\n  /**\n   * @property {FileCollaborationsAPI}\n   */\n\n  /**\n   * @property {FolderCollaborationsAPI}\n   */\n\n  /**\n   * @property {CollaborationsAPI}\n   */\n\n  /**\n   * @property {FeedAPI}\n   */\n\n  /**\n   * @property {OpenWithAPI}\n   */\n\n  /**\n   * @property {AppIntegrationsAPI}\n   */\n\n  /**\n   * @property {MetadataQueryAPI}\n   */\n\n  /** @property {BoxEditAPI}\n   *\n   */\n\n  /**\n   * @property {AnnotationsAPI}\n   */\n\n  /**\n   * [constructor]\n   *\n   * @param {Object} options\n   * @param {string} options.id - item id\n   * @param {string|function} options.token - Auth token\n   * @param {string} [options.sharedLink] - Shared link\n   * @param {string} [options.sharedLinkPassword] - Shared link password\n   * @param {string} [options.apiHost] - Api host\n   * @param {string} [options.uploadHost] - Upload host name\n   * @return {API} Api instance\n   */\n  function APIFactory(options) {\n    _classCallCheck(this, APIFactory);\n    this.options = _objectSpread({}, options, {\n      apiHost: options.apiHost || DEFAULT_HOSTNAME_API,\n      uploadHost: options.uploadHost || DEFAULT_HOSTNAME_UPLOAD,\n      cache: options.cache || new Cache(),\n      language: options.language\n    });\n  }\n  /**\n   * [destructor]\n   *\n   * @param {boolean} destroyCache - true to destroy cache\n   * @return {void}\n   */\n\n  _createClass(APIFactory, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var destroyCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.fileAPI) {\n        this.fileAPI.destroy();\n        delete this.fileAPI;\n      }\n      if (this.weblinkAPI) {\n        this.weblinkAPI.destroy();\n        delete this.weblinkAPI;\n      }\n      if (this.plainUploadAPI) {\n        this.plainUploadAPI.destroy();\n        delete this.plainUploadAPI;\n      }\n      if (this.chunkedUploadAPI) {\n        this.chunkedUploadAPI.destroy();\n        delete this.chunkedUploadAPI;\n      }\n      if (this.folderAPI) {\n        this.folderAPI.destroy();\n        delete this.folderAPI;\n      }\n      if (this.searchAPI) {\n        this.searchAPI.destroy();\n        delete this.searchAPI;\n      }\n      if (this.recentsAPI) {\n        this.recentsAPI.destroy();\n        delete this.recentsAPI;\n      }\n      if (this.versionsAPI) {\n        this.versionsAPI.destroy();\n        delete this.versionsAPI;\n      }\n      if (this.fileAccessStatsAPI) {\n        this.fileAccessStatsAPI.destroy();\n        delete this.fileAccessStatsAPI;\n      }\n      if (this.tasksNewAPI) {\n        this.tasksNewAPI.destroy();\n        delete this.tasksNewAPI;\n      }\n      if (this.taskCollaboratorsAPI) {\n        this.taskCollaboratorsAPI.destroy();\n        delete this.taskCollaboratorsAPI;\n      }\n      if (this.taskLinksAPI) {\n        this.taskLinksAPI.destroy();\n        delete this.taskLinksAPI;\n      }\n      if (this.commentsAPI) {\n        this.commentsAPI.destroy();\n        delete this.commentsAPI;\n      }\n      if (this.markerBasedGroupsAPI) {\n        this.markerBasedGroupsAPI.destroy();\n        delete this.markerBasedGroupsAPI;\n      }\n      if (this.markerBasedUsersAPI) {\n        this.markerBasedUsersAPI.destroy();\n        delete this.markerBasedUsersAPI;\n      }\n      if (this.groupsAPI) {\n        this.groupsAPI.destroy();\n        delete this.groupsAPI;\n      }\n      if (this.usersAPI) {\n        this.usersAPI.destroy();\n        delete this.usersAPI;\n      }\n      if (this.metadataAPI) {\n        this.metadataAPI.destroy();\n        delete this.metadataAPI;\n      }\n      if (this.fileCollaboratorsAPI) {\n        this.fileCollaboratorsAPI.destroy();\n        delete this.fileCollaboratorsAPI;\n      }\n      if (this.fileCollaborationsAPI) {\n        this.fileCollaborationsAPI.destroy();\n        delete this.fileCollaborationsAPI;\n      }\n      if (this.folderCollaborationsAPI) {\n        this.folderCollaborationsAPI.destroy();\n        delete this.folderCollaborationsAPI;\n      }\n      if (this.collaborationsAPI) {\n        this.collaborationsAPI.destroy();\n        delete this.collaborationsAPI;\n      }\n      if (this.appIntegrationsAPI) {\n        this.appIntegrationsAPI.destroy();\n        delete this.appIntegrationsAPI;\n      }\n      if (this.metadataQueryAPI) {\n        this.metadataQueryAPI.destroy();\n        delete this.metadataQueryAPI;\n      }\n      if (this.openWithAPI) {\n        this.openWithAPI.destroy();\n        delete this.openWithAPI;\n      }\n      if (this.annotationsAPI) {\n        this.annotationsAPI.destroy();\n        delete this.annotationsAPI;\n      }\n      if (destroyCache) {\n        this.options.cache = new Cache();\n      }\n    }\n    /**\n     * Gets the cache instance\n     *\n     * @return {Cache} cache instance\n     */\n  }, {\n    key: \"getCache\",\n    value: function getCache() {\n      return this.options.cache;\n    }\n    /**\n     * Returns the API based on type of item\n     *\n     * @private\n     * @param {String} type - item type\n     * @return {ItemAPI} api\n     */\n  }, {\n    key: \"getAPI\",\n    value: function getAPI(type) {\n      var api;\n      switch (type) {\n        case TYPE_FOLDER:\n          api = this.getFolderAPI();\n          break;\n        case TYPE_FILE:\n          api = this.getFileAPI();\n          break;\n        case TYPE_WEBLINK:\n          api = this.getWebLinkAPI();\n          break;\n        default:\n          throw new Error('Unknown Type!');\n      }\n      return api;\n    }\n    /**\n     * API for file\n     *\n     * @return {FileAPI} FileAPI instance\n     */\n  }, {\n    key: \"getFileAPI\",\n    value: function getFileAPI() {\n      var shouldDestroy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.fileAPI = new FileAPI(this.options);\n      return this.fileAPI;\n    }\n    /**\n     * API for web links\n     *\n     * @return {WebLinkAPI} WebLinkAPI instance\n     */\n  }, {\n    key: \"getWebLinkAPI\",\n    value: function getWebLinkAPI() {\n      this.destroy();\n      this.weblinkAPI = new WebLinkAPI(this.options);\n      return this.weblinkAPI;\n    }\n    /**\n     * API for plain uploads\n     *\n     * @return {UploadAPI} UploadAPI instance\n     */\n  }, {\n    key: \"getPlainUploadAPI\",\n    value: function getPlainUploadAPI() {\n      this.destroy();\n      this.plainUploadAPI = new PlainUploadAPI(this.options);\n      return this.plainUploadAPI;\n    }\n    /**\n     * API for chunked uploads\n     *\n     * @return {UploadAPI} UploadAPI instance\n     */\n  }, {\n    key: \"getChunkedUploadAPI\",\n    value: function getChunkedUploadAPI() {\n      this.destroy();\n      this.chunkedUploadAPI = new ChunkedUploadAPI(this.options);\n      return this.chunkedUploadAPI;\n    }\n    /**\n     * API for folder\n     *\n     * @return {FolderAPI} FolderAPI instance\n     */\n  }, {\n    key: \"getFolderAPI\",\n    value: function getFolderAPI() {\n      this.destroy();\n      this.folderAPI = new FolderAPI(this.options);\n      return this.folderAPI;\n    }\n    /**\n     * API for search\n     *\n     * @return {SearchAPI} SearchAPI instance\n     */\n  }, {\n    key: \"getSearchAPI\",\n    value: function getSearchAPI() {\n      this.destroy();\n      this.searchAPI = new SearchAPI(this.options);\n      return this.searchAPI;\n    }\n    /**\n     * API for recents\n     *\n     * @return {RecentsAPI} RecentsAPI instance\n     */\n  }, {\n    key: \"getRecentsAPI\",\n    value: function getRecentsAPI() {\n      this.destroy();\n      this.recentsAPI = new RecentsAPI(this.options);\n      return this.recentsAPI;\n    }\n    /**\n     * API for metadata\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MetadataAPI} MetadataAPI instance\n     */\n  }, {\n    key: \"getMetadataAPI\",\n    value: function getMetadataAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.metadataAPI = new MetadataAPI(this.options);\n      return this.metadataAPI;\n    }\n    /**\n     * API for versions\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {VersionsAPI} VersionsAPI instance\n     */\n  }, {\n    key: \"getVersionsAPI\",\n    value: function getVersionsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.versionsAPI = new VersionsAPI(this.options);\n      return this.versionsAPI;\n    }\n    /**\n     * API for comments\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {CommentsAPI} CommentsAPI instance\n     */\n  }, {\n    key: \"getCommentsAPI\",\n    value: function getCommentsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.commentsAPI = new CommentsAPI(this.options);\n      return this.commentsAPI;\n    }\n    /**\n     * API for tasks\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TasksAPI} TaskAssignmentsAPI instance\n     */\n  }, {\n    key: \"getTasksNewAPI\",\n    value: function getTasksNewAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.tasksNewAPI = new TasksNewAPI(this.options);\n      return this.tasksNewAPI;\n    }\n    /**\n     * API for taskCollaborators\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TaskCollaboratorsAPI} TaskCollaboratorsAPI instance\n     */\n  }, {\n    key: \"getTaskCollaboratorsAPI\",\n    value: function getTaskCollaboratorsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n      return this.taskCollaboratorsAPI;\n    }\n    /**\n     * API for taskLinks\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TasksAPI} TaskLinksAPI instance\n     */\n  }, {\n    key: \"getTaskLinksAPI\",\n    value: function getTaskLinksAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.taskLinksAPI = new TaskLinksAPI(this.options);\n      return this.taskLinksAPI;\n    }\n    /**\n     * API for file access stats\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FileAccessStatsAPI} FileAccessStatsAPI instance\n     */\n  }, {\n    key: \"getFileAccessStatsAPI\",\n    value: function getFileAccessStatsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.fileAccessStatsAPI = new FileAccessStatsAPI(this.options);\n      return this.fileAccessStatsAPI;\n    }\n    /**\n     * API for file collaborators\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FileCollaboratorsAPI} FileCollaboratorsAPI instance\n     */\n  }, {\n    key: \"getFileCollaboratorsAPI\",\n    value: function getFileCollaboratorsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.fileCollaboratorsAPI = new FileCollaboratorsAPI(this.options);\n      return this.fileCollaboratorsAPI;\n    }\n    /**\n     * API for file collaborations\n     *\n     * This is different from the FileCollaboratorsAPI! See ./FileCollaborations for more information.\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FileCollaborationsAPI} FileCollaborationsAPI instance\n     */\n  }, {\n    key: \"getFileCollaborationsAPI\",\n    value: function getFileCollaborationsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.fileCollaborationsAPI = new FileCollaborationsAPI(this.options);\n      return this.fileCollaborationsAPI;\n    }\n    /**\n     * API for folder collaborations\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FolderCollaborationsAPI} FolderCollaborationsAPI instance\n     */\n  }, {\n    key: \"getFolderCollaborationsAPI\",\n    value: function getFolderCollaborationsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.folderCollaborationsAPI = new FolderCollaborationsAPI(this.options);\n      return this.folderCollaborationsAPI;\n    }\n    /**\n     * API for collaborations\n     *\n     * This is different from the other collaboration/collaborator APIs!\n     * See ./Collaborations for more information.\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {CollaborationsAPI} CollaborationsAPI instance\n     */\n  }, {\n    key: \"getCollaborationsAPI\",\n    value: function getCollaborationsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.collaborationsAPI = new CollaborationsAPI(this.options);\n      return this.collaborationsAPI;\n    }\n    /**\n     * API for Groups (marker-based paging)\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MarkerBasedGroupsAPI} MarkerBasedGroupsAPI instance\n     */\n  }, {\n    key: \"getMarkerBasedGroupsAPI\",\n    value: function getMarkerBasedGroupsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.markerBasedGroupsAPI = new MarkerBasedGroupsAPI(this.options);\n      return this.markerBasedGroupsAPI;\n    }\n    /**\n     * API for Users (marker-based paging)\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MarkerBasedUsersAPI} MarkerBasedUsersAPI instance\n     */\n  }, {\n    key: \"getMarkerBasedUsersAPI\",\n    value: function getMarkerBasedUsersAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.markerBasedUsersAPI = new MarkerBasedUsersAPI(this.options);\n      return this.markerBasedUsersAPI;\n    }\n    /**\n     * API for Groups (offset-based paging)\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {GroupsAPI} GroupsAPI instance\n     */\n  }, {\n    key: \"getGroupsAPI\",\n    value: function getGroupsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.groupsAPI = new GroupsAPI(this.options);\n      return this.groupsAPI;\n    }\n    /**\n     * API for Users (offset-based paging)\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {UsersAPI} UsersAPI instance\n     */\n  }, {\n    key: \"getUsersAPI\",\n    value: function getUsersAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.usersAPI = new UsersAPI(this.options);\n      return this.usersAPI;\n    }\n    /**\n     * API for Feed Items\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FeedAPI} FeedAPI instance\n     */\n  }, {\n    key: \"getFeedAPI\",\n    value: function getFeedAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.feedItemsAPI = new FeedAPI(this.options);\n      return this.feedItemsAPI;\n    }\n    /**\n     * API for Open With\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {OpenWithAPI} OpenWithAPI instance\n     */\n  }, {\n    key: \"getOpenWithAPI\",\n    value: function getOpenWithAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.openWithAPI = new OpenWithAPI(this.options);\n      return this.openWithAPI;\n    }\n    /**\n     * API for the App Integrations endpoint\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {AppIntegrationsAPI} AppIntegrationsAPI instance\n     */\n  }, {\n    key: \"getAppIntegrationsAPI\",\n    value: function getAppIntegrationsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.appIntegrationsAPI = new AppIntegrationsAPI(this.options);\n      return this.appIntegrationsAPI;\n    }\n    /**\n     * API for Metadata Query\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MetadataQuery} MetadataQuery instance\n     */\n  }, {\n    key: \"getMetadataQueryAPI\",\n    value: function getMetadataQueryAPI() {\n      var shouldDestroy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.metadataQueryAPI = new MetadataQueryAPI(this.options);\n      return this.metadataQueryAPI;\n    }\n    /**\n     * API for Box Edit\n     *\n     * @return {BoxEditAPI} BoxEditAPI instance\n     */\n  }, {\n    key: \"getBoxEditAPI\",\n    value: function getBoxEditAPI() {\n      this.boxEditAPI = new BoxEditAPI();\n      return this.boxEditAPI;\n    }\n    /**\n     * API for Annotations\n     *\n     * @return {AnnotationsAPI} AnnotationsAPI instance\n     */\n  }, {\n    key: \"getAnnotationsAPI\",\n    value: function getAnnotationsAPI(shouldDestroy) {\n      if (shouldDestroy) {\n        this.destroy();\n      }\n      this.annotationsAPI = new AnnotationsAPI(this.options);\n      return this.annotationsAPI;\n    }\n  }]);\n  return APIFactory;\n}();\nexport default APIFactory;","map":{"version":3,"sources":["../../src/api/APIFactory.js"],"names":["Cache","ChunkedUploadAPI","PlainUploadAPI","FolderAPI","FileAPI","WebLinkAPI","SearchAPI","RecentsAPI","VersionsAPI","CommentsAPI","TasksNewAPI","TaskCollaboratorsAPI","TaskLinksAPI","FileAccessStatsAPI","MarkerBasedGroupsAPI","MarkerBasedUsersAPI","GroupsAPI","UsersAPI","MetadataAPI","FileCollaboratorsAPI","FileCollaborationsAPI","FolderCollaborationsAPI","CollaborationsAPI","FeedAPI","AppIntegrationsAPI","AnnotationsAPI","OpenWithAPI","MetadataQueryAPI","BoxEditAPI","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_UPLOAD","TYPE_FOLDER","TYPE_FILE","TYPE_WEBLINK","APIFactory","options","apiHost","uploadHost","cache","language","destroyCache","fileAPI","destroy","weblinkAPI","plainUploadAPI","chunkedUploadAPI","folderAPI","searchAPI","recentsAPI","versionsAPI","fileAccessStatsAPI","tasksNewAPI","taskCollaboratorsAPI","taskLinksAPI","commentsAPI","markerBasedGroupsAPI","markerBasedUsersAPI","groupsAPI","usersAPI","metadataAPI","fileCollaboratorsAPI","fileCollaborationsAPI","folderCollaborationsAPI","collaborationsAPI","appIntegrationsAPI","metadataQueryAPI","openWithAPI","annotationsAPI","type","api","getFolderAPI","getFileAPI","getWebLinkAPI","Error","shouldDestroy","feedItemsAPI","boxEditAPI"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Main entry point for the box api\n * @author Box\n */\n\nimport Cache from '../utils/Cache';\nimport ChunkedUploadAPI from './uploads/MultiputUpload';\nimport PlainUploadAPI from './uploads/PlainUpload';\nimport FolderAPI from './Folder';\nimport FileAPI from './File';\nimport WebLinkAPI from './WebLink';\nimport SearchAPI from './Search';\nimport RecentsAPI from './Recents';\nimport VersionsAPI from './Versions';\nimport CommentsAPI from './Comments';\nimport TasksNewAPI from './tasks/TasksNew';\nimport TaskCollaboratorsAPI from './tasks/TaskCollaborators';\nimport TaskLinksAPI from './tasks/TaskLinks';\nimport FileAccessStatsAPI from './FileAccessStats';\nimport MarkerBasedGroupsAPI from './MarkerBasedGroups';\nimport MarkerBasedUsersAPI from './MarkerBasedUsers';\nimport GroupsAPI from './Groups';\nimport UsersAPI from './Users';\nimport MetadataAPI from './Metadata';\nimport FileCollaboratorsAPI from './FileCollaborators';\nimport FileCollaborationsAPI from './FileCollaborations';\nimport FolderCollaborationsAPI from './FolderCollaborations';\nimport CollaborationsAPI from './Collaborations';\nimport FeedAPI from './Feed';\nimport AppIntegrationsAPI from './AppIntegrations';\nimport AnnotationsAPI from './Annotations';\nimport OpenWithAPI from './OpenWith';\nimport MetadataQueryAPI from './MetadataQuery';\nimport BoxEditAPI from './box-edit';\nimport { DEFAULT_HOSTNAME_API, DEFAULT_HOSTNAME_UPLOAD, TYPE_FOLDER, TYPE_FILE, TYPE_WEBLINK } from '../constants';\nimport type { ItemType } from '../common/types/core';\nimport type { APIOptions } from '../common/types/api';\nimport type APICache from '../utils/Cache';\n\ntype ItemAPI = FolderAPI | FileAPI | WebLinkAPI;\n\nclass APIFactory {\n    /**\n     * @property {*}\n     */\n    options: APIOptions;\n\n    /**\n     * @property {FileAPI}\n     */\n    fileAPI: FileAPI;\n\n    /**\n     * @property {WebLink}\n     */\n    weblinkAPI: WebLinkAPI;\n\n    /**\n     * @property {FolderAPI}\n     */\n    folderAPI: FolderAPI;\n\n    /**\n     * @property {PlainUploadAPI}\n     */\n    plainUploadAPI: PlainUploadAPI;\n\n    /**\n     * @property {ChunkedUploadAPI}\n     */\n    chunkedUploadAPI: ChunkedUploadAPI;\n\n    /**\n     * @property {SearchAPI}\n     */\n    searchAPI: SearchAPI;\n\n    /**\n     * @property {RecentsAPI}\n     */\n    recentsAPI: RecentsAPI;\n\n    /**\n     * @property {VersionsAPI}\n     */\n    versionsAPI: VersionsAPI;\n\n    /**\n     * @property {CommentsAPI}\n     */\n    commentsAPI: CommentsAPI;\n\n    /**\n     * @property {TasksNewAPI}\n     */\n    tasksNewAPI: TasksNewAPI;\n\n    /**\n     * @property {TaskCollaboratorsAPI}\n     */\n    taskCollaboratorsAPI: TaskCollaboratorsAPI;\n\n    /**\n     * @property {TaskLinksAPI}\n     */\n    taskLinksAPI: TaskLinksAPI;\n\n    /*\n     * @property {FileAccessStatsAPI}\n     */\n    fileAccessStatsAPI: FileAccessStatsAPI;\n\n    /*\n     * @property {MarkerBasedGroupsAPI}\n     */\n    markerBasedGroupsAPI: MarkerBasedGroupsAPI;\n\n    /*\n     * @property {MarkerBasedUsersAPI}\n     */\n    markerBasedUsersAPI: MarkerBasedUsersAPI;\n\n    /**\n     * @property {GroupsAPI}\n     */\n    groupsAPI: GroupsAPI;\n\n    /*\n     * @property {UsersAPI}\n     */\n    usersAPI: UsersAPI;\n\n    /*\n     * @property {MetadataAPI}\n     */\n    metadataAPI: MetadataAPI;\n\n    /**\n     * @property {FileCollaboratorsAPI}\n     */\n    fileCollaboratorsAPI: FileCollaboratorsAPI;\n\n    /**\n     * @property {FileCollaborationsAPI}\n     */\n    fileCollaborationsAPI: FileCollaborationsAPI;\n\n    /**\n     * @property {FolderCollaborationsAPI}\n     */\n    folderCollaborationsAPI: FolderCollaborationsAPI;\n\n    /**\n     * @property {CollaborationsAPI}\n     */\n    collaborationsAPI: CollaborationsAPI;\n\n    /**\n     * @property {FeedAPI}\n     */\n    feedItemsAPI: FeedAPI;\n\n    /**\n     * @property {OpenWithAPI}\n     */\n    openWithAPI: OpenWithAPI;\n\n    /**\n     * @property {AppIntegrationsAPI}\n     */\n    appIntegrationsAPI: AppIntegrationsAPI;\n\n    /**\n     * @property {MetadataQueryAPI}\n     */\n    metadataQueryAPI: MetadataQueryAPI;\n\n    /** @property {BoxEditAPI}\n     *\n     */\n    boxEditAPI: BoxEditAPI;\n\n    /**\n     * @property {AnnotationsAPI}\n     */\n    annotationsAPI: AnnotationsAPI;\n\n    /**\n     * [constructor]\n     *\n     * @param {Object} options\n     * @param {string} options.id - item id\n     * @param {string|function} options.token - Auth token\n     * @param {string} [options.sharedLink] - Shared link\n     * @param {string} [options.sharedLinkPassword] - Shared link password\n     * @param {string} [options.apiHost] - Api host\n     * @param {string} [options.uploadHost] - Upload host name\n     * @return {API} Api instance\n     */\n    constructor(options: APIOptions) {\n        this.options = {\n            ...options,\n            apiHost: options.apiHost || DEFAULT_HOSTNAME_API,\n            uploadHost: options.uploadHost || DEFAULT_HOSTNAME_UPLOAD,\n            cache: options.cache || new Cache(),\n            language: options.language,\n        };\n    }\n\n    /**\n     * [destructor]\n     *\n     * @param {boolean} destroyCache - true to destroy cache\n     * @return {void}\n     */\n    destroy(destroyCache: boolean = false) {\n        if (this.fileAPI) {\n            this.fileAPI.destroy();\n            delete this.fileAPI;\n        }\n\n        if (this.weblinkAPI) {\n            this.weblinkAPI.destroy();\n            delete this.weblinkAPI;\n        }\n\n        if (this.plainUploadAPI) {\n            this.plainUploadAPI.destroy();\n            delete this.plainUploadAPI;\n        }\n\n        if (this.chunkedUploadAPI) {\n            this.chunkedUploadAPI.destroy();\n            delete this.chunkedUploadAPI;\n        }\n\n        if (this.folderAPI) {\n            this.folderAPI.destroy();\n            delete this.folderAPI;\n        }\n\n        if (this.searchAPI) {\n            this.searchAPI.destroy();\n            delete this.searchAPI;\n        }\n\n        if (this.recentsAPI) {\n            this.recentsAPI.destroy();\n            delete this.recentsAPI;\n        }\n\n        if (this.versionsAPI) {\n            this.versionsAPI.destroy();\n            delete this.versionsAPI;\n        }\n\n        if (this.fileAccessStatsAPI) {\n            this.fileAccessStatsAPI.destroy();\n            delete this.fileAccessStatsAPI;\n        }\n\n        if (this.tasksNewAPI) {\n            this.tasksNewAPI.destroy();\n            delete this.tasksNewAPI;\n        }\n\n        if (this.taskCollaboratorsAPI) {\n            this.taskCollaboratorsAPI.destroy();\n            delete this.taskCollaboratorsAPI;\n        }\n\n        if (this.taskLinksAPI) {\n            this.taskLinksAPI.destroy();\n            delete this.taskLinksAPI;\n        }\n\n        if (this.commentsAPI) {\n            this.commentsAPI.destroy();\n            delete this.commentsAPI;\n        }\n\n        if (this.markerBasedGroupsAPI) {\n            this.markerBasedGroupsAPI.destroy();\n            delete this.markerBasedGroupsAPI;\n        }\n\n        if (this.markerBasedUsersAPI) {\n            this.markerBasedUsersAPI.destroy();\n            delete this.markerBasedUsersAPI;\n        }\n\n        if (this.groupsAPI) {\n            this.groupsAPI.destroy();\n            delete this.groupsAPI;\n        }\n\n        if (this.usersAPI) {\n            this.usersAPI.destroy();\n            delete this.usersAPI;\n        }\n\n        if (this.metadataAPI) {\n            this.metadataAPI.destroy();\n            delete this.metadataAPI;\n        }\n\n        if (this.fileCollaboratorsAPI) {\n            this.fileCollaboratorsAPI.destroy();\n            delete this.fileCollaboratorsAPI;\n        }\n\n        if (this.fileCollaborationsAPI) {\n            this.fileCollaborationsAPI.destroy();\n            delete this.fileCollaborationsAPI;\n        }\n\n        if (this.folderCollaborationsAPI) {\n            this.folderCollaborationsAPI.destroy();\n            delete this.folderCollaborationsAPI;\n        }\n\n        if (this.collaborationsAPI) {\n            this.collaborationsAPI.destroy();\n            delete this.collaborationsAPI;\n        }\n\n        if (this.appIntegrationsAPI) {\n            this.appIntegrationsAPI.destroy();\n            delete this.appIntegrationsAPI;\n        }\n\n        if (this.metadataQueryAPI) {\n            this.metadataQueryAPI.destroy();\n            delete this.metadataQueryAPI;\n        }\n\n        if (this.openWithAPI) {\n            this.openWithAPI.destroy();\n            delete this.openWithAPI;\n        }\n\n        if (this.annotationsAPI) {\n            this.annotationsAPI.destroy();\n            delete this.annotationsAPI;\n        }\n\n        if (destroyCache) {\n            this.options.cache = new Cache();\n        }\n    }\n\n    /**\n     * Gets the cache instance\n     *\n     * @return {Cache} cache instance\n     */\n    getCache(): APICache {\n        return ((this.options.cache: any): APICache);\n    }\n\n    /**\n     * Returns the API based on type of item\n     *\n     * @private\n     * @param {String} type - item type\n     * @return {ItemAPI} api\n     */\n    getAPI(type: ItemType): ItemAPI {\n        let api: ItemAPI;\n\n        switch (type) {\n            case TYPE_FOLDER:\n                api = this.getFolderAPI();\n                break;\n            case TYPE_FILE:\n                api = this.getFileAPI();\n                break;\n            case TYPE_WEBLINK:\n                api = this.getWebLinkAPI();\n                break;\n            default:\n                throw new Error('Unknown Type!');\n        }\n\n        return api;\n    }\n\n    /**\n     * API for file\n     *\n     * @return {FileAPI} FileAPI instance\n     */\n    getFileAPI(shouldDestroy: boolean = true): FileAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n        this.fileAPI = new FileAPI(this.options);\n        return this.fileAPI;\n    }\n\n    /**\n     * API for web links\n     *\n     * @return {WebLinkAPI} WebLinkAPI instance\n     */\n    getWebLinkAPI(): WebLinkAPI {\n        this.destroy();\n        this.weblinkAPI = new WebLinkAPI(this.options);\n        return this.weblinkAPI;\n    }\n\n    /**\n     * API for plain uploads\n     *\n     * @return {UploadAPI} UploadAPI instance\n     */\n    getPlainUploadAPI(): PlainUploadAPI {\n        this.destroy();\n        this.plainUploadAPI = new PlainUploadAPI(this.options);\n        return this.plainUploadAPI;\n    }\n\n    /**\n     * API for chunked uploads\n     *\n     * @return {UploadAPI} UploadAPI instance\n     */\n    getChunkedUploadAPI(): ChunkedUploadAPI {\n        this.destroy();\n        this.chunkedUploadAPI = new ChunkedUploadAPI(this.options);\n        return this.chunkedUploadAPI;\n    }\n\n    /**\n     * API for folder\n     *\n     * @return {FolderAPI} FolderAPI instance\n     */\n    getFolderAPI(): FolderAPI {\n        this.destroy();\n        this.folderAPI = new FolderAPI(this.options);\n        return this.folderAPI;\n    }\n\n    /**\n     * API for search\n     *\n     * @return {SearchAPI} SearchAPI instance\n     */\n    getSearchAPI(): SearchAPI {\n        this.destroy();\n        this.searchAPI = new SearchAPI(this.options);\n        return this.searchAPI;\n    }\n\n    /**\n     * API for recents\n     *\n     * @return {RecentsAPI} RecentsAPI instance\n     */\n    getRecentsAPI(): RecentsAPI {\n        this.destroy();\n        this.recentsAPI = new RecentsAPI(this.options);\n        return this.recentsAPI;\n    }\n\n    /**\n     * API for metadata\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MetadataAPI} MetadataAPI instance\n     */\n    getMetadataAPI(shouldDestroy: boolean): MetadataAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.metadataAPI = new MetadataAPI(this.options);\n        return this.metadataAPI;\n    }\n\n    /**\n     * API for versions\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {VersionsAPI} VersionsAPI instance\n     */\n    getVersionsAPI(shouldDestroy: boolean): VersionsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.versionsAPI = new VersionsAPI(this.options);\n        return this.versionsAPI;\n    }\n\n    /**\n     * API for comments\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {CommentsAPI} CommentsAPI instance\n     */\n    getCommentsAPI(shouldDestroy: boolean): CommentsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n        return this.commentsAPI;\n    }\n\n    /**\n     * API for tasks\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TasksAPI} TaskAssignmentsAPI instance\n     */\n    getTasksNewAPI(shouldDestroy: boolean): TasksNewAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        return this.tasksNewAPI;\n    }\n\n    /**\n     * API for taskCollaborators\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TaskCollaboratorsAPI} TaskCollaboratorsAPI instance\n     */\n    getTaskCollaboratorsAPI(shouldDestroy: boolean): TaskCollaboratorsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n        return this.taskCollaboratorsAPI;\n    }\n\n    /**\n     * API for taskLinks\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TasksAPI} TaskLinksAPI instance\n     */\n    getTaskLinksAPI(shouldDestroy: boolean): TaskLinksAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.taskLinksAPI = new TaskLinksAPI(this.options);\n        return this.taskLinksAPI;\n    }\n\n    /**\n     * API for file access stats\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FileAccessStatsAPI} FileAccessStatsAPI instance\n     */\n    getFileAccessStatsAPI(shouldDestroy: boolean): FileAccessStatsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.fileAccessStatsAPI = new FileAccessStatsAPI(this.options);\n        return this.fileAccessStatsAPI;\n    }\n\n    /**\n     * API for file collaborators\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FileCollaboratorsAPI} FileCollaboratorsAPI instance\n     */\n    getFileCollaboratorsAPI(shouldDestroy: boolean): FileCollaboratorsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.fileCollaboratorsAPI = new FileCollaboratorsAPI(this.options);\n        return this.fileCollaboratorsAPI;\n    }\n\n    /**\n     * API for file collaborations\n     *\n     * This is different from the FileCollaboratorsAPI! See ./FileCollaborations for more information.\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FileCollaborationsAPI} FileCollaborationsAPI instance\n     */\n    getFileCollaborationsAPI(shouldDestroy: boolean): FileCollaborationsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.fileCollaborationsAPI = new FileCollaborationsAPI(this.options);\n        return this.fileCollaborationsAPI;\n    }\n\n    /**\n     * API for folder collaborations\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FolderCollaborationsAPI} FolderCollaborationsAPI instance\n     */\n    getFolderCollaborationsAPI(shouldDestroy: boolean): FolderCollaborationsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.folderCollaborationsAPI = new FolderCollaborationsAPI(this.options);\n        return this.folderCollaborationsAPI;\n    }\n\n    /**\n     * API for collaborations\n     *\n     * This is different from the other collaboration/collaborator APIs!\n     * See ./Collaborations for more information.\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {CollaborationsAPI} CollaborationsAPI instance\n     */\n    getCollaborationsAPI(shouldDestroy: boolean): CollaborationsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.collaborationsAPI = new CollaborationsAPI(this.options);\n        return this.collaborationsAPI;\n    }\n\n    /**\n     * API for Groups (marker-based paging)\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MarkerBasedGroupsAPI} MarkerBasedGroupsAPI instance\n     */\n    getMarkerBasedGroupsAPI(shouldDestroy: boolean): MarkerBasedGroupsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.markerBasedGroupsAPI = new MarkerBasedGroupsAPI(this.options);\n        return this.markerBasedGroupsAPI;\n    }\n\n    /**\n     * API for Users (marker-based paging)\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MarkerBasedUsersAPI} MarkerBasedUsersAPI instance\n     */\n    getMarkerBasedUsersAPI(shouldDestroy: boolean): MarkerBasedUsersAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.markerBasedUsersAPI = new MarkerBasedUsersAPI(this.options);\n        return this.markerBasedUsersAPI;\n    }\n\n    /**\n     * API for Groups (offset-based paging)\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {GroupsAPI} GroupsAPI instance\n     */\n    getGroupsAPI(shouldDestroy: boolean): GroupsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.groupsAPI = new GroupsAPI(this.options);\n        return this.groupsAPI;\n    }\n\n    /**\n     * API for Users (offset-based paging)\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {UsersAPI} UsersAPI instance\n     */\n    getUsersAPI(shouldDestroy: boolean): UsersAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.usersAPI = new UsersAPI(this.options);\n        return this.usersAPI;\n    }\n\n    /**\n     * API for Feed Items\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FeedAPI} FeedAPI instance\n     */\n    getFeedAPI(shouldDestroy: boolean): FeedAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.feedItemsAPI = new FeedAPI(this.options);\n        return this.feedItemsAPI;\n    }\n\n    /**\n     * API for Open With\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {OpenWithAPI} OpenWithAPI instance\n     */\n    getOpenWithAPI(shouldDestroy: boolean): OpenWithAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.openWithAPI = new OpenWithAPI(this.options);\n        return this.openWithAPI;\n    }\n\n    /**\n     * API for the App Integrations endpoint\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {AppIntegrationsAPI} AppIntegrationsAPI instance\n     */\n    getAppIntegrationsAPI(shouldDestroy: boolean): AppIntegrationsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.appIntegrationsAPI = new AppIntegrationsAPI(this.options);\n        return this.appIntegrationsAPI;\n    }\n\n    /**\n     * API for Metadata Query\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MetadataQuery} MetadataQuery instance\n     */\n    getMetadataQueryAPI(shouldDestroy: boolean = false): MetadataQueryAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.metadataQueryAPI = new MetadataQueryAPI(this.options);\n        return this.metadataQueryAPI;\n    }\n\n    /**\n     * API for Box Edit\n     *\n     * @return {BoxEditAPI} BoxEditAPI instance\n     */\n    getBoxEditAPI(): BoxEditAPI {\n        this.boxEditAPI = new BoxEditAPI();\n        return this.boxEditAPI;\n    }\n\n    /**\n     * API for Annotations\n     *\n     * @return {AnnotationsAPI} AnnotationsAPI instance\n     */\n    getAnnotationsAPI(shouldDestroy: boolean): AnnotationsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n        return this.annotationsAPI;\n    }\n}\n\nexport default APIFactory;\n"]},"metadata":{},"sourceType":"module"}