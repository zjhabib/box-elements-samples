{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * \n * @file Content Explorer Rename Dialog\n * @author Box\n */\nimport React from 'react';\nimport Modal from 'react-modal';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport PrimaryButton from '../../components/primary-button/PrimaryButton';\nimport Button from '../../components/button/Button';\nimport messages from '../common/messages';\nimport { CLASS_MODAL_CONTENT, CLASS_MODAL_OVERLAY, CLASS_MODAL, ERROR_CODE_ITEM_NAME_TOO_LONG, ERROR_CODE_ITEM_NAME_IN_USE } from '../../constants';\n\n/* eslint-disable jsx-a11y/label-has-for */\nvar RenameDialog = function RenameDialog(_ref) {\n  var isOpen = _ref.isOpen,\n    onRename = _ref.onRename,\n    onCancel = _ref.onCancel,\n    item = _ref.item,\n    isLoading = _ref.isLoading,\n    errorCode = _ref.errorCode,\n    parentElement = _ref.parentElement,\n    appElement = _ref.appElement,\n    intl = _ref.intl;\n  var textInput = null;\n  var error;\n  var _item$name = item.name,\n    name = _item$name === void 0 ? '' : _item$name,\n    extension = item.extension;\n  var ext = extension ? \".\".concat(extension) : '';\n  var nameWithoutExt = extension ? name.replace(ext, '') : name;\n  /**\n   * Appends the extension and calls rename function\n   */\n\n  var rename = function rename() {\n    if (textInput && textInput.value) {\n      if (textInput.value === nameWithoutExt) {\n        onCancel();\n      } else {\n        onRename(textInput.value, ext);\n      }\n    }\n  };\n  /**\n   * Grabs reference to the input element\n   */\n\n  var ref = function ref(input) {\n    textInput = input;\n    if (textInput instanceof HTMLInputElement) {\n      textInput.focus();\n      textInput.select();\n    }\n  };\n  /**\n   * Handles enter key down\n   */\n\n  var onKeyDown = function onKeyDown(_ref2) {\n    var key = _ref2.key;\n    switch (key) {\n      case 'Enter':\n        rename();\n        break;\n      default:\n        break;\n    }\n  };\n  switch (errorCode) {\n    case ERROR_CODE_ITEM_NAME_IN_USE:\n      error = messages.renameDialogErrorInUse;\n      break;\n    case ERROR_CODE_ITEM_NAME_TOO_LONG:\n      error = messages.renameDialogErrorTooLong;\n      break;\n    default:\n      error = errorCode ? messages.renameDialogErrorInvalid : null;\n      break;\n  }\n  return React.createElement(Modal, {\n    appElement: appElement,\n    className: CLASS_MODAL_CONTENT,\n    contentLabel: intl.formatMessage(messages.renameDialogLabel),\n    isOpen: isOpen,\n    onRequestClose: onCancel,\n    overlayClassName: CLASS_MODAL_OVERLAY,\n    parentSelector: function parentSelector() {\n      return parentElement;\n    },\n    portalClassName: \"\".concat(CLASS_MODAL, \" be-modal-rename\")\n  }, React.createElement(\"label\", null, error ? React.createElement(\"div\", {\n    className: \"be-modal-error\"\n  }, React.createElement(FormattedMessage, _extends({}, error, {\n    values: {\n      name: nameWithoutExt\n    }\n  }))) : null, React.createElement(FormattedMessage, _extends({\n    tagName: \"div\"\n  }, messages.renameDialogText, {\n    values: {\n      name: nameWithoutExt\n    }\n  })), React.createElement(\"input\", {\n    ref: ref,\n    defaultValue: nameWithoutExt,\n    onKeyDown: onKeyDown,\n    required: true,\n    type: \"text\"\n  })), React.createElement(\"div\", {\n    className: \"be-modal-btns\"\n  }, React.createElement(PrimaryButton, {\n    isLoading: isLoading,\n    onClick: rename,\n    type: \"button\"\n  }, React.createElement(FormattedMessage, messages.rename)), React.createElement(Button, {\n    isDisabled: isLoading,\n    onClick: onCancel,\n    type: \"button\"\n  }, React.createElement(FormattedMessage, messages.cancel))));\n};\nexport default injectIntl(RenameDialog);","map":{"version":3,"sources":["../../../src/elements/content-explorer/RenameDialog.js"],"names":["React","Modal","injectIntl","FormattedMessage","PrimaryButton","Button","messages","CLASS_MODAL_CONTENT","CLASS_MODAL_OVERLAY","CLASS_MODAL","ERROR_CODE_ITEM_NAME_TOO_LONG","ERROR_CODE_ITEM_NAME_IN_USE","RenameDialog","isOpen","onRename","onCancel","item","isLoading","errorCode","parentElement","appElement","intl","textInput","error","name","extension","ext","nameWithoutExt","replace","rename","value","ref","input","HTMLInputElement","focus","select","onKeyDown","key","renameDialogErrorInUse","renameDialogErrorTooLong","renameDialogErrorInvalid","formatMessage","renameDialogLabel","renameDialogText","cancel"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Content Explorer Rename Dialog\n * @author Box\n */\n\nimport React from 'react';\nimport Modal from 'react-modal';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport PrimaryButton from '../../components/primary-button/PrimaryButton';\nimport Button from '../../components/button/Button';\nimport messages from '../common/messages';\nimport {\n    CLASS_MODAL_CONTENT,\n    CLASS_MODAL_OVERLAY,\n    CLASS_MODAL,\n    ERROR_CODE_ITEM_NAME_TOO_LONG,\n    ERROR_CODE_ITEM_NAME_IN_USE,\n} from '../../constants';\nimport type { BoxItem } from '../../common/types/core';\n\ntype Props = {\n    appElement: HTMLElement,\n    errorCode: string,\n    isLoading: boolean,\n    isOpen: boolean,\n    item: BoxItem,\n    onCancel: Function,\n    onRename: Function,\n    parentElement: HTMLElement,\n} & InjectIntlProvidedProps;\n\n/* eslint-disable jsx-a11y/label-has-for */\nconst RenameDialog = ({\n    isOpen,\n    onRename,\n    onCancel,\n    item,\n    isLoading,\n    errorCode,\n    parentElement,\n    appElement,\n    intl,\n}: Props) => {\n    let textInput = null;\n    let error;\n\n    const { name = '', extension } = item;\n    const ext = extension ? `.${extension}` : '';\n    const nameWithoutExt = extension ? name.replace(ext, '') : name;\n\n    /**\n     * Appends the extension and calls rename function\n     */\n    const rename = () => {\n        if (textInput && textInput.value) {\n            if (textInput.value === nameWithoutExt) {\n                onCancel();\n            } else {\n                onRename(textInput.value, ext);\n            }\n        }\n    };\n\n    /**\n     * Grabs reference to the input element\n     */\n    const ref = input => {\n        textInput = input;\n        if (textInput instanceof HTMLInputElement) {\n            textInput.focus();\n            textInput.select();\n        }\n    };\n\n    /**\n     * Handles enter key down\n     */\n    const onKeyDown = ({ key }) => {\n        switch (key) {\n            case 'Enter':\n                rename();\n                break;\n            default:\n                break;\n        }\n    };\n\n    switch (errorCode) {\n        case ERROR_CODE_ITEM_NAME_IN_USE:\n            error = messages.renameDialogErrorInUse;\n            break;\n        case ERROR_CODE_ITEM_NAME_TOO_LONG:\n            error = messages.renameDialogErrorTooLong;\n            break;\n        default:\n            error = errorCode ? messages.renameDialogErrorInvalid : null;\n            break;\n    }\n\n    return (\n        <Modal\n            appElement={appElement}\n            className={CLASS_MODAL_CONTENT}\n            contentLabel={intl.formatMessage(messages.renameDialogLabel)}\n            isOpen={isOpen}\n            onRequestClose={onCancel}\n            overlayClassName={CLASS_MODAL_OVERLAY}\n            parentSelector={() => parentElement}\n            portalClassName={`${CLASS_MODAL} be-modal-rename`}\n        >\n            <label>\n                {error ? (\n                    <div className=\"be-modal-error\">\n                        <FormattedMessage {...error} values={{ name: nameWithoutExt }} />\n                    </div>\n                ) : null}\n                <FormattedMessage tagName=\"div\" {...messages.renameDialogText} values={{ name: nameWithoutExt }} />\n                <input ref={ref} defaultValue={nameWithoutExt} onKeyDown={onKeyDown} required type=\"text\" />\n            </label>\n            <div className=\"be-modal-btns\">\n                <PrimaryButton isLoading={isLoading} onClick={rename} type=\"button\">\n                    <FormattedMessage {...messages.rename} />\n                </PrimaryButton>\n                <Button isDisabled={isLoading} onClick={onCancel} type=\"button\">\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            </div>\n        </Modal>\n    );\n};\n\nexport default injectIntl(RenameDialog);\n"]},"metadata":{},"sourceType":"module"}