{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\n/**\n * \n * @file Wrapper to conditionally add a tooltip\n * @author Box\n */\nimport * as React from 'react';\nimport TooltipCore from '../../components/tooltip/Tooltip';\nvar Tooltip = function Tooltip(_ref) {\n  var children = _ref.children,\n    isDisabled = _ref.isDisabled,\n    text = _ref.text,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"isDisabled\", \"text\"]);\n  if (isDisabled || !text) {\n    return children;\n  }\n  return React.createElement(TooltipCore, _extends({\n    text: text\n  }, rest), children);\n};\nexport default Tooltip;","map":{"version":3,"sources":["../../../src/elements/common/Tooltip.js"],"names":["React","TooltipCore","Tooltip","children","isDisabled","text","rest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EASV;EAAA,IARFC,QAQE,GAAA,IAAA,CARFA,QAQE;IAPFC,UAOE,GAAA,IAAA,CAPFA,UAOE;IANFC,IAME,GAAA,IAAA,CANFA,IAME;IALCC,IAKD,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,YAAA,EAAA,MAAA,CAAA,CAAA;EACF,IAAIF,UAAU,IAAI,CAACC,IAAnB,EAAyB;IACrB,OAAOF,QAAP;EACH;EAED,OACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA,QAAA,CAAA;IAAa,IAAI,EAAEE;EAAnB,CAAA,EAA6BC,IAA7B,CAAA,EACKH,QADL,CADJ;AAKH,CAnBD;AAqBA,eAAeD,OAAf","sourcesContent":["/**\n * @flow\n * @file Wrapper to conditionally add a tooltip\n * @author Box\n */\n\nimport * as React from 'react';\nimport TooltipCore from '../../components/tooltip/Tooltip';\n\nconst Tooltip = ({\n    children,\n    isDisabled,\n    text,\n    ...rest\n}: {\n    children: React.Node,\n    isDisabled?: boolean,\n    text?: ?string | React.Node,\n}) => {\n    if (isDisabled || !text) {\n        return children;\n    }\n\n    return (\n        <TooltipCore text={text} {...rest}>\n            {children}\n        </TooltipCore>\n    );\n};\n\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}