{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport uniqueId from 'lodash/uniqueId';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport IconClose from '../../icons/general/IconClose';\nvar ALERT_TYPE = 'alert';\nvar DIALOG_TYPE = 'dialog';\nvar messages = defineMessages({\n  closeModalText: {\n    \"id\": \"boxui.modalDialog.closeModalText\",\n    \"defaultMessage\": \"Close Modal\"\n  }\n});\nvar ModalDialog = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModalDialog, _React$Component);\n  function ModalDialog() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, ModalDialog);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModalDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"onCloseButtonClick\", function (event) {\n      var onRequestClose = _this.props.onRequestClose;\n      if (onRequestClose) {\n        onRequestClose(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"modalID\", uniqueId('modal'));\n    return _this;\n  }\n  _createClass(ModalDialog, [{\n    key: \"renderCloseButton\",\n    /**\n     * Renders a button if onRequestClose is passed in\n     * @return {ReactElement|null} - Returns the button, or null if the button shouldn't be rendered\n     */\n    value: function renderCloseButton() {\n      var _this$props = this.props,\n        closeButtonProps = _this$props.closeButtonProps,\n        onRequestClose = _this$props.onRequestClose,\n        intl = _this$props.intl;\n      var formatMessage = intl.formatMessage;\n      if (!onRequestClose) {\n        return null;\n      }\n      return (\n        // eslint-disable-next-line react/button-has-type\n        React.createElement(\"button\", _extends({}, closeButtonProps, {\n          \"aria-label\": formatMessage(messages.closeModalText),\n          className: \"modal-close-button\",\n          onClick: this.onCloseButtonClick\n        }), React.createElement(IconClose, {\n          color: \"#909090\",\n          height: 18,\n          width: 18\n        }))\n      );\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this$props2 = this.props,\n        children = _this$props2.children,\n        type = _this$props2.type;\n      if (type !== ALERT_TYPE) {\n        return React.createElement(\"div\", {\n          className: \"modal-content\"\n        }, children);\n      }\n      var elements = React.Children.toArray(children);\n      if (elements.length !== 2) {\n        throw new Error('Alert modal must have exactly two children: A message and <ModalActions>');\n      }\n      return React.createElement(\"div\", {\n        className: \"modal-content\"\n      }, React.createElement(\"p\", {\n        id: \"\".concat(this.modalID, \"-desc\")\n      }, elements[0]), elements[1]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n        className = _this$props3.className,\n        modalRef = _this$props3.modalRef,\n        title = _this$props3.title,\n        type = _this$props3.type,\n        rest = _objectWithoutProperties(_this$props3, [\"className\", \"modalRef\", \"title\", \"type\"]);\n      var isAlertType = type === ALERT_TYPE;\n      var divProps = omit(rest, ['children', 'closeButtonProps', 'onRequestClose', 'intl']);\n      divProps.role = isAlertType ? 'alertdialog' : 'dialog';\n      divProps['aria-labelledby'] = \"\".concat(this.modalID, \"-label\");\n      if (isAlertType) {\n        divProps['aria-describedby'] = \"\".concat(this.modalID, \"-desc\");\n      }\n      return React.createElement(\"div\", _extends({\n        ref: modalRef,\n        className: classNames('modal-dialog', className)\n      }, divProps), React.createElement(\"div\", {\n        className: \"modal-header\"\n      }, React.createElement(\"h2\", {\n        className: \"modal-title\",\n        id: \"\".concat(this.modalID, \"-label\")\n      }, title)), this.renderCloseButton(), this.renderContent());\n    }\n  }]);\n  return ModalDialog;\n}(React.Component);\n_defineProperty(ModalDialog, \"defaultProps\", {\n  type: DIALOG_TYPE,\n  closeButtonProps: {}\n});\nexport { ModalDialog as ModalDialogBase };\nexport default injectIntl(ModalDialog);","map":{"version":3,"sources":["../../../src/components/modal/ModalDialog.js"],"names":["React","classNames","omit","uniqueId","defineMessages","injectIntl","IconClose","ALERT_TYPE","DIALOG_TYPE","messages","closeModalText","ModalDialog","Component","type","closeButtonProps","event","onRequestClose","props","intl","formatMessage","onCloseButtonClick","children","elements","Children","toArray","length","Error","modalID","className","modalRef","title","rest","isAlertType","divProps","role","renderCloseButton","renderContent","ModalDialogBase"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport uniqueId from 'lodash/uniqueId';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport IconClose from '../../icons/general/IconClose';\n\nconst ALERT_TYPE = 'alert';\nconst DIALOG_TYPE = 'dialog';\n\nconst messages = defineMessages({\n    closeModalText: {\n        defaultMessage: 'Close Modal',\n        description: 'Button to close modal',\n        id: 'boxui.modalDialog.closeModalText',\n    },\n});\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    closeButtonProps: Object,\n    intl: Object,\n    modalRef?: Function,\n    onRequestClose?: Function,\n    title?: React.Node,\n    type?: 'alert' | 'dialog',\n};\n\nclass ModalDialog extends React.Component<Props> {\n    static defaultProps = {\n        type: DIALOG_TYPE,\n        closeButtonProps: {},\n    };\n\n    /**\n     * Handles clicking on the close button\n     * @param {SyntheticMouseEvent} event\n     * @return {void}\n     */\n    onCloseButtonClick = (event: SyntheticMouseEvent<HTMLButtonElement>) => {\n        const { onRequestClose } = this.props;\n        if (onRequestClose) {\n            onRequestClose(event);\n        }\n    };\n\n    modalID: string = uniqueId('modal');\n\n    /**\n     * Renders a button if onRequestClose is passed in\n     * @return {ReactElement|null} - Returns the button, or null if the button shouldn't be rendered\n     */\n    renderCloseButton() {\n        const { closeButtonProps, onRequestClose, intl } = this.props;\n        const { formatMessage } = intl;\n        if (!onRequestClose) {\n            return null;\n        }\n\n        return (\n            // eslint-disable-next-line react/button-has-type\n            <button\n                {...closeButtonProps}\n                aria-label={formatMessage(messages.closeModalText)}\n                className=\"modal-close-button\"\n                onClick={this.onCloseButtonClick}\n            >\n                <IconClose color=\"#909090\" height={18} width={18} />\n            </button>\n        );\n    }\n\n    renderContent() {\n        const { children, type } = this.props;\n\n        if (type !== ALERT_TYPE) {\n            return <div className=\"modal-content\">{children}</div>;\n        }\n\n        const elements = React.Children.toArray(children);\n        if (elements.length !== 2) {\n            throw new Error('Alert modal must have exactly two children: A message and <ModalActions>');\n        }\n\n        return (\n            <div className=\"modal-content\">\n                <p id={`${this.modalID}-desc`}>{elements[0]}</p>\n                {elements[1]}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            className,\n            modalRef,\n            title,\n            type,\n            ...rest // Useful for resin tagging, and other misc tags such as a11y\n        } = this.props;\n        const isAlertType = type === ALERT_TYPE;\n        const divProps = omit(rest, ['children', 'closeButtonProps', 'onRequestClose', 'intl']);\n\n        divProps.role = isAlertType ? 'alertdialog' : 'dialog';\n        divProps['aria-labelledby'] = `${this.modalID}-label`;\n        if (isAlertType) {\n            divProps['aria-describedby'] = `${this.modalID}-desc`;\n        }\n\n        return (\n            <div ref={modalRef} className={classNames('modal-dialog', className)} {...divProps}>\n                <div className=\"modal-header\">\n                    <h2 className=\"modal-title\" id={`${this.modalID}-label`}>\n                        {title}\n                    </h2>\n                </div>\n                {this.renderCloseButton()}\n                {this.renderContent()}\n            </div>\n        );\n    }\n}\n\nexport { ModalDialog as ModalDialogBase };\nexport default injectIntl(ModalDialog);\n"]},"metadata":{},"sourceType":"module"}