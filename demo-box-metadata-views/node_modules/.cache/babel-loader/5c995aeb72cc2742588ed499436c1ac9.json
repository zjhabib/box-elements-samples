{"ast":null,"code":"/**\n * \n * @file Function to render the date table cell\n * @author Box\n */\nimport React from 'react';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { isToday, isYesterday } from '../../../utils/datetime';\nimport messages from '../messages';\nimport './DateField.scss';\nvar DEFAULT_DATE_FORMAT = {\n  weekday: 'short',\n  month: 'short',\n  year: 'numeric',\n  day: 'numeric'\n};\nvar DateField = function DateField(_ref) {\n  var date = _ref.date,\n    _ref$dateFormat = _ref.dateFormat,\n    dateFormat = _ref$dateFormat === void 0 ? DEFAULT_DATE_FORMAT : _ref$dateFormat,\n    _ref$omitCommas = _ref.omitCommas,\n    omitCommas = _ref$omitCommas === void 0 ? false : _ref$omitCommas,\n    intl = _ref.intl,\n    _ref$relative = _ref.relative,\n    relative = _ref$relative === void 0 ? true : _ref$relative,\n    _ref$capitalize = _ref.capitalize,\n    capitalize = _ref$capitalize === void 0 ? false : _ref$capitalize;\n  var d = new Date(date);\n  var isTodaysDate = isToday(d);\n  var isYesterdaysDate = isYesterday(d);\n  if (relative && (isTodaysDate || isYesterdaysDate)) {\n    var Message = React.createElement(FormattedMessage, messages.today);\n    if (isYesterdaysDate) {\n      Message = React.createElement(FormattedMessage, messages.yesterday);\n    }\n    if (capitalize) {\n      return React.createElement(\"span\", {\n        className: \"be-date-capitalize\"\n      }, Message);\n    }\n    return Message;\n  }\n  var formattedDate = intl.formatDate(d, dateFormat);\n  formattedDate = omitCommas ? formattedDate.replace(/,/g, '') : formattedDate;\n  return formattedDate;\n};\nexport default injectIntl(DateField);","map":{"version":3,"sources":["../../../../src/elements/common/date/DateField.js"],"names":["React","injectIntl","FormattedMessage","isToday","isYesterday","messages","DEFAULT_DATE_FORMAT","weekday","month","year","day","DateField","date","dateFormat","omitCommas","intl","relative","capitalize","d","Date","isTodaysDate","isYesterdaysDate","Message","today","yesterday","formattedDate","formatDate","replace"],"mappings":"AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,YAA7C;AAEA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,yBAArC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAO,kBAAP;AAUA,IAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,OADe;EAExBC,KAAK,EAAE,OAFiB;EAGxBC,IAAI,EAAE,SAHkB;EAIxBC,GAAG,EAAE;AAJmB,CAA5B;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAOL;EAAA,IANTC,IAMS,GAAA,IAAA,CANTA,IAMS;IAAA,eAAA,GAAA,IAAA,CALTC,UAKS;IALTA,UAKS,GAAA,eAAA,KAAA,KAAA,CAAA,GALIP,mBAKJ,GAAA,eAAA;IAAA,eAAA,GAAA,IAAA,CAJTQ,UAIS;IAJTA,UAIS,GAAA,eAAA,KAAA,KAAA,CAAA,GAJI,KAIJ,GAAA,eAAA;IAHTC,IAGS,GAAA,IAAA,CAHTA,IAGS;IAAA,aAAA,GAAA,IAAA,CAFTC,QAES;IAFTA,QAES,GAAA,aAAA,KAAA,KAAA,CAAA,GAFE,IAEF,GAAA,aAAA;IAAA,eAAA,GAAA,IAAA,CADTC,UACS;IADTA,UACS,GAAA,eAAA,KAAA,KAAA,CAAA,GADI,KACJ,GAAA,eAAA;EACT,IAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASP,IAAT,CAAV;EACA,IAAMQ,YAAY,GAAGjB,OAAO,CAACe,CAAD,CAA5B;EACA,IAAMG,gBAAgB,GAAGjB,WAAW,CAACc,CAAD,CAApC;EAEA,IAAIF,QAAQ,KAAKI,YAAY,IAAIC,gBAArB,CAAZ,EAAoD;IAChD,IAAIC,OAAO,GAAG,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBjB,QAAQ,CAACkB,KAA/B,CAAd;IACA,IAAIF,gBAAJ,EAAsB;MAClBC,OAAO,GAAG,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBjB,QAAQ,CAACmB,SAA/B,CAAVF;IACH;IAED,IAAIL,UAAJ,EAAgB;MACZ,OAAO,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;QAAM,SAAS,EAAC;MAAhB,CAAA,EAAsCK,OAAtC,CAAP;IACH;IAED,OAAOA,OAAP;EACH;EAED,IAAIG,aAAa,GAAGV,IAAI,CAACW,UAALX,CAAgBG,CAAhBH,EAAmBF,UAAnBE,CAApB;EACAU,aAAa,GAAGX,UAAU,GAAGW,aAAa,CAACE,OAAdF,CAAsB,IAAtBA,EAA4B,EAA5BA,CAAH,GAAqCA,aAA/DA;EACA,OAAOA,aAAP;AACH,CA5BD;AA8BA,eAAexB,UAAU,CAACU,SAAD,CAAzB","sourcesContent":["/**\n * @flow\n * @file Function to render the date table cell\n * @author Box\n */\n\nimport React from 'react';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport { isToday, isYesterday } from '../../../utils/datetime';\nimport messages from '../messages';\nimport './DateField.scss';\n\ntype Props = {\n    capitalize?: boolean,\n    date: string,\n    dateFormat?: Object,\n    omitCommas?: boolean,\n    relative?: boolean,\n} & InjectIntlProvidedProps;\n\nconst DEFAULT_DATE_FORMAT = {\n    weekday: 'short',\n    month: 'short',\n    year: 'numeric',\n    day: 'numeric',\n};\n\nconst DateField = ({\n    date,\n    dateFormat = DEFAULT_DATE_FORMAT,\n    omitCommas = false,\n    intl,\n    relative = true,\n    capitalize = false,\n}: Props) => {\n    const d = new Date(date);\n    const isTodaysDate = isToday(d);\n    const isYesterdaysDate = isYesterday(d);\n\n    if (relative && (isTodaysDate || isYesterdaysDate)) {\n        let Message = <FormattedMessage {...messages.today} />;\n        if (isYesterdaysDate) {\n            Message = <FormattedMessage {...messages.yesterday} />;\n        }\n\n        if (capitalize) {\n            return <span className=\"be-date-capitalize\">{Message}</span>;\n        }\n\n        return Message;\n    }\n\n    let formattedDate = intl.formatDate(d, dateFormat);\n    formattedDate = omitCommas ? formattedDate.replace(/,/g, '') : formattedDate;\n    return formattedDate;\n};\n\nexport default injectIntl(DateField);\n"]},"metadata":{},"sourceType":"module"}