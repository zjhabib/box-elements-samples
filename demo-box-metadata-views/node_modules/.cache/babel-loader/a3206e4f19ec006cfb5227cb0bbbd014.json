{"ast":null,"code":"import ScalingCellSizeAndPositionManager from './ScalingCellSizeAndPositionManager.js';\n/**\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\n * This function also ensures that the scroll ofset isn't past the last column/row of cells.\n */\n\nexport default function updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n    cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n    previousCellsCount = _ref.previousCellsCount,\n    previousCellSize = _ref.previousCellSize,\n    previousScrollToAlignment = _ref.previousScrollToAlignment,\n    previousScrollToIndex = _ref.previousScrollToIndex,\n    previousSize = _ref.previousSize,\n    scrollOffset = _ref.scrollOffset,\n    scrollToAlignment = _ref.scrollToAlignment,\n    scrollToIndex = _ref.scrollToIndex,\n    size = _ref.size,\n    sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n    updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSize } from \"../types\";","map":{"version":3,"names":["ScalingCellSizeAndPositionManager","updateScrollIndexHelper","_ref","cellSize","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToAlignment","scrollToIndex","size","sizeJustIncreasedFromZero","updateScrollIndexCallback","cellCount","getCellCount","hasScrollToIndex","sizeHasChanged","getTotalSize","bpfrpt_proptype_Alignment","bpfrpt_proptype_CellSize"],"sources":["/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/react-virtualized/dist/es/Grid/utils/updateScrollIndexHelper.js"],"sourcesContent":["import ScalingCellSizeAndPositionManager from './ScalingCellSizeAndPositionManager.js';\n/**\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\n * This function also ensures that the scroll ofset isn't past the last column/row of cells.\n */\n\nexport default function updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSize } from \"../types\";"],"mappings":"AAAA,OAAOA,iCAAiC,MAAM,wCAAwC;AACtF;AACA;AACA;AACA;;AAEA,eAAe,SAASC,uBAAuBA,CAACC,IAAI,EAAE;EACpD,IAAIC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IACxBC,0BAA0B,GAAGF,IAAI,CAACE,0BAA0B;IAC5DC,kBAAkB,GAAGH,IAAI,CAACG,kBAAkB;IAC5CC,gBAAgB,GAAGJ,IAAI,CAACI,gBAAgB;IACxCC,yBAAyB,GAAGL,IAAI,CAACK,yBAAyB;IAC1DC,qBAAqB,GAAGN,IAAI,CAACM,qBAAqB;IAClDC,YAAY,GAAGP,IAAI,CAACO,YAAY;IAChCC,YAAY,GAAGR,IAAI,CAACQ,YAAY;IAChCC,iBAAiB,GAAGT,IAAI,CAACS,iBAAiB;IAC1CC,aAAa,GAAGV,IAAI,CAACU,aAAa;IAClCC,IAAI,GAAGX,IAAI,CAACW,IAAI;IAChBC,yBAAyB,GAAGZ,IAAI,CAACY,yBAAyB;IAC1DC,yBAAyB,GAAGb,IAAI,CAACa,yBAAyB;EAC9D,IAAIC,SAAS,GAAGZ,0BAA0B,CAACa,YAAY,CAAC,CAAC;EACzD,IAAIC,gBAAgB,GAAGN,aAAa,IAAI,CAAC,IAAIA,aAAa,GAAGI,SAAS;EACtE,IAAIG,cAAc,GAAGN,IAAI,KAAKJ,YAAY,IAAIK,yBAAyB,IAAI,CAACR,gBAAgB,IAAI,OAAOH,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAKG,gBAAgB,CAAC,CAAC;EAC/J;;EAEA,IAAIY,gBAAgB,KAAKC,cAAc,IAAIR,iBAAiB,KAAKJ,yBAAyB,IAAIK,aAAa,KAAKJ,qBAAqB,CAAC,EAAE;IACtIO,yBAAyB,CAACH,aAAa,CAAC,CAAC,CAAC;IAC1C;EACF,CAAC,MAAM,IAAI,CAACM,gBAAgB,IAAIF,SAAS,GAAG,CAAC,KAAKH,IAAI,GAAGJ,YAAY,IAAIO,SAAS,GAAGX,kBAAkB,CAAC,EAAE;IACxG;IACA;IACA;IACA;IACA,IAAIK,YAAY,GAAGN,0BAA0B,CAACgB,YAAY,CAAC,CAAC,GAAGP,IAAI,EAAE;MACnEE,yBAAyB,CAACC,SAAS,GAAG,CAAC,CAAC;IAC1C;EACF;AACF;AACA,SAASK,yBAAyB,QAAQ,UAAU;AACpD,SAASC,wBAAwB,QAAQ,UAAU"},"metadata":{},"sourceType":"module"}