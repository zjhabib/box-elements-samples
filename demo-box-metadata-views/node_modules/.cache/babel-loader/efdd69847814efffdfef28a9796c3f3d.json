{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * \n * @file Function to render the progress table cell\n */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport ItemProgress from './ItemProgress';\nimport { ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED, ERROR_CODE_ITEM_NAME_IN_USE, ERROR_CODE_ITEM_NAME_INVALID, ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT, ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED, ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED, STATUS_ERROR, STATUS_IN_PROGRESS, STATUS_STAGED } from '../../constants';\n\n/**\n * Get error message for a specific error code\n *\n * @param {string} [errorCode]\n * @param {string} [itemName]\n * @returns {FormattedMessage}\n */\nvar getErrorMessage = function getErrorMessage(errorCode, itemName) {\n  switch (errorCode) {\n    case ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED:\n      return React.createElement(FormattedMessage, messages.uploadsOneOrMoreChildFoldersFailedToUploadMessage);\n    case ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED:\n      return React.createElement(FormattedMessage, messages.uploadsFileSizeLimitExceededErrorMessage);\n    case ERROR_CODE_ITEM_NAME_IN_USE:\n      return React.createElement(FormattedMessage, messages.uploadsItemNameInUseErrorMessage);\n    case ERROR_CODE_ITEM_NAME_INVALID:\n      return React.createElement(FormattedMessage, _extends({}, messages.uploadsProvidedFolderNameInvalidMessage, {\n        values: {\n          name: itemName\n        }\n      }));\n    case ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED:\n      return React.createElement(FormattedMessage, messages.uploadsStorageLimitErrorMessage);\n    case ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT:\n      return React.createElement(FormattedMessage, messages.uploadsPendingFolderSizeLimitErrorMessage);\n    default:\n      return React.createElement(FormattedMessage, messages.uploadsDefaultErrorMessage);\n  }\n};\nexport default (function () {\n  return function (_ref) {\n    var rowData = _ref.rowData;\n    var status = rowData.status,\n      _rowData$error = rowData.error,\n      error = _rowData$error === void 0 ? {} : _rowData$error,\n      name = rowData.name,\n      isFolder = rowData.isFolder;\n    var code = error.code;\n    if (isFolder && status !== STATUS_ERROR) {\n      return null;\n    }\n    switch (status) {\n      case STATUS_IN_PROGRESS:\n      case STATUS_STAGED:\n        return React.createElement(ItemProgress, rowData);\n      case STATUS_ERROR:\n        return getErrorMessage(code, name);\n      default:\n        return null;\n    }\n  };\n});","map":{"version":3,"sources":["../../../src/elements/content-uploader/progressCellRenderer.js"],"names":["React","FormattedMessage","messages","ItemProgress","ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED","ERROR_CODE_ITEM_NAME_IN_USE","ERROR_CODE_ITEM_NAME_INVALID","ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT","ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED","ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED","STATUS_ERROR","STATUS_IN_PROGRESS","STATUS_STAGED","getErrorMessage","errorCode","itemName","uploadsOneOrMoreChildFoldersFailedToUploadMessage","uploadsFileSizeLimitExceededErrorMessage","uploadsItemNameInUseErrorMessage","uploadsProvidedFolderNameInvalidMessage","name","uploadsStorageLimitErrorMessage","uploadsPendingFolderSizeLimitErrorMessage","uploadsDefaultErrorMessage","rowData","status","error","isFolder","code"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SACIC,0CADJ,EAEIC,2BAFJ,EAGIC,4BAHJ,EAIIC,+CAJJ,EAKIC,wCALJ,EAMIC,qCANJ,EAOIC,YAPJ,EAQIC,kBARJ,EASIC,aATJ,QAUO,iBAVP;;AAiBA;;;;;;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD,EAAqBC,QAArB,EAA2C;EAC/D,QAAQD,SAAR;IACI,KAAKL,qCAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBP,QAAQ,CAACc,iDAA/B,CAAP;IACJ,KAAKZ,0CAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBF,QAAQ,CAACe,wCAA/B,CAAP;IACJ,KAAKZ,2BAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBH,QAAQ,CAACgB,gCAA/B,CAAP;IACJ,KAAKZ,4BAAL;MACI,OACI,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EAAsBJ,QAAQ,CAACiB,uCAA/B,EAAA;QAAwE,MAAM,EAAE;UAAEC,IAAI,EAAEL;QAAR;MAAhF,CAAA,CAAA,CADJ;IAGJ,KAAKP,wCAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBN,QAAQ,CAACmB,+BAA/B,CAAP;IACJ,KAAKd,+CAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBL,QAAQ,CAACoB,yCAA/B,CAAP;IACJ;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBpB,QAAQ,CAACqB,0BAA/B,CAAP;EAhBR;AAkBH,CAnBD;AAqBA,gBAAe,YAAA;EAAA,OAAM,UAAA,IAAA,EAAwB;IAAA,IAArBC,OAAqB,GAAA,IAAA,CAArBA,OAAqB;IAAA,IACjCC,MADiC,GACMD,OADN,CACjCC,MADiC;MAAA,cAAA,GACMD,OADN,CACzBE,KADyB;MACzBA,KADyB,GAAA,cAAA,KAAA,KAAA,CAAA,GACjB,CAAA,CADiB,GAAA,cAAA;MACbN,IADa,GACMI,OADN,CACbJ,IADa;MACPO,QADO,GACMH,OADN,CACPG,QADO;IAAA,IAEjCC,IAFiC,GAExBF,KAFwB,CAEjCE,IAFiC;IAIzC,IAAID,QAAQ,IAAIF,MAAM,KAAKf,YAA3B,EAAyC;MACrC,OAAO,IAAP;IACH;IAED,QAAQe,MAAR;MACI,KAAKd,kBAAL;MACA,KAAKC,aAAL;QACI,OAAO,KAAA,CAAA,aAAA,CAAC,YAAD,EAAkBY,OAAlB,CAAP;MACJ,KAAKd,YAAL;QACI,OAAOG,eAAe,CAACe,IAAD,EAAOR,IAAP,CAAtB;MACJ;QACI,OAAO,IAAP;IAPR;EASH,CAjBc;AAAA,CAAf","sourcesContent":["/**\n * @flow\n * @file Function to render the progress table cell\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport ItemProgress from './ItemProgress';\nimport {\n    ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED,\n    ERROR_CODE_ITEM_NAME_IN_USE,\n    ERROR_CODE_ITEM_NAME_INVALID,\n    ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT,\n    ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED,\n    ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED,\n    STATUS_ERROR,\n    STATUS_IN_PROGRESS,\n    STATUS_STAGED,\n} from '../../constants';\nimport type { UploadItem } from '../../common/types/upload';\n\ntype Props = {\n    rowData: UploadItem,\n};\n\n/**\n * Get error message for a specific error code\n *\n * @param {string} [errorCode]\n * @param {string} [itemName]\n * @returns {FormattedMessage}\n */\nconst getErrorMessage = (errorCode: ?string, itemName: ?string) => {\n    switch (errorCode) {\n        case ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED:\n            return <FormattedMessage {...messages.uploadsOneOrMoreChildFoldersFailedToUploadMessage} />;\n        case ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED:\n            return <FormattedMessage {...messages.uploadsFileSizeLimitExceededErrorMessage} />;\n        case ERROR_CODE_ITEM_NAME_IN_USE:\n            return <FormattedMessage {...messages.uploadsItemNameInUseErrorMessage} />;\n        case ERROR_CODE_ITEM_NAME_INVALID:\n            return (\n                <FormattedMessage {...messages.uploadsProvidedFolderNameInvalidMessage} values={{ name: itemName }} />\n            );\n        case ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED:\n            return <FormattedMessage {...messages.uploadsStorageLimitErrorMessage} />;\n        case ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT:\n            return <FormattedMessage {...messages.uploadsPendingFolderSizeLimitErrorMessage} />;\n        default:\n            return <FormattedMessage {...messages.uploadsDefaultErrorMessage} />;\n    }\n};\n\nexport default () => ({ rowData }: Props) => {\n    const { status, error = {}, name, isFolder } = rowData;\n    const { code } = error;\n\n    if (isFolder && status !== STATUS_ERROR) {\n        return null;\n    }\n\n    switch (status) {\n        case STATUS_IN_PROGRESS:\n        case STATUS_STAGED:\n            return <ItemProgress {...rowData} />;\n        case STATUS_ERROR:\n            return getErrorMessage(code, name);\n        default:\n            return null;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}