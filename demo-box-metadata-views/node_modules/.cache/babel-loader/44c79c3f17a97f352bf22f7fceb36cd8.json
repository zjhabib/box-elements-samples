{"ast":null,"code":"import * as React from 'react';\nimport Instance from './Instance';\nvar Instances = function Instances(_ref) {\n  var _ref$isCascadingPolic = _ref.isCascadingPolicyApplicable,\n    isCascadingPolicyApplicable = _ref$isCascadingPolic === void 0 ? false : _ref$isCascadingPolic,\n    _ref$editors = _ref.editors,\n    editors = _ref$editors === void 0 ? [] : _ref$editors,\n    onModification = _ref.onModification,\n    onRemove = _ref.onRemove,\n    onSave = _ref.onSave,\n    selectedTemplateKey = _ref.selectedTemplateKey;\n  return editors.map(function (_ref2) {\n    var _ref2$isDirty = _ref2.isDirty,\n      isDirty = _ref2$isDirty === void 0 ? false : _ref2$isDirty,\n      instance = _ref2.instance,\n      _ref2$hasError = _ref2.hasError,\n      hasError = _ref2$hasError === void 0 ? false : _ref2$hasError,\n      template = _ref2.template;\n    var templateKey = template.templateKey;\n    var isOpen = editors.length === 1 || templateKey === selectedTemplateKey;\n    return React.createElement(Instance, {\n      canEdit: instance.canEdit,\n      cascadePolicy: instance.cascadePolicy,\n      data: instance.data,\n      hasError: hasError,\n      id: instance.id,\n      isCascadingPolicyApplicable: isCascadingPolicyApplicable,\n      isDirty: isDirty,\n      isOpen: isOpen,\n      key: \"\".concat(instance.id, \"-\").concat(templateKey),\n      onModification: onModification,\n      onSave: onSave,\n      onRemove: onRemove,\n      template: template\n    });\n  });\n};\nexport default Instances;","map":{"version":3,"sources":["../../../src/features/metadata-instance-editor/Instances.js"],"names":["React","Instance","Instances","isCascadingPolicyApplicable","editors","onModification","onRemove","onSave","selectedTemplateKey","map","isDirty","instance","hasError","template","templateKey","isOpen","length","canEdit","cascadePolicy","data","id"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AAkBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,IAAA,EAAA;EAAA,IAAA,qBAAA,GAAA,IAAA,CACdC,2BADc;IACdA,2BADc,GAAA,qBAAA,KAAA,KAAA,CAAA,GACgB,KADhB,GAAA,qBAAA;IAAA,YAAA,GAAA,IAAA,CAEdC,OAFc;IAEdA,OAFc,GAAA,YAAA,KAAA,KAAA,CAAA,GAEJ,EAFI,GAAA,YAAA;IAGdC,cAHc,GAAA,IAAA,CAGdA,cAHc;IAIdC,QAJc,GAAA,IAAA,CAIdA,QAJc;IAKdC,MALc,GAAA,IAAA,CAKdA,MALc;IAMdC,mBANc,GAAA,IAAA,CAMdA,mBANc;EAAA,OAQd,OAAO,CAACC,GAAR,CACI,UAAA,KAAA,EAA+E;IAAA,IAAA,aAAA,GAAA,KAAA,CAA5EC,OAA4E;MAA5EA,OAA4E,GAAA,aAAA,KAAA,KAAA,CAAA,GAAlE,KAAkE,GAAA,aAAA;MAA3DC,QAA2D,GAAA,KAAA,CAA3DA,QAA2D;MAAA,cAAA,GAAA,KAAA,CAAjDC,QAAiD;MAAjDA,QAAiD,GAAA,cAAA,KAAA,KAAA,CAAA,GAAtC,KAAsC,GAAA,cAAA;MAA/BC,QAA+B,GAAA,KAAA,CAA/BA,QAA+B;IAAA,IACnEC,WADmE,GACnDD,QADmD,CACnEC,WADmE;IAE3E,IAAMC,MAAM,GAAGX,OAAO,CAACY,MAARZ,KAAmB,CAAnBA,IAAwBU,WAAW,KAAKN,mBAAvD;IACA,OACI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;MACI,OAAO,EAAEG,QAAQ,CAACM,OADtB;MAEI,aAAa,EAAEN,QAAQ,CAACO,aAF5B;MAGI,IAAI,EAAEP,QAAQ,CAACQ,IAHnB;MAII,QAAQ,EAAEP,QAJd;MAKI,EAAE,EAAED,QAAQ,CAACS,EALjB;MAMI,2BAA2B,EAAEjB,2BANjC;MAOI,OAAO,EAAEO,OAPb;MAQI,MAAM,EAAEK,MARZ;MASI,GAAG,EAAA,EAAA,CAAA,MAAA,CAAKJ,QAAQ,CAACS,EAAd,EAAA,GAAA,CAAA,CAAA,MAAA,CAAoBN,WAApB,CATP;MAUI,cAAc,EAAET,cAVpB;MAWI,MAAM,EAAEE,MAXZ;MAYI,QAAQ,EAAED,QAZd;MAaI,QAAQ,EAAEO;IAbd,CAAA,CADJ;EAiBH,CArBL,CARc;AAAA,CAAlB;AAgCA,eAAeX,SAAf","sourcesContent":["// @flow\nimport * as React from 'react';\n\nimport Instance from './Instance';\nimport type { MetadataEditor, MetadataCascadingPolicyData } from '../../common/types/metadata';\nimport type { JSONPatchOperations } from '../../common/types/api';\n\ntype Props = {\n    editors?: Array<MetadataEditor>,\n    isCascadingPolicyApplicable?: boolean,\n    onModification?: (id: string, isDirty: boolean) => void,\n    onRemove?: (id: string) => void,\n    onSave?: (\n        id: string,\n        data: JSONPatchOperations,\n        cascadingPolicy?: MetadataCascadingPolicyData,\n        rawData: Object,\n    ) => void,\n    selectedTemplateKey?: string,\n};\n\nconst Instances = ({\n    isCascadingPolicyApplicable = false,\n    editors = [],\n    onModification,\n    onRemove,\n    onSave,\n    selectedTemplateKey,\n}: Props) =>\n    editors.map<React.Element<typeof Instance>>(\n        ({ isDirty = false, instance, hasError = false, template }: MetadataEditor) => {\n            const { templateKey } = template;\n            const isOpen = editors.length === 1 || templateKey === selectedTemplateKey;\n            return (\n                <Instance\n                    canEdit={instance.canEdit}\n                    cascadePolicy={instance.cascadePolicy}\n                    data={instance.data}\n                    hasError={hasError}\n                    id={instance.id}\n                    isCascadingPolicyApplicable={isCascadingPolicyApplicable}\n                    isDirty={isDirty}\n                    isOpen={isOpen}\n                    key={`${instance.id}-${templateKey}`}\n                    onModification={onModification}\n                    onSave={onSave}\n                    onRemove={onRemove}\n                    template={template}\n                />\n            );\n        },\n    );\n\nexport default Instances;\n"]},"metadata":{},"sourceType":"module"}