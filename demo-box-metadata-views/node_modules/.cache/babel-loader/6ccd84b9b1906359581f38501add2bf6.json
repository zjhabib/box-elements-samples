{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport ClearBadge16 from '../../icon/fill/ClearBadge16';\nimport Search16 from '../../icon/fill/Search16';\nimport makeLoadable from '../loading-indicator/makeLoadable';\nimport './SearchForm.scss';\nvar messages = defineMessages({\n  clearButtonTitle: {\n    \"id\": \"boxui.searchForm.clearButtonTitle\",\n    \"defaultMessage\": \"Clear\"\n  },\n  searchButtonTitle: {\n    \"id\": \"boxui.searchForm.searchButtonTitle\",\n    \"defaultMessage\": \"Search\"\n  },\n  searchLabel: {\n    \"id\": \"boxui.searchForm.searchLabel\",\n    \"defaultMessage\": \"Search query\"\n  }\n});\nvar SearchForm = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SearchForm, _React$Component);\n  function SearchForm() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, SearchForm);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isEmpty: true\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onClearHandler\", function (event) {\n      var _this$props = _this.props,\n        onChange = _this$props.onChange,\n        shouldPreventClearEventPropagation = _this$props.shouldPreventClearEventPropagation;\n      if (shouldPreventClearEventPropagation) {\n        event.stopPropagation();\n      }\n      if (_this.searchInput) {\n        _this.searchInput.value = '';\n      }\n      _this.setState({\n        isEmpty: true\n      });\n      if (onChange) {\n        onChange('');\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChangeHandler\", function (_ref) {\n      var target = _ref.target;\n      var value = target.value;\n      var onChange = _this.props.onChange;\n      _this.setState({\n        isEmpty: !value || !value.trim().length\n      });\n      if (onChange) {\n        onChange(value);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitHandler\", function (event) {\n      var value = event.target.elements[0].value;\n      var onSubmit = _this.props.onSubmit;\n      if (onSubmit) {\n        onSubmit(value, event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (element) {\n      _this.searchInput = element;\n      if (_this.props.getSearchInput) {\n        _this.props.getSearchInput(_this.searchInput);\n      }\n    });\n    return _this;\n  }\n  _createClass(SearchForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props2 = this.props,\n        action = _this$props2.action,\n        className = _this$props2.className,\n        intl = _this$props2.intl,\n        isLoading = _this$props2.isLoading,\n        method = _this$props2.method,\n        name = _this$props2.name,\n        queryParams = _this$props2.queryParams,\n        useClearButton = _this$props2.useClearButton,\n        rest = _objectWithoutProperties(_this$props2, [\"action\", \"className\", \"intl\", \"isLoading\", \"method\", \"name\", \"queryParams\", \"useClearButton\"]);\n      var isEmpty = this.state.isEmpty;\n      var inputProps = omit(rest, ['getSearchInput', 'onChange', 'onSubmit', 'required', 'shouldPreventClearEventPropagation']);\n      var formatMessage = intl.formatMessage;\n      var classes = classNames(className, 'search-input-container');\n      var formClassNames = classNames('search-form', {\n        'is-empty': isEmpty,\n        'use-clear-button': useClearButton\n      });\n      var hiddenInputs = Object.keys(queryParams).map(function (param, index) {\n        return React.createElement(\"input\", {\n          key: index,\n          name: param,\n          type: \"hidden\",\n          value: queryParams[param]\n        });\n      });\n      var SearchActions = function SearchActions() {\n        return React.createElement(\"div\", {\n          className: \"action-buttons\"\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"action-button search-button\",\n          title: formatMessage(messages.searchButtonTitle)\n        }, React.createElement(Search16, null)), React.createElement(\"button\", {\n          className: \"action-button clear-button\",\n          onClick: _this2.onClearHandler,\n          title: formatMessage(messages.clearButtonTitle),\n          type: \"button\"\n        }, React.createElement(ClearBadge16, null)));\n      };\n      var LoadableSearchActions = makeLoadable(SearchActions); // @NOTE Prevent errors from React about controlled inputs\n\n      var onChangeStub = function onChangeStub() {};\n      return React.createElement(\"div\", {\n        className: classes\n      }, React.createElement(\"form\", {\n        action: action,\n        className: formClassNames,\n        method: method,\n        onChange: this.onChangeHandler,\n        onSubmit: this.onSubmitHandler,\n        role: \"search\"\n      }, React.createElement(\"input\", _extends({\n        ref: this.setInputRef,\n        \"aria-label\": formatMessage(messages.searchLabel),\n        autoComplete: \"off\",\n        className: \"search-input\",\n        name: name,\n        onChange: onChangeStub,\n        type: \"search\"\n      }, inputProps)), React.createElement(LoadableSearchActions, {\n        isLoading: isLoading,\n        loadingIndicatorProps: {\n          className: 'search-form-loading-indicator'\n        }\n      }), hiddenInputs));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props) {\n      var value = props.value;\n      if (value && !!value.trim()) {\n        return {\n          isEmpty: true\n        };\n      }\n      return null;\n    }\n  }]);\n  return SearchForm;\n}(React.Component);\n_defineProperty(SearchForm, \"defaultProps\", {\n  action: undefined,\n  method: 'get',\n  name: 'search',\n  queryParams: {},\n  useClearButton: false\n});\nexport default injectIntl(SearchForm);","map":{"version":3,"sources":["../../../src/components/search-form/SearchForm.js"],"names":["React","defineMessages","injectIntl","classNames","omit","ClearBadge16","Search16","makeLoadable","messages","clearButtonTitle","searchButtonTitle","searchLabel","SearchForm","Component","action","undefined","method","name","queryParams","useClearButton","isEmpty","props","value","trim","event","onChange","shouldPreventClearEventPropagation","stopPropagation","searchInput","setState","target","length","elements","onSubmit","element","getSearchInput","className","intl","isLoading","rest","state","inputProps","formatMessage","classes","formClassNames","hiddenInputs","keys","map","param","index","SearchActions","onClearHandler","LoadableSearchActions","onChangeStub","onChangeHandler","onSubmitHandler","setInputRef"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\nimport ClearBadge16 from '../../icon/fill/ClearBadge16';\nimport Search16 from '../../icon/fill/Search16';\n\nimport makeLoadable from '../loading-indicator/makeLoadable';\n\nimport './SearchForm.scss';\n\nconst messages = defineMessages({\n    clearButtonTitle: {\n        defaultMessage: 'Clear',\n        description: 'Title for a clear button',\n        id: 'boxui.searchForm.clearButtonTitle',\n    },\n    searchButtonTitle: {\n        defaultMessage: 'Search',\n        description: 'Title for a search button',\n        id: 'boxui.searchForm.searchButtonTitle',\n    },\n    searchLabel: {\n        defaultMessage: 'Search query',\n        description: 'Label for a search input',\n        id: 'boxui.searchForm.searchLabel',\n    },\n});\n\ntype Props = {\n    /** Form submit action */\n    action?: string,\n    className?: string,\n    getSearchInput?: Function,\n    intl: Object,\n    isLoading?: boolean,\n    /** The way to send the form data, get or post */\n    method?: 'get' | 'post',\n    /** Name of the text input */\n    name?: string,\n    /** On change handler for the search input, debounced by 250ms */\n    onChange?: Function,\n    /** On submit handler for the search input */\n    onSubmit?: Function,\n    /** Extra query parameters in addition to the form data */\n    queryParams: Object,\n    /** Boolean to prevent propogation of search clear action */\n    shouldPreventClearEventPropagation?: boolean,\n    /** If the clear button is shown when input field is not empty */\n    useClearButton?: boolean,\n    /** The value of the input if controlled */\n    value?: string,\n};\n\ntype State = {\n    isEmpty: boolean,\n};\n\nclass SearchForm extends React.Component<Props, State> {\n    static defaultProps = {\n        action: undefined,\n        method: 'get',\n        name: 'search',\n        queryParams: {},\n        useClearButton: false,\n    };\n\n    state = {\n        isEmpty: true,\n    };\n\n    static getDerivedStateFromProps(props: Props): any {\n        const { value } = props;\n\n        if (value && !!value.trim()) {\n            return {\n                isEmpty: true,\n            };\n        }\n\n        return null;\n    }\n\n    onClearHandler = (event: SyntheticEvent<>) => {\n        const { onChange, shouldPreventClearEventPropagation } = this.props;\n        if (shouldPreventClearEventPropagation) {\n            event.stopPropagation();\n        }\n\n        if (this.searchInput) {\n            this.searchInput.value = '';\n        }\n        this.setState({ isEmpty: true });\n\n        if (onChange) {\n            onChange('');\n        }\n    };\n\n    onChangeHandler = ({ target }) => {\n        const { value } = target;\n        const { onChange } = this.props;\n        this.setState({ isEmpty: !value || !value.trim().length });\n\n        if (onChange) {\n            onChange(value);\n        }\n    };\n\n    onSubmitHandler = event => {\n        const { value } = event.target.elements[0];\n        const { onSubmit } = this.props;\n\n        if (onSubmit) {\n            onSubmit(value, event);\n        }\n    };\n\n    setInputRef = element => {\n        this.searchInput = element;\n\n        if (this.props.getSearchInput) {\n            this.props.getSearchInput(this.searchInput);\n        }\n    };\n\n    searchInput: ?HTMLInputElement;\n\n    render() {\n        const { action, className, intl, isLoading, method, name, queryParams, useClearButton, ...rest } = this.props;\n        const { isEmpty } = this.state;\n\n        const inputProps = omit(rest, [\n            'getSearchInput',\n            'onChange',\n            'onSubmit',\n            'required',\n            'shouldPreventClearEventPropagation',\n        ]);\n\n        const { formatMessage } = intl;\n        const classes = classNames(className, 'search-input-container');\n        const formClassNames = classNames('search-form', {\n            'is-empty': isEmpty,\n            'use-clear-button': useClearButton,\n        });\n        const hiddenInputs = Object.keys(queryParams).map((param, index) => (\n            <input key={index} name={param} type=\"hidden\" value={queryParams[param]} />\n        ));\n\n        const SearchActions = () => (\n            <div className=\"action-buttons\">\n                <button\n                    type=\"button\"\n                    className=\"action-button search-button\"\n                    title={formatMessage(messages.searchButtonTitle)}\n                >\n                    <Search16 />\n                </button>\n                <button\n                    className=\"action-button clear-button\"\n                    onClick={this.onClearHandler}\n                    title={formatMessage(messages.clearButtonTitle)}\n                    type=\"button\"\n                >\n                    <ClearBadge16 />\n                </button>\n            </div>\n        );\n\n        const LoadableSearchActions = makeLoadable(SearchActions);\n\n        // @NOTE Prevent errors from React about controlled inputs\n        const onChangeStub = () => {};\n\n        return (\n            <div className={classes}>\n                <form\n                    action={action}\n                    className={formClassNames}\n                    method={method}\n                    onChange={this.onChangeHandler}\n                    onSubmit={this.onSubmitHandler}\n                    role=\"search\"\n                >\n                    <input\n                        ref={this.setInputRef}\n                        aria-label={formatMessage(messages.searchLabel)}\n                        autoComplete=\"off\"\n                        className=\"search-input\"\n                        name={name}\n                        onChange={onChangeStub}\n                        type=\"search\"\n                        {...inputProps}\n                    />\n                    <LoadableSearchActions\n                        isLoading={isLoading}\n                        loadingIndicatorProps={{\n                            className: 'search-form-loading-indicator',\n                        }}\n                    />\n                    {hiddenInputs}\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(SearchForm);\n"]},"metadata":{},"sourceType":"module"}