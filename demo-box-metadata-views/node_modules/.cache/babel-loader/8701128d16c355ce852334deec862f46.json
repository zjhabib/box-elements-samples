{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport Tooltip, { TooltipTheme } from '../tooltip';\nimport Button from '../button';\nimport messages from './messages';\nimport './GuideTooltip.scss';\nfunction GuideTooltip(_ref) {\n  var body = _ref.body,\n    children = _ref.children,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    icon = _ref.icon,\n    _ref$isShown = _ref.isShown,\n    isShown = _ref$isShown === void 0 ? true : _ref$isShown,\n    primaryButtonProps = _ref.primaryButtonProps,\n    steps = _ref.steps,\n    secondaryButtonProps = _ref.secondaryButtonProps,\n    _ref$showCloseButton = _ref.showCloseButton,\n    showCloseButton = _ref$showCloseButton === void 0 ? true : _ref$showCloseButton,\n    title = _ref.title,\n    rest = _objectWithoutProperties(_ref, [\"body\", \"children\", \"className\", \"icon\", \"isShown\", \"primaryButtonProps\", \"steps\", \"secondaryButtonProps\", \"showCloseButton\", \"title\"]);\n  return React.createElement(Tooltip, _extends({}, rest, {\n    className: \"bdl-GuideTooltip \".concat(className),\n    isShown: isShown,\n    showCloseButton: showCloseButton,\n    text: React.createElement(React.Fragment, null, icon && React.createElement(\"div\", {\n      className: \"bdl-GuideTooltip-icon\"\n    }, icon), React.createElement(\"div\", {\n      className: \"bdl-GuideTooltip-right\"\n    }, title && React.createElement(\"div\", {\n      className: \"bdl-GuideTooltip-title\"\n    }, title), React.createElement(\"div\", {\n      className: \"bdl-GuideTooltip-body\"\n    }, body), (secondaryButtonProps || primaryButtonProps || steps) && React.createElement(\"div\", {\n      className: \"bdl-GuideTooltip-bottom\"\n    }, (secondaryButtonProps || primaryButtonProps) && React.createElement(\"div\", {\n      className: \"bdl-GuideTooltip-navigation\"\n    }, secondaryButtonProps && React.createElement(Button, _extends({}, secondaryButtonProps, {\n      className: classNames('bdl-GuideTooltip-previousButton', secondaryButtonProps.className)\n    })), primaryButtonProps && React.createElement(Button, _extends({}, primaryButtonProps, {\n      className: classNames('bdl-GuideTooltip-nextButton', primaryButtonProps.className)\n    }))), steps && React.createElement(\"div\", {\n      className: \"bdl-GuideTooltip-steps\"\n    }, React.createElement(FormattedMessage, _extends({}, messages.navigation, {\n      values: {\n        currentStepIndex: steps[0],\n        totalNumSteps: steps[1]\n      }\n    })))))),\n    theme: TooltipTheme.CALLOUT\n  }), children);\n}\nexport default GuideTooltip;","map":{"version":3,"sources":["../../../src/components/guide-tooltip/GuideTooltip.tsx"],"names":["React","FormattedMessage","classNames","Tooltip","TooltipTheme","Button","messages","GuideTooltip","body","children","className","icon","isShown","primaryButtonProps","steps","secondaryButtonProps","showCloseButton","title","rest","navigation","currentStepIndex","totalNumSteps","CALLOUT"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\n\nimport Tooltip, { TooltipTheme } from '../tooltip';\nimport Button from '../button';\nimport messages from './messages';\n\nimport './GuideTooltip.scss';\n\ntype TooltipProps = Omit<JSX.LibraryManagedAttributes<typeof Tooltip, Tooltip['props']>, 'text' | 'theme'>;\n\ntype Props = TooltipProps & {\n    body: React.ReactNode;\n    title?: React.ReactNode;\n    /** 32px x 32px */\n    icon?: React.ReactNode;\n    /** displays guide progress e.g. 1 of 4 */\n    steps?: [number, number];\n    primaryButtonProps?: JSX.LibraryManagedAttributes<typeof Button, Button['props']>;\n    secondaryButtonProps?: JSX.LibraryManagedAttributes<typeof Button, Button['props']>;\n};\n\nfunction GuideTooltip({\n    body,\n    children,\n    className = '',\n    icon,\n    isShown = true,\n    primaryButtonProps,\n    steps,\n    secondaryButtonProps,\n    showCloseButton = true,\n    title,\n    ...rest\n}: Props) {\n    return (\n        <Tooltip\n            {...rest}\n            className={`bdl-GuideTooltip ${className}`}\n            isShown={isShown}\n            showCloseButton={showCloseButton}\n            text={\n                <>\n                    {icon && <div className=\"bdl-GuideTooltip-icon\">{icon}</div>}\n                    <div className=\"bdl-GuideTooltip-right\">\n                        {title && <div className=\"bdl-GuideTooltip-title\">{title}</div>}\n                        <div className=\"bdl-GuideTooltip-body\">{body}</div>\n                        {(secondaryButtonProps || primaryButtonProps || steps) && (\n                            <div className=\"bdl-GuideTooltip-bottom\">\n                                {(secondaryButtonProps || primaryButtonProps) && (\n                                    <div className=\"bdl-GuideTooltip-navigation\">\n                                        {secondaryButtonProps && (\n                                            <Button\n                                                {...secondaryButtonProps}\n                                                className={classNames(\n                                                    'bdl-GuideTooltip-previousButton',\n                                                    secondaryButtonProps.className,\n                                                )}\n                                            />\n                                        )}\n                                        {primaryButtonProps && (\n                                            <Button\n                                                {...primaryButtonProps}\n                                                className={classNames(\n                                                    'bdl-GuideTooltip-nextButton',\n                                                    primaryButtonProps.className,\n                                                )}\n                                            />\n                                        )}\n                                    </div>\n                                )}\n                                {steps && (\n                                    <div className=\"bdl-GuideTooltip-steps\">\n                                        <FormattedMessage\n                                            {...messages.navigation}\n                                            values={{ currentStepIndex: steps[0], totalNumSteps: steps[1] }}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                    </div>\n                </>\n            }\n            theme={TooltipTheme.CALLOUT}\n        >\n            {children}\n        </Tooltip>\n    );\n}\n\nexport default GuideTooltip;\n"]},"metadata":{},"sourceType":"module"}