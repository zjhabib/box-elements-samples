{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport BaseSelectField from './BaseSelectField';\nimport CLEAR from './constants';\nimport messages from './messages';\nvar optionsWithClearOption = function optionsWithClearOption(options, shouldShowClearOption, intl) {\n  return shouldShowClearOption ? [{\n    value: CLEAR,\n    displayText: intl.formatMessage(messages.clearAll)\n  }].concat(_toConsumableArray(options)) : options;\n};\nvar MultiSelectField = function MultiSelectField(_ref) {\n  var intl = _ref.intl,\n    options = _ref.options,\n    shouldShowClearOption = _ref.shouldShowClearOption,\n    rest = _objectWithoutProperties(_ref, [\"intl\", \"options\", \"shouldShowClearOption\"]);\n  return React.createElement(BaseSelectField, _extends({}, rest, {\n    shouldShowClearOption: shouldShowClearOption,\n    options: optionsWithClearOption(options, shouldShowClearOption, intl),\n    multiple: true\n  }));\n};\nexport { MultiSelectField as MultiSelectFieldBase };\nexport default injectIntl(MultiSelectField);","map":{"version":3,"sources":["../../../src/components/select-field/MultiSelectField.js"],"names":["React","injectIntl","BaseSelectField","CLEAR","messages","optionsWithClearOption","options","shouldShowClearOption","intl","value","displayText","formatMessage","clearAll","MultiSelectField","rest","MultiSelectFieldBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAGA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAeA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,OAAD,EAAyBC,qBAAzB,EAA0DC,IAA1D,EAA2E;EACtG,OAAOD,qBAAqB,GAAA,CAElB;IACIE,KAAK,EAAEN,KADX;IAEIO,WAAW,EAAEF,IAAI,CAACG,aAALH,CAAmBJ,QAAQ,CAACQ,QAA5BJ;EAFjB,CAFkB,CAAA,CAAA,MAAA,CAAA,kBAAA,CAMfF,OANe,CAAA,CAAA,GAQtBA,OARN;AASH,CAVD;AAYA,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAAA;EAAA,IAAGL,IAAH,GAAA,IAAA,CAAGA,IAAH;IAASF,OAAT,GAAA,IAAA,CAASA,OAAT;IAAkBC,qBAAlB,GAAA,IAAA,CAAkBA,qBAAlB;IAA4CO,IAA5C,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,MAAA,EAAA,SAAA,EAAA,uBAAA,CAAA,CAAA;EAAA,OACrB,KAAA,CAAA,aAAA,CAAC,eAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACQA,IADR,EAAA;IAEI,qBAAqB,EAAEP,qBAF3B;IAGI,OAAO,EAAEF,sBAAsB,CAACC,OAAD,EAAUC,qBAAV,EAAiCC,IAAjC,CAHnC;IAII,QAAQ,EAAA;EAJZ,CAAA,CAAA,CADqB;AAAA,CAAzB;AASA,SAASK,gBAAgB,IAAIE,oBAA7B;AACA,eAAed,UAAU,CAACY,gBAAD,CAAzB","sourcesContent":["// @flow\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport type { SelectOptionProp } from './props';\nimport BaseSelectField from './BaseSelectField';\nimport CLEAR from './constants';\nimport messages from './messages';\n\ntype Props = {\n    /* Intl object */\n    intl: Object,\n    /** Function will be called with an array of all selected options after user selects a new option */\n    onChange: Function,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** Boolean to determine whether or not to show the clear option */\n    shouldShowClearOption?: boolean,\n    /** Will show Search Field  */\n    shouldShowSearchInput?: boolean,\n};\n\nconst optionsWithClearOption = (options: Array<Object>, shouldShowClearOption?: boolean, intl: Object) => {\n    return shouldShowClearOption\n        ? [\n              {\n                  value: CLEAR,\n                  displayText: intl.formatMessage(messages.clearAll),\n              },\n              ...options,\n          ]\n        : options;\n};\n\nconst MultiSelectField = ({ intl, options, shouldShowClearOption, ...rest }: Props) => (\n    <BaseSelectField\n        {...rest}\n        shouldShowClearOption={shouldShowClearOption}\n        options={optionsWithClearOption(options, shouldShowClearOption, intl)}\n        multiple\n    />\n);\n\nexport { MultiSelectField as MultiSelectFieldBase };\nexport default injectIntl(MultiSelectField);\n"]},"metadata":{},"sourceType":"module"}