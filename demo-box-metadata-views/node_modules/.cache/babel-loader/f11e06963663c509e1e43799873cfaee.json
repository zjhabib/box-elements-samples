{"ast":null,"code":"import { injectIntl } from 'react-intl';\nimport { ONE_HOUR_MS } from '../../constants';\nimport { isToday, isYesterday, isCurrentYear } from '../../utils/datetime';\nimport messages from './messages';\n// exclude languages that do not have a grammar for uppercase (e.g. russian)\nvar nonUppercaseLocales = ['ru'];\nvar ReadableTime = function ReadableTime(_ref) {\n  var intl = _ref.intl,\n    timestamp = _ref.timestamp,\n    _ref$relativeThreshol = _ref.relativeThreshold,\n    relativeThreshold = _ref$relativeThreshol === void 0 ? ONE_HOUR_MS : _ref$relativeThreshol,\n    _ref$allowFutureTimes = _ref.allowFutureTimestamps,\n    allowFutureTimestamps = _ref$allowFutureTimes === void 0 ? true : _ref$allowFutureTimes,\n    _ref$alwaysShowTime = _ref.alwaysShowTime,\n    alwaysShowTime = _ref$alwaysShowTime === void 0 ? false : _ref$alwaysShowTime,\n    _ref$showWeekday = _ref.showWeekday,\n    showWeekday = _ref$showWeekday === void 0 ? false : _ref$showWeekday,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? false : _ref$uppercase;\n  var shouldUppercase = uppercase && !nonUppercaseLocales.includes(intl.locale);\n  var relativeIfNewerThanTs = Date.now() - relativeThreshold;\n  var shouldShowYear = !isCurrentYear(timestamp);\n  if (!allowFutureTimestamps && timestamp > Date.now()) {\n    // TODO: what is the reasoning behind this rule?\n    timestamp = relativeIfNewerThanTs; // Default to 'Today' for timestamps that would show a future date\n  } // e.g. Oct 5, 2018\n\n  var dateMessage = messages.eventTime;\n  var date = null;\n  var weekday = null;\n  var output;\n  if (isToday(timestamp)) {\n    // e.g. Today at 12:30 PM\n    dateMessage = messages.eventTimeToday;\n  } else if (isYesterday(timestamp)) {\n    // e.g. Yesterday at 11:30 AM\n    dateMessage = messages.eventTimeYesterday;\n  } else if (showWeekday) {\n    // e.g. Monday, Oct 5, 2018\n    dateMessage = messages.eventTimeWeekdayLong;\n    weekday = intl.formatDate(timestamp, {\n      weekday: 'long'\n    });\n  } else if (shouldShowYear && alwaysShowTime) {\n    // e.g. Oct 5, 2018 at 10:30 PM\n    dateMessage = messages.eventTimeDate;\n  } else if (!shouldShowYear && alwaysShowTime) {\n    // e.g. Oct 5 at 10:30 PM\n    dateMessage = messages.eventTimeDateShort;\n    date = intl.formatDate(timestamp, {\n      month: 'short',\n      day: 'numeric'\n    });\n  } else if (!shouldShowYear && !alwaysShowTime) {\n    // e.g. Oct 5\n    output = intl.formatDate(timestamp, {\n      month: 'short',\n      day: 'numeric'\n    });\n    return shouldUppercase ? output.toLocaleUpperCase(intl.locale) : output;\n  }\n  var values = {\n    time: timestamp,\n    date: date,\n    weekday: weekday\n  };\n  output = intl.formatMessage(dateMessage, values); // if the time stamp is within +/- the relative threshold for the current time,\n  // print the default time format\n\n  var timeDiff = timestamp - Date.now();\n  if (Math.abs(timeDiff) <= relativeThreshold) {\n    if (intl.formatRelativeTime) {\n      // react-intl v3\n      output = intl.formatRelativeTime(timeDiff);\n    } else {\n      // react-intl v2\n      output = intl.formatRelative(timestamp);\n    }\n  }\n  return shouldUppercase ? output.toLocaleUpperCase(intl.locale) : output;\n};\nexport { ReadableTime as ReadableTimeComponent };\nexport default injectIntl(ReadableTime);","map":{"version":3,"sources":["../../../src/components/time/ReadableTime.js"],"names":["injectIntl","ONE_HOUR_MS","isToday","isYesterday","isCurrentYear","messages","nonUppercaseLocales","ReadableTime","intl","timestamp","relativeThreshold","allowFutureTimestamps","alwaysShowTime","showWeekday","uppercase","shouldUppercase","includes","locale","relativeIfNewerThanTs","Date","now","shouldShowYear","dateMessage","eventTime","date","weekday","output","eventTimeToday","eventTimeYesterday","eventTimeWeekdayLong","formatDate","eventTimeDate","eventTimeDateShort","month","day","toLocaleUpperCase","values","time","formatMessage","timeDiff","Math","abs","formatRelativeTime","formatRelative","ReadableTimeComponent"],"mappings":"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","sourcesContent":["// @flow\n\nimport { injectIntl } from 'react-intl';\n\nimport { ONE_HOUR_MS } from '../../constants';\nimport { isToday, isYesterday, isCurrentYear } from '../../utils/datetime';\n\nimport messages from './messages';\n\ntype Props = {\n    /** A boolean that will cause future timestamps (usually due to incorrect computer time) to be corrected to the isToday message */\n    allowFutureTimestamps?: boolean,\n    /** A boolean that will include the time alongside the date, if the date is shown */\n    alwaysShowTime?: boolean,\n    /** intl object */\n    intl: any,\n    /** The number of milliseconds before now that a relative (vs. absolute) time should be displayed (Default: 1 hour) */\n    relativeThreshold?: number,\n    /** A boolean that will include the weekday alongside the date, if the date is shown */\n    showWeekday?: boolean,\n    /** The timestamp which should be used to display the date */\n    timestamp: number,\n    /** Whether to generate and make locale aware an uppercase version of the string */\n    uppercase?: boolean,\n};\n\n// exclude languages that do not have a grammar for uppercase (e.g. russian)\nconst nonUppercaseLocales = ['ru'];\nconst ReadableTime = ({\n    intl,\n    timestamp,\n    relativeThreshold = ONE_HOUR_MS,\n    allowFutureTimestamps = true,\n    alwaysShowTime = false,\n    showWeekday = false,\n    uppercase = false,\n}: Props): string => {\n    const shouldUppercase = uppercase && !nonUppercaseLocales.includes(intl.locale);\n    const relativeIfNewerThanTs = Date.now() - relativeThreshold;\n    const shouldShowYear = !isCurrentYear(timestamp);\n\n    if (!allowFutureTimestamps && timestamp > Date.now()) {\n        // TODO: what is the reasoning behind this rule?\n        timestamp = relativeIfNewerThanTs; // Default to 'Today' for timestamps that would show a future date\n    }\n\n    // e.g. Oct 5, 2018\n    let dateMessage = messages.eventTime;\n    let date = null;\n    let weekday = null;\n    let output;\n    if (isToday(timestamp)) {\n        // e.g. Today at 12:30 PM\n        dateMessage = messages.eventTimeToday;\n    } else if (isYesterday(timestamp)) {\n        // e.g. Yesterday at 11:30 AM\n        dateMessage = messages.eventTimeYesterday;\n    } else if (showWeekday) {\n        // e.g. Monday, Oct 5, 2018\n        dateMessage = messages.eventTimeWeekdayLong;\n        weekday = intl.formatDate(timestamp, { weekday: 'long' });\n    } else if (shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5, 2018 at 10:30 PM\n        dateMessage = messages.eventTimeDate;\n    } else if (!shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5 at 10:30 PM\n        dateMessage = messages.eventTimeDateShort;\n        date = intl.formatDate(timestamp, { month: 'short', day: 'numeric' });\n    } else if (!shouldShowYear && !alwaysShowTime) {\n        // e.g. Oct 5\n        output = intl.formatDate(timestamp, { month: 'short', day: 'numeric' });\n        return shouldUppercase ? output.toLocaleUpperCase(intl.locale) : output;\n    }\n    const values = { time: timestamp, date, weekday };\n    output = intl.formatMessage(dateMessage, values);\n\n    // if the time stamp is within +/- the relative threshold for the current time,\n    // print the default time format\n    const timeDiff = timestamp - Date.now();\n    if (Math.abs(timeDiff) <= relativeThreshold) {\n        if (intl.formatRelativeTime) {\n            // react-intl v3\n            output = intl.formatRelativeTime(timeDiff);\n        } else {\n            // react-intl v2\n            output = intl.formatRelative(timestamp);\n        }\n    }\n\n    return shouldUppercase ? output.toLocaleUpperCase(intl.locale) : output;\n};\n\nexport { ReadableTime as ReadableTimeComponent };\nexport default injectIntl(ReadableTime);\n"]},"metadata":{},"sourceType":"module"}