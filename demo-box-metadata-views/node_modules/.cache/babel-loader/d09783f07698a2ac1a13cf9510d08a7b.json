{"ast":null,"code":"/**\n * \n * @file Helper for throwing errors\n * @author Box\n */\nimport getProp from 'lodash/get';\nimport { TYPED_ID_FILE_PREFIX, TYPED_ID_FOLDER_PREFIX, FILE_EXTENSION_BOX_NOTE } from '../constants';\nvar FILE_EXT_REGEX = /\\.([0-9a-z]+)$/i; // Case insensitive regex to extract file extension without \".\"\n\n/**\n * Returns typed id for file. Useful for when\n * making file based XHRs where auth token\n * can be per file as used by Preview.\n * @param {id} id the file id\n * @return {string} typed id for file\n */\n\nexport function getTypedFileId(id) {\n  return \"\".concat(TYPED_ID_FILE_PREFIX).concat(id);\n}\n/**\n * Returns typed id for folder.\n * @param {id} id the folder id\n * @return {string} typed id for folder\n */\n\nexport function getTypedFolderId(id) {\n  return \"\".concat(TYPED_ID_FOLDER_PREFIX).concat(id);\n}\n/**\n * Determines if the file is a box note\n * @param {Object} file a box file\n * @return boolean true if it is a box note\n */\n\nexport function isBoxNote(file) {\n  return file.extension === FILE_EXTENSION_BOX_NOTE;\n}\n/**\n * Returns the extension from the file name\n * @param {string} filename a Box file\n * @return {string} typed id for file\n */\n\nexport function getFileExtension(filename) {\n  if (typeof filename !== 'string') {\n    return '';\n  }\n  var result = FILE_EXT_REGEX.exec(filename);\n  return getProp(result, '[1]', '');\n}","map":{"version":3,"sources":["../../src/utils/file.js"],"names":["getProp","TYPED_ID_FILE_PREFIX","TYPED_ID_FOLDER_PREFIX","FILE_EXTENSION_BOX_NOTE","FILE_EXT_REGEX","getTypedFileId","id","getTypedFolderId","isBoxNote","file","extension","getFileExtension","filename","result","exec"],"mappings":"AAAA;;;;;AAMA,OAAOA,OAAP,MAAoB,YAApB;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,EAAuDC,uBAAvD,QAAsF,cAAtF;AAGA,IAAMC,cAAc,GAAG,iBAAvB,C,CAA0C;;AAE1C;;;;;;;;AAOA,OAAO,SAASC,cAAT,CAAwBC,EAAxB,EAA4C;EAC/C,OAAA,EAAA,CAAA,MAAA,CAAUL,oBAAV,CAAA,CAAA,MAAA,CAAiCK,EAAjC,CAAA;AACH;AAED;;;;;;AAKA,OAAO,SAASC,gBAAT,CAA0BD,EAA1B,EAA8C;EACjD,OAAA,EAAA,CAAA,MAAA,CAAUJ,sBAAV,CAAA,CAAA,MAAA,CAAmCI,EAAnC,CAAA;AACH;AAED;;;;;;AAKA,OAAO,SAASE,SAAT,CAAmBC,IAAnB,EAA2C;EAC9C,OAAOA,IAAI,CAACC,SAALD,KAAmBN,uBAA1B;AACH;AAED;;;;;;AAKA,OAAO,SAASQ,gBAAT,CAA0BC,QAA1B,EAA2D;EAC9D,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IAC9B,OAAO,EAAP;EACH;EAED,IAAMC,MAAM,GAAGT,cAAc,CAACU,IAAfV,CAAoBQ,QAApBR,CAAf;EACA,OAAOJ,OAAO,CAACa,MAAD,EAAS,KAAT,EAAgB,EAAhB,CAAd;AACH","sourcesContent":["/**\n * @flow strict\n * @file Helper for throwing errors\n * @author Box\n */\n\nimport getProp from 'lodash/get';\nimport { TYPED_ID_FILE_PREFIX, TYPED_ID_FOLDER_PREFIX, FILE_EXTENSION_BOX_NOTE } from '../constants';\nimport type { BoxItem } from '../common/types/core';\n\nconst FILE_EXT_REGEX = /\\.([0-9a-z]+)$/i; // Case insensitive regex to extract file extension without \".\"\n\n/**\n * Returns typed id for file. Useful for when\n * making file based XHRs where auth token\n * can be per file as used by Preview.\n * @param {id} id the file id\n * @return {string} typed id for file\n */\nexport function getTypedFileId(id: string): string {\n    return `${TYPED_ID_FILE_PREFIX}${id}`;\n}\n\n/**\n * Returns typed id for folder.\n * @param {id} id the folder id\n * @return {string} typed id for folder\n */\nexport function getTypedFolderId(id: string): string {\n    return `${TYPED_ID_FOLDER_PREFIX}${id}`;\n}\n\n/**\n * Determines if the file is a box note\n * @param {Object} file a box file\n * @return boolean true if it is a box note\n */\nexport function isBoxNote(file: BoxItem): boolean {\n    return file.extension === FILE_EXTENSION_BOX_NOTE;\n}\n\n/**\n * Returns the extension from the file name\n * @param {string} filename a Box file\n * @return {string} typed id for file\n */\nexport function getFileExtension(filename: string | void): string {\n    if (typeof filename !== 'string') {\n        return '';\n    }\n\n    const result = FILE_EXT_REGEX.exec(filename);\n    return getProp(result, '[1]', '');\n}\n"]},"metadata":{},"sourceType":"module"}