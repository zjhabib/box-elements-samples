{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport { scrollIntoView } from '../../utils/dom';\nimport ScrollWrapper from '../scroll-wrapper';\nimport { OVERLAY_WRAPPER_CLASS } from '../../constants';\nimport './SelectorDropdown.scss';\nfunction stopDefaultEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nvar SelectorDropdown = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SelectorDropdown, _React$Component);\n  function SelectorDropdown(props) {\n    var _this;\n    _classCallCheck(this, SelectorDropdown);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectorDropdown).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"setActiveItem\", function (index) {\n      _this.setState({\n        activeItemIndex: index\n      });\n      if (index === -1) {\n        _this.setActiveItemID(null);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setActiveItemID\", function (id) {\n      var scrollBoundarySelector = _this.props.scrollBoundarySelector;\n      var itemEl = id ? document.getElementById(id) : null;\n      var scrollOptions = {\n        block: 'nearest'\n      }; // Allow null in case we want to clear the default\n      // boundary from scrollIntoView\n\n      if (typeof scrollBoundarySelector !== 'undefined') {\n        scrollOptions.boundary = document.querySelector(scrollBoundarySelector);\n      }\n      _this.setState({\n        activeItemID: id\n      }, function () {\n        scrollIntoView(itemEl, scrollOptions);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"haveChildrenChanged\", function (prevChildren) {\n      var children = _this.props.children;\n      var childrenCount = React.Children.count(children);\n      var prevChildrenCount = React.Children.count(prevChildren);\n      if (childrenCount !== prevChildrenCount) {\n        return true;\n      }\n      if (childrenCount === 0) {\n        return false;\n      }\n      var childrenKeys = React.Children.map(children, function (child) {\n        return child.key;\n      });\n      var prevChildrenKeys = React.Children.map(prevChildren, function (child) {\n        return child.key;\n      });\n      return childrenKeys.some(function (childKey, index) {\n        return childKey !== prevChildrenKeys[index];\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"resetActiveItem\", function () {\n      _this.setState({\n        activeItemID: null,\n        activeItemIndex: -1\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function () {\n      _this.openDropdown();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentClick\", function (event) {\n      var container = _this.selectorDropdownRef.current;\n      var isInside = container && event.target instanceof Node && container.contains(event.target) || container === event.target;\n      if (!isInside) {\n        _this.closeDropdown();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleInput\", function () {\n      _this.openDropdown();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      var _this$props = _this.props,\n        children = _this$props.children,\n        isAlwaysOpen = _this$props.isAlwaysOpen,\n        onEnter = _this$props.onEnter;\n      var activeItemIndex = _this.state.activeItemIndex;\n      var childrenCount = React.Children.count(children);\n      switch (event.key) {\n        case 'ArrowDown':\n          if (_this.isDropdownOpen()) {\n            if (childrenCount) {\n              stopDefaultEvent(event);\n            }\n            var nextIndex = activeItemIndex === childrenCount - 1 ? -1 : activeItemIndex + 1;\n            _this.setActiveItem(nextIndex);\n          } else {\n            _this.openDropdown();\n          }\n          break;\n        case 'ArrowUp':\n          if (_this.isDropdownOpen()) {\n            if (childrenCount) {\n              stopDefaultEvent(event);\n            }\n            var prevIndex = activeItemIndex === -1 ? childrenCount - 1 : activeItemIndex - 1;\n            _this.setActiveItem(prevIndex);\n          } else {\n            _this.openDropdown();\n          }\n          break;\n        case 'Enter':\n          if (activeItemIndex !== -1 && _this.isDropdownOpen()) {\n            stopDefaultEvent(event);\n            _this.selectItem(activeItemIndex, event);\n          } else if (onEnter) {\n            onEnter(event);\n          }\n          break;\n        case 'Tab':\n          if (_this.isDropdownOpen()) {\n            _this.closeDropdown();\n            _this.resetActiveItem();\n          }\n          break;\n        case 'Escape':\n          if (!isAlwaysOpen && _this.isDropdownOpen()) {\n            stopDefaultEvent(event);\n            _this.closeDropdown();\n            _this.resetActiveItem();\n          }\n          break;\n        // no default\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isDropdownOpen\", function () {\n      var _this$props2 = _this.props,\n        children = _this$props2.children,\n        isAlwaysOpen = _this$props2.isAlwaysOpen;\n      var shouldOpen = _this.state.shouldOpen;\n      var childrenCount = React.Children.count(children);\n      return childrenCount > 0 && (!!isAlwaysOpen || shouldOpen);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openDropdown\", function () {\n      if (!_this.state.shouldOpen) {\n        var shouldSetActiveItemOnOpen = _this.props.shouldSetActiveItemOnOpen;\n        if (shouldSetActiveItemOnOpen) {\n          _this.setActiveItem(0);\n        }\n        _this.setState({\n          shouldOpen: true\n        });\n        document.addEventListener('click', _this.handleDocumentClick, true);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"closeDropdown\", function () {\n      _this.setState({\n        shouldOpen: false\n      });\n      document.removeEventListener('click', _this.handleDocumentClick, true);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"selectItem\", function (index, event) {\n      var onSelect = _this.props.onSelect;\n      if (onSelect) {\n        onSelect(index, event);\n      }\n      _this.closeDropdown();\n    });\n    _this.listboxID = uniqueId('listbox');\n    _this.state = {\n      activeItemID: null,\n      activeItemIndex: -1,\n      shouldOpen: false\n    };\n    _this.selectorDropdownRef = React.createRef();\n    return _this;\n  }\n  _createClass(SelectorDropdown, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_ref) {\n      var shouldSetActiveItemOnOpen = _ref.shouldSetActiveItemOnOpen,\n        children = _ref.children;\n      if (this.haveChildrenChanged(children)) {\n        // For UX purposes filtering the items is equivalent\n        // to re-opening the dropdown. In such cases we highlight\n        // the first item when configured to do so\n        if (shouldSetActiveItemOnOpen) {\n          this.setActiveItem(0);\n        } else {\n          this.resetActiveItem();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // just in case event listener was added during openDropdown() but the component\n      // gets unmounted without closeDropdown()\n      document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var listboxID = this.listboxID,\n        selectItem = this.selectItem,\n        setActiveItem = this.setActiveItem,\n        setActiveItemID = this.setActiveItemID,\n        _closeDropdown = this.closeDropdown;\n      var _this$props3 = this.props,\n        dividerIndex = _this$props3.dividerIndex,\n        overlayTitle = _this$props3.overlayTitle,\n        children = _this$props3.children,\n        className = _this$props3.className,\n        title = _this$props3.title,\n        selector = _this$props3.selector,\n        shouldScroll = _this$props3.shouldScroll;\n      var _this$state = this.state,\n        activeItemID = _this$state.activeItemID,\n        activeItemIndex = _this$state.activeItemIndex;\n      var isOpen = this.isDropdownOpen();\n      var inputProps = {\n        'aria-activedescendant': activeItemID,\n        'aria-autocomplete': 'list',\n        'aria-expanded': isOpen,\n        role: 'combobox'\n      };\n      if (isOpen) {\n        inputProps['aria-owns'] = listboxID;\n      }\n      var list = React.createElement(\"ul\", {\n        className: classNames('overlay', overlayTitle ? overlayTitle.toLowerCase() : ''),\n        id: listboxID,\n        role: \"listbox\"\n      }, overlayTitle && React.createElement(\"h5\", {\n        className: \"SelectorDropdown-title\"\n      }, overlayTitle), React.Children.map(children, function (item, index) {\n        var itemProps = {\n          onClick: function onClick(event) {\n            selectItem(index, event);\n          },\n          /* preventDefault on mousedown so blur doesn't happen before click */\n          onMouseDown: function onMouseDown(event) {\n            event.preventDefault();\n          },\n          onMouseEnter: function onMouseEnter() {\n            setActiveItem(index);\n          },\n          closeDropdown: function closeDropdown() {\n            _closeDropdown();\n          },\n          setActiveItemID: setActiveItemID\n        };\n        if (index === activeItemIndex) {\n          itemProps.isActive = true;\n        }\n        var hasDivider = index === dividerIndex;\n        return React.createElement(React.Fragment, null, hasDivider && React.createElement(\"hr\", {\n          className: \"SelectorDropdown-divider\"\n        }), React.cloneElement(item, itemProps));\n      })); // change onKeyPress/onPaste back to onInput when React fixes this IE11 bug: https://github.com/facebook/react/issues/7280\n      // We're simulating the blur event with the tab key listener and the\n      // click listener as a proxy because IE will trigger a blur when\n      // using the scrollbar in the dropdown which indavertently closes the dropdown.\n\n      return (\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n        React.createElement(\"div\", {\n          className: classNames('SelectorDropdown', className),\n          onFocus: this.handleFocus,\n          onKeyDown: this.handleKeyDown,\n          onKeyPress: this.handleInput,\n          onPaste: this.handleInput,\n          ref: this.selectorDropdownRef\n        }, React.cloneElement(selector, {\n          inputProps: inputProps\n        }), isOpen && React.createElement(\"div\", {\n          className: \"\".concat(OVERLAY_WRAPPER_CLASS, \" is-visible\")\n        }, title, shouldScroll ? React.createElement(ScrollWrapper, null, list) : list))\n      );\n    }\n  }]);\n  return SelectorDropdown;\n}(React.Component);\nexport default SelectorDropdown;","map":{"version":3,"sources":["../../../src/components/selector-dropdown/SelectorDropdown.js"],"names":["React","classNames","uniqueId","scrollIntoView","ScrollWrapper","OVERLAY_WRAPPER_CLASS","stopDefaultEvent","event","preventDefault","stopPropagation","SelectorDropdown","Component","props","listboxID","state","activeItemID","activeItemIndex","shouldOpen","selectorDropdownRef","createRef","shouldSetActiveItemOnOpen","children","haveChildrenChanged","setActiveItem","resetActiveItem","document","removeEventListener","handleDocumentClick","index","setState","setActiveItemID","id","scrollBoundarySelector","itemEl","getElementById","scrollOptions","block","boundary","querySelector","prevChildren","childrenCount","Children","count","prevChildrenCount","childrenKeys","map","child","key","prevChildrenKeys","some","childKey","openDropdown","container","current","isInside","target","Node","contains","closeDropdown","isAlwaysOpen","onEnter","isDropdownOpen","nextIndex","prevIndex","selectItem","addEventListener","onSelect","dividerIndex","overlayTitle","className","title","selector","shouldScroll","isOpen","inputProps","role","list","toLowerCase","item","itemProps","onClick","onMouseDown","onMouseEnter","isActive","hasDivider","cloneElement","handleFocus","handleKeyDown","handleInput"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport ScrollWrapper from '../scroll-wrapper';\nimport { OVERLAY_WRAPPER_CLASS } from '../../constants';\n\nimport './SelectorDropdown.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\ntype Props = {\n    /** Options to render in the dropdown filtered based on the input text */\n    children?: React.Node,\n    /** CSS class for the wrapper div */\n    className?: string,\n    /** Index at which to insert the divider */\n    dividerIndex?: number,\n    /** Options to keep the results always open */\n    isAlwaysOpen?: boolean,\n    /** Function called on keyboard \"Enter\" event only if enter does not trigger selection */\n    onEnter?: (event: SyntheticKeyboardEvent<HTMLDivElement>) => void,\n    /** Function called with the index of the selected option and the event (selected by keyboard or click) */\n    onSelect?: Function,\n    /** Optional title of the overlay */\n    overlayTitle?: string,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    scrollBoundarySelector?: string,\n    /** Component containing an input text field and takes `inputProps` to spread onto the input element */\n    selector: React.Element<any>,\n    /** Boolean to indicate whether the dropdown should scroll */\n    shouldScroll?: boolean,\n    /** Determines whether or not the first item is highlighted automatically when the dropdown opens */\n    shouldSetActiveItemOnOpen?: boolean,\n    /** Optional title text that will be rendered above the list */\n    title?: React.Node,\n};\n\ntype State = {\n    activeItemID: string | null,\n    activeItemIndex: number,\n    shouldOpen: boolean,\n};\n\nclass SelectorDropdown extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.listboxID = uniqueId('listbox');\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            shouldOpen: false,\n        };\n\n        this.selectorDropdownRef = React.createRef();\n    }\n\n    componentDidUpdate({ shouldSetActiveItemOnOpen, children }: Props) {\n        if (this.haveChildrenChanged(children)) {\n            // For UX purposes filtering the items is equivalent\n            // to re-opening the dropdown. In such cases we highlight\n            // the first item when configured to do so\n            if (shouldSetActiveItemOnOpen) {\n                this.setActiveItem(0);\n            } else {\n                this.resetActiveItem();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        // just in case event listener was added during openDropdown() but the component\n        // gets unmounted without closeDropdown()\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n\n    setActiveItem = (index: number) => {\n        this.setState({ activeItemIndex: index });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: string | null) => {\n        const { scrollBoundarySelector } = this.props;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        const scrollOptions: Object = {\n            block: 'nearest',\n        };\n\n        // Allow null in case we want to clear the default\n        // boundary from scrollIntoView\n        if (typeof scrollBoundarySelector !== 'undefined') {\n            scrollOptions.boundary = document.querySelector(scrollBoundarySelector);\n        }\n\n        this.setState({ activeItemID: id }, () => {\n            scrollIntoView(itemEl, scrollOptions);\n        });\n    };\n\n    listboxID: string;\n\n    selectorDropdownRef: { current: null | HTMLDivElement };\n\n    haveChildrenChanged = (prevChildren?: React.Node) => {\n        const { children } = this.props;\n        const childrenCount = React.Children.count(children);\n        const prevChildrenCount = React.Children.count(prevChildren);\n\n        if (childrenCount !== prevChildrenCount) {\n            return true;\n        }\n\n        if (childrenCount === 0) {\n            return false;\n        }\n\n        const childrenKeys = React.Children.map(children, child => child.key);\n        const prevChildrenKeys = React.Children.map(prevChildren, child => child.key);\n        return childrenKeys.some((childKey, index) => childKey !== prevChildrenKeys[index]);\n    };\n\n    resetActiveItem = () => {\n        this.setState({\n            activeItemID: null,\n            activeItemIndex: -1,\n        });\n    };\n\n    handleFocus = () => {\n        this.openDropdown();\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const container = this.selectorDropdownRef.current;\n        const isInside =\n            (container && event.target instanceof Node && container.contains(event.target)) ||\n            container === event.target;\n\n        if (!isInside) {\n            this.closeDropdown();\n        }\n    };\n\n    handleInput = () => {\n        this.openDropdown();\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { children, isAlwaysOpen, onEnter } = this.props;\n        const { activeItemIndex } = this.state;\n        const childrenCount = React.Children.count(children);\n\n        switch (event.key) {\n            case 'ArrowDown':\n                if (this.isDropdownOpen()) {\n                    if (childrenCount) {\n                        stopDefaultEvent(event);\n                    }\n                    const nextIndex = activeItemIndex === childrenCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'ArrowUp':\n                if (this.isDropdownOpen()) {\n                    if (childrenCount) {\n                        stopDefaultEvent(event);\n                    }\n                    const prevIndex = activeItemIndex === -1 ? childrenCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'Enter':\n                if (activeItemIndex !== -1 && this.isDropdownOpen()) {\n                    stopDefaultEvent(event);\n                    this.selectItem(activeItemIndex, event);\n                } else if (onEnter) {\n                    onEnter(event);\n                }\n                break;\n            case 'Tab':\n                if (this.isDropdownOpen()) {\n                    this.closeDropdown();\n                    this.resetActiveItem();\n                }\n                break;\n            case 'Escape':\n                if (!isAlwaysOpen && this.isDropdownOpen()) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                    this.resetActiveItem();\n                }\n                break;\n            // no default\n        }\n    };\n\n    isDropdownOpen = () => {\n        const { children, isAlwaysOpen } = this.props;\n        const { shouldOpen } = this.state;\n        const childrenCount = React.Children.count(children);\n        return childrenCount > 0 && (!!isAlwaysOpen || shouldOpen);\n    };\n\n    openDropdown = () => {\n        if (!this.state.shouldOpen) {\n            const { shouldSetActiveItemOnOpen } = this.props;\n\n            if (shouldSetActiveItemOnOpen) {\n                this.setActiveItem(0);\n            }\n            this.setState({ shouldOpen: true });\n            document.addEventListener('click', this.handleDocumentClick, true);\n        }\n    };\n\n    closeDropdown = () => {\n        this.setState({ shouldOpen: false });\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    };\n\n    selectItem = (index: number, event: SyntheticEvent<>) => {\n        const { onSelect } = this.props;\n        if (onSelect) {\n            onSelect(index, event);\n        }\n        this.closeDropdown();\n    };\n\n    render() {\n        const { listboxID, selectItem, setActiveItem, setActiveItemID, closeDropdown } = this;\n        const { dividerIndex, overlayTitle, children, className, title, selector, shouldScroll } = this.props;\n        const { activeItemID, activeItemIndex } = this.state;\n        const isOpen = this.isDropdownOpen();\n        const inputProps: Object = {\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            role: 'combobox',\n        };\n        if (isOpen) {\n            inputProps['aria-owns'] = listboxID;\n        }\n\n        const list = (\n            <ul\n                className={classNames('overlay', overlayTitle ? overlayTitle.toLowerCase() : '')}\n                id={listboxID}\n                role=\"listbox\"\n            >\n                {overlayTitle && <h5 className=\"SelectorDropdown-title\">{overlayTitle}</h5>}\n                {React.Children.map(children, (item, index) => {\n                    const itemProps: Object = {\n                        onClick: event => {\n                            selectItem(index, event);\n                        },\n                        /* preventDefault on mousedown so blur doesn't happen before click */\n                        onMouseDown: event => {\n                            event.preventDefault();\n                        },\n                        onMouseEnter: () => {\n                            setActiveItem(index);\n                        },\n                        closeDropdown: () => {\n                            closeDropdown();\n                        },\n                        setActiveItemID,\n                    };\n\n                    if (index === activeItemIndex) {\n                        itemProps.isActive = true;\n                    }\n\n                    const hasDivider = index === dividerIndex;\n\n                    return (\n                        <>\n                            {hasDivider && <hr className=\"SelectorDropdown-divider\" />}\n                            {React.cloneElement(item, itemProps)}\n                        </>\n                    );\n                })}\n            </ul>\n        );\n\n        // change onKeyPress/onPaste back to onInput when React fixes this IE11 bug: https://github.com/facebook/react/issues/7280\n\n        // We're simulating the blur event with the tab key listener and the\n        // click listener as a proxy because IE will trigger a blur when\n        // using the scrollbar in the dropdown which indavertently closes the dropdown.\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames('SelectorDropdown', className)}\n                onFocus={this.handleFocus}\n                onKeyDown={this.handleKeyDown}\n                onKeyPress={this.handleInput}\n                onPaste={this.handleInput}\n                ref={this.selectorDropdownRef}\n            >\n                {React.cloneElement(selector, { inputProps })}\n                {isOpen && (\n                    <div className={`${OVERLAY_WRAPPER_CLASS} is-visible`}>\n                        {title}\n                        {shouldScroll ? <ScrollWrapper>{list}</ScrollWrapper> : list}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default SelectorDropdown;\n"]},"metadata":{},"sourceType":"module"}