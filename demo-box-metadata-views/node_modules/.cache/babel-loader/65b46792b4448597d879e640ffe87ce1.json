{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { injectIntl } from 'react-intl';\nimport IconHide from '../../icons/general/IconHide';\nimport IconShow from '../../icons/general/IconShow';\nimport PlainButton from '../plain-button';\nimport Tooltip from '../tooltip';\nimport messages from '../../elements/common/messages';\nimport './SidebarToggleButton.scss';\nvar DIRECTION_LEFT = 'left';\nvar DIRECTION_RIGHT = 'right';\nvar SidebarToggleButton = function SidebarToggleButton(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    _ref$direction = _ref.direction,\n    direction = _ref$direction === void 0 ? DIRECTION_RIGHT : _ref$direction,\n    intl = _ref.intl,\n    isOpen = _ref.isOpen,\n    onClick = _ref.onClick,\n    rest = _objectWithoutProperties(_ref, [\"className\", \"direction\", \"intl\", \"isOpen\", \"onClick\"]);\n  var isCollapsed = !isOpen ? 'collapsed' : '';\n  var intlMessage = isOpen ? messages.sidebarHide : messages.sidebarShow;\n  var intlText = intl.formatMessage(intlMessage);\n  var classes = classNames(className, 'bdl-SidebarToggleButton', {\n    'bdl-is-collapsed': isCollapsed\n  });\n  var tooltipPosition = direction === DIRECTION_LEFT ? 'middle-right' : 'middle-left';\n  var renderButton = function renderButton() {\n    if (direction === DIRECTION_LEFT) {\n      return isOpen ? React.createElement(IconShow, {\n        height: 16,\n        width: 16\n      }) : React.createElement(IconHide, {\n        height: 16,\n        width: 16\n      });\n    }\n    return isOpen ? React.createElement(IconHide, {\n      height: 16,\n      width: 16\n    }) : React.createElement(IconShow, {\n      height: 16,\n      width: 16\n    });\n  };\n  return React.createElement(Tooltip, {\n    position: tooltipPosition,\n    text: intlText\n  }, React.createElement(PlainButton, _extends({\n    \"aria-label\": intlText,\n    className: classes,\n    onClick: onClick,\n    type: \"button\"\n  }, rest), renderButton()));\n};\nexport default injectIntl(SidebarToggleButton);","map":{"version":3,"sources":["../../../src/components/sidebar-toggle-button/SidebarToggleButton.js"],"names":["React","classNames","injectIntl","IconHide","IconShow","PlainButton","Tooltip","messages","DIRECTION_LEFT","DIRECTION_RIGHT","SidebarToggleButton","className","direction","intl","isOpen","onClick","rest","isCollapsed","intlMessage","sidebarHide","sidebarShow","intlText","formatMessage","classes","tooltipPosition","renderButton"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAGA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,QAAP,MAAqB,gCAArB;AAEA,OAAO,4BAAP;AAEA,IAAMC,cAAc,GAAG,MAAvB;AACA,IAAMC,eAAe,GAAG,OAAxB;AASA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,IAAA,EAOf;EAAA,IAAA,cAAA,GAAA,IAAA,CANTC,SAMS;IANTA,SAMS,GAAA,cAAA,KAAA,KAAA,CAAA,GANG,EAMH,GAAA,cAAA;IAAA,cAAA,GAAA,IAAA,CALTC,SAKS;IALTA,SAKS,GAAA,cAAA,KAAA,KAAA,CAAA,GALGH,eAKH,GAAA,cAAA;IAJTI,IAIS,GAAA,IAAA,CAJTA,IAIS;IAHTC,MAGS,GAAA,IAAA,CAHTA,MAGS;IAFTC,OAES,GAAA,IAAA,CAFTA,OAES;IADNC,IACM,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,WAAA,EAAA,MAAA,EAAA,QAAA,EAAA,SAAA,CAAA,CAAA;EACT,IAAMC,WAAW,GAAG,CAACH,MAAD,GAAU,WAAV,GAAwB,EAA5C;EACA,IAAMI,WAAW,GAAGJ,MAAM,GAAGP,QAAQ,CAACY,WAAZ,GAA0BZ,QAAQ,CAACa,WAA7D;EACA,IAAMC,QAAQ,GAAGR,IAAI,CAACS,aAALT,CAAmBK,WAAnBL,CAAjB;EACA,IAAMU,OAAO,GAAGtB,UAAU,CAACU,SAAD,EAAY,yBAAZ,EAAuC;IAC7D,kBAAA,EAAoBM;EADyC,CAAvC,CAA1B;EAGA,IAAMO,eAAe,GAAGZ,SAAS,KAAKJ,cAAdI,GAA+B,cAA/BA,GAAgD,aAAxE;EAEA,IAAMa,YAAY,GAAG,SAAfA,YAAe,CAAA,EAAM;IACvB,IAAIb,SAAS,KAAKJ,cAAlB,EAAkC;MAC9B,OAAOM,MAAM,GAAG,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;QAAU,MAAM,EAAE,EAAlB;QAAsB,KAAK,EAAE;MAA7B,CAAA,CAAH,GAAyC,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;QAAU,MAAM,EAAE,EAAlB;QAAsB,KAAK,EAAE;MAA7B,CAAA,CAAtD;IACH;IACD,OAAOA,MAAM,GAAG,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;MAAU,MAAM,EAAE,EAAlB;MAAsB,KAAK,EAAE;IAA7B,CAAA,CAAH,GAAyC,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA;MAAU,MAAM,EAAE,EAAlB;MAAsB,KAAK,EAAE;IAA7B,CAAA,CAAtD;EACH,CALD;EAOA,OACI,KAAA,CAAA,aAAA,CAAC,OAAD,EAAA;IAAS,QAAQ,EAAEU,eAAnB;IAAoC,IAAI,EAAEH;EAA1C,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA,QAAA,CAAA;IAAa,YAAA,EAAYA,QAAzB;IAAmC,SAAS,EAAEE,OAA9C;IAAuD,OAAO,EAAER,OAAhE;IAAyE,IAAI,EAAC;EAA9E,CAAA,EAA2FC,IAA3F,CAAA,EACKS,YAAY,CAAA,CADjB,CADJ,CADJ;AAOH,CA9BD;AAgCA,eAAevB,UAAU,CAACQ,mBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\n\nimport IconHide from '../../icons/general/IconHide';\nimport IconShow from '../../icons/general/IconShow';\nimport PlainButton from '../plain-button';\nimport Tooltip from '../tooltip';\n\nimport messages from '../../elements/common/messages';\n\nimport './SidebarToggleButton.scss';\n\nconst DIRECTION_LEFT = 'left';\nconst DIRECTION_RIGHT = 'right';\n\ntype Props = {\n    className?: string,\n    direction?: string,\n    isOpen: boolean,\n    onClick?: Function,\n} & InjectIntlProvidedProps;\n\nconst SidebarToggleButton = ({\n    className = '',\n    direction = DIRECTION_RIGHT,\n    intl,\n    isOpen,\n    onClick,\n    ...rest\n}: Props) => {\n    const isCollapsed = !isOpen ? 'collapsed' : '';\n    const intlMessage = isOpen ? messages.sidebarHide : messages.sidebarShow;\n    const intlText = intl.formatMessage(intlMessage);\n    const classes = classNames(className, 'bdl-SidebarToggleButton', {\n        'bdl-is-collapsed': isCollapsed,\n    });\n    const tooltipPosition = direction === DIRECTION_LEFT ? 'middle-right' : 'middle-left';\n\n    const renderButton = () => {\n        if (direction === DIRECTION_LEFT) {\n            return isOpen ? <IconShow height={16} width={16} /> : <IconHide height={16} width={16} />;\n        }\n        return isOpen ? <IconHide height={16} width={16} /> : <IconShow height={16} width={16} />;\n    };\n\n    return (\n        <Tooltip position={tooltipPosition} text={intlText}>\n            <PlainButton aria-label={intlText} className={classes} onClick={onClick} type=\"button\" {...rest}>\n                {renderButton()}\n            </PlainButton>\n        </Tooltip>\n    );\n};\n\nexport default injectIntl(SidebarToggleButton);\n"]},"metadata":{},"sourceType":"module"}