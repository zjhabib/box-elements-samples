{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport Browser from './BrowserUtils';\nimport ComServerClient from './ComServerClient';\nimport CONSTANTS from './constants';\nvar TIMEOUT_MS = 5000;\nvar EXTENSION_CHECK_DEBOUNCE_TIME = 100;\nvar extensionRequestTimeout;\nfunction createRequestData(extensions) {\n  return JSON.stringify({\n    request_type: 'get_default_application',\n    extension: extensions\n  });\n}\nfunction createExecuteData(fileId, token, authCode, tokenScope) {\n  var execData = JSON.stringify({\n    auth_code: authCode,\n    auth_token: token,\n    browser_type: Browser.getName(),\n    command_type: 'launch_application',\n    file_id: fileId.toString(),\n    token_scope: tokenScope\n  });\n  return execData;\n}\nfunction isBlacklistedExtension(extension) {\n  var EXTENSION_BLACKLIST = CONSTANTS.EXTENSION_BLACKLIST;\n  var uppercaseExt = extension.toUpperCase(); // if ext has a leading ., strip it\n\n  if (uppercaseExt.charAt(0) === '.') {\n    uppercaseExt = uppercaseExt.substr(1);\n  }\n  return uppercaseExt in EXTENSION_BLACKLIST;\n}\nvar BoxEditInstance = null;\nvar BoxEdit = /*#__PURE__*/\nfunction () {\n  function BoxEdit() {\n    _classCallCheck(this, BoxEdit);\n    if (!(BoxEditInstance instanceof BoxEdit)) {\n      BoxEditInstance = this;\n    }\n    this.extensionRequestQueue = new Map();\n    return BoxEditInstance;\n  }\n  _createClass(BoxEdit, [{\n    key: \"queueGetNativeAppNameFromLocal\",\n    value: function queueGetNativeAppNameFromLocal(extension) {\n      // There's already a pending or fulfilled request for the appname\n      if (this.extensionRequestQueue.has(extension)) {\n        var queueItem = this.extensionRequestQueue.get(extension);\n        if (!queueItem) {\n          throw new Error('Race condition re: queueGetNativeAppNameFromLocal');\n        }\n        return queueItem.promise;\n      }\n      var extensionRequest = {};\n      var appNameRequestPromise = new Promise(function (resolve, reject) {\n        extensionRequest.resolve = resolve;\n        extensionRequest.reject = reject;\n      });\n      extensionRequest.promise = appNameRequestPromise;\n      this.extensionRequestQueue.set(extension, extensionRequest);\n      return appNameRequestPromise;\n    }\n  }, {\n    key: \"checkBoxEditAvailability\",\n    value: function checkBoxEditAvailability() {\n      return this.getBoxEditAvailability();\n    }\n  }, {\n    key: \"getBoxEditAvailability\",\n    value: function getBoxEditAvailability() {\n      this.client = new ComServerClient(CONSTANTS.BOX_EDIT_APP_NAME);\n      return this.client.getComServerStatus();\n    }\n  }, {\n    key: \"canOpenWithBoxEdit\",\n    value: function () {\n      var _canOpenWithBoxEdit = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(extensions) {\n        var _this = this;\n        var extensionToAppTuples, resultMap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all(extensions.map( /*#__PURE__*/\n                function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(ext) {\n                    var appName, result, _result;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.prev = 0;\n                            _context.next = 3;\n                            return _this.getAppForExtension(ext);\n                          case 3:\n                            appName = _context.sent;\n                            result = [ext, appName];\n                            return _context.abrupt(\"return\", result);\n                          case 8:\n                            _context.prev = 8;\n                            _context.t0 = _context[\"catch\"](0);\n                            _result = [ext, ''];\n                            return _context.abrupt(\"return\", _result);\n                          case 12:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[0, 8]]);\n                  }));\n                  return function (_x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n              case 2:\n                extensionToAppTuples = _context2.sent;\n                resultMap = new Map();\n                extensionToAppTuples.forEach(function (tuple) {\n                  return resultMap.set.apply(resultMap, _toConsumableArray(tuple));\n                });\n                return _context2.abrupt(\"return\", Promise.resolve(resultMap));\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function canOpenWithBoxEdit(_x) {\n        return _canOpenWithBoxEdit.apply(this, arguments);\n      }\n      return canOpenWithBoxEdit;\n    }()\n  }, {\n    key: \"openFile\",\n    value: function openFile(fileID, token) {\n      // @NOTE. canOpenWithBoxEdit, create token taken care of higher levels\n      // therefore not ported into React library\n      // TODO is token the right name?\n      var executeDataAsString = createExecuteData(fileID, token.data.token, token.data.auth_code, token.data.token_scope);\n      return this.client.sendCommand(executeDataAsString, TIMEOUT_MS);\n    }\n  }, {\n    key: \"getAppForExtension\",\n    value: function getAppForExtension(extension) {\n      var _this2 = this;\n      try {\n        if (isBlacklistedExtension(extension)) {\n          throw new Error('blacklisted');\n        }\n        var applicationSupportRequest = this.queueGetNativeAppNameFromLocal(extension);\n        if (!extensionRequestTimeout) {\n          extensionRequestTimeout = setTimeout(function () {\n            _this2.processExtensionRequestQueue();\n          }, EXTENSION_CHECK_DEBOUNCE_TIME);\n        }\n        return applicationSupportRequest;\n      } catch (err) {\n        return Promise.reject();\n      }\n    }\n  }, {\n    key: \"processExtensionRequestQueue\",\n    value: function processExtensionRequestQueue() {\n      var copyQueue = new Map();\n      var extensions = [];\n      this.extensionRequestQueue.forEach(function (value, key) {\n        copyQueue.set(key, value);\n        extensions.push(key);\n      });\n      this.extensionRequestQueue.clear();\n      extensionRequestTimeout = null;\n      var requestData = createRequestData(extensions);\n      return this.client.sendRequest(requestData).then(function (data) {\n        if (data && data.default_application_name) {\n          var defaultApplicationName = data.default_application_name; // @TODO. Reassess.\n          // This is an odd construction that may not be necessary.\n\n          if (Object.prototype.toString.call(defaultApplicationName) === '[object Object]') {\n            defaultApplicationName = [defaultApplicationName];\n          }\n          defaultApplicationName.forEach(function (extensionAppObj) {\n            var extension = Object.keys(extensionAppObj)[0];\n            var appName = decodeURIComponent(extensionAppObj[extension]);\n            if (appName) {\n              var queueItem = copyQueue.get(extension);\n              if (queueItem) {\n                queueItem.resolve(appName);\n                copyQueue.delete(extension);\n              }\n            }\n          });\n        } // Reject all remaining items in the queue\n\n        extensions.forEach(function (extension) {\n          var queueItem = copyQueue.get(extension);\n          if (queueItem) {\n            queueItem.reject();\n          }\n        });\n      });\n    }\n  }]);\n  return BoxEdit;\n}();\nexport default BoxEdit;","map":{"version":3,"sources":["../../../src/api/box-edit/BoxEdit.js"],"names":["Browser","ComServerClient","CONSTANTS","TIMEOUT_MS","EXTENSION_CHECK_DEBOUNCE_TIME","extensionRequestTimeout","createRequestData","extensions","stringify","request_type","extension","createExecuteData","fileId","token","authCode","tokenScope","execData","auth_code","auth_token","browser_type","getName","command_type","file_id","toString","token_scope","isBlacklistedExtension","EXTENSION_BLACKLIST","uppercaseExt","toUpperCase","charAt","substr","BoxEditInstance","BoxEdit","extensionRequestQueue","Map","has","queueItem","get","Error","promise","extensionRequest","appNameRequestPromise","Promise","resolve","reject","set","getBoxEditAvailability","client","BOX_EDIT_APP_NAME","getComServerStatus","extensionToAppTuples","all","map","ext","appName","getAppForExtension","result","resultMap","forEach","tuple","fileID","executeDataAsString","data","sendCommand","applicationSupportRequest","queueGetNativeAppNameFromLocal","setTimeout","processExtensionRequestQueue","err","copyQueue","value","key","push","clear","requestData","sendRequest","then","default_application_name","defaultApplicationName","Object","prototype","call","keys","extensionAppObj","decodeURIComponent","delete"],"mappings":"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","sourcesContent":["// @flow\n\nimport Browser from './BrowserUtils';\nimport ComServerClient from './ComServerClient';\nimport CONSTANTS from './constants';\n\ntype stringTuple = [string, string];\ntype extensionRequestQueueItem = {\n    promise: Promise<string>,\n    reject: Function,\n    resolve: Function,\n};\n\nconst TIMEOUT_MS = 5000;\nconst EXTENSION_CHECK_DEBOUNCE_TIME = 100;\n\nlet extensionRequestTimeout: ?TimeoutID;\n\nfunction createRequestData(extensions: Array<string>): string {\n    return JSON.stringify({\n        request_type: 'get_default_application',\n        extension: extensions,\n    });\n}\n\nfunction createExecuteData(fileId, token, authCode, tokenScope): string {\n    const execData = JSON.stringify({\n        auth_code: authCode,\n        auth_token: token,\n        browser_type: Browser.getName(),\n        command_type: 'launch_application',\n        file_id: fileId.toString(),\n        token_scope: tokenScope,\n    });\n    return execData;\n}\n\nfunction isBlacklistedExtension(extension): boolean {\n    const { EXTENSION_BLACKLIST } = CONSTANTS;\n    let uppercaseExt = extension.toUpperCase();\n\n    // if ext has a leading ., strip it\n    if (uppercaseExt.charAt(0) === '.') {\n        uppercaseExt = uppercaseExt.substr(1);\n    }\n\n    return uppercaseExt in EXTENSION_BLACKLIST;\n}\n\nlet BoxEditInstance = null;\n\nclass BoxEdit {\n    client: ComServerClient;\n\n    extensionRequestQueue: Map<string, extensionRequestQueueItem>;\n\n    constructor() {\n        if (!(BoxEditInstance instanceof BoxEdit)) {\n            BoxEditInstance = this;\n        }\n        this.extensionRequestQueue = new Map();\n        return BoxEditInstance;\n    }\n\n    queueGetNativeAppNameFromLocal(extension: string): Promise<string> {\n        // There's already a pending or fulfilled request for the appname\n        if (this.extensionRequestQueue.has(extension)) {\n            const queueItem = this.extensionRequestQueue.get(extension);\n            if (!queueItem) {\n                throw new Error('Race condition re: queueGetNativeAppNameFromLocal');\n            }\n            return queueItem.promise;\n        }\n\n        const extensionRequest = {};\n        const appNameRequestPromise = new Promise((resolve, reject) => {\n            extensionRequest.resolve = resolve;\n            extensionRequest.reject = reject;\n        });\n        extensionRequest.promise = appNameRequestPromise;\n        this.extensionRequestQueue.set(extension, extensionRequest);\n\n        return appNameRequestPromise;\n    }\n\n    checkBoxEditAvailability(): Promise<any> {\n        return this.getBoxEditAvailability();\n    }\n\n    getBoxEditAvailability(): Promise<any> {\n        this.client = new ComServerClient(CONSTANTS.BOX_EDIT_APP_NAME);\n\n        return this.client.getComServerStatus();\n    }\n\n    async canOpenWithBoxEdit(extensions: string[]): Promise<any> {\n        const extensionToAppTuples: Array<stringTuple> = await Promise.all(\n            extensions.map(async ext => {\n                try {\n                    const appName = await this.getAppForExtension(ext);\n                    const result: stringTuple = [ext, appName];\n                    return result;\n                } catch (err) {\n                    const result: stringTuple = [ext, ''];\n                    return result;\n                }\n            }),\n        );\n\n        const resultMap: Map<string, string> = new Map();\n        extensionToAppTuples.forEach(tuple => resultMap.set(...tuple));\n\n        return Promise.resolve(resultMap);\n    }\n\n    openFile(fileID: string, token: Object): Promise<any> {\n        // @NOTE. canOpenWithBoxEdit, create token taken care of higher levels\n        // therefore not ported into React library\n\n        // TODO is token the right name?\n        const executeDataAsString = createExecuteData(\n            fileID,\n            token.data.token,\n            token.data.auth_code,\n            token.data.token_scope,\n        );\n\n        return this.client.sendCommand(executeDataAsString, TIMEOUT_MS);\n    }\n\n    getAppForExtension(extension: string): Promise<any> {\n        try {\n            if (isBlacklistedExtension(extension)) {\n                throw new Error('blacklisted');\n            }\n\n            const applicationSupportRequest = this.queueGetNativeAppNameFromLocal(extension);\n\n            if (!extensionRequestTimeout) {\n                extensionRequestTimeout = setTimeout(() => {\n                    this.processExtensionRequestQueue();\n                }, EXTENSION_CHECK_DEBOUNCE_TIME);\n            }\n\n            return applicationSupportRequest;\n        } catch (err) {\n            return Promise.reject();\n        }\n    }\n\n    processExtensionRequestQueue(): void {\n        const copyQueue = new Map();\n\n        const extensions = [];\n        this.extensionRequestQueue.forEach((value, key) => {\n            copyQueue.set(key, value);\n            extensions.push(key);\n        });\n\n        this.extensionRequestQueue.clear();\n\n        extensionRequestTimeout = null;\n\n        const requestData = createRequestData(extensions);\n\n        return this.client.sendRequest(requestData).then(data => {\n            if (data && data.default_application_name) {\n                let defaultApplicationName = data.default_application_name;\n\n                // @TODO. Reassess.\n                // This is an odd construction that may not be necessary.\n                if (Object.prototype.toString.call(defaultApplicationName) === '[object Object]') {\n                    defaultApplicationName = [defaultApplicationName];\n                }\n\n                defaultApplicationName.forEach(extensionAppObj => {\n                    const extension = Object.keys(extensionAppObj)[0];\n                    const appName = decodeURIComponent(extensionAppObj[extension]);\n                    if (appName) {\n                        const queueItem = copyQueue.get(extension);\n                        if (queueItem) {\n                            queueItem.resolve(appName);\n                            copyQueue.delete(extension);\n                        }\n                    }\n                });\n            }\n\n            // Reject all remaining items in the queue\n            extensions.forEach(extension => {\n                const queueItem = copyQueue.get(extension);\n                if (queueItem) {\n                    queueItem.reject();\n                }\n            });\n        });\n    }\n}\n\nexport default BoxEdit;\n"]},"metadata":{},"sourceType":"module"}