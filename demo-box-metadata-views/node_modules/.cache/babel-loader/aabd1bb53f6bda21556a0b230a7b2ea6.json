{"ast":null,"code":"export var SCROLL_DIRECTION_BACKWARD = -1;\nexport var SCROLL_DIRECTION_FORWARD = 1;\nexport var SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexport var SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexport default function defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n    overscanCellsCount = _ref.overscanCellsCount,\n    scrollDirection = _ref.scrollDirection,\n    startIndex = _ref.startIndex,\n    stopIndex = _ref.stopIndex;\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex)\n    };\n  }\n}\nimport { bpfrpt_proptype_OverscanIndicesGetterParams } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndices } from \"./types\";","map":{"version":3,"names":["SCROLL_DIRECTION_BACKWARD","SCROLL_DIRECTION_FORWARD","SCROLL_DIRECTION_HORIZONTAL","SCROLL_DIRECTION_VERTICAL","defaultOverscanIndicesGetter","_ref","cellCount","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanStartIndex","Math","max","overscanStopIndex","min","bpfrpt_proptype_OverscanIndicesGetterParams","bpfrpt_proptype_OverscanIndices"],"sources":["/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/react-virtualized/dist/es/Grid/defaultOverscanIndicesGetter.js"],"sourcesContent":["export var SCROLL_DIRECTION_BACKWARD = -1;\nexport var SCROLL_DIRECTION_FORWARD = 1;\nexport var SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexport var SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexport default function defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex)\n    };\n  }\n}\nimport { bpfrpt_proptype_OverscanIndicesGetterParams } from \"./types\";\nimport { bpfrpt_proptype_OverscanIndices } from \"./types\";"],"mappings":"AAAA,OAAO,IAAIA,yBAAyB,GAAG,CAAC,CAAC;AACzC,OAAO,IAAIC,wBAAwB,GAAG,CAAC;AACvC,OAAO,IAAIC,2BAA2B,GAAG,YAAY;AACrD,OAAO,IAAIC,yBAAyB,GAAG,UAAU;AACjD;AACA;AACA;AACA;;AAEA,eAAe,SAASC,4BAA4BA,CAACC,IAAI,EAAE;EACzD,IAAIC,SAAS,GAAGD,IAAI,CAACC,SAAS;IAC1BC,kBAAkB,GAAGF,IAAI,CAACE,kBAAkB;IAC5CC,eAAe,GAAGH,IAAI,CAACG,eAAe;IACtCC,UAAU,GAAGJ,IAAI,CAACI,UAAU;IAC5BC,SAAS,GAAGL,IAAI,CAACK,SAAS;EAE9B,IAAIF,eAAe,KAAKP,wBAAwB,EAAE;IAChD,OAAO;MACLU,kBAAkB,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,UAAU,CAAC;MAC3CK,iBAAiB,EAAEF,IAAI,CAACG,GAAG,CAACT,SAAS,GAAG,CAAC,EAAEI,SAAS,GAAGH,kBAAkB;IAC3E,CAAC;EACH,CAAC,MAAM;IACL,OAAO;MACLI,kBAAkB,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,UAAU,GAAGF,kBAAkB,CAAC;MAChEO,iBAAiB,EAAEF,IAAI,CAACG,GAAG,CAACT,SAAS,GAAG,CAAC,EAAEI,SAAS;IACtD,CAAC;EACH;AACF;AACA,SAASM,2CAA2C,QAAQ,SAAS;AACrE,SAASC,+BAA+B,QAAQ,SAAS"},"metadata":{},"sourceType":"module"}