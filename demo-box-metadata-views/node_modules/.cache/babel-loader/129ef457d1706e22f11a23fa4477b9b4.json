{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport InfoIconWithTooltip from './InfoIconWithTooltip';\nimport StandardLabel from './StandardLabel';\nimport HiddenLabel from './HiddenLabel';\nimport commonMessages from '../../common/messages';\nimport './Label.scss';\nvar OptionalFormattedMessage = function OptionalFormattedMessage() {\n  return React.createElement(\"span\", {\n    className: \"label-optional bdl-Label-optional\"\n  }, \"(\", React.createElement(FormattedMessage, commonMessages.optional), \")\");\n};\nvar Label = function Label(_ref) {\n  var text = _ref.text,\n    tooltip = _ref.tooltip,\n    infoTooltip = _ref.infoTooltip,\n    infoIconProps = _ref.infoIconProps,\n    showOptionalText = _ref.showOptionalText,\n    hideLabel = _ref.hideLabel,\n    children = _ref.children;\n  var labelContent = [React.createElement(\"span\", {\n    key: \"labelText\"\n  }, text), showOptionalText ? React.createElement(OptionalFormattedMessage, {\n    key: \"optionalMessage\"\n  }) : null];\n  if (infoTooltip) {\n    labelContent.push(React.createElement(InfoIconWithTooltip, {\n      key: \"infoTooltip\",\n      iconProps: _objectSpread({\n        className: 'tooltip-icon'\n      }, infoIconProps),\n      tooltipText: infoTooltip\n    }));\n  }\n  if (hideLabel) {\n    return React.createElement(HiddenLabel, {\n      labelContent: labelContent\n    }, children);\n  }\n  return React.createElement(StandardLabel, {\n    labelContent: labelContent,\n    tooltip: tooltip\n  }, children);\n};\nexport default Label;","map":{"version":3,"sources":["../../../src/components/label/Label.tsx"],"names":["React","FormattedMessage","InfoIconWithTooltip","StandardLabel","HiddenLabel","commonMessages","OptionalFormattedMessage","optional","Label","text","tooltip","infoTooltip","infoIconProps","showOptionalText","hideLabel","children","labelContent","push","className"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,OAAO,cAAP;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,EAAA;EAAA,OAC7B,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,SAAS,EAAC;EAAhB,CAAA,EAAA,GAAA,EACK,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBD,cAAc,CAACE,QAArC,CADL,EAAA,GAAA,CAD6B;AAAA,CAAjC;AAuBA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAA,IAAA,EAAsG;EAAA,IAAnGC,IAAmG,GAAA,IAAA,CAAnGA,IAAmG;IAA7FC,OAA6F,GAAA,IAAA,CAA7FA,OAA6F;IAApFC,WAAoF,GAAA,IAAA,CAApFA,WAAoF;IAAvEC,aAAuE,GAAA,IAAA,CAAvEA,aAAuE;IAAxDC,gBAAwD,GAAA,IAAA,CAAxDA,gBAAwD;IAAtCC,SAAsC,GAAA,IAAA,CAAtCA,SAAsC;IAA3BC,QAA2B,GAAA,IAAA,CAA3BA,QAA2B;EAChH,IAAMC,YAAY,GAAG,CACjB,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAM,GAAG,EAAC;EAAV,CAAA,EAAuBP,IAAvB,CADiB,EAEjBI,gBAAgB,GAAG,KAAA,CAAA,aAAA,CAAC,wBAAD,EAAA;IAA0B,GAAG,EAAC;EAA9B,CAAA,CAAH,GAAwD,IAFvD,CAArB;EAKA,IAAIF,WAAJ,EAAiB;IACbK,YAAY,CAACC,IAAbD,CACI,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAA;MACI,GAAG,EAAC,aADR;MAEI,SAAS,EAAA,aAAA,CAAA;QAAIE,SAAS,EAAE;MAAf,CAAA,EAAkCN,aAAlC,CAFb;MAGI,WAAW,EAAED;IAHjB,CAAA,CADJK,CAAAA;EAOH;EAED,IAAIF,SAAJ,EAAe;IACX,OAAO,KAAA,CAAA,aAAA,CAAC,WAAD,EAAA;MAAa,YAAY,EAAEE;IAA3B,CAAA,EAA0CD,QAA1C,CAAP;EACH;EAED,OACI,KAAA,CAAA,aAAA,CAAC,aAAD,EAAA;IAAe,YAAY,EAAEC,YAA7B;IAA2C,OAAO,EAAEN;EAApD,CAAA,EACKK,QADL,CADJ;AAKH,CAzBD;AA2BA,eAAeP,KAAf","sourcesContent":["import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport InfoIconWithTooltip from './InfoIconWithTooltip';\nimport StandardLabel from './StandardLabel';\nimport HiddenLabel from './HiddenLabel';\nimport commonMessages from '../../common/messages';\n\nimport './Label.scss';\n\nconst OptionalFormattedMessage = () => (\n    <span className=\"label-optional bdl-Label-optional\">\n        (<FormattedMessage {...commonMessages.optional} />)\n    </span>\n);\n\nexport interface LabelProps {\n    /** Child for the label */\n    children: React.ReactElement;\n    /** Whether the text of the label should be accessibly hidden */\n    hideLabel?: boolean;\n    /** Optional props for the icon */\n    infoIconProps?: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n    /** Tooltip text for the info icon */\n    infoTooltip?: React.ReactNode;\n    /** Whether to show the `(Optional)` text next to the label for an optional field */\n    showOptionalText?: boolean;\n    /** The label text */\n    text: React.ReactNode;\n    /** Optional tooltip text for the label */\n    tooltip?: React.ReactNode;\n}\n\nconst Label = ({ text, tooltip, infoTooltip, infoIconProps, showOptionalText, hideLabel, children }: LabelProps) => {\n    const labelContent = [\n        <span key=\"labelText\">{text}</span>,\n        showOptionalText ? <OptionalFormattedMessage key=\"optionalMessage\" /> : null,\n    ];\n\n    if (infoTooltip) {\n        labelContent.push(\n            <InfoIconWithTooltip\n                key=\"infoTooltip\"\n                iconProps={{ className: 'tooltip-icon', ...infoIconProps }}\n                tooltipText={infoTooltip}\n            />,\n        );\n    }\n\n    if (hideLabel) {\n        return <HiddenLabel labelContent={labelContent}>{children}</HiddenLabel>;\n    }\n\n    return (\n        <StandardLabel labelContent={labelContent} tooltip={tooltip}>\n            {children}\n        </StandardLabel>\n    );\n};\n\nexport default Label;\n"]},"metadata":{},"sourceType":"module"}