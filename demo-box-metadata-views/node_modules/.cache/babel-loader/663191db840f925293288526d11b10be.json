{"ast":null,"code":"import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport InlineError from '../../components/inline-error/InlineError';\nimport TextMetadataField from './TextMetadataField';\nimport EnumMetadataField from './EnumMetadataField';\nimport DateMetadataField from './DateMetadataField';\nimport FloatMetadataField from './FloatMetadataField';\nimport IntegerMetadataField from './IntegerMetadataField';\nimport MultiSelectMetadataField from './MultiSelectMetadataField';\nimport ReadOnlyMetadataField from './ReadOnlyMetadataField';\nimport messages from './messages';\nimport { FIELD_TYPE_ENUM, FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER, FIELD_TYPE_STRING, FIELD_TYPE_DATE, FIELD_TYPE_MULTISELECT } from './constants';\nvar MetadataField = function MetadataField(_ref) {\n  var blurExceptionClassNames = _ref.blurExceptionClassNames,\n    dataKey = _ref.dataKey,\n    dataValue = _ref.dataValue,\n    displayName = _ref.displayName,\n    description = _ref.description,\n    error = _ref.error,\n    isHidden = _ref.isHidden,\n    canEdit = _ref.canEdit,\n    onChange = _ref.onChange,\n    onRemove = _ref.onRemove,\n    options = _ref.options,\n    type = _ref.type;\n  if (isHidden) {\n    return null;\n  }\n  if (!canEdit) {\n    return React.createElement(ReadOnlyMetadataField, {\n      dataValue: dataValue,\n      description: description,\n      displayName: displayName,\n      type: type\n    });\n  }\n  if (!onChange || !onRemove) {\n    throw new Error('Need to have onChange and onRemove');\n  }\n  switch (type) {\n    case FIELD_TYPE_STRING:\n      return React.createElement(TextMetadataField, {\n        dataKey: dataKey,\n        dataValue: dataValue,\n        description: description,\n        displayName: displayName,\n        onChange: onChange,\n        onRemove: onRemove\n      });\n    case FIELD_TYPE_FLOAT:\n      return React.createElement(FloatMetadataField, {\n        dataKey: dataKey,\n        dataValue: dataValue,\n        description: description,\n        displayName: displayName,\n        error: error,\n        onChange: onChange,\n        onRemove: onRemove,\n        type: type\n      });\n    case FIELD_TYPE_INTEGER:\n      return React.createElement(IntegerMetadataField, {\n        dataKey: dataKey,\n        dataValue: dataValue,\n        description: description,\n        displayName: displayName,\n        error: error,\n        onChange: onChange,\n        onRemove: onRemove,\n        type: type\n      });\n    case FIELD_TYPE_ENUM:\n      return React.createElement(EnumMetadataField, {\n        blurExceptionClassNames: blurExceptionClassNames,\n        dataKey: dataKey,\n        dataValue: dataValue,\n        description: description,\n        displayName: displayName,\n        onChange: onChange,\n        onRemove: onRemove,\n        options: options\n      });\n    case FIELD_TYPE_MULTISELECT:\n      return React.createElement(MultiSelectMetadataField, {\n        blurExceptionClassNames: blurExceptionClassNames,\n        dataKey: dataKey,\n        dataValue: dataValue,\n        description: description,\n        displayName: displayName,\n        onChange: onChange,\n        onRemove: onRemove,\n        options: options\n      });\n    case FIELD_TYPE_DATE:\n      return React.createElement(DateMetadataField, {\n        dataKey: dataKey,\n        dataValue: dataValue,\n        description: description,\n        displayName: displayName,\n        onChange: onChange,\n        onRemove: onRemove\n      });\n    default:\n      return React.createElement(InlineError, {\n        title: type\n      }, React.createElement(FormattedMessage, messages.invalidMetadataFieldType));\n  }\n};\nexport default MetadataField;","map":{"version":3,"sources":["../../../src/features/metadata-instance-fields/MetadataField.js"],"names":["React","FormattedMessage","InlineError","TextMetadataField","EnumMetadataField","DateMetadataField","FloatMetadataField","IntegerMetadataField","MultiSelectMetadataField","ReadOnlyMetadataField","messages","FIELD_TYPE_ENUM","FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","FIELD_TYPE_STRING","FIELD_TYPE_DATE","FIELD_TYPE_MULTISELECT","MetadataField","blurExceptionClassNames","dataKey","dataValue","displayName","description","error","isHidden","canEdit","onChange","onRemove","options","type","Error","invalidMetadataFieldType"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport InlineError from '../../components/inline-error/InlineError';\n\nimport TextMetadataField from './TextMetadataField';\nimport EnumMetadataField from './EnumMetadataField';\nimport DateMetadataField from './DateMetadataField';\nimport FloatMetadataField from './FloatMetadataField';\nimport IntegerMetadataField from './IntegerMetadataField';\nimport MultiSelectMetadataField from './MultiSelectMetadataField';\nimport ReadOnlyMetadataField from './ReadOnlyMetadataField';\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataTemplateFieldOption, MetadataFieldType } from '../../common/types/metadata';\n\nimport {\n    FIELD_TYPE_ENUM,\n    FIELD_TYPE_FLOAT,\n    FIELD_TYPE_INTEGER,\n    FIELD_TYPE_STRING,\n    FIELD_TYPE_DATE,\n    FIELD_TYPE_MULTISELECT,\n} from './constants';\n\ntype Props = {\n    blurExceptionClassNames?: Array<string>,\n    canEdit: boolean,\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    isHidden?: boolean,\n    onChange?: (key: string, value: MetadataFieldValue) => void,\n    onRemove?: (key: string) => void,\n    options?: Array<MetadataTemplateFieldOption>,\n    type: MetadataFieldType,\n};\n\nconst MetadataField = ({\n    blurExceptionClassNames,\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    isHidden,\n    canEdit,\n    onChange,\n    onRemove,\n    options,\n    type,\n}: Props) => {\n    if (isHidden) {\n        return null;\n    }\n\n    if (!canEdit) {\n        return (\n            <ReadOnlyMetadataField\n                dataValue={dataValue}\n                description={description}\n                displayName={displayName}\n                type={type}\n            />\n        );\n    }\n\n    if (!onChange || !onRemove) {\n        throw new Error('Need to have onChange and onRemove');\n    }\n\n    switch (type) {\n        case FIELD_TYPE_STRING:\n            return (\n                <TextMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                />\n            );\n\n        case FIELD_TYPE_FLOAT:\n            return (\n                <FloatMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    error={error}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    type={type}\n                />\n            );\n\n        case FIELD_TYPE_INTEGER:\n            return (\n                <IntegerMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    error={error}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    type={type}\n                />\n            );\n\n        case FIELD_TYPE_ENUM:\n            return (\n                <EnumMetadataField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    options={options}\n                />\n            );\n\n        case FIELD_TYPE_MULTISELECT:\n            return (\n                <MultiSelectMetadataField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    options={options}\n                />\n            );\n\n        case FIELD_TYPE_DATE:\n            return (\n                <DateMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                />\n            );\n\n        default:\n            return (\n                <InlineError title={type}>\n                    <FormattedMessage {...messages.invalidMetadataFieldType} />\n                </InlineError>\n            );\n    }\n};\n\nexport default MetadataField;\n"]},"metadata":{},"sourceType":"module"}