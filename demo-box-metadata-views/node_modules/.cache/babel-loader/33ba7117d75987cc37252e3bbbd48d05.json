{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhabib/Documents/GitHub/box-elements-samples/demo-box-metadata-views/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * \n * @file Base class with utility methods for API calls\n * @author Box\n */\nimport noop from 'lodash/noop';\nimport Xhr from '../utils/Xhr';\nimport Cache from '../utils/Cache';\nimport UploadsReachability from './uploads/UploadsReachability';\nimport { getTypedFileId } from '../utils/file';\nimport { getBadItemError, getBadPermissionsError } from '../utils/error';\nimport { DEFAULT_HOSTNAME_API, DEFAULT_HOSTNAME_UPLOAD, HTTP_GET, HTTP_POST, HTTP_PUT, HTTP_DELETE } from '../constants';\nvar Base = /*#__PURE__*/\nfunction () {\n  /**\n   * @property {Cache}\n   */\n\n  /**\n   * @property {boolean}\n   */\n\n  /**\n   * @property {Xhr}\n   */\n\n  /**\n   * @property {string}\n   */\n\n  /**\n   * @property {string}\n   */\n\n  /**\n   * @property {*}\n   */\n\n  /**\n   * @property {Function}\n   */\n\n  /**\n   * @property {Function}\n   */\n\n  /**\n   * @property {string}\n   */\n\n  /**\n   * @property {Function}\n   */\n\n  /**\n   * @property {Function}\n   */\n\n  /**\n   * @property {UploadsReachability}\n   */\n\n  /**\n   * [constructor]\n   *\n   * @param {Object} [options]\n   * @param {string} [options.token] - Auth token\n   * @param {string} [options.sharedLink] - Shared link\n   * @param {string} [options.sharedLinkPassword] - Shared link password\n   * @param {string} [options.apiHost] - Api host\n   * @param {string} [options.uploadHost] - Upload host name\n   * @return {Base} Base instance\n   */\n  function Base(options) {\n    var _this = this;\n    _classCallCheck(this, Base);\n    _defineProperty(this, \"successHandler\", function (data) {\n      if (!_this.isDestroyed() && typeof _this.successCallback === 'function') {\n        _this.successCallback(data);\n      }\n    });\n    _defineProperty(this, \"errorHandler\", function (error) {\n      if (!_this.isDestroyed() && typeof _this.errorCallback === 'function') {\n        var response = error.response;\n        if (response && response.data) {\n          _this.errorCallback(response.data, _this.errorCode);\n        } else {\n          _this.errorCallback(error, _this.errorCode);\n        }\n      }\n    });\n    this.cache = options.cache || new Cache();\n    this.apiHost = options.apiHost || DEFAULT_HOSTNAME_API;\n    this.uploadHost = options.uploadHost || DEFAULT_HOSTNAME_UPLOAD; // @TODO: avoid keeping another copy of data in this.options\n\n    this.options = _objectSpread({}, options, {\n      apiHost: this.apiHost,\n      uploadHost: this.uploadHost,\n      cache: this.cache\n    });\n    this.xhr = new Xhr(this.options);\n    this.destroyed = false;\n    this.consoleLog = !!options.consoleLog && !!window.console ? window.console.log || noop : noop;\n    this.consoleError = !!options.consoleError && !!window.console ? window.console.error || noop : noop;\n    this.uploadsReachability = new UploadsReachability();\n  }\n  /**\n   * [destructor]\n   *\n   * @return {void}\n   */\n\n  _createClass(Base, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.xhr.abort();\n      this.destroyed = true;\n    }\n    /**\n     * Asks the API if its destructor has been called\n     *\n     * @return {void}\n     */\n  }, {\n    key: \"isDestroyed\",\n    value: function isDestroyed() {\n      return this.destroyed;\n    }\n    /**\n     * Checks that our desired API call has sufficient permissions and an item ID\n     *\n     * @param {string} permissionToCheck - Permission to check\n     * @param {Object} permissions - Permissions object\n     * @param {string} id - Item id\n     * @return {void}\n     */\n  }, {\n    key: \"checkApiCallValidity\",\n    value: function checkApiCallValidity(permissionToCheck, permissions, id) {\n      if (!id || !permissions) {\n        throw getBadItemError();\n      }\n      var permission = permissions[permissionToCheck];\n      if (!permission) {\n        throw getBadPermissionsError();\n      }\n    }\n    /**\n     * Base URL for api\n     *\n     * @return {string} base url\n     */\n  }, {\n    key: \"getBaseApiUrl\",\n    value: function getBaseApiUrl() {\n      var suffix = this.apiHost.endsWith('/') ? '2.0' : '/2.0';\n      return \"\".concat(this.apiHost).concat(suffix);\n    }\n    /**\n     * Base URL for api uploads\n     *\n     * @return {string} base url\n     */\n  }, {\n    key: \"getBaseUploadUrl\",\n    value: function getBaseUploadUrl() {\n      var suffix = this.uploadHost.endsWith('/') ? 'api/2.0' : '/api/2.0';\n      return \"\".concat(this.uploadHost).concat(suffix);\n    }\n    /**\n     * Gets the cache instance\n     *\n     * @return {Cache} cache instance\n     */\n  }, {\n    key: \"getCache\",\n    value: function getCache() {\n      return this.cache;\n    }\n    /**\n     * Generic success handler\n     *\n     * @param {Object} data - The response data\n     */\n  }, {\n    key: \"getUrl\",\n    /**\n     * Gets the URL for the API, meant to be overridden\n     * @param {string} id - The item id\n     */\n\n    /* eslint-disable no-unused-vars */\n    value: function getUrl(id) {\n      /* eslint-enable no-unused-vars */\n      throw new Error('Implement me!');\n    }\n    /**\n     * Formats an API entry for use in components\n     * @param {string} entry - an API response entry\n     */\n\n    /* eslint-disable no-unused-vars */\n  }, {\n    key: \"format\",\n    value: function format(entry) {\n      /* eslint-enable no-unused-vars */\n      throw new Error('Implement me!');\n    }\n    /**\n     * Generic API GET\n     *\n     * @param {string} id - The file id\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} requestData - additional request data\n     * @param {string} url - API url\n     * @returns {Promise}\n     */\n  }, {\n    key: \"get\",\n    value: function get(_ref) {\n      var id = _ref.id,\n        successCallback = _ref.successCallback,\n        errorCallback = _ref.errorCallback,\n        requestData = _ref.requestData,\n        url = _ref.url;\n      var apiUrl = url || this.getUrl(id);\n      return this.makeRequest(HTTP_GET, id, apiUrl, successCallback, errorCallback, requestData);\n    }\n    /**\n     * Generic API POST\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url to post to\n     * @param {Object} data - The data to post\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     */\n  }, {\n    key: \"post\",\n    value: function post(_ref2) {\n      var id = _ref2.id,\n        url = _ref2.url,\n        data = _ref2.data,\n        successCallback = _ref2.successCallback,\n        errorCallback = _ref2.errorCallback;\n      return this.makeRequest(HTTP_POST, id, url, successCallback, errorCallback, data);\n    }\n    /**\n     * Generic API PUT\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url to put to\n     * @param {Object} data - The data to put\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     */\n  }, {\n    key: \"put\",\n    value: function put(_ref3) {\n      var id = _ref3.id,\n        url = _ref3.url,\n        data = _ref3.data,\n        successCallback = _ref3.successCallback,\n        errorCallback = _ref3.errorCallback;\n      return this.makeRequest(HTTP_PUT, id, url, successCallback, errorCallback, data);\n    }\n    /**\n     * Generic API DELETE\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url of the item to delete\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} data optional data to delete\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(_ref4) {\n      var id = _ref4.id,\n        url = _ref4.url,\n        data = _ref4.data,\n        successCallback = _ref4.successCallback,\n        errorCallback = _ref4.errorCallback;\n      return this.makeRequest(HTTP_DELETE, id, url, successCallback, errorCallback, data);\n    }\n    /**\n     * Generic API CRUD operations\n     *\n     * @param {string} method - which REST method to execute (GET, POST, PUT, DELETE)\n     * @param {string} id - The file id\n     * @param {string} url - The url of the item to operate on\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} requestData - Optional info to be added to the API call such as params or request body data\n     */\n  }, {\n    key: \"makeRequest\",\n    value: function () {\n      var _makeRequest = _asyncToGenerator( /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(method, id, url, successCallback, errorCallback) {\n        var requestData,\n          xhrMethod,\n          _ref5,\n          _data,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                requestData = _args.length > 5 && _args[5] !== undefined ? _args[5] : {};\n                if (!this.isDestroyed()) {\n                  _context.next = 3;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 3:\n                this.successCallback = successCallback;\n                this.errorCallback = errorCallback; // $FlowFixMe\n\n                xhrMethod = this.xhr[method.toLowerCase()].bind(this.xhr);\n                _context.prev = 6;\n                _context.next = 9;\n                return xhrMethod(_objectSpread({\n                  id: getTypedFileId(id),\n                  url: url\n                }, requestData));\n              case 9:\n                _ref5 = _context.sent;\n                _data = _ref5.data;\n                this.successHandler(_data);\n                _context.next = 17;\n                break;\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](6);\n                this.errorHandler(_context.t0);\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[6, 14]]);\n      }));\n      function makeRequest(_x, _x2, _x3, _x4, _x5) {\n        return _makeRequest.apply(this, arguments);\n      }\n      return makeRequest;\n    }()\n  }]);\n  return Base;\n}();\nexport default Base;","map":{"version":3,"sources":["../../src/api/Base.js"],"names":["noop","Xhr","Cache","UploadsReachability","getTypedFileId","getBadItemError","getBadPermissionsError","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_UPLOAD","HTTP_GET","HTTP_POST","HTTP_PUT","HTTP_DELETE","Base","options","cache","apiHost","uploadHost","xhr","destroyed","consoleLog","window","console","log","consoleError","error","uploadsReachability","abort","permissionToCheck","permissions","id","permission","suffix","endsWith","data","isDestroyed","successCallback","errorCallback","response","errorCode","Error","entry","requestData","url","apiUrl","getUrl","makeRequest","method","xhrMethod","toLowerCase","bind","successHandler","errorHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,eAAT,EAA0BC,sBAA1B,QAAwD,gBAAxD;AACA,SACIC,oBADJ,EAEIC,uBAFJ,EAGIC,QAHJ,EAIIC,SAJJ,EAKIC,QALJ,EAMIC,WANJ,QAOO,cAPP;IAWMC,I;;EACF;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;EAKA;;;;;;;;;;;EAWA,SAAA,IAAA,CAAYC,OAAZ,EAAiC;IAAA,IAAA,KAAA,GAAA,IAAA;IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAqFhB,UAACoB,IAAD,EAAqB;MAClC,IAAI,CAAC,KAAI,CAACC,WAAL,CAAA,CAAD,IAAuB,OAAO,KAAI,CAACC,eAAZ,KAAgC,UAA3D,EAAuE;QACnE,KAAI,CAACA,eAAL,CAAqBF,IAArB,CAAA;MACH;IACJ,CAzFgC,CAAA;IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAiGlB,UAACT,KAAD,EAAmC;MAC9C,IAAI,CAAC,KAAI,CAACU,WAAL,CAAA,CAAD,IAAuB,OAAO,KAAI,CAACE,aAAZ,KAA8B,UAAzD,EAAqE;QAAA,IACzDC,QADyD,GAC5Cb,KAD4C,CACzDa,QADyD;QAGjE,IAAIA,QAAQ,IAAIA,QAAQ,CAACJ,IAAzB,EAA+B;UAC3B,KAAI,CAACG,aAAL,CAAmBC,QAAQ,CAACJ,IAA5B,EAAkC,KAAI,CAACK,SAAvC,CAAA;QACH,CAFD,MAEO;UACH,KAAI,CAACF,aAAL,CAAmBZ,KAAnB,EAA0B,KAAI,CAACc,SAA/B,CAAA;QACH;MACJ;IACJ,CA3GgC,CAAA;IAC7B,IAAA,CAAKxB,KAAL,GAAaD,OAAO,CAACC,KAARD,IAAiB,IAAIZ,KAAJ,CAAA,CAA9B;IACA,IAAA,CAAKc,OAAL,GAAeF,OAAO,CAACE,OAARF,IAAmBP,oBAAlC;IACA,IAAA,CAAKU,UAAL,GAAkBH,OAAO,CAACG,UAARH,IAAsBN,uBAAxC,CAH6B,CAI7B;;IACA,IAAA,CAAKM,OAAL,GAAA,aAAA,CAAA,CAAA,CAAA,EAAoBA,OAApB,EAAA;MAA6BE,OAAO,EAAE,IAAA,CAAKA,OAA3C;MAAoDC,UAAU,EAAE,IAAA,CAAKA,UAArE;MAAiFF,KAAK,EAAE,IAAA,CAAKA;IAA7F,CAAA,CAAA;IACA,IAAA,CAAKG,GAAL,GAAW,IAAIjB,GAAJ,CAAQ,IAAA,CAAKa,OAAb,CAAX;IACA,IAAA,CAAKK,SAAL,GAAiB,KAAjB;IACA,IAAA,CAAKC,UAAL,GAAkB,CAAC,CAACN,OAAO,CAACM,UAAV,IAAwB,CAAC,CAACC,MAAM,CAACC,OAAjC,GAA2CD,MAAM,CAACC,OAAPD,CAAeE,GAAfF,IAAsBrB,IAAjE,GAAwEA,IAA1F;IACA,IAAA,CAAKwB,YAAL,GAAoB,CAAC,CAACV,OAAO,CAACU,YAAV,IAA0B,CAAC,CAACH,MAAM,CAACC,OAAnC,GAA6CD,MAAM,CAACC,OAAPD,CAAeI,KAAfJ,IAAwBrB,IAArE,GAA4EA,IAAhG;IACA,IAAA,CAAK0B,mBAAL,GAA2B,IAAIvB,mBAAJ,CAAA,CAA3B;EACH;EAED;;;;;;;;8BAKgB;MACZ,IAAA,CAAKe,GAAL,CAASS,KAAT,CAAA,CAAA;MACA,IAAA,CAAKR,SAAL,GAAiB,IAAjB;IACH;IAED;;;;;;;kCAKuB;MACnB,OAAO,IAAA,CAAKA,SAAZ;IACH;IAED;;;;;;;;;;yCAQqBS,iB,EAA2BC,W,EAAsBC,E,EAAmB;MACrF,IAAI,CAACA,EAAD,IAAO,CAACD,WAAZ,EAAyB;QACrB,MAAMxB,eAAe,CAAA,CAArB;MACH;MAED,IAAM0B,UAAU,GAAGF,WAAW,CAACD,iBAAD,CAA9B;MACA,IAAI,CAACG,UAAL,EAAiB;QACb,MAAMzB,sBAAsB,CAAA,CAA5B;MACH;IACJ;IAED;;;;;;;oCAKwB;MACpB,IAAM0B,MAAc,GAAG,IAAA,CAAKhB,OAAL,CAAaiB,QAAb,CAAsB,GAAtB,CAAA,GAA6B,KAA7B,GAAqC,MAA5D;MACA,OAAA,EAAA,CAAA,MAAA,CAAU,IAAA,CAAKjB,OAAf,CAAA,CAAA,MAAA,CAAyBgB,MAAzB,CAAA;IACH;IAED;;;;;;;uCAK2B;MACvB,IAAMA,MAAc,GAAG,IAAA,CAAKf,UAAL,CAAgBgB,QAAhB,CAAyB,GAAzB,CAAA,GAAgC,SAAhC,GAA4C,UAAnE;MACA,OAAA,EAAA,CAAA,MAAA,CAAU,IAAA,CAAKhB,UAAf,CAAA,CAAA,MAAA,CAA4Be,MAA5B,CAAA;IACH;IAED;;;;;;;+BAKqB;MACjB,OAAO,IAAA,CAAKjB,KAAZ;IACH;IAED;;;;;;;IA6BA;;;;;IAIA;2BACOe,E,EAAY;MACf;MACA,MAAM,IAAIU,KAAJ,CAAU,eAAV,CAAN;IACH;IAED;;;;;IAIA;;;2BACOC,K,EAAe;MAClB;MACA,MAAM,IAAID,KAAJ,CAAU,eAAV,CAAN;IACH;IAED;;;;;;;;;;;;8BAsBiB;MAAA,IAXbV,EAWa,GAAA,IAAA,CAXbA,EAWa;QAVbM,eAUa,GAAA,IAAA,CAVbA,eAUa;QATbC,aASa,GAAA,IAAA,CATbA,aASa;QARbK,WAQa,GAAA,IAAA,CARbA,WAQa;QAPbC,GAOa,GAAA,IAAA,CAPbA,GAOa;MACb,IAAMC,MAAM,GAAGD,GAAG,IAAI,IAAA,CAAKE,MAAL,CAAYf,EAAZ,CAAtB;MACA,OAAO,IAAA,CAAKgB,WAAL,CAAiBrC,QAAjB,EAA2BqB,EAA3B,EAA+Bc,MAA/B,EAAuCR,eAAvC,EAAwDC,aAAxD,EAAuEK,WAAvE,CAAP;IACH;IAED;;;;;;;;;;;gCAqBiB;MAAA,IAXbZ,EAWa,GAAA,KAAA,CAXbA,EAWa;QAVba,GAUa,GAAA,KAAA,CAVbA,GAUa;QATbT,IASa,GAAA,KAAA,CATbA,IASa;QARbE,eAQa,GAAA,KAAA,CARbA,eAQa;QAPbC,aAOa,GAAA,KAAA,CAPbA,aAOa;MACb,OAAO,IAAA,CAAKS,WAAL,CAAiBpC,SAAjB,EAA4BoB,EAA5B,EAAgCa,GAAhC,EAAqCP,eAArC,EAAsDC,aAAtD,EAAqEH,IAArE,CAAP;IACH;IAED;;;;;;;;;;;+BAqBiB;MAAA,IAXbJ,EAWa,GAAA,KAAA,CAXbA,EAWa;QAVba,GAUa,GAAA,KAAA,CAVbA,GAUa;QATbT,IASa,GAAA,KAAA,CATbA,IASa;QARbE,eAQa,GAAA,KAAA,CARbA,eAQa;QAPbC,aAOa,GAAA,KAAA,CAPbA,aAOa;MACb,OAAO,IAAA,CAAKS,WAAL,CAAiBnC,QAAjB,EAA2BmB,EAA3B,EAA+Ba,GAA/B,EAAoCP,eAApC,EAAqDC,aAArD,EAAoEH,IAApE,CAAP;IACH;IAED;;;;;;;;;;;mCAqBiB;MAAA,IAXbJ,EAWa,GAAA,KAAA,CAXbA,EAWa;QAVba,GAUa,GAAA,KAAA,CAVbA,GAUa;QATbT,IASa,GAAA,KAAA,CATbA,IASa;QARbE,eAQa,GAAA,KAAA,CARbA,eAQa;QAPbC,aAOa,GAAA,KAAA,CAPbA,aAOa;MACb,OAAO,IAAA,CAAKS,WAAL,CAAiBlC,WAAjB,EAA8BkB,EAA9B,EAAkCa,GAAlC,EAAuCP,eAAvC,EAAwDC,aAAxD,EAAuEH,IAAvE,CAAP;IACH;IAED;;;;;;;;;;;;;;gDAWIa,M,EACAjB,E,EACAa,G,EACAP,e,EACAC,a;;;;;;;;;;gBACAK,W,2DAAsB,CAAA,C;qBAElB,IAAA,CAAKP,WAAL,CAAA,C;;;;;;gBAIJ,IAAA,CAAKC,eAAL,GAAuBA,eAAvB;gBACA,IAAA,CAAKC,aAAL,GAAqBA,aAArB,C,CAEA;;gBACMW,S,GAAsB,IAAA,CAAK9B,GAAL,CAAS6B,MAAM,CAACE,WAAPF,CAAAA,CAAT,CAAA,CAA+BG,IAA/B,CAAoC,IAAA,CAAKhC,GAAzC,C;;;uBAED8B,SAAS,CAAA,aAAA,CAAA;kBAC5BlB,EAAE,EAAE1B,cAAc,CAAC0B,EAAD,CADU;kBAE5Ba,GAAG,EAAHA;gBAF4B,CAAA,EAGzBD,WAHyB,CAAA,C;;;gBAAxBR,K,SAAAA,I;gBAKR,IAAA,CAAKiB,cAAL,CAAoBjB,KAApB,CAAA;;;;;;gBAEA,IAAA,CAAKkB,YAAL,CAAA,QAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;AAKZ,eAAevC,IAAf","sourcesContent":["/**\n * @flow\n * @file Base class with utility methods for API calls\n * @author Box\n */\n\nimport noop from 'lodash/noop';\nimport Xhr from '../utils/Xhr';\nimport Cache from '../utils/Cache';\nimport UploadsReachability from './uploads/UploadsReachability';\nimport { getTypedFileId } from '../utils/file';\nimport { getBadItemError, getBadPermissionsError } from '../utils/error';\nimport {\n    DEFAULT_HOSTNAME_API,\n    DEFAULT_HOSTNAME_UPLOAD,\n    HTTP_GET,\n    HTTP_POST,\n    HTTP_PUT,\n    HTTP_DELETE,\n} from '../constants';\nimport type { ElementsErrorCallback, APIOptions } from '../common/types/api';\nimport type APICache from '../utils/Cache';\n\nclass Base {\n    /**\n     * @property {Cache}\n     */\n    cache: APICache;\n\n    /**\n     * @property {boolean}\n     */\n    destroyed: boolean;\n\n    /**\n     * @property {Xhr}\n     */\n    xhr: Xhr;\n\n    /**\n     * @property {string}\n     */\n    apiHost: string;\n\n    /**\n     * @property {string}\n     */\n    uploadHost: string;\n\n    /**\n     * @property {*}\n     */\n    options: APIOptions;\n\n    /**\n     * @property {Function}\n     */\n    consoleLog: Function;\n\n    /**\n     * @property {Function}\n     */\n    consoleError: Function;\n\n    /**\n     * @property {string}\n     */\n    errorCode: string;\n\n    /**\n     * @property {Function}\n     */\n    successCallback: (data?: Object) => void;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * @property {UploadsReachability}\n     */\n    uploadsReachability: UploadsReachability;\n\n    /**\n     * [constructor]\n     *\n     * @param {Object} [options]\n     * @param {string} [options.token] - Auth token\n     * @param {string} [options.sharedLink] - Shared link\n     * @param {string} [options.sharedLinkPassword] - Shared link password\n     * @param {string} [options.apiHost] - Api host\n     * @param {string} [options.uploadHost] - Upload host name\n     * @return {Base} Base instance\n     */\n    constructor(options: APIOptions) {\n        this.cache = options.cache || new Cache();\n        this.apiHost = options.apiHost || DEFAULT_HOSTNAME_API;\n        this.uploadHost = options.uploadHost || DEFAULT_HOSTNAME_UPLOAD;\n        // @TODO: avoid keeping another copy of data in this.options\n        this.options = { ...options, apiHost: this.apiHost, uploadHost: this.uploadHost, cache: this.cache };\n        this.xhr = new Xhr(this.options);\n        this.destroyed = false;\n        this.consoleLog = !!options.consoleLog && !!window.console ? window.console.log || noop : noop;\n        this.consoleError = !!options.consoleError && !!window.console ? window.console.error || noop : noop;\n        this.uploadsReachability = new UploadsReachability();\n    }\n\n    /**\n     * [destructor]\n     *\n     * @return {void}\n     */\n    destroy(): void {\n        this.xhr.abort();\n        this.destroyed = true;\n    }\n\n    /**\n     * Asks the API if its destructor has been called\n     *\n     * @return {void}\n     */\n    isDestroyed(): boolean {\n        return this.destroyed;\n    }\n\n    /**\n     * Checks that our desired API call has sufficient permissions and an item ID\n     *\n     * @param {string} permissionToCheck - Permission to check\n     * @param {Object} permissions - Permissions object\n     * @param {string} id - Item id\n     * @return {void}\n     */\n    checkApiCallValidity(permissionToCheck: string, permissions?: Object, id?: string): void {\n        if (!id || !permissions) {\n            throw getBadItemError();\n        }\n\n        const permission = permissions[permissionToCheck];\n        if (!permission) {\n            throw getBadPermissionsError();\n        }\n    }\n\n    /**\n     * Base URL for api\n     *\n     * @return {string} base url\n     */\n    getBaseApiUrl(): string {\n        const suffix: string = this.apiHost.endsWith('/') ? '2.0' : '/2.0';\n        return `${this.apiHost}${suffix}`;\n    }\n\n    /**\n     * Base URL for api uploads\n     *\n     * @return {string} base url\n     */\n    getBaseUploadUrl(): string {\n        const suffix: string = this.uploadHost.endsWith('/') ? 'api/2.0' : '/api/2.0';\n        return `${this.uploadHost}${suffix}`;\n    }\n\n    /**\n     * Gets the cache instance\n     *\n     * @return {Cache} cache instance\n     */\n    getCache(): APICache {\n        return this.cache;\n    }\n\n    /**\n     * Generic success handler\n     *\n     * @param {Object} data - The response data\n     */\n    successHandler = (data: any): void => {\n        if (!this.isDestroyed() && typeof this.successCallback === 'function') {\n            this.successCallback(data);\n        }\n    };\n\n    /**\n     * Generic error handler\n     *\n     * @param {Object} data - The response data\n     * @param {Function} errorCallback the error callback\n     */\n    errorHandler = (error: $AxiosError<any>): void => {\n        if (!this.isDestroyed() && typeof this.errorCallback === 'function') {\n            const { response } = error;\n\n            if (response && response.data) {\n                this.errorCallback(response.data, this.errorCode);\n            } else {\n                this.errorCallback(error, this.errorCode);\n            }\n        }\n    };\n\n    /**\n     * Gets the URL for the API, meant to be overridden\n     * @param {string} id - The item id\n     */\n    /* eslint-disable no-unused-vars */\n    getUrl(id: string) {\n        /* eslint-enable no-unused-vars */\n        throw new Error('Implement me!');\n    }\n\n    /**\n     * Formats an API entry for use in components\n     * @param {string} entry - an API response entry\n     */\n    /* eslint-disable no-unused-vars */\n    format(entry: Object) {\n        /* eslint-enable no-unused-vars */\n        throw new Error('Implement me!');\n    }\n\n    /**\n     * Generic API GET\n     *\n     * @param {string} id - The file id\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} requestData - additional request data\n     * @param {string} url - API url\n     * @returns {Promise}\n     */\n    get({\n        id,\n        successCallback,\n        errorCallback,\n        requestData, // Note: this is inconsistent, other methods use `data`\n        url,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        requestData?: Object,\n        successCallback: Function,\n        url?: string,\n    }): Promise<any> {\n        const apiUrl = url || this.getUrl(id);\n        return this.makeRequest(HTTP_GET, id, apiUrl, successCallback, errorCallback, requestData);\n    }\n\n    /**\n     * Generic API POST\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url to post to\n     * @param {Object} data - The data to post\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     */\n    post({\n        id,\n        url,\n        data,\n        successCallback,\n        errorCallback,\n    }: {\n        data: Object,\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        successCallback: Function,\n        url: string,\n    }): Promise<any> {\n        return this.makeRequest(HTTP_POST, id, url, successCallback, errorCallback, data);\n    }\n\n    /**\n     * Generic API PUT\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url to put to\n     * @param {Object} data - The data to put\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     */\n    put({\n        id,\n        url,\n        data,\n        successCallback,\n        errorCallback,\n    }: {\n        data: Object,\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        successCallback: Function,\n        url: string,\n    }): Promise<any> {\n        return this.makeRequest(HTTP_PUT, id, url, successCallback, errorCallback, data);\n    }\n\n    /**\n     * Generic API DELETE\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url of the item to delete\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} data optional data to delete\n     */\n    delete({\n        id,\n        url,\n        data,\n        successCallback,\n        errorCallback,\n    }: {\n        data?: Object,\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        successCallback: Function,\n        url: string,\n    }): Promise<any> {\n        return this.makeRequest(HTTP_DELETE, id, url, successCallback, errorCallback, data);\n    }\n\n    /**\n     * Generic API CRUD operations\n     *\n     * @param {string} method - which REST method to execute (GET, POST, PUT, DELETE)\n     * @param {string} id - The file id\n     * @param {string} url - The url of the item to operate on\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} requestData - Optional info to be added to the API call such as params or request body data\n     */\n    async makeRequest(\n        method: string,\n        id: string,\n        url: string,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        requestData: Object = {},\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        // $FlowFixMe\n        const xhrMethod: Function = this.xhr[method.toLowerCase()].bind(this.xhr);\n        try {\n            const { data } = await xhrMethod({\n                id: getTypedFileId(id),\n                url,\n                ...requestData,\n            });\n            this.successHandler(data);\n        } catch (error) {\n            this.errorHandler(error);\n        }\n    }\n}\n\nexport default Base;\n"]},"metadata":{},"sourceType":"module"}