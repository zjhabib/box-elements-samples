{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Toggle from '../../components/toggle';\nimport { RadioButton, RadioGroup } from '../../components/radio';\nimport Link from '../../components/link/Link';\nimport IconAlertDefault from '../../icons/general/IconAlertDefault';\nimport messages from './messages';\nimport './CascadePolicy.scss';\nvar COMMUNITY_LINK = 'https://community.box.com/t5/Organizing-and-Tracking-Content/Metadata/ta-p/30765';\nvar CascadePolicy = function CascadePolicy(_ref) {\n  var canEdit = _ref.canEdit,\n    isCascadingEnabled = _ref.isCascadingEnabled,\n    isCascadingOverwritten = _ref.isCascadingOverwritten,\n    isCustomMetadata = _ref.isCustomMetadata,\n    onCascadeToggle = _ref.onCascadeToggle,\n    onCascadeModeChange = _ref.onCascadeModeChange,\n    shouldShowCascadeOptions = _ref.shouldShowCascadeOptions;\n  var readOnlyState = isCascadingEnabled ? React.createElement(\"div\", {\n    className: \"metadata-cascade-notice\"\n  }, React.createElement(FormattedMessage, messages.metadataCascadePolicyEnabledInfo)) : null;\n  return canEdit ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"metadata-cascade-editor\"\n  }, React.createElement(\"div\", {\n    className: \"metadata-cascade-enable\"\n  }, React.createElement(\"div\", null, React.createElement(FormattedMessage, _extends({\n    tagName: \"strong\"\n  }, messages.enableCascadePolicy)), !isCustomMetadata && React.createElement(Toggle, {\n    className: \"metadata-cascade-toggle \".concat(isCascadingEnabled ? 'cascade-on' : 'cascade-off'),\n    isOn: isCascadingEnabled,\n    label: \"\",\n    onChange: function onChange(e) {\n      return onCascadeToggle(e.target.checked);\n    }\n  })), !isCustomMetadata ? React.createElement(\"div\", {\n    className: \"cascade-policy-text\"\n  }, React.createElement(FormattedMessage, messages.applyCascadePolicyText), \"\\xA0\", React.createElement(Link, {\n    className: \"cascade-policy-learnmore-link\",\n    href: COMMUNITY_LINK,\n    target: \"_blank\"\n  }, React.createElement(FormattedMessage, messages.cascadePolicyLearnMore))) : React.createElement(\"div\", null, React.createElement(FormattedMessage, messages.cannotApplyCascadePolicyText)))), shouldShowCascadeOptions && React.createElement(\"div\", {\n    className: \"metadata-cascade-editor\"\n  }, React.createElement(\"div\", {\n    className: \"metadata-cascading-mode\"\n  }, React.createElement(FormattedMessage, messages.cascadePolicyModeQuestion), React.createElement(\"div\", {\n    className: \"metadata-operation-not-immediate\"\n  }, React.createElement(IconAlertDefault, null), React.createElement(\"span\", null, React.createElement(FormattedMessage, messages.operationNotImmediate))), React.createElement(RadioGroup, {\n    className: \"metadata-cascading-options\",\n    onChange: function onChange(e) {\n      return onCascadeModeChange(e.target.value === 'overwrite');\n    },\n    value: isCascadingOverwritten ? 'overwrite' : 'skip'\n  }, React.createElement(RadioButton, {\n    label: React.createElement(FormattedMessage, messages.cascadePolicySkipMode),\n    value: \"skip\"\n  }), React.createElement(RadioButton, {\n    label: React.createElement(FormattedMessage, messages.cascadePolicyOverwriteMode),\n    value: \"overwrite\"\n  }))))) : readOnlyState;\n};\nexport default CascadePolicy;","map":{"version":3,"sources":["../../../src/features/metadata-instance-editor/CascadePolicy.js"],"names":["React","FormattedMessage","Toggle","RadioButton","RadioGroup","Link","IconAlertDefault","messages","COMMUNITY_LINK","CascadePolicy","canEdit","isCascadingEnabled","isCascadingOverwritten","isCustomMetadata","onCascadeToggle","onCascadeModeChange","shouldShowCascadeOptions","readOnlyState","metadataCascadePolicyEnabledInfo","enableCascadePolicy","e","target","checked","applyCascadePolicyText","cascadePolicyLearnMore","cannotApplyCascadePolicyText","cascadePolicyModeQuestion","operationNotImmediate","value","cascadePolicySkipMode","cascadePolicyOverwriteMode"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Toggle from '../../components/toggle';\nimport { RadioButton, RadioGroup } from '../../components/radio';\nimport Link from '../../components/link/Link';\nimport IconAlertDefault from '../../icons/general/IconAlertDefault';\nimport messages from './messages';\nimport './CascadePolicy.scss';\n\nconst COMMUNITY_LINK = 'https://community.box.com/t5/Organizing-and-Tracking-Content/Metadata/ta-p/30765';\n\ntype Props = {\n    canEdit: boolean,\n    isCascadingEnabled: boolean,\n    isCascadingOverwritten: boolean,\n    isCustomMetadata: boolean,\n    onCascadeModeChange: (value: boolean) => void,\n    onCascadeToggle: (value: boolean) => void,\n    shouldShowCascadeOptions: boolean,\n};\n\nconst CascadePolicy = ({\n    canEdit,\n    isCascadingEnabled,\n    isCascadingOverwritten,\n    isCustomMetadata,\n    onCascadeToggle,\n    onCascadeModeChange,\n    shouldShowCascadeOptions,\n}: Props) => {\n    const readOnlyState = isCascadingEnabled ? (\n        <div className=\"metadata-cascade-notice\">\n            <FormattedMessage {...messages.metadataCascadePolicyEnabledInfo} />\n        </div>\n    ) : null;\n\n    return canEdit ? (\n        <>\n            <div className=\"metadata-cascade-editor\">\n                <div className=\"metadata-cascade-enable\">\n                    <div>\n                        <FormattedMessage tagName=\"strong\" {...messages.enableCascadePolicy} />\n                        {!isCustomMetadata && (\n                            <Toggle\n                                className={`metadata-cascade-toggle ${\n                                    isCascadingEnabled ? 'cascade-on' : 'cascade-off'\n                                }`}\n                                isOn={isCascadingEnabled}\n                                label=\"\"\n                                onChange={e => onCascadeToggle(e.target.checked)}\n                            />\n                        )}\n                    </div>\n                    {!isCustomMetadata ? (\n                        <div className=\"cascade-policy-text\">\n                            <FormattedMessage {...messages.applyCascadePolicyText} />\n                            &nbsp;\n                            <Link className=\"cascade-policy-learnmore-link\" href={COMMUNITY_LINK} target=\"_blank\">\n                                <FormattedMessage {...messages.cascadePolicyLearnMore} />\n                            </Link>\n                        </div>\n                    ) : (\n                        <div>\n                            <FormattedMessage {...messages.cannotApplyCascadePolicyText} />\n                        </div>\n                    )}\n                </div>\n            </div>\n            {shouldShowCascadeOptions && (\n                <div className=\"metadata-cascade-editor\">\n                    <div className=\"metadata-cascading-mode\">\n                        <FormattedMessage {...messages.cascadePolicyModeQuestion} />\n\n                        <div className=\"metadata-operation-not-immediate\">\n                            <IconAlertDefault />\n                            <span>\n                                <FormattedMessage {...messages.operationNotImmediate} />\n                            </span>\n                        </div>\n                        <RadioGroup\n                            className=\"metadata-cascading-options\"\n                            onChange={e => onCascadeModeChange(e.target.value === 'overwrite')}\n                            value={isCascadingOverwritten ? 'overwrite' : 'skip'}\n                        >\n                            <RadioButton\n                                label={<FormattedMessage {...messages.cascadePolicySkipMode} />}\n                                value=\"skip\"\n                            />\n                            <RadioButton\n                                label={<FormattedMessage {...messages.cascadePolicyOverwriteMode} />}\n                                value=\"overwrite\"\n                            />\n                        </RadioGroup>\n                    </div>\n                </div>\n            )}\n        </>\n    ) : (\n        readOnlyState\n    );\n};\n\nexport default CascadePolicy;\n"]},"metadata":{},"sourceType":"module"}