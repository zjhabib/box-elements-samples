{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Modal from '../../components/modal/Modal';\nimport TaskForm from './activity-feed/task-form';\nimport messages from './messages';\nimport { TASK_EDIT_MODE_CREATE, TASK_TYPE_APPROVAL, TASK_TYPE_GENERAL } from '../../constants';\nfunction getMessageForModalTitle(taskType, mode) {\n  switch (taskType) {\n    case TASK_TYPE_GENERAL:\n      return mode === TASK_EDIT_MODE_CREATE ? messages.tasksCreateGeneralTaskFormTitle : messages.tasksEditGeneralTaskFormTitle;\n    case TASK_TYPE_APPROVAL:\n    default:\n      return mode === TASK_EDIT_MODE_CREATE ? messages.tasksCreateApprovalTaskFormTitle : messages.tasksEditApprovalTaskFormTitle;\n  }\n}\nvar focusTargetSelector = '.task-modal textarea, .task-modal input';\nvar TaskModal = function TaskModal(props) {\n  var _props$editMode = props.editMode,\n    editMode = _props$editMode === void 0 ? TASK_EDIT_MODE_CREATE : _props$editMode,\n    error = props.error,\n    onSubmitError = props.onSubmitError,\n    onSubmitSuccess = props.onSubmitSuccess,\n    onModalClose = props.onModalClose,\n    taskType = props.taskType,\n    isTaskFormOpen = props.isTaskFormOpen,\n    taskFormProps = props.taskFormProps; // Note: Modal throws an error if this fails to find an element!\n\n  return React.createElement(Modal, {\n    className: \"be-modal task-modal\",\n    \"data-testid\": \"create-task-modal\",\n    focusElementSelector: focusTargetSelector,\n    isOpen: isTaskFormOpen,\n    onRequestClose: onModalClose,\n    title: React.createElement(FormattedMessage, getMessageForModalTitle(taskType, editMode))\n  }, React.createElement(\"div\", {\n    className: \"be\"\n  }, React.createElement(TaskForm, _extends({\n    editMode: editMode // $FlowFixMe\n    ,\n\n    error: error,\n    onCancel: onModalClose,\n    onSubmitError: onSubmitError,\n    onSubmitSuccess: onSubmitSuccess,\n    taskType: taskType\n  }, taskFormProps))));\n};\nexport default TaskModal;","map":{"version":3,"sources":["../../../src/elements/content-sidebar/TaskModal.js"],"names":["React","FormattedMessage","Modal","TaskForm","messages","TASK_EDIT_MODE_CREATE","TASK_TYPE_APPROVAL","TASK_TYPE_GENERAL","getMessageForModalTitle","taskType","mode","tasksCreateGeneralTaskFormTitle","tasksEditGeneralTaskFormTitle","tasksCreateApprovalTaskFormTitle","tasksEditApprovalTaskFormTitle","focusTargetSelector","TaskModal","props","editMode","error","onSubmitError","onSubmitSuccess","onModalClose","isTaskFormOpen","taskFormProps"],"mappings":";;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,EAAoDC,iBAApD,QAA6E,iBAA7E;AAgBA,SAASC,uBAAT,CAAiCC,QAAjC,EAAqDC,IAArD,EAA4F;EACxF,QAAQD,QAAR;IACI,KAAKF,iBAAL;MACI,OAAOG,IAAI,KAAKL,qBAATK,GACDN,QAAQ,CAACO,+BADRD,GAEDN,QAAQ,CAACQ,6BAFf;IAGJ,KAAKN,kBAAL;IACA;MACI,OAAOI,IAAI,KAAKL,qBAATK,GACDN,QAAQ,CAACS,gCADRH,GAEDN,QAAQ,CAACU,8BAFf;EAPR;AAWH;AAED,IAAMC,mBAA2B,GAAG,yCAApC;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAA2B;EAAA,IAAA,eAAA,GAUrCA,KAVqC,CAErCC,QAFqC;IAErCA,QAFqC,GAAA,eAAA,KAAA,KAAA,CAAA,GAE1Bb,qBAF0B,GAAA,eAAA;IAGrCc,KAHqC,GAUrCF,KAVqC,CAGrCE,KAHqC;IAIrCC,aAJqC,GAUrCH,KAVqC,CAIrCG,aAJqC;IAKrCC,eALqC,GAUrCJ,KAVqC,CAKrCI,eALqC;IAMrCC,YANqC,GAUrCL,KAVqC,CAMrCK,YANqC;IAOrCb,QAPqC,GAUrCQ,KAVqC,CAOrCR,QAPqC;IAQrCc,cARqC,GAUrCN,KAVqC,CAQrCM,cARqC;IASrCC,aATqC,GAUrCP,KAVqC,CASrCO,aATqC,CAAA,CAWzC;;EACA,OACI,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA;IACI,SAAS,EAAC,qBADd;IAEI,aAAA,EAAY,mBAFhB;IAGI,oBAAoB,EAAET,mBAH1B;IAII,MAAM,EAAEQ,cAJZ;IAKI,cAAc,EAAED,YALpB;IAMI,KAAK,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBd,uBAAuB,CAACC,QAAD,EAAWS,QAAX,CAA7C;EANX,CAAA,EAQI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAC;EAAf,CAAA,EACI,KAAA,CAAA,aAAA,CAAC,QAAD,EAAA,QAAA,CAAA;IACI,QAAQ,EAAEA,QADd,CAEI;IAAA;;IACA,KAAK,EAAEC,KAHX;IAII,QAAQ,EAAEG,YAJd;IAKI,aAAa,EAAEF,aALnB;IAMI,eAAe,EAAEC,eANrB;IAOI,QAAQ,EAAEZ;EAPd,CAAA,EAQQe,aARR,CAAA,CADJ,CARJ,CADJ;AAuBH,CAnCD;AAqCA,eAAeR,SAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { MessageDescriptor } from 'react-intl';\nimport Modal from '../../components/modal/Modal';\nimport TaskForm from './activity-feed/task-form';\nimport messages from './messages';\nimport { TASK_EDIT_MODE_CREATE, TASK_TYPE_APPROVAL, TASK_TYPE_GENERAL } from '../../constants';\nimport type { TaskFormProps } from './activity-feed/task-form/TaskForm';\nimport type { TaskType, TaskEditMode } from '../../common/types/tasks';\nimport type { ElementsXhrError } from '../../common/types/api';\n\ntype TaskModalProps = {\n    editMode?: TaskEditMode,\n    error: ?ElementsXhrError,\n    isTaskFormOpen: boolean,\n    onModalClose: () => void,\n    onSubmitError: (e: ElementsXhrError) => void,\n    onSubmitSuccess: () => any,\n    taskFormProps: TaskFormProps,\n    taskType: TaskType,\n};\n\nfunction getMessageForModalTitle(taskType: TaskType, mode: TaskEditMode): MessageDescriptor {\n    switch (taskType) {\n        case TASK_TYPE_GENERAL:\n            return mode === TASK_EDIT_MODE_CREATE\n                ? messages.tasksCreateGeneralTaskFormTitle\n                : messages.tasksEditGeneralTaskFormTitle;\n        case TASK_TYPE_APPROVAL:\n        default:\n            return mode === TASK_EDIT_MODE_CREATE\n                ? messages.tasksCreateApprovalTaskFormTitle\n                : messages.tasksEditApprovalTaskFormTitle;\n    }\n}\n\nconst focusTargetSelector: string = '.task-modal textarea, .task-modal input';\n\nconst TaskModal = (props: TaskModalProps) => {\n    const {\n        editMode = TASK_EDIT_MODE_CREATE,\n        error,\n        onSubmitError,\n        onSubmitSuccess,\n        onModalClose,\n        taskType,\n        isTaskFormOpen,\n        taskFormProps,\n    } = props;\n    // Note: Modal throws an error if this fails to find an element!\n    return (\n        <Modal\n            className=\"be-modal task-modal\"\n            data-testid=\"create-task-modal\"\n            focusElementSelector={focusTargetSelector}\n            isOpen={isTaskFormOpen}\n            onRequestClose={onModalClose}\n            title={<FormattedMessage {...getMessageForModalTitle(taskType, editMode)} />}\n        >\n            <div className=\"be\">\n                <TaskForm\n                    editMode={editMode}\n                    // $FlowFixMe\n                    error={error}\n                    onCancel={onModalClose}\n                    onSubmitError={onSubmitError}\n                    onSubmitSuccess={onSubmitSuccess}\n                    taskType={taskType}\n                    {...taskFormProps}\n                />\n            </div>\n        </Modal>\n    );\n};\n\nexport default TaskModal;\n"]},"metadata":{},"sourceType":"module"}