{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport camelCase from 'lodash/camelCase';\nimport IconComplete from '../../../../icons/general/IconVerified';\nimport IconReject from '../../../../icons/general/IconRejected';\nimport Avatar from '../Avatar';\nimport { TASK_NEW_APPROVED, TASK_NEW_REJECTED, TASK_NEW_COMPLETED, TASK_NEW_NOT_STARTED } from '../../../../constants';\nimport messages from './messages';\nimport './AvatarGroupAvatar.scss';\nvar StatusIcon = function StatusIcon(_ref) {\n  var status = _ref.status,\n    rest = _objectWithoutProperties(_ref, [\"status\"]);\n  switch (status) {\n    case TASK_NEW_APPROVED:\n    case TASK_NEW_COMPLETED:\n      return React.createElement(IconComplete, rest);\n    case TASK_NEW_REJECTED:\n      return React.createElement(IconReject, rest);\n    case TASK_NEW_NOT_STARTED:\n    default:\n      return null;\n  }\n};\nvar AvatarGroupAvatar = React.memo(function (_ref2) {\n  var user = _ref2.user,\n    status = _ref2.status,\n    getAvatarUrl = _ref2.getAvatarUrl,\n    className = _ref2.className,\n    rest = _objectWithoutProperties(_ref2, [\"user\", \"status\", \"getAvatarUrl\", \"className\"]);\n  return React.createElement(\"div\", _extends({\n    className: classNames('bcs-AvatarGroupAvatar', className),\n    \"data-testid\": \"avatar-group-avatar-container\"\n  }, rest), React.createElement(Avatar, {\n    className: \"bcs-AvatarGroupAvatar-avatar\",\n    user: user,\n    getAvatarUrl: getAvatarUrl\n  }), React.createElement(StatusIcon, {\n    status: status,\n    className: \"bcs-AvatarGroupAvatar-statusIcon \".concat(camelCase(status)),\n    height: 12,\n    width: 12,\n    title: React.createElement(FormattedMessage, messages.taskAssignmentCompleted)\n  }));\n});\nexport default AvatarGroupAvatar;","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/AvatarGroupAvatar.js"],"names":["React","FormattedMessage","classNames","camelCase","IconComplete","IconReject","Avatar","TASK_NEW_APPROVED","TASK_NEW_REJECTED","TASK_NEW_COMPLETED","TASK_NEW_NOT_STARTED","messages","StatusIcon","status","rest","AvatarGroupAvatar","memo","user","getAvatarUrl","className","taskAssignmentCompleted"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,kBAA/C,EAAmEC,oBAAnE,QAA+F,uBAA/F;AACA,OAAOC,QAAP,MAAqB,YAArB;AAKA,OAAO,0BAAP;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAAuD;EAAA,IAApDC,MAAoD,GAAA,IAAA,CAApDA,MAAoD;IAAzCC,IAAyC,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,QAAA,CAAA,CAAA;EACtE,QAAQD,MAAR;IACI,KAAKN,iBAAL;IACA,KAAKE,kBAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,YAAD,EAAkBK,IAAlB,CAAP;IACJ,KAAKN,iBAAL;MACI,OAAO,KAAA,CAAA,aAAA,CAAC,UAAD,EAAgBM,IAAhB,CAAP;IACJ,KAAKJ,oBAAL;IACA;MACI,OAAO,IAAP;EARR;AAUH,CAXD;AAaA,IAAMK,iBAAiB,GAAG,KAAK,CAACC,IAAN,CAAkB,UAAA,KAAA,EAAA;EAAA,IAAGC,IAAH,GAAA,KAAA,CAAGA,IAAH;IAASJ,MAAT,GAAA,KAAA,CAASA,MAAT;IAAiBK,YAAjB,GAAA,KAAA,CAAiBA,YAAjB;IAA+BC,SAA/B,GAAA,KAAA,CAA+BA,SAA/B;IAA6CL,IAA7C,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,cAAA,EAAA,WAAA,CAAA,CAAA;EAAA,OACxC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;IACI,SAAS,EAAEZ,UAAU,CAAC,uBAAD,EAA0BiB,SAA1B,CADzB;IAEI,aAAA,EAAY;EAFhB,CAAA,EAGQL,IAHR,CAAA,EAKI,KAAA,CAAA,aAAA,CAAC,MAAD,EAAA;IAAQ,SAAS,EAAC,8BAAlB;IAAiD,IAAI,EAAEG,IAAvD;IAA6D,YAAY,EAAEC;EAA3E,CAAA,CALJ,EAMI,KAAA,CAAA,aAAA,CAAC,UAAD,EAAA;IACI,MAAM,EAAEL,MADZ;IAEI,SAAS,EAAA,mCAAA,CAAA,MAAA,CAAsCV,SAAS,CAACU,MAAD,CAA/C,CAFb;IAGI,MAAM,EAAE,EAHZ;IAII,KAAK,EAAE,EAJX;IAKI,KAAK,EAAE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAsBF,QAAQ,CAACS,uBAA/B;EALX,CAAA,CANJ,CADwC;AAAA,CAAlB,CAA1B;AAiBA,eAAeL,iBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport camelCase from 'lodash/camelCase';\nimport IconComplete from '../../../../icons/general/IconVerified';\nimport IconReject from '../../../../icons/general/IconRejected';\nimport Avatar from '../Avatar';\nimport { TASK_NEW_APPROVED, TASK_NEW_REJECTED, TASK_NEW_COMPLETED, TASK_NEW_NOT_STARTED } from '../../../../constants';\nimport messages from './messages';\nimport type { TaskCollabStatus } from '../../../../common/types/tasks';\nimport type { UserMini } from '../../../../common/types/core';\nimport type { GetAvatarUrlCallback } from '../../../common/flowTypes';\n\nimport './AvatarGroupAvatar.scss';\n\ntype Props = {\n    className?: string,\n    getAvatarUrl?: GetAvatarUrlCallback,\n    status: TaskCollabStatus,\n    user: UserMini,\n};\n\nconst StatusIcon = ({ status, ...rest }: { status: TaskCollabStatus }) => {\n    switch (status) {\n        case TASK_NEW_APPROVED:\n        case TASK_NEW_COMPLETED:\n            return <IconComplete {...rest} />;\n        case TASK_NEW_REJECTED:\n            return <IconReject {...rest} />;\n        case TASK_NEW_NOT_STARTED:\n        default:\n            return null;\n    }\n};\n\nconst AvatarGroupAvatar = React.memo<Props>(({ user, status, getAvatarUrl, className, ...rest }: Props) => (\n    <div\n        className={classNames('bcs-AvatarGroupAvatar', className)}\n        data-testid=\"avatar-group-avatar-container\"\n        {...rest}\n    >\n        <Avatar className=\"bcs-AvatarGroupAvatar-avatar\" user={user} getAvatarUrl={getAvatarUrl} />\n        <StatusIcon\n            status={status}\n            className={`bcs-AvatarGroupAvatar-statusIcon ${camelCase(status)}`}\n            height={12}\n            width={12}\n            title={<FormattedMessage {...messages.taskAssignmentCompleted} />}\n        />\n    </div>\n));\n\nexport default AvatarGroupAvatar;\n"]},"metadata":{},"sourceType":"module"}