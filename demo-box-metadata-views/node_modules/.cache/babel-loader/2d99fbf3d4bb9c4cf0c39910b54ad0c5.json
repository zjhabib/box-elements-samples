{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport findIndex from 'lodash/findIndex';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { scrollIntoView } from '../../utils/dom';\nimport IconCheck from '../../icons/general/IconCheck';\nimport SelectButton from '../select-button';\nimport DatalistItem from '../datalist-item';\nimport PopperComponent from '../popper';\nimport SelectFieldDropdown from './SelectFieldDropdown';\nimport { PLACEMENT_BOTTOM_END, PLACEMENT_BOTTOM_START } from '../popper/constants';\nimport SearchForm from '../search-form/SearchForm';\nimport CLEAR from './constants';\nimport { ARROW_DOWN, ARROW_UP, ENTER, ESCAPE, SPACE, TAB } from '../../common/keyboard-events';\nimport messages from './messages';\nimport './SelectField.scss';\nfunction stopDefaultEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nfunction toggleOption(options, value) {\n  var index = options.indexOf(value);\n  if (index === -1) {\n    options.push(value);\n  } else {\n    options.splice(index, 1);\n  }\n}\nfunction defaultOptionRenderer(_ref) {\n  var displayText = _ref.displayText;\n  return React.createElement(\"span\", {\n    className: \"bdl-SelectField-optionText\",\n    title: displayText\n  }, displayText);\n}\nvar BaseSelectField = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BaseSelectField, _React$Component);\n  function BaseSelectField(props) {\n    var _this;\n    _classCallCheck(this, BaseSelectField);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseSelectField).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"updateSearchText\", function (text) {\n      var options = _this.props.options;\n      var optionIndex = findIndex(options, function (element) {\n        return element.displayText.toLowerCase().includes(text.toLowerCase());\n      });\n      if (optionIndex >= 0) {\n        _this.setActiveItem(optionIndex);\n      }\n      _this.setState({\n        searchText: text\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentClick\", function (event) {\n      var container = _this.selectFieldContainerRef.current;\n      var isInside = container && event.target instanceof Node && container.contains(event.target) || container === event.target;\n      if (!isInside) {\n        _this.closeDropdown();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setActiveItem\", function (index) {\n      var shouldScrollIntoView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      _this.setState({\n        activeItemIndex: index,\n        shouldScrollIntoView: shouldScrollIntoView\n      });\n      if (index === -1) {\n        _this.setActiveItemID(null);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setActiveItemID\", function (id) {\n      var shouldScrollIntoView = _this.state.shouldScrollIntoView;\n      var itemEl = id ? document.getElementById(id) : null;\n      _this.setState({\n        activeItemID: id,\n        shouldScrollIntoView: false\n      }, function () {\n        if (shouldScrollIntoView) {\n          scrollIntoView(itemEl, {\n            block: 'nearest'\n          });\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (selectedItems) {\n      var onChange = _this.props.onChange;\n      if (onChange) {\n        onChange(selectedItems);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleOptionSelect\", function (selectedItem) {\n      var onOptionSelect = _this.props.onOptionSelect;\n      if (onOptionSelect) {\n        onOptionSelect(selectedItem);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleButtonClick\", function () {\n      if (_this.state.isOpen) {\n        _this.closeDropdown();\n      } else {\n        _this.openDropdown();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleClearClick\", function () {\n      _this.handleChange([]);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleButtonKeyDown\", function (event) {\n      var activeItemIndex = _this.state.activeItemIndex; // If user is interacting with the select dropdown, don't close on space/enter (i.e. prevent click event)\n\n      if ((event.key === SPACE || event.key === ENTER) && activeItemIndex !== -1) {\n        event.preventDefault();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (event) {\n      var isOpen = _this.state.isOpen;\n      var _this$props$blurExcep = _this.props.blurExceptionClassNames,\n        blurExceptionClassNames = _this$props$blurExcep === void 0 ? [] : _this$props$blurExcep;\n      var exceptionClasses = ['search-input', 'select-button'].concat(_toConsumableArray(blurExceptionClassNames));\n      if (isOpen && event && event.relatedTarget && exceptionClasses.every(function (className) {\n        return event && !event.relatedTarget.classList.contains(className);\n      })) {\n        _this.closeDropdown();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      var key = event.key;\n      var _this$props = _this.props,\n        options = _this$props.options,\n        shouldShowClearOption = _this$props.shouldShowClearOption,\n        shouldShowSearchInput = _this$props.shouldShowSearchInput;\n      var _this$state = _this.state,\n        activeItemIndex = _this$state.activeItemIndex,\n        isOpen = _this$state.isOpen;\n      var itemCount = options.length;\n      switch (key) {\n        case ARROW_DOWN:\n          stopDefaultEvent(event);\n          if (isOpen) {\n            var nextIndex = activeItemIndex === itemCount - 1 ? -1 : activeItemIndex + 1;\n            _this.setActiveItem(nextIndex);\n          } else {\n            _this.openDropdown();\n          }\n          break;\n        case ARROW_UP:\n          stopDefaultEvent(event);\n          if (isOpen) {\n            var prevIndex = activeItemIndex === -1 ? itemCount - 1 : activeItemIndex - 1;\n            _this.setActiveItem(prevIndex);\n          } else {\n            _this.openDropdown();\n          }\n          break;\n        case ENTER:\n        case SPACE:\n          if (shouldShowSearchInput) {\n            // Allow space key presses in the search string when search field is active\n            if (key === SPACE) {\n              break;\n            } // Enter presses should be ignored when no item is active\n\n            if (key === ENTER && activeItemIndex === -1) {\n              stopDefaultEvent(event);\n              break;\n            }\n          }\n          if (activeItemIndex !== -1 && isOpen) {\n            stopDefaultEvent(event);\n            var isClearOption = shouldShowClearOption && activeItemIndex === 0;\n            if (isClearOption) {\n              _this.handleClearClick();\n            } else {\n              _this.selectOption(activeItemIndex);\n            } // Enter always closes dropdown (even for multiselect)\n\n            if (key === ENTER) {\n              _this.closeDropdown();\n            }\n          }\n          break;\n        case ESCAPE:\n          if (isOpen) {\n            stopDefaultEvent(event);\n            _this.closeDropdown();\n          }\n          break;\n        case TAB:\n          if (isOpen) {\n            _this.closeDropdown();\n          }\n          break;\n        default:\n          {\n            if (!shouldShowSearchInput) {\n              stopDefaultEvent(event);\n              var lowerCaseKey = key.toLowerCase();\n              var optionIndex = findIndex(options, function (option) {\n                return option.displayText.toLowerCase().indexOf(lowerCaseKey) === 0;\n              });\n              if (optionIndex >= 0) {\n                _this.setActiveItem(optionIndex);\n              }\n            }\n          }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openDropdown\", function () {\n      var shouldShowSearchInput = _this.props.shouldShowSearchInput;\n      if (!_this.state.isOpen) {\n        _this.setState({\n          isOpen: true\n        }, function () {\n          return shouldShowSearchInput && _this.searchInputRef && _this.searchInputRef.focus();\n        });\n        document.addEventListener('click', _this.handleDocumentClick);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"closeDropdown\", function () {\n      if (_this.state.isOpen) {\n        _this.setState({\n          activeItemID: null,\n          activeItemIndex: -1,\n          isOpen: false,\n          searchText: ''\n        });\n        document.removeEventListener('click', _this.handleDocumentClick);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"selectOption\", function (index) {\n      var multiple = _this.props.multiple;\n      if (multiple) {\n        _this.selectMultiOption(index);\n      } else {\n        _this.selectSingleOption(index);\n        _this.closeDropdown(); // Close dropdown for single select fields\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFilteredOptions\", function () {\n      var options = _this.props.options;\n      var searchText = _this.state.searchText;\n      return options.filter(function (option) {\n        var isSubstring = option.displayText.toLowerCase().includes(searchText.toLowerCase());\n        var isClearOption = option.value === CLEAR;\n        return searchText ? isSubstring && !isClearOption : true;\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"selectMultiOption\", function (index) {\n      var _this$props2 = _this.props,\n        defaultValue = _this$props2.defaultValue,\n        options = _this$props2.options,\n        selectedValues = _this$props2.selectedValues;\n      var hasDefaultValue = defaultValue != null; // Checks if not undefined or null\n\n      var item = _this.getFilteredOptions()[index]; // If we are already using the default option, just return without firing onChange\n\n      if (hasDefaultValue && defaultValue === item.value) {\n        _this.selectSingleOption(index);\n        return;\n      } // Copy the array so we can freely modify it\n\n      var newSelectedValues = selectedValues.slice(0);\n      toggleOption(newSelectedValues, item.value); // Apply constraints if a defaultValue is specified\n\n      if (hasDefaultValue) {\n        var defaultOptionIndex = findIndex(options, function (option) {\n          return option.value === defaultValue;\n        });\n        if (defaultOptionIndex !== -1) {\n          if (newSelectedValues.length === 0) {\n            // If nothing is selected, we should select the default option\n            _this.selectSingleOption(defaultOptionIndex);\n            return;\n          }\n          if (newSelectedValues.length > 1 && newSelectedValues.includes(defaultValue)) {\n            // Remove the default option from the selected values when more than one thing is selected\n            newSelectedValues.splice(defaultOptionIndex, 1);\n          }\n        }\n      } // Fire onchange event with selected items\n\n      _this.handleChange(options.filter(function (option) {\n        return newSelectedValues.includes(option.value);\n      }));\n      _this.handleOptionSelect(item);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderButtonText\", function () {\n      var _this$props3 = _this.props,\n        options = _this$props3.options,\n        placeholder = _this$props3.placeholder,\n        selectedValues = _this$props3.selectedValues,\n        title = _this$props3.title;\n      var selectedItemCount = selectedValues.length; // When there are no options selected, render placeholder\n\n      if (selectedItemCount === 0 && placeholder) {\n        return placeholder;\n      } // User-specified title when options are selected\n\n      if (title) {\n        return title;\n      } // Auto-generate button title based on selected options\n\n      var selectedOptions = options.filter(function (option) {\n        return selectedValues.includes(option.value);\n      });\n      return selectedOptions.map(function (option) {\n        return option.displayText;\n      }).join(', ');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderSearchInput\", function () {\n      var intl = _this.props.intl;\n      var searchText = _this.state.searchText;\n      var getSearchInput = function getSearchInput(element) {\n        _this.searchInputRef = element;\n      };\n      return React.createElement(SearchForm, {\n        className: \"select-field-search-container\",\n        getSearchInput: getSearchInput,\n        onChange: _this.updateSearchText,\n        placeholder: intl.formatMessage(messages.searchPlaceholder),\n        value: searchText\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderSelectButton\", function () {\n      var _this$state2 = _this.state,\n        activeItemID = _this$state2.activeItemID,\n        isOpen = _this$state2.isOpen;\n      var _this$props4 = _this.props,\n        buttonElProps = _this$props4.buttonProps,\n        isDisabled = _this$props4.isDisabled,\n        className = _this$props4.className,\n        error = _this$props4.error;\n      var buttonText = _this.renderButtonText();\n      var buttonProps = _objectSpread({}, buttonElProps, {\n        'aria-activedescendant': activeItemID,\n        'aria-autocomplete': 'list',\n        'aria-expanded': isOpen,\n        'aria-owns': _this.selectFieldID,\n        className: className,\n        isDisabled: isDisabled,\n        onClick: _this.handleButtonClick,\n        onKeyDown: _this.handleButtonKeyDown,\n        // @NOTE: Technically, only text inputs should be combo-boxes but ARIA specs do not cover custom select dropdowns\n        role: 'combobox',\n        title: buttonText\n      });\n      return (\n        // Need to store the select button reference so we can calculate the button width\n        // in order to set it as the min width of the dropdown list\n        React.createElement(SelectButton, _extends({}, buttonProps, {\n          error: error\n        }), buttonText)\n      );\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderSelectOptions\", function () {\n      var _this$props5 = _this.props,\n        optionRenderer = _this$props5.optionRenderer,\n        selectedValues = _this$props5.selectedValues,\n        separatorIndices = _this$props5.separatorIndices,\n        shouldShowClearOption = _this$props5.shouldShowClearOption;\n      var activeItemIndex = _this.state.activeItemIndex;\n      var filteredOptions = _this.getFilteredOptions();\n      if (filteredOptions.length === 0) {\n        return React.createElement(DatalistItem, {\n          className: \"select-option is-disabled\"\n        }, React.createElement(FormattedMessage, messages.noResults));\n      }\n      var selectOptions = filteredOptions.map(function (item, index) {\n        var value = item.value;\n        var isSelected = selectedValues.includes(value);\n        var isClearOption = shouldShowClearOption && value === CLEAR;\n        var itemProps = {\n          className: classNames('select-option', {\n            'is-clear-option': isClearOption\n          }),\n          key: index,\n          /* preventDefault on click to prevent wrapping label from re-triggering the select button */\n          onClick: function onClick(event) {\n            event.preventDefault();\n            if (isClearOption) {\n              _this.handleClearClick();\n            } else {\n              _this.selectOption(index);\n            }\n          },\n          onMouseEnter: function onMouseEnter() {\n            _this.setActiveItem(index, false);\n          },\n          setActiveItemID: _this.setActiveItemID\n        };\n        if (index === activeItemIndex) {\n          itemProps.isActive = true;\n        } // The below actually does have a key, but eslint can't catch that\n\n        /* eslint-disable react/jsx-key */\n\n        return React.createElement(DatalistItem, itemProps, React.createElement(\"div\", {\n          className: \"select-option-check-icon\"\n        }, isSelected ? React.createElement(IconCheck, {\n          height: 16,\n          width: 16\n        }) : null), optionRenderer(item));\n        /* eslint-enable react/jsx-key */\n      });\n\n      separatorIndices.forEach(function (separatorIndex, index) {\n        selectOptions.splice(separatorIndex + index, 0, React.createElement(\"li\", {\n          key: \"separator\".concat(separatorIndex),\n          role: \"separator\"\n        }));\n      });\n      return selectOptions;\n    });\n    _this.selectFieldID = uniqueId('selectfield');\n    _this.selectFieldContainerRef = React.createRef();\n    _this.state = {\n      activeItemID: null,\n      activeItemIndex: -1,\n      isOpen: false,\n      searchText: '',\n      shouldScrollIntoView: false\n    };\n    return _this;\n  }\n  _createClass(BaseSelectField, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.isOpen) {\n        // Clean-up global click handlers\n        document.removeEventListener('click', this.handleDocumentClick);\n      }\n    }\n  }, {\n    key: \"selectSingleOption\",\n    value: function selectSingleOption(index) {\n      var selectedValues = this.props.selectedValues;\n      var item = this.getFilteredOptions()[index]; // If item not previously selected, fire change handler\n\n      if (!selectedValues.includes(item.value)) {\n        this.handleChange([item]);\n      }\n      this.handleOptionSelect(item);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        className = _this$props6.className,\n        multiple = _this$props6.multiple,\n        isEscapedWithReference = _this$props6.isEscapedWithReference,\n        isRightAligned = _this$props6.isRightAligned,\n        isScrollable = _this$props6.isScrollable,\n        selectedValues = _this$props6.selectedValues,\n        shouldShowSearchInput = _this$props6.shouldShowSearchInput;\n      var isOpen = this.state.isOpen; // @TODO: Need invariants on specific conditions.\n      // 1) # of options should be non-zero\n      // 2) selectedValues, if defined, should all exist in options\n      // 3) defaultValue, if defined, should exist in options\n      // 4) defaultValue, if defined, should mean selectedValues is never empty\n      // 5) defaultValue, if defined, cannot be selected in addition to other options (must be exclusive)\n\n      var dropdownPlacement = isRightAligned ? PLACEMENT_BOTTOM_END : PLACEMENT_BOTTOM_START; // popper.js modifier to allow dropdown to overflow its boundaries and remain attached to its reference\n\n      var dropdownModifiers = isEscapedWithReference ? {\n        preventOverflow: {\n          escapeWithReference: true\n        }\n      } : {};\n      return (\n        // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n        React.createElement(\"div\", {\n          className: classNames(className, 'bdl-SelectField', 'select-container'),\n          onBlur: this.handleBlur,\n          onKeyDown: this.handleKeyDown,\n          ref: this.selectFieldContainerRef\n        }, React.createElement(PopperComponent, {\n          placement: dropdownPlacement,\n          isOpen: isOpen,\n          modifiers: dropdownModifiers\n        }, this.renderSelectButton(), React.createElement(SelectFieldDropdown, {\n          isScrollable: isScrollable,\n          multiple: multiple,\n          selectedValues: selectedValues,\n          selectFieldID: this.selectFieldID\n        }, shouldShowSearchInput && this.renderSearchInput(), this.renderSelectOptions())))\n      );\n    }\n  }]);\n  return BaseSelectField;\n}(React.Component);\n_defineProperty(BaseSelectField, \"defaultProps\", {\n  buttonProps: {},\n  isDisabled: false,\n  isRightAligned: false,\n  isScrollable: false,\n  multiple: false,\n  optionRenderer: defaultOptionRenderer,\n  options: [],\n  selectedValues: [],\n  separatorIndices: [],\n  shouldShowClearOption: false,\n  shouldShowSearchInput: false\n});\nexport { BaseSelectField as BaseSelectFieldBase };\nexport default injectIntl(BaseSelectField);","map":{"version":3,"sources":["../../../src/components/select-field/BaseSelectField.js"],"names":["React","classNames","uniqueId","findIndex","FormattedMessage","injectIntl","scrollIntoView","IconCheck","SelectButton","DatalistItem","PopperComponent","SelectFieldDropdown","PLACEMENT_BOTTOM_END","PLACEMENT_BOTTOM_START","SearchForm","CLEAR","ARROW_DOWN","ARROW_UP","ENTER","ESCAPE","SPACE","TAB","messages","stopDefaultEvent","event","preventDefault","stopPropagation","toggleOption","options","value","index","indexOf","push","splice","defaultOptionRenderer","displayText","BaseSelectField","Component","buttonProps","isDisabled","isRightAligned","isScrollable","multiple","optionRenderer","selectedValues","separatorIndices","shouldShowClearOption","shouldShowSearchInput","props","selectFieldID","selectFieldContainerRef","createRef","state","activeItemID","activeItemIndex","isOpen","searchText","shouldScrollIntoView","document","removeEventListener","handleDocumentClick","text","optionIndex","element","toLowerCase","includes","setActiveItem","setState","container","current","isInside","target","Node","contains","closeDropdown","setActiveItemID","id","itemEl","getElementById","block","selectedItems","onChange","selectedItem","onOptionSelect","openDropdown","handleChange","key","blurExceptionClassNames","exceptionClasses","relatedTarget","every","classList","className","itemCount","length","nextIndex","prevIndex","isClearOption","handleClearClick","selectOption","lowerCaseKey","option","searchInputRef","focus","addEventListener","selectMultiOption","selectSingleOption","filter","isSubstring","item","getFilteredOptions","handleOptionSelect","defaultValue","hasDefaultValue","newSelectedValues","slice","defaultOptionIndex","placeholder","title","selectedItemCount","selectedOptions","map","join","intl","getSearchInput","updateSearchText","formatMessage","searchPlaceholder","buttonElProps","error","buttonText","renderButtonText","onClick","handleButtonClick","onKeyDown","handleButtonKeyDown","role","filteredOptions","noResults","selectOptions","isSelected","itemProps","onMouseEnter","isActive","forEach","separatorIndex","isEscapedWithReference","dropdownPlacement","dropdownModifiers","preventOverflow","escapeWithReference","handleBlur","handleKeyDown","renderSelectButton","renderSearchInput","renderSelectOptions","BaseSelectFieldBase"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport findIndex from 'lodash/findIndex';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport IconCheck from '../../icons/general/IconCheck';\nimport SelectButton from '../select-button';\nimport DatalistItem from '../datalist-item';\nimport PopperComponent from '../popper';\nimport SelectFieldDropdown from './SelectFieldDropdown';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\nimport { PLACEMENT_BOTTOM_END, PLACEMENT_BOTTOM_START } from '../popper/constants';\nimport SearchForm from '../search-form/SearchForm';\nimport CLEAR from './constants';\nimport { ARROW_DOWN, ARROW_UP, ENTER, ESCAPE, SPACE, TAB } from '../../common/keyboard-events';\n\nimport messages from './messages';\n\nimport './SelectField.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\nfunction toggleOption(options, value) {\n    const index = options.indexOf(value);\n\n    if (index === -1) {\n        options.push(value);\n    } else {\n        options.splice(index, 1);\n    }\n}\n\ntype Props = {\n    /** List of classnames of the relatedTarget that should prevent handleBlur from firing */\n    blurExceptionClassNames?: Array<string>,\n    /** Props to add to the button element */\n    buttonProps?: Object,\n    /** CSS class for the select container */\n    className?: string,\n    /** The fallback option value when other options are all unselected. Default option cannot be selected at the same time as other options. `selectedValues` must not be empty when this option is used. */\n    defaultValue?: SelectOptionValueProp,\n    /** An optional error to show within a tooltip. */\n    error?: React.Node,\n    /* Intl object */\n    intl: Object,\n    /** The select button is disabled if true */\n    isDisabled?: boolean,\n    /** Whether to allow the dropdown to overflow its boundaries and remain attached to its reference */\n    isEscapedWithReference?: boolean,\n    /** Whether to align the dropdown to the right */\n    isRightAligned: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    multiple: boolean,\n    /** Function will be called with an array of all selected options after user selects a new option */\n    onChange: Function,\n    /** Function will be called with the user selected option (even on deselect or when the option was previously selected) */\n    onOptionSelect?: Function,\n    /** Function that allows custom rendering of select field options. When not provided the component will only render the option's displayText by default */\n    optionRenderer: (option: SelectOptionProp) => React.Node,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** The select button text shown when no options are selected. */\n    placeholder?: string | React.Element<any>,\n    /** The currently selected option values (can be empty) */\n    selectedValues: Array<SelectOptionValueProp>,\n    /** Array of ordered indices indicating where to insert separators (ex. index 2 means insert a separator after option 2) */\n    separatorIndices: Array<number>,\n    /** Boolean to determine whether or not to show the clear option */\n    shouldShowClearOption?: boolean,\n    /** Boolean to determine whether or not to show the search field */\n    shouldShowSearchInput?: boolean,\n    /** The select button text (by default, component will use comma separated list of all selected option displayText) */\n    title?: string | React.Element<any>,\n};\n\ntype State = {\n    activeItemID: ?string,\n    activeItemIndex: number,\n    isOpen: boolean,\n    searchText: string,\n    shouldScrollIntoView: boolean,\n};\n\nfunction defaultOptionRenderer({ displayText }: SelectOptionProp) {\n    return (\n        <span className=\"bdl-SelectField-optionText\" title={displayText}>\n            {displayText}\n        </span>\n    );\n}\n\nclass BaseSelectField extends React.Component<Props, State> {\n    static defaultProps = {\n        buttonProps: {},\n        isDisabled: false,\n        isRightAligned: false,\n        isScrollable: false,\n        multiple: false,\n        optionRenderer: defaultOptionRenderer,\n        options: [],\n        selectedValues: [],\n        separatorIndices: [],\n        shouldShowClearOption: false,\n        shouldShowSearchInput: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.selectFieldID = uniqueId('selectfield');\n\n        this.selectFieldContainerRef = React.createRef();\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            isOpen: false,\n            searchText: '',\n            shouldScrollIntoView: false,\n        };\n    }\n\n    componentWillUnmount() {\n        if (this.state.isOpen) {\n            // Clean-up global click handlers\n            document.removeEventListener('click', this.handleDocumentClick);\n        }\n    }\n\n    updateSearchText = (text: string) => {\n        const { options } = this.props;\n        const optionIndex = findIndex(options, element =>\n            element.displayText.toLowerCase().includes(text.toLowerCase()),\n        );\n\n        if (optionIndex >= 0) {\n            this.setActiveItem(optionIndex);\n        }\n\n        this.setState({\n            searchText: text,\n        });\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const container = this.selectFieldContainerRef.current;\n        const isInside =\n            (container && event.target instanceof Node && container.contains(event.target)) ||\n            container === event.target;\n\n        if (!isInside) {\n            this.closeDropdown();\n        }\n    };\n\n    setActiveItem = (index: number, shouldScrollIntoView?: boolean = true) => {\n        this.setState({ activeItemIndex: index, shouldScrollIntoView });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: ?string) => {\n        const { shouldScrollIntoView } = this.state;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        this.setState({ activeItemID: id, shouldScrollIntoView: false }, () => {\n            if (shouldScrollIntoView) {\n                scrollIntoView(itemEl, { block: 'nearest' });\n            }\n        });\n    };\n\n    selectFieldID: string;\n\n    selectFieldContainerRef: { current: null | HTMLDivElement };\n\n    searchInputRef: HTMLInputElement;\n\n    handleChange = (selectedItems: Array<SelectOptionProp>) => {\n        const { onChange } = this.props;\n\n        if (onChange) {\n            onChange(selectedItems);\n        }\n    };\n\n    handleOptionSelect = (selectedItem: SelectOptionProp) => {\n        const { onOptionSelect } = this.props;\n\n        if (onOptionSelect) {\n            onOptionSelect(selectedItem);\n        }\n    };\n\n    handleButtonClick = () => {\n        if (this.state.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    };\n\n    handleClearClick = () => {\n        this.handleChange([]);\n    };\n\n    handleButtonKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { activeItemIndex } = this.state;\n\n        // If user is interacting with the select dropdown, don't close on space/enter (i.e. prevent click event)\n        if ((event.key === SPACE || event.key === ENTER) && activeItemIndex !== -1) {\n            event.preventDefault();\n        }\n    };\n\n    handleBlur = (event?: SyntheticFocusEvent<>) => {\n        const { isOpen } = this.state;\n        const { blurExceptionClassNames = [] } = this.props;\n\n        const exceptionClasses = ['search-input', 'select-button', ...blurExceptionClassNames];\n\n        if (\n            isOpen &&\n            event &&\n            event.relatedTarget &&\n            exceptionClasses.every(\n                className => event && !(event.relatedTarget: window.HTMLInputElement).classList.contains(className),\n            )\n        ) {\n            this.closeDropdown();\n        }\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { key } = event;\n        const { options, shouldShowClearOption, shouldShowSearchInput } = this.props;\n        const { activeItemIndex, isOpen } = this.state;\n        const itemCount = options.length;\n        switch (key) {\n            case ARROW_DOWN:\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const nextIndex = activeItemIndex === itemCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case ARROW_UP:\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const prevIndex = activeItemIndex === -1 ? itemCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case ENTER:\n            case SPACE:\n                if (shouldShowSearchInput) {\n                    // Allow space key presses in the search string when search field is active\n                    if (key === SPACE) {\n                        break;\n                    }\n\n                    // Enter presses should be ignored when no item is active\n                    if (key === ENTER && activeItemIndex === -1) {\n                        stopDefaultEvent(event);\n                        break;\n                    }\n                }\n\n                if (activeItemIndex !== -1 && isOpen) {\n                    stopDefaultEvent(event);\n                    const isClearOption = shouldShowClearOption && activeItemIndex === 0;\n                    if (isClearOption) {\n                        this.handleClearClick();\n                    } else {\n                        this.selectOption(activeItemIndex);\n                    }\n                    // Enter always closes dropdown (even for multiselect)\n                    if (key === ENTER) {\n                        this.closeDropdown();\n                    }\n                }\n                break;\n            case ESCAPE:\n                if (isOpen) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                }\n                break;\n            case TAB:\n                if (isOpen) {\n                    this.closeDropdown();\n                }\n                break;\n            default: {\n                if (!shouldShowSearchInput) {\n                    stopDefaultEvent(event);\n                    const lowerCaseKey = key.toLowerCase();\n                    const optionIndex = findIndex(\n                        options,\n                        option => option.displayText.toLowerCase().indexOf(lowerCaseKey) === 0,\n                    );\n\n                    if (optionIndex >= 0) {\n                        this.setActiveItem(optionIndex);\n                    }\n                }\n            }\n        }\n    };\n\n    openDropdown = () => {\n        const { shouldShowSearchInput } = this.props;\n        if (!this.state.isOpen) {\n            this.setState(\n                { isOpen: true },\n                () => shouldShowSearchInput && this.searchInputRef && this.searchInputRef.focus(),\n            );\n            document.addEventListener('click', this.handleDocumentClick);\n        }\n    };\n\n    closeDropdown = () => {\n        if (this.state.isOpen) {\n            this.setState({\n                activeItemID: null,\n                activeItemIndex: -1,\n                isOpen: false,\n                searchText: '',\n            });\n            document.removeEventListener('click', this.handleDocumentClick);\n        }\n    };\n\n    selectOption = (index: number) => {\n        const { multiple } = this.props;\n\n        if (multiple) {\n            this.selectMultiOption(index);\n        } else {\n            this.selectSingleOption(index);\n            this.closeDropdown(); // Close dropdown for single select fields\n        }\n    };\n\n    getFilteredOptions = (): Array<SelectOptionProp> => {\n        const { options } = this.props;\n        const { searchText } = this.state;\n\n        return options.filter(option => {\n            const isSubstring = option.displayText.toLowerCase().includes(searchText.toLowerCase());\n            const isClearOption = option.value === CLEAR;\n\n            return searchText ? isSubstring && !isClearOption : true;\n        });\n    };\n\n    selectSingleOption(index: number) {\n        const { selectedValues } = this.props;\n        const item = this.getFilteredOptions()[index];\n        // If item not previously selected, fire change handler\n        if (!selectedValues.includes(item.value)) {\n            this.handleChange([item]);\n        }\n        this.handleOptionSelect(item);\n    }\n\n    selectMultiOption = (index: number) => {\n        const { defaultValue, options, selectedValues } = this.props;\n        const hasDefaultValue = defaultValue != null; // Checks if not undefined or null\n        const item = this.getFilteredOptions()[index];\n\n        // If we are already using the default option, just return without firing onChange\n        if (hasDefaultValue && defaultValue === item.value) {\n            this.selectSingleOption(index);\n            return;\n        }\n\n        // Copy the array so we can freely modify it\n        const newSelectedValues = selectedValues.slice(0);\n        toggleOption(newSelectedValues, item.value);\n\n        // Apply constraints if a defaultValue is specified\n        if (hasDefaultValue) {\n            const defaultOptionIndex = findIndex(options, option => option.value === defaultValue);\n\n            if (defaultOptionIndex !== -1) {\n                if (newSelectedValues.length === 0) {\n                    // If nothing is selected, we should select the default option\n                    this.selectSingleOption(defaultOptionIndex);\n                    return;\n                }\n                if (newSelectedValues.length > 1 && newSelectedValues.includes(defaultValue)) {\n                    // Remove the default option from the selected values when more than one thing is selected\n                    newSelectedValues.splice(defaultOptionIndex, 1);\n                }\n            }\n        }\n\n        // Fire onchange event with selected items\n        this.handleChange(options.filter(option => newSelectedValues.includes(option.value)));\n\n        this.handleOptionSelect(item);\n    };\n\n    renderButtonText = () => {\n        const { options, placeholder, selectedValues, title } = this.props;\n        const selectedItemCount = selectedValues.length;\n\n        // When there are no options selected, render placeholder\n        if (selectedItemCount === 0 && placeholder) {\n            return placeholder;\n        }\n\n        // User-specified title when options are selected\n        if (title) {\n            return title;\n        }\n\n        // Auto-generate button title based on selected options\n        const selectedOptions = options.filter(option => selectedValues.includes(option.value));\n        return selectedOptions.map(option => option.displayText).join(', ');\n    };\n\n    renderSearchInput = () => {\n        const { intl } = this.props;\n        const { searchText } = this.state;\n        const getSearchInput = element => {\n            this.searchInputRef = element;\n        };\n\n        return (\n            <SearchForm\n                className=\"select-field-search-container\"\n                getSearchInput={getSearchInput}\n                onChange={this.updateSearchText}\n                placeholder={intl.formatMessage(messages.searchPlaceholder)}\n                value={searchText}\n            />\n        );\n    };\n\n    renderSelectButton = () => {\n        const { activeItemID, isOpen } = this.state;\n        const { buttonProps: buttonElProps, isDisabled, className, error } = this.props;\n        const buttonText = this.renderButtonText();\n        const buttonProps = {\n            ...buttonElProps,\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            'aria-owns': this.selectFieldID,\n            className,\n            isDisabled,\n            onClick: this.handleButtonClick,\n            onKeyDown: this.handleButtonKeyDown,\n            // @NOTE: Technically, only text inputs should be combo-boxes but ARIA specs do not cover custom select dropdowns\n            role: 'combobox',\n            title: buttonText,\n        };\n\n        return (\n            // Need to store the select button reference so we can calculate the button width\n            // in order to set it as the min width of the dropdown list\n            <SelectButton {...buttonProps} error={error}>\n                {buttonText}\n            </SelectButton>\n        );\n    };\n\n    renderSelectOptions = () => {\n        const { optionRenderer, selectedValues, separatorIndices, shouldShowClearOption } = this.props;\n        const { activeItemIndex } = this.state;\n\n        const filteredOptions = this.getFilteredOptions();\n\n        if (filteredOptions.length === 0) {\n            return (\n                <DatalistItem className=\"select-option is-disabled\">\n                    <FormattedMessage {...messages.noResults} />\n                </DatalistItem>\n            );\n        }\n\n        const selectOptions = filteredOptions.map<React.Element<typeof DatalistItem | 'li'>>((item, index) => {\n            const { value } = item;\n\n            const isSelected = selectedValues.includes(value);\n\n            const isClearOption = shouldShowClearOption && value === CLEAR;\n\n            const itemProps: Object = {\n                className: classNames('select-option', { 'is-clear-option': isClearOption }),\n                key: index,\n                /* preventDefault on click to prevent wrapping label from re-triggering the select button */\n                onClick: event => {\n                    event.preventDefault();\n                    if (isClearOption) {\n                        this.handleClearClick();\n                    } else {\n                        this.selectOption(index);\n                    }\n                },\n                onMouseEnter: () => {\n                    this.setActiveItem(index, false);\n                },\n                setActiveItemID: this.setActiveItemID,\n            };\n\n            if (index === activeItemIndex) {\n                itemProps.isActive = true;\n            }\n\n            // The below actually does have a key, but eslint can't catch that\n            /* eslint-disable react/jsx-key */\n            return (\n                <DatalistItem {...itemProps}>\n                    <div className=\"select-option-check-icon\">\n                        {isSelected ? <IconCheck height={16} width={16} /> : null}\n                    </div>\n                    {optionRenderer(item)}\n                </DatalistItem>\n            );\n            /* eslint-enable react/jsx-key */\n        });\n\n        separatorIndices.forEach((separatorIndex, index) => {\n            selectOptions.splice(separatorIndex + index, 0, <li key={`separator${separatorIndex}`} role=\"separator\" />);\n        });\n\n        return selectOptions;\n    };\n\n    render() {\n        const {\n            className,\n            multiple,\n            isEscapedWithReference,\n            isRightAligned,\n            isScrollable,\n            selectedValues,\n            shouldShowSearchInput,\n        } = this.props;\n        const { isOpen } = this.state;\n\n        // @TODO: Need invariants on specific conditions.\n        // 1) # of options should be non-zero\n        // 2) selectedValues, if defined, should all exist in options\n        // 3) defaultValue, if defined, should exist in options\n        // 4) defaultValue, if defined, should mean selectedValues is never empty\n        // 5) defaultValue, if defined, cannot be selected in addition to other options (must be exclusive)\n\n        const dropdownPlacement = isRightAligned ? PLACEMENT_BOTTOM_END : PLACEMENT_BOTTOM_START;\n        // popper.js modifier to allow dropdown to overflow its boundaries and remain attached to its reference\n        const dropdownModifiers = isEscapedWithReference ? { preventOverflow: { escapeWithReference: true } } : {};\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames(className, 'bdl-SelectField', 'select-container')}\n                onBlur={this.handleBlur}\n                onKeyDown={this.handleKeyDown}\n                ref={this.selectFieldContainerRef}\n            >\n                <PopperComponent placement={dropdownPlacement} isOpen={isOpen} modifiers={dropdownModifiers}>\n                    {this.renderSelectButton()}\n                    <SelectFieldDropdown\n                        isScrollable={isScrollable}\n                        multiple={multiple}\n                        selectedValues={selectedValues}\n                        selectFieldID={this.selectFieldID}\n                    >\n                        {shouldShowSearchInput && this.renderSearchInput()}\n                        {this.renderSelectOptions()}\n                    </SelectFieldDropdown>\n                </PopperComponent>\n            </div>\n        );\n    }\n}\n\nexport { BaseSelectField as BaseSelectFieldBase };\nexport default injectIntl(BaseSelectField);\n"]},"metadata":{},"sourceType":"module"}