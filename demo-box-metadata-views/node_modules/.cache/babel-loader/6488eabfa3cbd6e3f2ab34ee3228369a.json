{"ast":null,"code":"import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport MetadataField from '../metadata-instance-fields/MetadataField';\nimport messages from './messages';\nimport { isHidden } from './metadataUtil';\nimport MetadataInstanceEditorContext from './MetadataInstanceEditorContext';\nimport './TemplatedInstance.scss';\nvar TemplatedInstance = function TemplatedInstance(_ref) {\n  var canEdit = _ref.canEdit,\n    _ref$data = _ref.data,\n    data = _ref$data === void 0 ? {} : _ref$data,\n    errors = _ref.errors,\n    onFieldChange = _ref.onFieldChange,\n    onFieldRemove = _ref.onFieldRemove,\n    template = _ref.template;\n  var _template$fields = template.fields,\n    fields = _template$fields === void 0 ? [] : _template$fields;\n  var hasFields = fields.length > 0;\n  var hasVisibleFields = hasFields && fields.some(function (field) {\n    return !isHidden(field);\n  });\n  var showNoFieldsMessage = !hasFields;\n  var showHiddenFieldsMessage = hasFields && !hasVisibleFields;\n  var _React$useContext = React.useContext(MetadataInstanceEditorContext),\n    blurExceptionClassNames = _React$useContext.blurExceptionClassNames;\n  return React.createElement(React.Fragment, null, hasVisibleFields && fields.map(function (field) {\n    return React.createElement(MetadataField, {\n      key: field.id,\n      blurExceptionClassNames: blurExceptionClassNames,\n      canEdit: canEdit,\n      dataKey: field.key,\n      dataValue: data[field.key],\n      description: field.description,\n      displayName: field.displayName,\n      error: errors[field.key],\n      isHidden: isHidden(field) // Checking both isHidden and hidden attributes due to differences in V2 and V3 APIs\n      ,\n\n      onChange: function onChange(key, value) {\n        if (canEdit && onFieldChange) {\n          onFieldChange(key, value, field.type);\n        }\n      },\n      onRemove: function onRemove(key) {\n        if (canEdit && onFieldRemove) {\n          onFieldRemove(key);\n        }\n      },\n      options: field.options,\n      type: field.type\n    });\n  }), showHiddenFieldsMessage && React.createElement(\"div\", {\n    className: \"attributes-hidden-message\"\n  }, React.createElement(FormattedMessage, messages.allAttributesAreHidden)), showNoFieldsMessage && React.createElement(\"div\", {\n    className: \"no-attributes-message\"\n  }, React.createElement(FormattedMessage, messages.noAttributesForTemplate)));\n};\nexport default TemplatedInstance;","map":{"version":3,"sources":["../../../src/features/metadata-instance-editor/TemplatedInstance.js"],"names":["React","FormattedMessage","MetadataField","messages","isHidden","MetadataInstanceEditorContext","TemplatedInstance","canEdit","data","errors","onFieldChange","onFieldRemove","template","fields","hasFields","length","hasVisibleFields","some","field","showNoFieldsMessage","showHiddenFieldsMessage","blurExceptionClassNames","useContext","map","id","key","description","displayName","value","type","options","allAttributesAreHidden","noAttributesForTemplate"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport MetadataField from '../metadata-instance-fields/MetadataField';\nimport messages from './messages';\nimport { isHidden } from './metadataUtil';\nimport type { MetadataFields, MetadataTemplate, MetadataFieldValue } from '../../common/types/metadata';\nimport MetadataInstanceEditorContext from './MetadataInstanceEditorContext';\nimport './TemplatedInstance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    data: MetadataFields,\n    errors: { [string]: React.Node },\n    onFieldChange?: (key: string, value: MetadataFieldValue, type: string) => void,\n    onFieldRemove?: (key: string) => void,\n    template: MetadataTemplate,\n};\n\nconst TemplatedInstance = ({ canEdit, data = {}, errors, onFieldChange, onFieldRemove, template }: Props) => {\n    const { fields = [] } = template;\n    const hasFields = fields.length > 0;\n    const hasVisibleFields = hasFields && fields.some(field => !isHidden(field));\n    const showNoFieldsMessage = !hasFields;\n    const showHiddenFieldsMessage = hasFields && !hasVisibleFields;\n    const { blurExceptionClassNames } = React.useContext(MetadataInstanceEditorContext);\n\n    return (\n        <>\n            {hasVisibleFields &&\n                fields.map(field => (\n                    <MetadataField\n                        key={field.id}\n                        blurExceptionClassNames={blurExceptionClassNames}\n                        canEdit={canEdit}\n                        dataKey={field.key}\n                        dataValue={data[field.key]}\n                        description={field.description}\n                        displayName={field.displayName}\n                        error={errors[field.key]}\n                        isHidden={isHidden(field)} // Checking both isHidden and hidden attributes due to differences in V2 and V3 APIs\n                        onChange={(key: string, value: MetadataFieldValue) => {\n                            if (canEdit && onFieldChange) {\n                                onFieldChange(key, value, field.type);\n                            }\n                        }}\n                        onRemove={(key: string) => {\n                            if (canEdit && onFieldRemove) {\n                                onFieldRemove(key);\n                            }\n                        }}\n                        options={field.options}\n                        type={field.type}\n                    />\n                ))}\n            {showHiddenFieldsMessage && (\n                <div className=\"attributes-hidden-message\">\n                    <FormattedMessage {...messages.allAttributesAreHidden} />\n                </div>\n            )}\n            {showNoFieldsMessage && (\n                <div className=\"no-attributes-message\">\n                    <FormattedMessage {...messages.noAttributesForTemplate} />\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default TemplatedInstance;\n"]},"metadata":{},"sourceType":"module"}