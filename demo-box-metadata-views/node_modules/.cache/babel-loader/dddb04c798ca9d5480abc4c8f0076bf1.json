{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nfunction ActivityItem(_ref, ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    isFocused = _ref.isFocused,\n    rest = _objectWithoutProperties(_ref, [\"children\", \"className\", \"isFocused\"]);\n  return React.createElement(\"li\", _extends({\n    className: classNames('bcs-ActivityItem', className, {\n      'bcs-is-focused': isFocused\n    }),\n    ref: ref\n  }, rest), children);\n}\nexport default React.forwardRef(ActivityItem);","map":{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/activity-feed/ActivityItem.tsx"],"names":["React","classNames","ActivityItem","children","className","isFocused","rest","ref","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAQA,SAASC,YAAT,CAAA,IAAA,EAA0EK,GAA1E,EAAyG;EAAA,IAAjFJ,QAAiF,GAAA,IAAA,CAAjFA,QAAiF;IAAvEC,SAAuE,GAAA,IAAA,CAAvEA,SAAuE;IAA5DC,SAA4D,GAAA,IAAA,CAA5DA,SAA4D;IAA9CC,IAA8C,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,WAAA,CAAA,CAAA;EACrG,OACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IAAI,SAAS,EAAEL,UAAU,CAAC,kBAAD,EAAqBG,SAArB,EAAgC;MAAE,gBAAA,EAAkBC;IAApB,CAAhC,CAAzB;IAA2F,GAAG,EAAEE;EAAhG,CAAA,EAAyGD,IAAzG,CAAA,EACKH,QADL,CADJ;AAKH;AAED,eAAeH,KAAK,CAACQ,UAANR,CAAiBE,YAAjBF,CAAf","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n    children: React.ReactNode;\n    className?: string;\n    isFocused?: boolean;\n};\n\nfunction ActivityItem({ children, className, isFocused, ...rest }: Props, ref: React.Ref<HTMLLIElement>) {\n    return (\n        <li className={classNames('bcs-ActivityItem', className, { 'bcs-is-focused': isFocused })} ref={ref} {...rest}>\n            {children}\n        </li>\n    );\n}\n\nexport default React.forwardRef(ActivityItem);\n"]},"metadata":{},"sourceType":"module"}