{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { List } from 'immutable';\nimport noop from 'lodash/noop';\nimport parseCSV from '../../utils/parseCSV';\nimport Label from '../label';\nimport SelectorDropdown from '../selector-dropdown';\nimport PillSelector from './PillSelector';\nimport './PillSelectorDropdown.scss';\nvar PillSelectorDropdown = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PillSelectorDropdown, _React$Component);\n  function PillSelectorDropdown() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, PillSelectorDropdown);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PillSelectorDropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      inputValue: '',\n      isInCompositionMode: false\n    });\n    _defineProperty(_assertThisInitialized(_this), \"parsePills\", function (inputValue) {\n      var _this$props = _this.props,\n        allowInvalidPills = _this$props.allowInvalidPills,\n        parseItems = _this$props.parseItems,\n        validator = _this$props.validator;\n      var pills = parseItems ? parseItems(inputValue) : parseCSV(inputValue);\n      if (!pills) {\n        return [];\n      }\n      if (!allowInvalidPills) {\n        pills = pills.filter(function (pill) {\n          return validator(pill);\n        });\n      }\n      var normalizedPills = pills.map(function (pill) {\n        return typeof pill === 'string' ? {\n          displayText: pill,\n          text: pill,\n          // deprecated, left for backwards compatibility\n          value: pill\n        } : pill;\n      });\n      return normalizedPills;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"addPillsFromInput\", function (inputValue) {\n      var _this$props2 = _this.props,\n        allowCustomPills = _this$props2.allowCustomPills,\n        onPillCreate = _this$props2.onPillCreate,\n        onSelect = _this$props2.onSelect,\n        selectedOptions = _this$props2.selectedOptions,\n        shouldClearUnmatchedInput = _this$props2.shouldClearUnmatchedInput,\n        validateForError = _this$props2.validateForError; // Do nothing if custom pills are not allowed\n\n      if (!allowCustomPills) {\n        return;\n      } // Parse pills from input\n\n      var pills = _this.parsePills(inputValue); // \"Select\" the pills\n\n      if (pills.length > 0) {\n        onSelect(pills);\n        onPillCreate(pills);\n        _this.resetInputValue();\n      } else {\n        if (validateForError && (inputValue !== '' || selectedOptions.length === 0)) {\n          /**\n           * If no pills were added, but an inputValue exists or\n           * there are no pills selected, check for errors\n           */\n          validateForError(inputValue);\n        }\n        if (shouldClearUnmatchedInput) {\n          _this.resetInputValue();\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n      var inputValue = _this.state.inputValue;\n      _this.addPillsFromInput(inputValue);\n      onBlur(event);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleInput\", function (event) {\n      var target = event.target;\n      var value = target.value;\n      _this.setState({\n        inputValue: value\n      });\n      _this.props.onInput(value, event);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleEnter\", function (event) {\n      var _this$state = _this.state,\n        isInCompositionMode = _this$state.isInCompositionMode,\n        inputValue = _this$state.inputValue;\n      if (!isInCompositionMode) {\n        event.preventDefault();\n        _this.addPillsFromInput(inputValue);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handlePaste\", function (event) {\n      event.preventDefault();\n      var inputValue = event.clipboardData.getData('text');\n      _this.setState({\n        inputValue: inputValue\n      });\n      _this.props.onInput(inputValue, event);\n      _this.addPillsFromInput(inputValue);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleSelect\", function (index, event) {\n      var _this$props3 = _this.props,\n        onPillCreate = _this$props3.onPillCreate,\n        onSelect = _this$props3.onSelect,\n        selectorOptions = _this$props3.selectorOptions;\n      var selectedOption =\n      // $FlowFixMe\n      typeof selectorOptions.get === 'function' ? selectorOptions.get(index) : selectorOptions[index];\n      onSelect([selectedOption], event);\n      onPillCreate([selectedOption]);\n      _this.handleInput({\n        target: {\n          value: ''\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleCompositionStart\", function () {\n      _this.setState({\n        isInCompositionMode: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleCompositionEnd\", function () {\n      _this.setState({\n        isInCompositionMode: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"resetInputValue\", function () {\n      var onInput = _this.props.onInput;\n      _this.setState({\n        inputValue: ''\n      });\n      onInput('');\n    });\n    return _this;\n  }\n  _createClass(PillSelectorDropdown, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n        allowInvalidPills = _this$props4.allowInvalidPills,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        disabled = _this$props4.disabled,\n        dividerIndex = _this$props4.dividerIndex,\n        dropdownScrollBoundarySelector = _this$props4.dropdownScrollBoundarySelector,\n        error = _this$props4.error,\n        getPillImageUrl = _this$props4.getPillImageUrl,\n        inputProps = _this$props4.inputProps,\n        label = _this$props4.label,\n        onRemove = _this$props4.onRemove,\n        onSuggestedPillAdd = _this$props4.onSuggestedPillAdd,\n        overlayTitle = _this$props4.overlayTitle,\n        placeholder = _this$props4.placeholder,\n        selectedOptions = _this$props4.selectedOptions,\n        showAvatars = _this$props4.showAvatars,\n        showRoundedPills = _this$props4.showRoundedPills,\n        suggestedPillsData = _this$props4.suggestedPillsData,\n        suggestedPillsFilter = _this$props4.suggestedPillsFilter,\n        suggestedPillsTitle = _this$props4.suggestedPillsTitle,\n        shouldSetActiveItemOnOpen = _this$props4.shouldSetActiveItemOnOpen,\n        validator = _this$props4.validator;\n      return React.createElement(Label, {\n        text: label\n      }, React.createElement(SelectorDropdown, {\n        className: classNames('bdl-PillSelectorDropdown', 'pill-selector-wrapper', className),\n        dividerIndex: dividerIndex,\n        onEnter: this.handleEnter,\n        onSelect: this.handleSelect,\n        overlayTitle: overlayTitle,\n        scrollBoundarySelector: dropdownScrollBoundarySelector,\n        shouldSetActiveItemOnOpen: shouldSetActiveItemOnOpen,\n        selector: React.createElement(PillSelector, _extends({\n          onChange: noop // fix console error\n          ,\n\n          onCompositionEnd: this.handleCompositionEnd,\n          onCompositionStart: this.handleCompositionStart\n        }, inputProps, {\n          allowInvalidPills: allowInvalidPills,\n          disabled: disabled,\n          error: error,\n          getPillImageUrl: getPillImageUrl,\n          onBlur: this.handleBlur,\n          onInput: this.handleInput,\n          onPaste: this.handlePaste,\n          onRemove: onRemove,\n          onSuggestedPillAdd: onSuggestedPillAdd,\n          placeholder: placeholder,\n          selectedOptions: selectedOptions,\n          showRoundedPills: showRoundedPills,\n          showAvatars: showAvatars && showRoundedPills,\n          suggestedPillsData: suggestedPillsData,\n          suggestedPillsFilter: suggestedPillsFilter,\n          suggestedPillsTitle: suggestedPillsTitle,\n          validator: validator,\n          value: this.state.inputValue\n        }))\n      }, children));\n    }\n  }]);\n  return PillSelectorDropdown;\n}(React.Component);\n_defineProperty(PillSelectorDropdown, \"defaultProps\", {\n  allowCustomPills: false,\n  allowInvalidPills: false,\n  disabled: false,\n  error: '',\n  inputProps: {},\n  label: '',\n  onBlur: noop,\n  onPillCreate: noop,\n  placeholder: '',\n  selectedOptions: [],\n  selectorOptions: [],\n  shouldClearUnmatchedInput: false,\n  shouldSetActiveItemOnOpen: false,\n  validator: function validator() {\n    return true;\n  }\n});\nexport default PillSelectorDropdown;","map":{"version":3,"sources":["../../../src/components/pill-selector-dropdown/PillSelectorDropdown.js"],"names":["React","classNames","List","noop","parseCSV","Label","SelectorDropdown","PillSelector","PillSelectorDropdown","Component","allowCustomPills","allowInvalidPills","disabled","error","inputProps","label","onBlur","onPillCreate","placeholder","selectedOptions","selectorOptions","shouldClearUnmatchedInput","shouldSetActiveItemOnOpen","validator","inputValue","isInCompositionMode","parseItems","props","pills","filter","pill","normalizedPills","map","displayText","text","value","onSelect","validateForError","parsePills","length","resetInputValue","event","state","addPillsFromInput","target","setState","onInput","preventDefault","clipboardData","getData","index","selectedOption","get","handleInput","children","className","dividerIndex","dropdownScrollBoundarySelector","getPillImageUrl","onRemove","onSuggestedPillAdd","overlayTitle","showAvatars","showRoundedPills","suggestedPillsData","suggestedPillsFilter","suggestedPillsTitle","handleEnter","handleSelect","handleCompositionEnd","handleCompositionStart","handleBlur","handlePaste"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { List } from 'immutable';\nimport noop from 'lodash/noop';\n\nimport parseCSV from '../../utils/parseCSV';\nimport Label from '../label';\nimport SelectorDropdown from '../selector-dropdown';\n\nimport PillSelector from './PillSelector';\nimport type { contactType as Contact } from '../../features/unified-share-modal/flowTypes';\nimport type { SelectOptionProp } from '../select-field/props';\nimport type { Option, OptionValue, SelectedOptions, SuggestedPillsFilter } from './flowTypes';\n\nimport './PillSelectorDropdown.scss';\n\ntype Props = {\n    /** If true, user can add pills not included in selector options */\n    allowCustomPills: boolean,\n    /** If true, pills with errors are parsed as pills also */\n    allowInvalidPills: boolean,\n    /** `DatalistItem` components for dropdown options to select */\n    children: React.Node,\n    /** CSS class for the component */\n    className?: string,\n    /** If true, the input control is disabled so no more input can be made */\n    disabled: boolean,\n    /** Index at which to insert a divider */\n    dividerIndex?: number,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    dropdownScrollBoundarySelector?: string,\n    /** Error message */\n    error?: React.Node,\n    /** Function to retrieve the image URL associated with a pill */\n    getPillImageUrl?: (data: { id: string, [key: string]: any }) => string,\n    /** Passed in by `SelectorDropdown` for accessibility */\n    inputProps: Object,\n    /** Input label */\n    label: React.Node,\n    /** Called when pill selector input is blurred */\n    onBlur: (event: SyntheticInputEvent<HTMLInputElement>) => void,\n    /** Should update selectorOptions based on the given input value */\n    onInput: Function,\n    /** Called when creating pills */\n    onPillCreate: (pills: Array<SelectOptionProp | Contact>) => void,\n    /** Should update selectedOptions given the option and index to remove */\n    onRemove: Function,\n    /** Should update selectedOptions given an array of pills and the event */\n    onSelect: Function,\n    /** Function adds a collaborator from suggested collabs to form */\n    onSuggestedPillAdd?: Function,\n    /** Optional title of the overlay */\n    overlayTitle?: string,\n    /** function to parse user input into an array of items to be validated and then added to pill selector. If this function is not passed, a default CSV parser is used. */\n    parseItems?: Function,\n    /** A placeholder to show in the input when there are no pills */\n    placeholder: string,\n    /** Array or Immutable list with data for the selected options shown as pills */\n    selectedOptions: SelectedOptions,\n    /** Array or Immutable list with data for the dropdown options to select */\n    selectorOptions: Array<Object> | List<Object>,\n    /** Determines whether or not input text is cleared automatically when it does not result in new pills being added */\n    shouldClearUnmatchedInput?: boolean,\n    /** Determines whether or not the first item is highlighted automatically when the dropdown opens */\n    shouldSetActiveItemOnOpen?: boolean,\n    /** show avatars (uses showRoundedPills) */\n    showAvatars?: boolean,\n    /** Use rounded style for pills */\n    showRoundedPills?: boolean,\n    /** Array of suggested collaborators */\n    suggestedPillsData?: Array<Object>,\n    /** String decribes the datapoint to filter by so that items in the form are not shown in suggestions. */\n    suggestedPillsFilter?: SuggestedPillsFilter,\n    /** String describes the suggested pills */\n    suggestedPillsTitle?: string,\n    /** Validate the given input value, and update `error` prop if necessary */\n    validateForError?: Function,\n    /** Called to check if pill item data is valid. The `item` is passed in. */\n    validator: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    inputValue: string,\n    isInCompositionMode: boolean,\n};\n\nclass PillSelectorDropdown extends React.Component<Props, State> {\n    static defaultProps = {\n        allowCustomPills: false,\n        allowInvalidPills: false,\n        disabled: false,\n        error: '',\n        inputProps: {},\n        label: '',\n        onBlur: noop,\n        onPillCreate: noop,\n        placeholder: '',\n        selectedOptions: [],\n        selectorOptions: [],\n        shouldClearUnmatchedInput: false,\n        shouldSetActiveItemOnOpen: false,\n        validator: () => true,\n    };\n\n    state = { inputValue: '', isInCompositionMode: false };\n\n    parsePills = (inputValue: string) => {\n        const { allowInvalidPills, parseItems, validator } = this.props;\n        let pills = parseItems ? parseItems(inputValue) : parseCSV(inputValue);\n\n        if (!pills) {\n            return [];\n        }\n\n        if (!allowInvalidPills) {\n            pills = pills.filter(pill => validator(pill));\n        }\n\n        const normalizedPills = pills.map(pill =>\n            typeof pill === 'string'\n                ? {\n                      displayText: pill,\n                      text: pill, // deprecated, left for backwards compatibility\n                      value: pill,\n                  }\n                : pill,\n        );\n        return normalizedPills;\n    };\n\n    addPillsFromInput = (inputValue: string) => {\n        const {\n            allowCustomPills,\n            onPillCreate,\n            onSelect,\n            selectedOptions,\n            shouldClearUnmatchedInput,\n            validateForError,\n        } = this.props;\n\n        // Do nothing if custom pills are not allowed\n        if (!allowCustomPills) {\n            return;\n        }\n\n        // Parse pills from input\n        const pills = this.parsePills(inputValue);\n\n        // \"Select\" the pills\n        if (pills.length > 0) {\n            onSelect(pills);\n            onPillCreate(pills);\n\n            this.resetInputValue();\n        } else {\n            if (validateForError && (inputValue !== '' || selectedOptions.length === 0)) {\n                /**\n                 * If no pills were added, but an inputValue exists or\n                 * there are no pills selected, check for errors\n                 */\n                validateForError(inputValue);\n            }\n            if (shouldClearUnmatchedInput) {\n                this.resetInputValue();\n            }\n        }\n    };\n\n    handleBlur = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        const { onBlur } = this.props;\n        const { inputValue } = this.state;\n        this.addPillsFromInput(inputValue);\n        onBlur(event);\n    };\n\n    handleInput = (event: SyntheticInputEvent<HTMLInputElement> | { target: HTMLInputElement | Object }) => {\n        const { target } = event;\n        const { value } = target;\n        this.setState({ inputValue: value });\n        this.props.onInput(value, event);\n    };\n\n    handleEnter = (event: SyntheticEvent<>) => {\n        const { isInCompositionMode, inputValue } = this.state;\n        if (!isInCompositionMode) {\n            event.preventDefault();\n            this.addPillsFromInput(inputValue);\n        }\n    };\n\n    handlePaste = (event: SyntheticClipboardEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const inputValue: string = event.clipboardData.getData('text');\n        this.setState({ inputValue });\n        this.props.onInput(inputValue, event);\n        this.addPillsFromInput(inputValue);\n    };\n\n    handleSelect = (index: number, event: SyntheticEvent<>) => {\n        const { onPillCreate, onSelect, selectorOptions } = this.props;\n        const selectedOption =\n            // $FlowFixMe\n            typeof selectorOptions.get === 'function' ? selectorOptions.get(index) : selectorOptions[index];\n\n        onSelect([selectedOption], event);\n        onPillCreate([selectedOption]);\n\n        this.handleInput({ target: { value: '' } });\n    };\n\n    handleCompositionStart = () => {\n        this.setState({ isInCompositionMode: true });\n    };\n\n    handleCompositionEnd = () => {\n        this.setState({ isInCompositionMode: false });\n    };\n\n    resetInputValue = () => {\n        const { onInput } = this.props;\n\n        this.setState({ inputValue: '' });\n        onInput('');\n    };\n\n    render() {\n        const {\n            allowInvalidPills,\n            children,\n            className,\n            disabled,\n            dividerIndex,\n            dropdownScrollBoundarySelector,\n            error,\n            getPillImageUrl,\n            inputProps,\n            label,\n            onRemove,\n            onSuggestedPillAdd,\n            overlayTitle,\n            placeholder,\n            selectedOptions,\n            showAvatars,\n            showRoundedPills,\n            suggestedPillsData,\n            suggestedPillsFilter,\n            suggestedPillsTitle,\n            shouldSetActiveItemOnOpen,\n            validator,\n        } = this.props;\n\n        return (\n            <Label text={label}>\n                <SelectorDropdown\n                    className={classNames('bdl-PillSelectorDropdown', 'pill-selector-wrapper', className)}\n                    dividerIndex={dividerIndex}\n                    onEnter={this.handleEnter}\n                    onSelect={this.handleSelect}\n                    overlayTitle={overlayTitle}\n                    scrollBoundarySelector={dropdownScrollBoundarySelector}\n                    shouldSetActiveItemOnOpen={shouldSetActiveItemOnOpen}\n                    selector={\n                        <PillSelector\n                            onChange={noop} // fix console error\n                            onCompositionEnd={this.handleCompositionEnd}\n                            onCompositionStart={this.handleCompositionStart}\n                            {...inputProps}\n                            allowInvalidPills={allowInvalidPills}\n                            disabled={disabled}\n                            error={error}\n                            getPillImageUrl={getPillImageUrl}\n                            onBlur={this.handleBlur}\n                            onInput={this.handleInput}\n                            onPaste={this.handlePaste}\n                            onRemove={onRemove}\n                            onSuggestedPillAdd={onSuggestedPillAdd}\n                            placeholder={placeholder}\n                            selectedOptions={selectedOptions}\n                            showRoundedPills={showRoundedPills}\n                            showAvatars={showAvatars && showRoundedPills}\n                            suggestedPillsData={suggestedPillsData}\n                            suggestedPillsFilter={suggestedPillsFilter}\n                            suggestedPillsTitle={suggestedPillsTitle}\n                            validator={validator}\n                            value={this.state.inputValue}\n                        />\n                    }\n                >\n                    {children}\n                </SelectorDropdown>\n            </Label>\n        );\n    }\n}\n\nexport default PillSelectorDropdown;\n"]},"metadata":{},"sourceType":"module"}